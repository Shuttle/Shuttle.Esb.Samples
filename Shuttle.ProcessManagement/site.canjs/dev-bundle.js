/*[system-bundles-config]*/
System.bundles = {"dev-bundle.css!":["bootstrap@4.3.1#dist/css/bootstrap.css!steal-css@1.3.2#css","shuttle-canstrap@1.2.1#canstrap.css!steal-css@1.3.2#css"]};
/*steal-css@1.3.2#css*/
define('steal-css@1.3.2#css', [
    'require',
    'exports',
    'module',
    '@loader',
    '@steal'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        var loader = require('@loader');
        var steal = require('@steal');
        var isNode = typeof process === 'object' && {}.toString.call(process) === '[object process]';
        var importRegEx = /@import [^uU]['"]?([^'"\)]*)['"]?/g;
        var resourceRegEx = /url\(['"]?([^'"\)]*)['"]?\)/g;
        var waitSeconds = loader.cssOptions && loader.cssOptions.timeout ? parseInt(loader.cssOptions.timeout, 10) : 60;
        var onloadCss = function (link, cb) {
            var styleSheets = getDocument().styleSheets, i = styleSheets.length;
            while (i--) {
                if (styleSheets[i].href === link.href) {
                    return cb();
                }
            }
            setTimeout(function () {
                onloadCss(link, cb);
            });
        };
        function isIE9() {
            var doc = getDocument();
            return doc && !!Function('/*@cc_on return (/^9/.test(@_jscript_version) && /MSIE 9.0(?!.*IEMobile)/i.test(navigator.userAgent)); @*/')();
        }
        function getDocument() {
            if (typeof doneSsr !== 'undefined' && doneSsr.globalDocument) {
                return doneSsr.globalDocument;
            }
            if (typeof document !== 'undefined') {
                return document;
            }
            throw new Error('Unable to load CSS in an environment without a document.');
        }
        function getHead() {
            var doc = getDocument();
            var head = doc.head || doc.getElementsByTagName('head')[0];
            if (!head) {
                var docEl = doc.documentElement || doc;
                head = doc.createElement('head');
                docEl.insertBefore(head, docEl.firstChild);
            }
            return head;
        }
        function CSSModule(load, loader) {
            if (typeof load === 'object') {
                this.load = load;
                this.loader = loader;
                this.address = this.load.address;
                this.source = this.load.source;
            } else {
                this.address = load;
                this.source = loader;
            }
        }
        CSSModule.cssCount = 0;
        CSSModule.ie9MaxStyleSheets = 31;
        CSSModule.currentStyleSheet = null;
        CSSModule.prototype = {
            injectLink: function () {
                if (this._loaded) {
                    return this._loaded;
                }
                if (this.linkExists()) {
                    this._loaded = Promise.resolve('');
                    return this._loaded;
                }
                var doc = getDocument();
                var link = this.link = doc.createElement('link');
                link.type = 'text/css';
                link.rel = 'stylesheet';
                link.href = this.address;
                this._loaded = new Promise(function (resolve, reject) {
                    var timeout = setTimeout(function () {
                        reject('Unable to load CSS');
                    }, waitSeconds * 1000);
                    var loadCB = function (event) {
                        clearTimeout(timeout);
                        link.removeEventListener('load', loadCB);
                        link.removeEventListener('error', loadCB);
                        if (event && event.type === 'error') {
                            reject('Unable to load CSS');
                        } else {
                            resolve('');
                        }
                    };
                    if ('isApplicationInstalled' in navigator || !link.addEventListener) {
                        onloadCss(link, loadCB);
                    } else if (navigator.noUI) {
                        loadCB();
                    } else {
                        link.addEventListener('load', loadCB);
                        link.addEventListener('error', loadCB);
                    }
                    getHead().appendChild(link);
                });
                return this._loaded;
            },
            injectStyle: function () {
                var doc = getDocument();
                var head = getHead();
                var style = this.style = doc.createElement('style');
                style.type = 'text/css';
                if (style.sheet) {
                    style.sheet.cssText = this.source;
                } else if (style.styleSheet) {
                    style.styleSheet.cssText = this.source;
                } else {
                    style.appendChild(doc.createTextNode(this.source));
                }
                head.appendChild(style);
            },
            ie9StyleSheetLimitHack: function () {
                var doc = getDocument();
                if (!CSSModule.cssCount) {
                    CSSModule.currentStyleSheet = doc.createStyleSheet();
                }
                CSSModule.cssCount += 1;
                CSSModule.currentStyleSheet.cssText += this.source;
                if (CSSModule.cssCount === CSSModule.ie9MaxStyleSheets) {
                    CSSModule.cssCount = 0;
                }
            },
            updateURLs: function () {
                var rawSource = this.source, address = this.address;
                this.source = rawSource.replace(importRegEx, function (whole, part) {
                    if (isNode) {
                        return '@import url(' + part + ')';
                    } else {
                        return '@import url(' + steal.joinURIs(address, part) + ')';
                    }
                });
                if (!loader.isEnv('build')) {
                    this.source = this.source + '/*# sourceURL=' + address + ' */';
                    this.source = this.source.replace(resourceRegEx, function (whole, part) {
                        return 'url(' + steal.joinURIs(address, part) + ')';
                    });
                }
                return this.source;
            },
            getExistingNode: function () {
                var doc = getDocument();
                var selector = '[href=\'' + this.address + '\']';
                return doc.querySelector && doc.querySelector(selector);
            },
            linkExists: function () {
                var styleSheets = getDocument().styleSheets;
                for (var i = 0; i < styleSheets.length; ++i) {
                    if (this.address === styleSheets[i].href) {
                        return true;
                    }
                }
                return false;
            },
            setupLiveReload: function (loader, name) {
                var head = getHead();
                var css = this;
                if (loader.liveReloadInstalled) {
                    var cssReload = loader['import']('live-reload', { name: module.id });
                    Promise.resolve(cssReload).then(function (reload) {
                        loader['import'](name).then(function () {
                            reload.once('!dispose/' + name, function () {
                                css.style.__isDirty = true;
                                reload.once('!cycleComplete', function () {
                                    head.removeChild(css.style);
                                });
                            });
                        });
                    });
                }
            }
        };
        if (loader.isEnv('production')) {
            exports.fetch = function (load) {
                var css = new CSSModule(load.address);
                return css.injectLink();
            };
        } else {
            exports.instantiate = function (load) {
                var loader = this;
                var css = new CSSModule(load.address, load.source);
                load.source = css.updateURLs();
                load.metadata.deps = [];
                load.metadata.format = 'css';
                load.metadata.execute = function () {
                    if (getDocument()) {
                        if (isIE9()) {
                            css.ie9StyleSheetLimitHack();
                        } else {
                            css.injectStyle();
                        }
                        css.setupLiveReload(loader, load.name);
                    }
                    return loader.newModule({ source: css.source });
                };
            };
        }
        exports.CSSModule = CSSModule;
        exports.getDocument = getDocument;
        exports.getHead = getHead;
        exports.locateScheme = true;
        exports.buildType = 'css';
        exports.includeInBuild = true;
        exports.pluginBuilder = 'steal-css/slim';
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-symbol@1.6.5#can-symbol*/
define('can-symbol@1.6.5#can-symbol', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var namespace = require('can-namespace');
        var supportsNativeSymbols = function () {
            var symbolExists = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function';
            if (!symbolExists) {
                return false;
            }
            var symbol = Symbol('a symbol for testing symbols');
            return typeof symbol === 'symbol';
        }();
        var CanSymbol;
        if (supportsNativeSymbols) {
            CanSymbol = Symbol;
        } else {
            var symbolNum = 0;
            CanSymbol = function CanSymbolPolyfill(description) {
                var symbolValue = '@@symbol' + symbolNum++ + description;
                var symbol = {};
                Object.defineProperties(symbol, {
                    toString: {
                        value: function () {
                            return symbolValue;
                        }
                    }
                });
                return symbol;
            };
            var descriptionToSymbol = {};
            var symbolToDescription = {};
            CanSymbol.for = function (description) {
                var symbol = descriptionToSymbol[description];
                if (!symbol) {
                    symbol = descriptionToSymbol[description] = CanSymbol(description);
                    symbolToDescription[symbol] = description;
                }
                return symbol;
            };
            CanSymbol.keyFor = function (symbol) {
                return symbolToDescription[symbol];
            };
            [
                'hasInstance',
                'isConcatSpreadable',
                'iterator',
                'match',
                'prototype',
                'replace',
                'search',
                'species',
                'split',
                'toPrimitive',
                'toStringTag',
                'unscopables'
            ].forEach(function (name) {
                CanSymbol[name] = CanSymbol('Symbol.' + name);
            });
        }
        [
            'isMapLike',
            'isListLike',
            'isValueLike',
            'isFunctionLike',
            'getOwnKeys',
            'getOwnKeyDescriptor',
            'proto',
            'getOwnEnumerableKeys',
            'hasOwnKey',
            'hasKey',
            'size',
            'getName',
            'getIdentity',
            'assignDeep',
            'updateDeep',
            'getValue',
            'setValue',
            'getKeyValue',
            'setKeyValue',
            'updateValues',
            'addValue',
            'removeValues',
            'apply',
            'new',
            'onValue',
            'offValue',
            'onKeyValue',
            'offKeyValue',
            'getKeyDependencies',
            'getValueDependencies',
            'keyHasDependencies',
            'valueHasDependencies',
            'onKeys',
            'onKeysAdded',
            'onKeysRemoved',
            'onPatches'
        ].forEach(function (name) {
            CanSymbol.for('can.' + name);
        });
        module.exports = namespace.Symbol = CanSymbol;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-reflect@1.17.11#reflections/helpers*/
define('can-reflect@1.17.11#reflections/helpers', [
    'require',
    'exports',
    'module',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    module.exports = {
        makeGetFirstSymbolValue: function (symbolNames) {
            var symbols = symbolNames.map(function (name) {
                return canSymbol.for(name);
            });
            var length = symbols.length;
            return function getFirstSymbol(obj) {
                var index = -1;
                while (++index < length) {
                    if (obj[symbols[index]] !== undefined) {
                        return obj[symbols[index]];
                    }
                }
            };
        },
        hasLength: function (list) {
            var type = typeof list;
            if (type === 'string' || Array.isArray(list)) {
                return true;
            }
            var length = list && (type !== 'boolean' && type !== 'number' && 'length' in list) && list.length;
            return typeof list !== 'function' && (length === 0 || typeof length === 'number' && length > 0 && length - 1 in list);
        }
    };
});
/*can-reflect@1.17.11#reflections/type/type*/
define('can-reflect@1.17.11#reflections/type/type', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../helpers'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var helpers = require('../helpers');
    var plainFunctionPrototypePropertyNames = Object.getOwnPropertyNames(function () {
    }.prototype);
    var plainFunctionPrototypeProto = Object.getPrototypeOf(function () {
    }.prototype);
    function isConstructorLike(func) {
        var value = func[canSymbol.for('can.new')];
        if (value !== undefined) {
            return value;
        }
        if (typeof func !== 'function') {
            return false;
        }
        var prototype = func.prototype;
        if (!prototype) {
            return false;
        }
        if (plainFunctionPrototypeProto !== Object.getPrototypeOf(prototype)) {
            return true;
        }
        var propertyNames = Object.getOwnPropertyNames(prototype);
        if (propertyNames.length === plainFunctionPrototypePropertyNames.length) {
            for (var i = 0, len = propertyNames.length; i < len; i++) {
                if (propertyNames[i] !== plainFunctionPrototypePropertyNames[i]) {
                    return true;
                }
            }
            return false;
        } else {
            return true;
        }
    }
    var getNewOrApply = helpers.makeGetFirstSymbolValue([
        'can.new',
        'can.apply'
    ]);
    function isFunctionLike(obj) {
        var result, symbolValue = !!obj && obj[canSymbol.for('can.isFunctionLike')];
        if (symbolValue !== undefined) {
            return symbolValue;
        }
        result = getNewOrApply(obj);
        if (result !== undefined) {
            return !!result;
        }
        return typeof obj === 'function';
    }
    function isPrimitive(obj) {
        var type = typeof obj;
        if (obj == null || type !== 'function' && type !== 'object') {
            return true;
        } else {
            return false;
        }
    }
    var coreHasOwn = Object.prototype.hasOwnProperty;
    var funcToString = Function.prototype.toString;
    var objectCtorString = funcToString.call(Object);
    function isPlainObject(obj) {
        if (!obj || typeof obj !== 'object') {
            return false;
        }
        var proto = Object.getPrototypeOf(obj);
        if (proto === Object.prototype || proto === null) {
            return true;
        }
        var Constructor = coreHasOwn.call(proto, 'constructor') && proto.constructor;
        return typeof Constructor === 'function' && Constructor instanceof Constructor && funcToString.call(Constructor) === objectCtorString;
    }
    function isBuiltIn(obj) {
        if (isPrimitive(obj) || Array.isArray(obj) || isPlainObject(obj) || Object.prototype.toString.call(obj) !== '[object Object]' && Object.prototype.toString.call(obj).indexOf('[object ') !== -1) {
            return true;
        } else {
            return false;
        }
    }
    function isValueLike(obj) {
        var symbolValue;
        if (isPrimitive(obj)) {
            return true;
        }
        symbolValue = obj[canSymbol.for('can.isValueLike')];
        if (typeof symbolValue !== 'undefined') {
            return symbolValue;
        }
        var value = obj[canSymbol.for('can.getValue')];
        if (value !== undefined) {
            return !!value;
        }
    }
    function isMapLike(obj) {
        if (isPrimitive(obj)) {
            return false;
        }
        var isMapLike = obj[canSymbol.for('can.isMapLike')];
        if (typeof isMapLike !== 'undefined') {
            return !!isMapLike;
        }
        var value = obj[canSymbol.for('can.getKeyValue')];
        if (value !== undefined) {
            return !!value;
        }
        return true;
    }
    var onValueSymbol = canSymbol.for('can.onValue'), onKeyValueSymbol = canSymbol.for('can.onKeyValue'), onPatchesSymbol = canSymbol.for('can.onPatches');
    function isObservableLike(obj) {
        if (isPrimitive(obj)) {
            return false;
        }
        return Boolean(obj[onValueSymbol] || obj[onKeyValueSymbol] || obj[onPatchesSymbol]);
    }
    function isListLike(list) {
        var symbolValue, type = typeof list;
        if (type === 'string') {
            return true;
        }
        if (isPrimitive(list)) {
            return false;
        }
        symbolValue = list[canSymbol.for('can.isListLike')];
        if (typeof symbolValue !== 'undefined') {
            return symbolValue;
        }
        var value = list[canSymbol.iterator];
        if (value !== undefined) {
            return !!value;
        }
        if (Array.isArray(list)) {
            return true;
        }
        return helpers.hasLength(list);
    }
    var supportsNativeSymbols = function () {
        var symbolExists = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function';
        if (!symbolExists) {
            return false;
        }
        var symbol = Symbol('a symbol for testing symbols');
        return typeof symbol === 'symbol';
    }();
    var isSymbolLike;
    if (supportsNativeSymbols) {
        isSymbolLike = function (symbol) {
            return typeof symbol === 'symbol';
        };
    } else {
        var symbolStart = '@@symbol';
        isSymbolLike = function (symbol) {
            if (typeof symbol === 'object' && !Array.isArray(symbol)) {
                return symbol.toString().substr(0, symbolStart.length) === symbolStart;
            } else {
                return false;
            }
        };
    }
    module.exports = {
        isConstructorLike: isConstructorLike,
        isFunctionLike: isFunctionLike,
        isListLike: isListLike,
        isMapLike: isMapLike,
        isObservableLike: isObservableLike,
        isPrimitive: isPrimitive,
        isBuiltIn: isBuiltIn,
        isValueLike: isValueLike,
        isSymbolLike: isSymbolLike,
        isMoreListLikeThanMapLike: function (obj) {
            if (Array.isArray(obj)) {
                return true;
            }
            if (obj instanceof Array) {
                return true;
            }
            if (obj == null) {
                return false;
            }
            var value = obj[canSymbol.for('can.isMoreListLikeThanMapLike')];
            if (value !== undefined) {
                return value;
            }
            var isListLike = this.isListLike(obj), isMapLike = this.isMapLike(obj);
            if (isListLike && !isMapLike) {
                return true;
            } else if (!isListLike && isMapLike) {
                return false;
            }
        },
        isIteratorLike: function (obj) {
            return obj && typeof obj === 'object' && typeof obj.next === 'function' && obj.next.length === 0;
        },
        isPromise: function (obj) {
            return obj instanceof Promise || Object.prototype.toString.call(obj) === '[object Promise]';
        },
        isPlainObject: isPlainObject
    };
});
/*can-reflect@1.17.11#reflections/call/call*/
define('can-reflect@1.17.11#reflections/call/call', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../type/type'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var typeReflections = require('../type/type');
    module.exports = {
        call: function (func, context) {
            var args = [].slice.call(arguments, 2);
            var apply = func[canSymbol.for('can.apply')];
            if (apply) {
                return apply.call(func, context, args);
            } else {
                return func.apply(context, args);
            }
        },
        apply: function (func, context, args) {
            var apply = func[canSymbol.for('can.apply')];
            if (apply) {
                return apply.call(func, context, args);
            } else {
                return func.apply(context, args);
            }
        },
        'new': function (func) {
            var args = [].slice.call(arguments, 1);
            var makeNew = func[canSymbol.for('can.new')];
            if (makeNew) {
                return makeNew.apply(func, args);
            } else {
                var context = Object.create(func.prototype);
                var ret = func.apply(context, args);
                if (typeReflections.isPrimitive(ret)) {
                    return context;
                } else {
                    return ret;
                }
            }
        }
    };
});
/*can-reflect@1.17.11#reflections/get-set/get-set*/
define('can-reflect@1.17.11#reflections/get-set/get-set', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../type/type'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var typeReflections = require('../type/type');
    var setKeyValueSymbol = canSymbol.for('can.setKeyValue'), getKeyValueSymbol = canSymbol.for('can.getKeyValue'), getValueSymbol = canSymbol.for('can.getValue'), setValueSymbol = canSymbol.for('can.setValue');
    var reflections = {
        setKeyValue: function (obj, key, value) {
            if (typeReflections.isSymbolLike(key)) {
                if (typeof key === 'symbol') {
                    obj[key] = value;
                } else {
                    Object.defineProperty(obj, key, {
                        enumerable: false,
                        configurable: true,
                        value: value,
                        writable: true
                    });
                }
                return;
            }
            var setKeyValue = obj[setKeyValueSymbol];
            if (setKeyValue !== undefined) {
                return setKeyValue.call(obj, key, value);
            } else {
                obj[key] = value;
            }
        },
        getKeyValue: function (obj, key) {
            var getKeyValue = obj[getKeyValueSymbol];
            if (getKeyValue) {
                return getKeyValue.call(obj, key);
            }
            return obj[key];
        },
        deleteKeyValue: function (obj, key) {
            var deleteKeyValue = obj[canSymbol.for('can.deleteKeyValue')];
            if (deleteKeyValue) {
                return deleteKeyValue.call(obj, key);
            }
            delete obj[key];
        },
        getValue: function (value) {
            if (typeReflections.isPrimitive(value)) {
                return value;
            }
            var getValue = value[getValueSymbol];
            if (getValue) {
                return getValue.call(value);
            }
            return value;
        },
        setValue: function (item, value) {
            var setValue = item && item[setValueSymbol];
            if (setValue) {
                return setValue.call(item, value);
            } else {
                throw new Error('can-reflect.setValue - Can not set value.');
            }
        },
        splice: function (obj, index, removing, adding) {
            var howMany;
            if (typeof removing !== 'number') {
                var updateValues = obj[canSymbol.for('can.updateValues')];
                if (updateValues) {
                    return updateValues.call(obj, index, removing, adding);
                }
                howMany = removing.length;
            } else {
                howMany = removing;
            }
            if (arguments.length <= 3) {
                adding = [];
            }
            var splice = obj[canSymbol.for('can.splice')];
            if (splice) {
                return splice.call(obj, index, howMany, adding);
            }
            return [].splice.apply(obj, [
                index,
                howMany
            ].concat(adding));
        },
        addValues: function (obj, adding, index) {
            var add = obj[canSymbol.for('can.addValues')];
            if (add) {
                return add.call(obj, adding, index);
            }
            if (Array.isArray(obj) && index === undefined) {
                return obj.push.apply(obj, adding);
            }
            return reflections.splice(obj, index, [], adding);
        },
        removeValues: function (obj, removing, index) {
            var removeValues = obj[canSymbol.for('can.removeValues')];
            if (removeValues) {
                return removeValues.call(obj, removing, index);
            }
            if (Array.isArray(obj) && index === undefined) {
                removing.forEach(function (item) {
                    var index = obj.indexOf(item);
                    if (index >= 0) {
                        obj.splice(index, 1);
                    }
                });
                return;
            }
            return reflections.splice(obj, index, removing, []);
        }
    };
    reflections.get = reflections.getKeyValue;
    reflections.set = reflections.setKeyValue;
    reflections['delete'] = reflections.deleteKeyValue;
    module.exports = reflections;
});
/*can-reflect@1.17.11#reflections/observe/observe*/
define('can-reflect@1.17.11#reflections/observe/observe', [
    'require',
    'exports',
    'module',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var slice = [].slice;
    function makeFallback(symbolName, fallbackName) {
        return function (obj, event, handler, queueName) {
            var method = obj[canSymbol.for(symbolName)];
            if (method !== undefined) {
                return method.call(obj, event, handler, queueName);
            }
            return this[fallbackName].apply(this, arguments);
        };
    }
    function makeErrorIfMissing(symbolName, errorMessage) {
        return function (obj) {
            var method = obj[canSymbol.for(symbolName)];
            if (method !== undefined) {
                var args = slice.call(arguments, 1);
                return method.apply(obj, args);
            }
            throw new Error(errorMessage);
        };
    }
    module.exports = {
        onKeyValue: makeFallback('can.onKeyValue', 'onEvent'),
        offKeyValue: makeFallback('can.offKeyValue', 'offEvent'),
        onKeys: makeErrorIfMissing('can.onKeys', 'can-reflect: can not observe an onKeys event'),
        onKeysAdded: makeErrorIfMissing('can.onKeysAdded', 'can-reflect: can not observe an onKeysAdded event'),
        onKeysRemoved: makeErrorIfMissing('can.onKeysRemoved', 'can-reflect: can not unobserve an onKeysRemoved event'),
        getKeyDependencies: makeErrorIfMissing('can.getKeyDependencies', 'can-reflect: can not determine dependencies'),
        getWhatIChange: makeErrorIfMissing('can.getWhatIChange', 'can-reflect: can not determine dependencies'),
        getChangesDependencyRecord: function getChangesDependencyRecord(handler) {
            var fn = handler[canSymbol.for('can.getChangesDependencyRecord')];
            if (typeof fn === 'function') {
                return fn();
            }
        },
        keyHasDependencies: makeErrorIfMissing('can.keyHasDependencies', 'can-reflect: can not determine if this has key dependencies'),
        onValue: makeErrorIfMissing('can.onValue', 'can-reflect: can not observe value change'),
        offValue: makeErrorIfMissing('can.offValue', 'can-reflect: can not unobserve value change'),
        getValueDependencies: makeErrorIfMissing('can.getValueDependencies', 'can-reflect: can not determine dependencies'),
        valueHasDependencies: makeErrorIfMissing('can.valueHasDependencies', 'can-reflect: can not determine if value has dependencies'),
        onPatches: makeErrorIfMissing('can.onPatches', 'can-reflect: can not observe patches on object'),
        offPatches: makeErrorIfMissing('can.offPatches', 'can-reflect: can not unobserve patches on object'),
        onInstancePatches: makeErrorIfMissing('can.onInstancePatches', 'can-reflect: can not observe onInstancePatches on Type'),
        offInstancePatches: makeErrorIfMissing('can.offInstancePatches', 'can-reflect: can not unobserve onInstancePatches on Type'),
        onInstanceBoundChange: makeErrorIfMissing('can.onInstanceBoundChange', 'can-reflect: can not observe bound state change in instances.'),
        offInstanceBoundChange: makeErrorIfMissing('can.offInstanceBoundChange', 'can-reflect: can not unobserve bound state change'),
        isBound: makeErrorIfMissing('can.isBound', 'can-reflect: cannot determine if object is bound'),
        onEvent: function (obj, eventName, callback, queue) {
            if (obj) {
                var onEvent = obj[canSymbol.for('can.onEvent')];
                if (onEvent !== undefined) {
                    return onEvent.call(obj, eventName, callback, queue);
                } else if (obj.addEventListener) {
                    obj.addEventListener(eventName, callback, queue);
                }
            }
        },
        offEvent: function (obj, eventName, callback, queue) {
            if (obj) {
                var offEvent = obj[canSymbol.for('can.offEvent')];
                if (offEvent !== undefined) {
                    return offEvent.call(obj, eventName, callback, queue);
                } else if (obj.removeEventListener) {
                    obj.removeEventListener(eventName, callback, queue);
                }
            }
        },
        setPriority: function (obj, priority) {
            if (obj) {
                var setPriority = obj[canSymbol.for('can.setPriority')];
                if (setPriority !== undefined) {
                    setPriority.call(obj, priority);
                    return true;
                }
            }
            return false;
        },
        getPriority: function (obj) {
            if (obj) {
                var getPriority = obj[canSymbol.for('can.getPriority')];
                if (getPriority !== undefined) {
                    return getPriority.call(obj);
                }
            }
            return undefined;
        }
    };
});
/*can-reflect@1.17.11#reflections/shape/shape*/
define('can-reflect@1.17.11#reflections/shape/shape', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../get-set/get-set',
    '../type/type',
    '../helpers'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var getSetReflections = require('../get-set/get-set');
    var typeReflections = require('../type/type');
    var helpers = require('../helpers');
    var getPrototypeOfWorksWithPrimitives = true;
    try {
        Object.getPrototypeOf(1);
    } catch (e) {
        getPrototypeOfWorksWithPrimitives = false;
    }
    var ArrayMap;
    if (typeof Map === 'function') {
        ArrayMap = Map;
    } else {
        var isEven = function isEven(num) {
            return num % 2 === 0;
        };
        ArrayMap = function () {
            this.contents = [];
        };
        ArrayMap.prototype = {
            _getIndex: function (key) {
                var idx;
                do {
                    idx = this.contents.indexOf(key, idx);
                } while (idx !== -1 && !isEven(idx));
                return idx;
            },
            has: function (key) {
                return this._getIndex(key) !== -1;
            },
            get: function (key) {
                var idx = this._getIndex(key);
                if (idx !== -1) {
                    return this.contents[idx + 1];
                }
            },
            set: function (key, value) {
                var idx = this._getIndex(key);
                if (idx !== -1) {
                    this.contents[idx + 1] = value;
                } else {
                    this.contents.push(key);
                    this.contents.push(value);
                }
            },
            'delete': function (key) {
                var idx = this._getIndex(key);
                if (idx !== -1) {
                    this.contents.splice(idx, 2);
                }
            }
        };
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var shapeReflections;
    var shiftFirstArgumentToThis = function (func) {
        return function () {
            var args = [this];
            args.push.apply(args, arguments);
            return func.apply(null, args);
        };
    };
    var getKeyValueSymbol = canSymbol.for('can.getKeyValue');
    var shiftedGetKeyValue = shiftFirstArgumentToThis(getSetReflections.getKeyValue);
    var setKeyValueSymbol = canSymbol.for('can.setKeyValue');
    var shiftedSetKeyValue = shiftFirstArgumentToThis(getSetReflections.setKeyValue);
    var sizeSymbol = canSymbol.for('can.size');
    var hasUpdateSymbol = helpers.makeGetFirstSymbolValue([
        'can.updateDeep',
        'can.assignDeep',
        'can.setKeyValue'
    ]);
    var shouldUpdateOrAssign = function (obj) {
        return typeReflections.isPlainObject(obj) || Array.isArray(obj) || !!hasUpdateSymbol(obj);
    };
    function isSerializedHelper(obj) {
        if (typeReflections.isPrimitive(obj)) {
            return true;
        }
        if (hasUpdateSymbol(obj)) {
            return false;
        }
        return typeReflections.isBuiltIn(obj) && !typeReflections.isPlainObject(obj) && !Array.isArray(obj);
    }
    var Object_Keys;
    try {
        Object.keys(1);
        Object_Keys = Object.keys;
    } catch (e) {
        Object_Keys = function (obj) {
            if (typeReflections.isPrimitive(obj)) {
                return [];
            } else {
                return Object.keys(obj);
            }
        };
    }
    function createSerializeMap(Type) {
        var MapType = Type || ArrayMap;
        return {
            unwrap: new MapType(),
            serialize: new MapType(),
            isSerializing: {
                unwrap: new MapType(),
                serialize: new MapType()
            },
            circularReferenceIsSerializing: {
                unwrap: new MapType(),
                serialize: new MapType()
            }
        };
    }
    function makeSerializer(methodName, symbolsToCheck) {
        var serializeMap = null;
        function SerializeOperation(MapType) {
            this.first = !serializeMap;
            if (this.first) {
                serializeMap = createSerializeMap(MapType);
            }
            this.map = serializeMap;
            this.result = null;
        }
        SerializeOperation.prototype.end = function () {
            if (this.first) {
                serializeMap = null;
            }
            return this.result;
        };
        return function serializer(value, MapType) {
            if (isSerializedHelper(value)) {
                return value;
            }
            var operation = new SerializeOperation(MapType);
            if (typeReflections.isValueLike(value)) {
                operation.result = this[methodName](getSetReflections.getValue(value));
            } else {
                var isListLike = typeReflections.isIteratorLike(value) || typeReflections.isMoreListLikeThanMapLike(value);
                operation.result = isListLike ? [] : {};
                if (operation.map[methodName].has(value)) {
                    if (operation.map.isSerializing[methodName].has(value)) {
                        operation.map.circularReferenceIsSerializing[methodName].set(value, true);
                    }
                    return operation.map[methodName].get(value);
                } else {
                    operation.map[methodName].set(value, operation.result);
                }
                for (var i = 0, len = symbolsToCheck.length; i < len; i++) {
                    var serializer = value[symbolsToCheck[i]];
                    if (serializer) {
                        operation.map.isSerializing[methodName].set(value, true);
                        var oldResult = operation.result;
                        operation.result = serializer.call(value, oldResult);
                        operation.map.isSerializing[methodName].delete(value);
                        if (operation.result !== oldResult) {
                            if (operation.map.circularReferenceIsSerializing[methodName].has(value)) {
                                operation.end();
                                throw new Error('Cannot serialize cirular reference!');
                            }
                            operation.map[methodName].set(value, operation.result);
                        }
                        return operation.end();
                    }
                }
                if (typeof obj === 'function') {
                    operation.map[methodName].set(value, value);
                    operation.result = value;
                } else if (isListLike) {
                    this.eachIndex(value, function (childValue, index) {
                        operation.result[index] = this[methodName](childValue);
                    }, this);
                } else {
                    this.eachKey(value, function (childValue, prop) {
                        operation.result[prop] = this[methodName](childValue);
                    }, this);
                }
            }
            return operation.end();
        };
    }
    var makeMap;
    if (typeof Map !== 'undefined') {
        makeMap = function (keys) {
            var map = new Map();
            shapeReflections.eachIndex(keys, function (key) {
                map.set(key, true);
            });
            return map;
        };
    } else {
        makeMap = function (keys) {
            var map = {};
            keys.forEach(function (key) {
                map[key] = true;
            });
            return {
                get: function (key) {
                    return map[key];
                },
                set: function (key, value) {
                    map[key] = value;
                },
                keys: function () {
                    return keys;
                }
            };
        };
    }
    var fastHasOwnKey = function (obj) {
        var hasOwnKey = obj[canSymbol.for('can.hasOwnKey')];
        if (hasOwnKey) {
            return hasOwnKey.bind(obj);
        } else {
            var map = makeMap(shapeReflections.getOwnEnumerableKeys(obj));
            return function (key) {
                return map.get(key);
            };
        }
    };
    function addPatch(patches, patch) {
        var lastPatch = patches[patches.length - 1];
        if (lastPatch) {
            if (lastPatch.deleteCount === lastPatch.insert.length && patch.index - lastPatch.index === lastPatch.deleteCount) {
                lastPatch.insert.push.apply(lastPatch.insert, patch.insert);
                lastPatch.deleteCount += patch.deleteCount;
                return;
            }
        }
        patches.push(patch);
    }
    function updateDeepList(target, source, isAssign) {
        var sourceArray = this.toArray(source);
        var patches = [], lastIndex = -1;
        this.eachIndex(target, function (curVal, index) {
            lastIndex = index;
            if (index >= sourceArray.length) {
                if (!isAssign) {
                    addPatch(patches, {
                        index: index,
                        deleteCount: target.length - index + 1,
                        insert: []
                    });
                }
                return false;
            }
            var newVal = sourceArray[index];
            if (typeReflections.isPrimitive(curVal) || typeReflections.isPrimitive(newVal) || shouldUpdateOrAssign(curVal) === false) {
                addPatch(patches, {
                    index: index,
                    deleteCount: 1,
                    insert: [newVal]
                });
            } else {
                if (isAssign === true) {
                    this.assignDeep(curVal, newVal);
                } else {
                    this.updateDeep(curVal, newVal);
                }
            }
        }, this);
        if (sourceArray.length > lastIndex) {
            addPatch(patches, {
                index: lastIndex + 1,
                deleteCount: 0,
                insert: sourceArray.slice(lastIndex + 1)
            });
        }
        for (var i = 0, patchLen = patches.length; i < patchLen; i++) {
            var patch = patches[i];
            getSetReflections.splice(target, patch.index, patch.deleteCount, patch.insert);
        }
        return target;
    }
    shapeReflections = {
        each: function (obj, callback, context) {
            if (typeReflections.isIteratorLike(obj) || typeReflections.isMoreListLikeThanMapLike(obj)) {
                return shapeReflections.eachIndex(obj, callback, context);
            } else {
                return shapeReflections.eachKey(obj, callback, context);
            }
        },
        eachIndex: function (list, callback, context) {
            if (Array.isArray(list)) {
                return shapeReflections.eachListLike(list, callback, context);
            } else {
                var iter, iterator = list[canSymbol.iterator];
                if (typeReflections.isIteratorLike(list)) {
                    iter = list;
                } else if (iterator) {
                    iter = iterator.call(list);
                }
                if (iter) {
                    var res, index = 0;
                    while (!(res = iter.next()).done) {
                        if (callback.call(context || list, res.value, index++, list) === false) {
                            break;
                        }
                    }
                } else {
                    shapeReflections.eachListLike(list, callback, context);
                }
            }
            return list;
        },
        eachListLike: function (list, callback, context) {
            var index = -1;
            var length = list.length;
            if (length === undefined) {
                var size = list[sizeSymbol];
                if (size) {
                    length = size.call(list);
                } else {
                    throw new Error('can-reflect: unable to iterate.');
                }
            }
            while (++index < length) {
                var item = list[index];
                if (callback.call(context || item, item, index, list) === false) {
                    break;
                }
            }
            return list;
        },
        toArray: function (obj) {
            var arr = [];
            shapeReflections.each(obj, function (value) {
                arr.push(value);
            });
            return arr;
        },
        eachKey: function (obj, callback, context) {
            if (obj) {
                var enumerableKeys = shapeReflections.getOwnEnumerableKeys(obj);
                var getKeyValue = obj[getKeyValueSymbol] || shiftedGetKeyValue;
                return shapeReflections.eachIndex(enumerableKeys, function (key) {
                    var value = getKeyValue.call(obj, key);
                    return callback.call(context || obj, value, key, obj);
                });
            }
            return obj;
        },
        'hasOwnKey': function (obj, key) {
            var hasOwnKey = obj[canSymbol.for('can.hasOwnKey')];
            if (hasOwnKey) {
                return hasOwnKey.call(obj, key);
            }
            var getOwnKeys = obj[canSymbol.for('can.getOwnKeys')];
            if (getOwnKeys) {
                var found = false;
                shapeReflections.eachIndex(getOwnKeys.call(obj), function (objKey) {
                    if (objKey === key) {
                        found = true;
                        return false;
                    }
                });
                return found;
            }
            return hasOwnProperty.call(obj, key);
        },
        getOwnEnumerableKeys: function (obj) {
            var getOwnEnumerableKeys = obj[canSymbol.for('can.getOwnEnumerableKeys')];
            if (getOwnEnumerableKeys) {
                return getOwnEnumerableKeys.call(obj);
            }
            if (obj[canSymbol.for('can.getOwnKeys')] && obj[canSymbol.for('can.getOwnKeyDescriptor')]) {
                var keys = [];
                shapeReflections.eachIndex(shapeReflections.getOwnKeys(obj), function (key) {
                    var descriptor = shapeReflections.getOwnKeyDescriptor(obj, key);
                    if (descriptor.enumerable) {
                        keys.push(key);
                    }
                }, this);
                return keys;
            } else {
                return Object_Keys(obj);
            }
        },
        getOwnKeys: function (obj) {
            var getOwnKeys = obj[canSymbol.for('can.getOwnKeys')];
            if (getOwnKeys) {
                return getOwnKeys.call(obj);
            } else {
                return Object.getOwnPropertyNames(obj);
            }
        },
        getOwnKeyDescriptor: function (obj, key) {
            var getOwnKeyDescriptor = obj[canSymbol.for('can.getOwnKeyDescriptor')];
            if (getOwnKeyDescriptor) {
                return getOwnKeyDescriptor.call(obj, key);
            } else {
                return Object.getOwnPropertyDescriptor(obj, key);
            }
        },
        unwrap: makeSerializer('unwrap', [canSymbol.for('can.unwrap')]),
        serialize: makeSerializer('serialize', [
            canSymbol.for('can.serialize'),
            canSymbol.for('can.unwrap')
        ]),
        assignMap: function (target, source) {
            var hasOwnKey = fastHasOwnKey(target);
            var getKeyValue = target[getKeyValueSymbol] || shiftedGetKeyValue;
            var setKeyValue = target[setKeyValueSymbol] || shiftedSetKeyValue;
            shapeReflections.eachKey(source, function (value, key) {
                if (!hasOwnKey(key) || getKeyValue.call(target, key) !== value) {
                    setKeyValue.call(target, key, value);
                }
            });
            return target;
        },
        assignList: function (target, source) {
            var inserting = shapeReflections.toArray(source);
            getSetReflections.splice(target, 0, inserting, inserting);
            return target;
        },
        assign: function (target, source) {
            if (typeReflections.isIteratorLike(source) || typeReflections.isMoreListLikeThanMapLike(source)) {
                shapeReflections.assignList(target, source);
            } else {
                shapeReflections.assignMap(target, source);
            }
            return target;
        },
        assignDeepMap: function (target, source) {
            var hasOwnKey = fastHasOwnKey(target);
            var getKeyValue = target[getKeyValueSymbol] || shiftedGetKeyValue;
            var setKeyValue = target[setKeyValueSymbol] || shiftedSetKeyValue;
            shapeReflections.eachKey(source, function (newVal, key) {
                if (!hasOwnKey(key)) {
                    getSetReflections.setKeyValue(target, key, newVal);
                } else {
                    var curVal = getKeyValue.call(target, key);
                    if (newVal === curVal) {
                    } else if (typeReflections.isPrimitive(curVal) || typeReflections.isPrimitive(newVal) || shouldUpdateOrAssign(curVal) === false) {
                        setKeyValue.call(target, key, newVal);
                    } else {
                        shapeReflections.assignDeep(curVal, newVal);
                    }
                }
            }, this);
            return target;
        },
        assignDeepList: function (target, source) {
            return updateDeepList.call(this, target, source, true);
        },
        assignDeep: function (target, source) {
            var assignDeep = target[canSymbol.for('can.assignDeep')];
            if (assignDeep) {
                assignDeep.call(target, source);
            } else if (typeReflections.isMoreListLikeThanMapLike(source)) {
                shapeReflections.assignDeepList(target, source);
            } else {
                shapeReflections.assignDeepMap(target, source);
            }
            return target;
        },
        updateMap: function (target, source) {
            var sourceKeyMap = makeMap(shapeReflections.getOwnEnumerableKeys(source));
            var sourceGetKeyValue = source[getKeyValueSymbol] || shiftedGetKeyValue;
            var targetSetKeyValue = target[setKeyValueSymbol] || shiftedSetKeyValue;
            shapeReflections.eachKey(target, function (curVal, key) {
                if (!sourceKeyMap.get(key)) {
                    getSetReflections.deleteKeyValue(target, key);
                    return;
                }
                sourceKeyMap.set(key, false);
                var newVal = sourceGetKeyValue.call(source, key);
                if (newVal !== curVal) {
                    targetSetKeyValue.call(target, key, newVal);
                }
            }, this);
            shapeReflections.eachIndex(sourceKeyMap.keys(), function (key) {
                if (sourceKeyMap.get(key)) {
                    targetSetKeyValue.call(target, key, sourceGetKeyValue.call(source, key));
                }
            });
            return target;
        },
        updateList: function (target, source) {
            var inserting = shapeReflections.toArray(source);
            getSetReflections.splice(target, 0, target, inserting);
            return target;
        },
        update: function (target, source) {
            if (typeReflections.isIteratorLike(source) || typeReflections.isMoreListLikeThanMapLike(source)) {
                shapeReflections.updateList(target, source);
            } else {
                shapeReflections.updateMap(target, source);
            }
            return target;
        },
        updateDeepMap: function (target, source) {
            var sourceKeyMap = makeMap(shapeReflections.getOwnEnumerableKeys(source));
            var sourceGetKeyValue = source[getKeyValueSymbol] || shiftedGetKeyValue;
            var targetSetKeyValue = target[setKeyValueSymbol] || shiftedSetKeyValue;
            shapeReflections.eachKey(target, function (curVal, key) {
                if (!sourceKeyMap.get(key)) {
                    getSetReflections.deleteKeyValue(target, key);
                    return;
                }
                sourceKeyMap.set(key, false);
                var newVal = sourceGetKeyValue.call(source, key);
                if (typeReflections.isPrimitive(curVal) || typeReflections.isPrimitive(newVal) || shouldUpdateOrAssign(curVal) === false) {
                    targetSetKeyValue.call(target, key, newVal);
                } else {
                    shapeReflections.updateDeep(curVal, newVal);
                }
            }, this);
            shapeReflections.eachIndex(sourceKeyMap.keys(), function (key) {
                if (sourceKeyMap.get(key)) {
                    targetSetKeyValue.call(target, key, sourceGetKeyValue.call(source, key));
                }
            });
            return target;
        },
        updateDeepList: function (target, source) {
            return updateDeepList.call(this, target, source);
        },
        updateDeep: function (target, source) {
            var updateDeep = target[canSymbol.for('can.updateDeep')];
            if (updateDeep) {
                updateDeep.call(target, source);
            } else if (typeReflections.isMoreListLikeThanMapLike(source)) {
                shapeReflections.updateDeepList(target, source);
            } else {
                shapeReflections.updateDeepMap(target, source);
            }
            return target;
        },
        hasKey: function (obj, key) {
            if (obj == null) {
                return false;
            }
            if (typeReflections.isPrimitive(obj)) {
                if (hasOwnProperty.call(obj, key)) {
                    return true;
                } else {
                    var proto;
                    if (getPrototypeOfWorksWithPrimitives) {
                        proto = Object.getPrototypeOf(obj);
                    } else {
                        proto = obj.__proto__;
                    }
                    if (proto !== undefined) {
                        return key in proto;
                    } else {
                        return obj[key] !== undefined;
                    }
                }
            }
            var hasKey = obj[canSymbol.for('can.hasKey')];
            if (hasKey) {
                return hasKey.call(obj, key);
            }
            var found = shapeReflections.hasOwnKey(obj, key);
            return found || key in obj;
        },
        getAllEnumerableKeys: function () {
        },
        getAllKeys: function () {
        },
        assignSymbols: function (target, source) {
            shapeReflections.eachKey(source, function (value, key) {
                var symbol = typeReflections.isSymbolLike(canSymbol[key]) ? canSymbol[key] : canSymbol.for(key);
                getSetReflections.setKeyValue(target, symbol, value);
            });
            return target;
        },
        isSerialized: isSerializedHelper,
        size: function (obj) {
            if (obj == null) {
                return 0;
            }
            var size = obj[sizeSymbol];
            var count = 0;
            if (size) {
                return size.call(obj);
            } else if (helpers.hasLength(obj)) {
                return obj.length;
            } else if (typeReflections.isListLike(obj)) {
                shapeReflections.eachIndex(obj, function () {
                    count++;
                });
                return count;
            } else if (obj) {
                return shapeReflections.getOwnEnumerableKeys(obj).length;
            } else {
                return undefined;
            }
        },
        defineInstanceKey: function (cls, key, properties) {
            var defineInstanceKey = cls[canSymbol.for('can.defineInstanceKey')];
            if (defineInstanceKey) {
                return defineInstanceKey.call(cls, key, properties);
            }
            var proto = cls.prototype;
            defineInstanceKey = proto[canSymbol.for('can.defineInstanceKey')];
            if (defineInstanceKey) {
                defineInstanceKey.call(proto, key, properties);
            } else {
                Object.defineProperty(proto, key, shapeReflections.assign({
                    configurable: true,
                    enumerable: !typeReflections.isSymbolLike(key),
                    writable: true
                }, properties));
            }
        }
    };
    shapeReflections.isSerializable = shapeReflections.isSerialized;
    shapeReflections.keys = shapeReflections.getOwnEnumerableKeys;
    module.exports = shapeReflections;
});
/*can-reflect@1.17.11#reflections/shape/schema/schema*/
define('can-reflect@1.17.11#reflections/shape/schema/schema', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../../type/type',
    '../../get-set/get-set',
    '../shape'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var typeReflections = require('../../type/type');
    var getSetReflections = require('../../get-set/get-set');
    var shapeReflections = require('../shape');
    var getSchemaSymbol = canSymbol.for('can.getSchema'), isMemberSymbol = canSymbol.for('can.isMember'), newSymbol = canSymbol.for('can.new');
    function comparator(a, b) {
        return a.localeCompare(b);
    }
    function sort(obj) {
        if (typeReflections.isPrimitive(obj) || obj instanceof Date) {
            return obj;
        }
        var out;
        if (typeReflections.isListLike(obj)) {
            out = [];
            shapeReflections.eachKey(obj, function (item) {
                out.push(sort(item));
            });
            return out;
        }
        if (typeReflections.isMapLike(obj)) {
            out = {};
            shapeReflections.getOwnKeys(obj).sort(comparator).forEach(function (key) {
                out[key] = sort(getSetReflections.getKeyValue(obj, key));
            });
            return out;
        }
        return obj;
    }
    function isPrimitiveConverter(Type) {
        return Type === Number || Type === String || Type === Boolean;
    }
    var schemaReflections = {
        getSchema: function (type) {
            if (type === undefined) {
                return undefined;
            }
            var getSchema = type[getSchemaSymbol];
            if (getSchema === undefined) {
                type = type.constructor;
                getSchema = type && type[getSchemaSymbol];
            }
            return getSchema !== undefined ? getSchema.call(type) : undefined;
        },
        getIdentity: function (value, schema) {
            schema = schema || schemaReflections.getSchema(value);
            if (schema === undefined) {
                throw new Error('can-reflect.getIdentity - Unable to find a schema for the given value.');
            }
            var identity = schema.identity;
            if (!identity || identity.length === 0) {
                throw new Error('can-reflect.getIdentity - Provided schema lacks an identity property.');
            } else if (identity.length === 1) {
                return getSetReflections.getKeyValue(value, identity[0]);
            } else {
                var id = {};
                identity.forEach(function (key) {
                    id[key] = getSetReflections.getKeyValue(value, key);
                });
                return JSON.stringify(schemaReflections.cloneKeySort(id));
            }
        },
        cloneKeySort: function (obj) {
            return sort(obj);
        },
        convert: function (value, Type) {
            if (isPrimitiveConverter(Type)) {
                return Type(value);
            }
            var isMemberTest = Type[isMemberSymbol], isMember = false, type = typeof Type, createNew = Type[newSymbol];
            if (isMemberTest !== undefined) {
                isMember = isMemberTest.call(Type, value);
            } else if (type === 'function') {
                if (typeReflections.isConstructorLike(Type)) {
                    isMember = value instanceof Type;
                }
            }
            if (isMember) {
                return value;
            }
            if (createNew !== undefined) {
                return createNew.call(Type, value);
            } else if (type === 'function') {
                if (typeReflections.isConstructorLike(Type)) {
                    return new Type(value);
                } else {
                    return Type(value);
                }
            } else {
                throw new Error('can-reflect: Can not convert values into type. Type must provide `can.new` symbol.');
            }
        }
    };
    module.exports = schemaReflections;
});
/*can-reflect@1.17.11#reflections/get-name/get-name*/
define('can-reflect@1.17.11#reflections/get-name/get-name', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../type/type'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var typeReflections = require('../type/type');
    var getNameSymbol = canSymbol.for('can.getName');
    function setName(obj, nameGetter) {
        if (typeof nameGetter !== 'function') {
            var value = nameGetter;
            nameGetter = function () {
                return value;
            };
        }
        Object.defineProperty(obj, getNameSymbol, { value: nameGetter });
    }
    var anonymousID = 0;
    function getName(obj) {
        var type = typeof obj;
        if (obj === null || type !== 'object' && type !== 'function') {
            return '' + obj;
        }
        var nameGetter = obj[getNameSymbol];
        if (nameGetter) {
            return nameGetter.call(obj);
        }
        if (type === 'function') {
            if (!('name' in obj)) {
                obj.name = 'functionIE' + anonymousID++;
            }
            return obj.name;
        }
        if (obj.constructor && obj !== obj.constructor) {
            var parent = getName(obj.constructor);
            if (parent) {
                if (typeReflections.isValueLike(obj)) {
                    return parent + '<>';
                }
                if (typeReflections.isMoreListLikeThanMapLike(obj)) {
                    return parent + '[]';
                }
                if (typeReflections.isMapLike(obj)) {
                    return parent + '{}';
                }
            }
        }
        return undefined;
    }
    module.exports = {
        setName: setName,
        getName: getName
    };
});
/*can-reflect@1.17.11#types/map*/
define('can-reflect@1.17.11#types/map', [
    'require',
    'exports',
    'module',
    '../reflections/shape/shape',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var shape = require('../reflections/shape/shape');
    var CanSymbol = require('can-symbol');
    function keysPolyfill() {
        var keys = [];
        var currentIndex = 0;
        this.forEach(function (val, key) {
            keys.push(key);
        });
        return {
            next: function () {
                return {
                    value: keys[currentIndex],
                    done: currentIndex++ === keys.length
                };
            }
        };
    }
    if (typeof Map !== 'undefined') {
        shape.assignSymbols(Map.prototype, {
            'can.getOwnEnumerableKeys': Map.prototype.keys,
            'can.setKeyValue': Map.prototype.set,
            'can.getKeyValue': Map.prototype.get,
            'can.deleteKeyValue': Map.prototype['delete'],
            'can.hasOwnKey': Map.prototype.has
        });
        if (typeof Map.prototype.keys !== 'function') {
            Map.prototype.keys = Map.prototype[CanSymbol.for('can.getOwnEnumerableKeys')] = keysPolyfill;
        }
    }
    if (typeof WeakMap !== 'undefined') {
        shape.assignSymbols(WeakMap.prototype, {
            'can.getOwnEnumerableKeys': function () {
                throw new Error('can-reflect: WeakMaps do not have enumerable keys.');
            },
            'can.setKeyValue': WeakMap.prototype.set,
            'can.getKeyValue': WeakMap.prototype.get,
            'can.deleteKeyValue': WeakMap.prototype['delete'],
            'can.hasOwnKey': WeakMap.prototype.has
        });
    }
});
/*can-reflect@1.17.11#types/set*/
define('can-reflect@1.17.11#types/set', [
    'require',
    'exports',
    'module',
    '../reflections/shape/shape',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var shape = require('../reflections/shape/shape');
    var CanSymbol = require('can-symbol');
    if (typeof Set !== 'undefined') {
        shape.assignSymbols(Set.prototype, {
            'can.isMoreListLikeThanMapLike': true,
            'can.updateValues': function (index, removing, adding) {
                if (removing !== adding) {
                    shape.each(removing, function (value) {
                        this.delete(value);
                    }, this);
                }
                shape.each(adding, function (value) {
                    this.add(value);
                }, this);
            },
            'can.size': function () {
                return this.size;
            }
        });
        if (typeof Set.prototype[CanSymbol.iterator] !== 'function') {
            Set.prototype[CanSymbol.iterator] = function () {
                var arr = [];
                var currentIndex = 0;
                this.forEach(function (val) {
                    arr.push(val);
                });
                return {
                    next: function () {
                        return {
                            value: arr[currentIndex],
                            done: currentIndex++ === arr.length
                        };
                    }
                };
            };
        }
    }
    if (typeof WeakSet !== 'undefined') {
        shape.assignSymbols(WeakSet.prototype, {
            'can.isListLike': true,
            'can.isMoreListLikeThanMapLike': true,
            'can.updateValues': function (index, removing, adding) {
                if (removing !== adding) {
                    shape.each(removing, function (value) {
                        this.delete(value);
                    }, this);
                }
                shape.each(adding, function (value) {
                    this.add(value);
                }, this);
            },
            'can.size': function () {
                throw new Error('can-reflect: WeakSets do not have enumerable keys.');
            }
        });
    }
});
/*can-reflect@1.17.11#can-reflect*/
define('can-reflect@1.17.11#can-reflect', [
    'require',
    'exports',
    'module',
    './reflections/call/call',
    './reflections/get-set/get-set',
    './reflections/observe/observe',
    './reflections/shape/shape',
    './reflections/shape/schema/schema',
    './reflections/type/type',
    './reflections/get-name/get-name',
    'can-namespace',
    './types/map',
    './types/set'
], function (require, exports, module) {
    'use strict';
    var functionReflections = require('./reflections/call/call');
    var getSet = require('./reflections/get-set/get-set');
    var observe = require('./reflections/observe/observe');
    var shape = require('./reflections/shape/shape');
    var schema = require('./reflections/shape/schema/schema');
    var type = require('./reflections/type/type');
    var getName = require('./reflections/get-name/get-name');
    var namespace = require('can-namespace');
    var reflect = {};
    [
        functionReflections,
        getSet,
        observe,
        shape,
        type,
        getName,
        schema
    ].forEach(function (reflections) {
        for (var prop in reflections) {
            reflect[prop] = reflections[prop];
            if (process.env.NODE_ENV !== 'production') {
                if (typeof reflections[prop] === 'function') {
                    var propDescriptor = Object.getOwnPropertyDescriptor(reflections[prop], 'name');
                    if (!propDescriptor || propDescriptor.writable && propDescriptor.configurable) {
                        Object.defineProperty(reflections[prop], 'name', { value: 'canReflect.' + prop });
                    }
                }
            }
        }
    });
    require('./types/map');
    require('./types/set');
    module.exports = namespace.Reflect = reflect;
});
/*can-globals@1.2.2#can-globals-proto*/
define('can-globals@1.2.2#can-globals-proto', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var canReflect = require('can-reflect');
        function dispatch(key) {
            var handlers = this.eventHandlers[key];
            if (handlers) {
                var handlersCopy = handlers.slice();
                var value = this.getKeyValue(key);
                for (var i = 0; i < handlersCopy.length; i++) {
                    handlersCopy[i](value);
                }
            }
        }
        function Globals() {
            this.eventHandlers = {};
            this.properties = {};
        }
        Globals.prototype.define = function (key, value, enableCache) {
            if (enableCache === undefined) {
                enableCache = true;
            }
            if (!this.properties[key]) {
                this.properties[key] = {
                    default: value,
                    value: value,
                    enableCache: enableCache
                };
            }
            return this;
        };
        Globals.prototype.getKeyValue = function (key) {
            var property = this.properties[key];
            if (property) {
                if (typeof property.value === 'function') {
                    if (property.cachedValue) {
                        return property.cachedValue;
                    }
                    if (property.enableCache) {
                        property.cachedValue = property.value();
                        return property.cachedValue;
                    } else {
                        return property.value();
                    }
                }
                return property.value;
            }
        };
        Globals.prototype.makeExport = function (key) {
            return function (value) {
                if (arguments.length === 0) {
                    return this.getKeyValue(key);
                }
                if (typeof value === 'undefined' || value === null) {
                    this.deleteKeyValue(key);
                } else {
                    if (typeof value === 'function') {
                        this.setKeyValue(key, function () {
                            return value;
                        });
                    } else {
                        this.setKeyValue(key, value);
                    }
                    return value;
                }
            }.bind(this);
        };
        Globals.prototype.offKeyValue = function (key, handler) {
            if (this.properties[key]) {
                var handlers = this.eventHandlers[key];
                if (handlers) {
                    var i = handlers.indexOf(handler);
                    handlers.splice(i, 1);
                }
            }
            return this;
        };
        Globals.prototype.onKeyValue = function (key, handler) {
            if (this.properties[key]) {
                if (!this.eventHandlers[key]) {
                    this.eventHandlers[key] = [];
                }
                this.eventHandlers[key].push(handler);
            }
            return this;
        };
        Globals.prototype.deleteKeyValue = function (key) {
            var property = this.properties[key];
            if (property !== undefined) {
                property.value = property.default;
                property.cachedValue = undefined;
                dispatch.call(this, key);
            }
            return this;
        };
        Globals.prototype.setKeyValue = function (key, value) {
            if (!this.properties[key]) {
                return this.define(key, value);
            }
            var property = this.properties[key];
            property.value = value;
            property.cachedValue = undefined;
            dispatch.call(this, key);
            return this;
        };
        Globals.prototype.reset = function () {
            for (var key in this.properties) {
                if (this.properties.hasOwnProperty(key)) {
                    this.properties[key].value = this.properties[key].default;
                    this.properties[key].cachedValue = undefined;
                    dispatch.call(this, key);
                }
            }
            return this;
        };
        canReflect.assignSymbols(Globals.prototype, {
            'can.getKeyValue': Globals.prototype.getKeyValue,
            'can.setKeyValue': Globals.prototype.setKeyValue,
            'can.deleteKeyValue': Globals.prototype.deleteKeyValue,
            'can.onKeyValue': Globals.prototype.onKeyValue,
            'can.offKeyValue': Globals.prototype.offKeyValue
        });
        module.exports = Globals;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.2#can-globals-instance*/
define('can-globals@1.2.2#can-globals-instance', [
    'require',
    'exports',
    'module',
    'can-namespace',
    './can-globals-proto'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var namespace = require('can-namespace');
        var Globals = require('./can-globals-proto');
        var globals = new Globals();
        if (namespace.globals) {
            throw new Error('You can\'t have two versions of can-globals, check your dependencies');
        } else {
            module.exports = namespace.globals = globals;
        }
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.2#global/global*/
define('can-globals@1.2.2#global/global', [
    'require',
    'exports',
    'module',
    'can-globals/can-globals-instance'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('can-globals/can-globals-instance');
        globals.define('global', function () {
            return typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope ? self : typeof process === 'object' && {}.toString.call(process) === '[object process]' ? global : window;
        });
        module.exports = globals.makeExport('global');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.2#document/document*/
define('can-globals@1.2.2#document/document', [
    'require',
    'exports',
    'module',
    'can-globals/global/global',
    'can-globals/can-globals-instance'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        require('can-globals/global/global');
        var globals = require('can-globals/can-globals-instance');
        globals.define('document', function () {
            return globals.getKeyValue('global').document;
        });
        module.exports = globals.makeExport('document');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.2#location/location*/
define('can-globals@1.2.2#location/location', [
    'require',
    'exports',
    'module',
    'can-globals/global/global',
    'can-globals/can-globals-instance'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        require('can-globals/global/global');
        var globals = require('can-globals/can-globals-instance');
        globals.define('location', function () {
            return globals.getKeyValue('global').location;
        });
        module.exports = globals.makeExport('location');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.2#mutation-observer/mutation-observer*/
define('can-globals@1.2.2#mutation-observer/mutation-observer', [
    'require',
    'exports',
    'module',
    'can-globals/global/global',
    'can-globals/can-globals-instance'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        require('can-globals/global/global');
        var globals = require('can-globals/can-globals-instance');
        globals.define('MutationObserver', function () {
            var GLOBAL = globals.getKeyValue('global');
            return GLOBAL.MutationObserver || GLOBAL.WebKitMutationObserver || GLOBAL.MozMutationObserver;
        });
        module.exports = globals.makeExport('MutationObserver');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.2#is-node/is-node*/
define('can-globals@1.2.2#is-node/is-node', [
    'require',
    'exports',
    'module',
    'can-globals/can-globals-instance'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('can-globals/can-globals-instance');
        globals.define('isNode', function () {
            return typeof process === 'object' && {}.toString.call(process) === '[object process]';
        });
        module.exports = globals.makeExport('isNode');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.2#is-browser-window/is-browser-window*/
define('can-globals@1.2.2#is-browser-window/is-browser-window', [
    'require',
    'exports',
    'module',
    'can-globals/can-globals-instance',
    '../is-node/is-node'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('can-globals/can-globals-instance');
        require('../is-node/is-node');
        globals.define('isBrowserWindow', function () {
            var isNode = globals.getKeyValue('isNode');
            return typeof window !== 'undefined' && typeof document !== 'undefined' && isNode === false;
        });
        module.exports = globals.makeExport('isBrowserWindow');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.2#custom-elements/custom-elements*/
define('can-globals@1.2.2#custom-elements/custom-elements', [
    'require',
    'exports',
    'module',
    'can-globals/global/global',
    'can-globals/can-globals-instance'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        require('can-globals/global/global');
        var globals = require('can-globals/can-globals-instance');
        globals.define('customElements', function () {
            var GLOBAL = globals.getKeyValue('global');
            return GLOBAL.customElements;
        });
        module.exports = globals.makeExport('customElements');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.2#can-globals*/
define('can-globals@1.2.2#can-globals', [
    'require',
    'exports',
    'module',
    'can-globals/can-globals-instance',
    './global/global',
    './document/document',
    './location/location',
    './mutation-observer/mutation-observer',
    './is-browser-window/is-browser-window',
    './is-node/is-node',
    './custom-elements/custom-elements'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('can-globals/can-globals-instance');
        require('./global/global');
        require('./document/document');
        require('./location/location');
        require('./mutation-observer/mutation-observer');
        require('./is-browser-window/is-browser-window');
        require('./is-node/is-node');
        require('./custom-elements/custom-elements');
        module.exports = globals;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-debug@2.0.7#src/proxy-namespace*/
define('can-debug@2.0.7#src/proxy-namespace', function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var warned = false;
        module.exports = function proxyNamespace(namespace) {
            return new Proxy(namespace, {
                get: function get(target, name) {
                    if (!warned) {
                        console.warn('Warning: use of \'can\' global should be for debugging purposes only.');
                        warned = true;
                    }
                    return target[name];
                }
            });
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-debug@2.0.7#src/temporarily-bind*/
define('can-debug@2.0.7#src/temporarily-bind', [
    'require',
    'exports',
    'module',
    'can-symbol',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    var onValueSymbol = canSymbol.for('can.onValue');
    var offValueSymbol = canSymbol.for('can.offValue');
    var onKeyValueSymbol = canSymbol.for('can.onKeyValue');
    var offKeyValueSymbol = canSymbol.for('can.offKeyValue');
    var noop = function noop() {
    };
    function isFunction(value) {
        return typeof value === 'function';
    }
    function withKey(obj, key, fn) {
        var result;
        if (isFunction(obj[onKeyValueSymbol])) {
            canReflect.onKeyValue(obj, key, noop);
        }
        result = fn(obj, key);
        if (isFunction(obj[offKeyValueSymbol])) {
            canReflect.offKeyValue(obj, key, noop);
        }
        return result;
    }
    function withoutKey(obj, fn) {
        var result;
        if (isFunction(obj[onValueSymbol])) {
            canReflect.onValue(obj, noop);
        }
        result = fn(obj);
        if (isFunction(obj[offValueSymbol])) {
            canReflect.offValue(obj, noop);
        }
        return result;
    }
    module.exports = function temporarilyBind(fn) {
        return function (obj, key) {
            var gotKey = arguments.length === 2;
            return gotKey ? withKey(obj, key, fn) : withoutKey(obj, fn);
        };
    };
});
/*can-assign@1.3.3#can-assign*/
define('can-assign@1.3.3#can-assign', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    var namespace = require('can-namespace');
    module.exports = namespace.assign = function (d, s) {
        for (var prop in s) {
            var desc = Object.getOwnPropertyDescriptor(d, prop);
            if (!desc || desc.writable !== false) {
                d[prop] = s[prop];
            }
        }
        return d;
    };
});
/*can-debug@2.0.7#src/graph/graph*/
define('can-debug@2.0.7#src/graph/graph', [
    'require',
    'exports',
    'module',
    'can-assign'
], function (require, exports, module) {
    'use strict';
    var canAssign = require('can-assign');
    function Graph() {
        this.nodes = [];
        this.arrows = new Map();
        this.arrowsMeta = new Map();
    }
    Graph.prototype.addNode = function addNode(node) {
        this.nodes.push(node);
        this.arrows.set(node, new Set());
    };
    Graph.prototype.addArrow = function addArrow(head, tail, meta) {
        var graph = this;
        graph.arrows.get(head).add(tail);
        if (meta) {
            addArrowMeta(graph, head, tail, meta);
        }
    };
    Graph.prototype.hasArrow = function hasArrow(head, tail) {
        return this.getNeighbors(head).has(tail);
    };
    Graph.prototype.getArrowMeta = function getArrowMeta(head, tail) {
        return this.arrowsMeta.get(head) && this.arrowsMeta.get(head).get(tail);
    };
    Graph.prototype.setArrowMeta = function setArrowMeta(head, tail, meta) {
        addArrowMeta(this, head, tail, meta);
    };
    Graph.prototype.getNeighbors = function getNeighbors(node) {
        return this.arrows.get(node);
    };
    Graph.prototype.findNode = function findNode(cb) {
        var found = null;
        var graph = this;
        var i, node;
        for (i = 0; i < graph.nodes.length; i++) {
            node = graph.nodes[i];
            if (cb(node)) {
                found = node;
                break;
            }
        }
        return found;
    };
    Graph.prototype.bfs = function bfs(visit) {
        var graph = this;
        var node = graph.nodes[0];
        var queue = [node];
        var visited = new Map();
        visited.set(node, true);
        while (queue.length) {
            node = queue.shift();
            visit(node);
            graph.arrows.get(node).forEach(function (adj) {
                if (!visited.has(adj)) {
                    queue.push(adj);
                    visited.set(adj, true);
                }
            });
        }
    };
    Graph.prototype.dfs = function dfs(visit) {
        var graph = this;
        var node = graph.nodes[0];
        var stack = [node];
        var visited = new Map();
        while (stack.length) {
            node = stack.pop();
            visit(node);
            if (!visited.has(node)) {
                visited.set(node, true);
                graph.arrows.get(node).forEach(function (adj) {
                    stack.push(adj);
                });
            }
        }
    };
    Graph.prototype.reverse = function reverse() {
        var graph = this;
        var reversed = new Graph();
        graph.nodes.forEach(reversed.addNode.bind(reversed));
        graph.nodes.forEach(function (node) {
            graph.getNeighbors(node).forEach(function (adj) {
                var meta = graph.getArrowMeta(node, adj);
                reversed.addArrow(adj, node, meta);
            });
        });
        return reversed;
    };
    function addArrowMeta(graph, head, tail, meta) {
        var entry = graph.arrowsMeta.get(head);
        if (entry) {
            var arrowMeta = entry.get(tail);
            if (!arrowMeta) {
                arrowMeta = {};
            }
            entry.set(tail, canAssign(arrowMeta, meta));
        } else {
            entry = new Map();
            entry.set(tail, meta);
            graph.arrowsMeta.set(head, entry);
        }
    }
    module.exports = Graph;
});
/*can-debug@2.0.7#src/get-graph/make-node*/
define('can-debug@2.0.7#src/get-graph/make-node', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    module.exports = function makeNode(obj, key) {
        var gotKey = arguments.length === 2;
        var node = {
            obj: obj,
            name: canReflect.getName(obj),
            value: gotKey ? canReflect.getKeyValue(obj, key) : canReflect.getValue(obj)
        };
        if (gotKey) {
            node.key = key;
        }
        return node;
    };
});
/*can-reflect-dependencies@1.1.2#src/add-mutated-by*/
define('can-reflect-dependencies@1.1.2#src/add-mutated-by', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var makeDependencyRecord = function makeDependencyRecord() {
        return {
            keyDependencies: new Map(),
            valueDependencies: new Set()
        };
    };
    var makeRootRecord = function makeRootRecord() {
        return {
            mutateDependenciesForKey: new Map(),
            mutateDependenciesForValue: makeDependencyRecord()
        };
    };
    module.exports = function (mutatedByMap) {
        return function addMutatedBy(mutated, key, mutator) {
            var gotKey = arguments.length === 3;
            if (arguments.length === 2) {
                mutator = key;
                key = undefined;
            }
            if (!mutator.keyDependencies && !mutator.valueDependencies) {
                var s = new Set();
                s.add(mutator);
                mutator = { valueDependencies: s };
            }
            var root = mutatedByMap.get(mutated);
            if (!root) {
                root = makeRootRecord();
                mutatedByMap.set(mutated, root);
            }
            if (gotKey && !root.mutateDependenciesForKey.get(key)) {
                root.mutateDependenciesForKey.set(key, makeDependencyRecord());
            }
            var dependencyRecord = gotKey ? root.mutateDependenciesForKey.get(key) : root.mutateDependenciesForValue;
            if (mutator.valueDependencies) {
                canReflect.addValues(dependencyRecord.valueDependencies, mutator.valueDependencies);
            }
            if (mutator.keyDependencies) {
                canReflect.each(mutator.keyDependencies, function (keysSet, obj) {
                    var entry = dependencyRecord.keyDependencies.get(obj);
                    if (!entry) {
                        entry = new Set();
                        dependencyRecord.keyDependencies.set(obj, entry);
                    }
                    canReflect.addValues(entry, keysSet);
                });
            }
        };
    };
});
/*can-reflect-dependencies@1.1.2#src/delete-mutated-by*/
define('can-reflect-dependencies@1.1.2#src/delete-mutated-by', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    module.exports = function (mutatedByMap) {
        return function deleteMutatedBy(mutated, key, mutator) {
            var gotKey = arguments.length === 3;
            var root = mutatedByMap.get(mutated);
            if (arguments.length === 2) {
                mutator = key;
                key = undefined;
            }
            if (!mutator.keyDependencies && !mutator.valueDependencies) {
                var s = new Set();
                s.add(mutator);
                mutator = { valueDependencies: s };
            }
            var dependencyRecord = gotKey ? root.mutateDependenciesForKey.get(key) : root.mutateDependenciesForValue;
            if (mutator.valueDependencies) {
                canReflect.removeValues(dependencyRecord.valueDependencies, mutator.valueDependencies);
            }
            if (mutator.keyDependencies) {
                canReflect.each(mutator.keyDependencies, function (keysSet, obj) {
                    var entry = dependencyRecord.keyDependencies.get(obj);
                    if (entry) {
                        canReflect.removeValues(entry, keysSet);
                        if (!entry.size) {
                            dependencyRecord.keyDependencies.delete(obj);
                        }
                    }
                });
            }
        };
    };
});
/*can-reflect-dependencies@1.1.2#src/is-function*/
define('can-reflect-dependencies@1.1.2#src/is-function', function (require, exports, module) {
    'use strict';
    module.exports = function isFunction(value) {
        return typeof value === 'function';
    };
});
/*can-reflect-dependencies@1.1.2#src/get-dependency-data-of*/
define('can-reflect-dependencies@1.1.2#src/get-dependency-data-of', [
    'require',
    'exports',
    'module',
    'can-symbol',
    'can-reflect',
    './is-function',
    'can-assign'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    var isFunction = require('./is-function');
    var canAssign = require('can-assign');
    var getWhatIChangeSymbol = canSymbol.for('can.getWhatIChange');
    var getKeyDependenciesSymbol = canSymbol.for('can.getKeyDependencies');
    var getValueDependenciesSymbol = canSymbol.for('can.getValueDependencies');
    var getKeyDependencies = function getKeyDependencies(obj, key) {
        if (isFunction(obj[getKeyDependenciesSymbol])) {
            return canReflect.getKeyDependencies(obj, key);
        }
    };
    var getValueDependencies = function getValueDependencies(obj) {
        if (isFunction(obj[getValueDependenciesSymbol])) {
            return canReflect.getValueDependencies(obj);
        }
    };
    var getMutatedKeyDependencies = function getMutatedKeyDependencies(mutatedByMap, obj, key) {
        var root = mutatedByMap.get(obj);
        var dependencyRecord;
        if (root && root.mutateDependenciesForKey.has(key)) {
            dependencyRecord = root.mutateDependenciesForKey.get(key);
        }
        return dependencyRecord;
    };
    var getMutatedValueDependencies = function getMutatedValueDependencies(mutatedByMap, obj) {
        var result;
        var root = mutatedByMap.get(obj);
        if (root) {
            var dependencyRecord = root.mutateDependenciesForValue;
            if (dependencyRecord.keyDependencies.size) {
                result = result || {};
                result.keyDependencies = dependencyRecord.keyDependencies;
            }
            if (dependencyRecord.valueDependencies.size) {
                result = result || {};
                result.valueDependencies = dependencyRecord.valueDependencies;
            }
        }
        return result;
    };
    var getWhatIChange = function getWhatIChange(obj, key) {
        if (isFunction(obj[getWhatIChangeSymbol])) {
            var gotKey = arguments.length === 2;
            return gotKey ? canReflect.getWhatIChange(obj, key) : canReflect.getWhatIChange(obj);
        }
    };
    var isEmptyRecord = function isEmptyRecord(record) {
        return record == null || !Object.keys(record).length || record.keyDependencies && !record.keyDependencies.size && (record.valueDependencies && !record.valueDependencies.size);
    };
    var getWhatChangesMe = function getWhatChangesMe(mutatedByMap, obj, key) {
        var gotKey = arguments.length === 3;
        var mutate = gotKey ? getMutatedKeyDependencies(mutatedByMap, obj, key) : getMutatedValueDependencies(mutatedByMap, obj);
        var derive = gotKey ? getKeyDependencies(obj, key) : getValueDependencies(obj);
        if (!isEmptyRecord(mutate) || !isEmptyRecord(derive)) {
            return canAssign(canAssign({}, mutate ? { mutate: mutate } : null), derive ? { derive: derive } : null);
        }
    };
    module.exports = function (mutatedByMap) {
        return function getDependencyDataOf(obj, key) {
            var gotKey = arguments.length === 2;
            var whatChangesMe = gotKey ? getWhatChangesMe(mutatedByMap, obj, key) : getWhatChangesMe(mutatedByMap, obj);
            var whatIChange = gotKey ? getWhatIChange(obj, key) : getWhatIChange(obj);
            if (whatChangesMe || whatIChange) {
                return canAssign(canAssign({}, whatIChange ? { whatIChange: whatIChange } : null), whatChangesMe ? { whatChangesMe: whatChangesMe } : null);
            }
        };
    };
});
/*can-reflect-dependencies@1.1.2#can-reflect-dependencies*/
define('can-reflect-dependencies@1.1.2#can-reflect-dependencies', [
    'require',
    'exports',
    'module',
    './src/add-mutated-by',
    './src/delete-mutated-by',
    './src/get-dependency-data-of'
], function (require, exports, module) {
    'use strict';
    var addMutatedBy = require('./src/add-mutated-by');
    var deleteMutatedBy = require('./src/delete-mutated-by');
    var getDependencyDataOf = require('./src/get-dependency-data-of');
    var mutatedByMap = new WeakMap();
    module.exports = {
        addMutatedBy: addMutatedBy(mutatedByMap),
        deleteMutatedBy: deleteMutatedBy(mutatedByMap),
        getDependencyDataOf: getDependencyDataOf(mutatedByMap)
    };
});
/*can-debug@2.0.7#src/get-graph/get-graph*/
define('can-debug@2.0.7#src/get-graph/get-graph', [
    'require',
    'exports',
    'module',
    '../graph/graph',
    './make-node',
    'can-reflect',
    'can-reflect-dependencies'
], function (require, exports, module) {
    'use strict';
    var Graph = require('../graph/graph');
    var makeNode = require('./make-node');
    var canReflect = require('can-reflect');
    var mutateDeps = require('can-reflect-dependencies');
    module.exports = function getGraph(obj, key) {
        var order = 0;
        var graph = new Graph();
        var gotKey = arguments.length === 2;
        var addArrow = function addArrow(direction, parent, child, meta) {
            switch (direction) {
            case 'whatIChange':
                graph.addArrow(parent, child, meta);
                break;
            case 'whatChangesMe':
                graph.addArrow(child, parent, meta);
                break;
            default:
                throw new Error('Unknown direction value: ', meta.direction);
            }
        };
        var visitKeyDependencies = function visitKeyDependencies(source, meta, cb) {
            canReflect.eachKey(source.keyDependencies || {}, function (keys, obj) {
                canReflect.each(keys, function (key) {
                    cb(obj, meta, key);
                });
            });
        };
        var visitValueDependencies = function visitValueDependencies(source, meta, cb) {
            canReflect.eachIndex(source.valueDependencies || [], function (obj) {
                cb(obj, meta);
            });
        };
        var visit = function visit(obj, meta, key) {
            var gotKey = arguments.length === 3;
            var node = graph.findNode(function (node) {
                return gotKey ? node.obj === obj && node.key === key : node.obj === obj;
            });
            if (node) {
                if (meta.parent) {
                    addArrow(meta.direction, meta.parent, node, {
                        kind: meta.kind,
                        direction: meta.direction
                    });
                }
                return graph;
            }
            order += 1;
            node = gotKey ? makeNode(obj, key) : makeNode(obj);
            node.order = order;
            graph.addNode(node);
            if (meta.parent) {
                addArrow(meta.direction, meta.parent, node, {
                    kind: meta.kind,
                    direction: meta.direction
                });
            }
            var nextMeta;
            var data = gotKey ? mutateDeps.getDependencyDataOf(obj, key) : mutateDeps.getDependencyDataOf(obj);
            if (data && data.whatIChange) {
                nextMeta = {
                    direction: 'whatIChange',
                    parent: node
                };
                canReflect.eachKey(data.whatIChange, function (dependencyRecord, kind) {
                    nextMeta.kind = kind;
                    visitKeyDependencies(dependencyRecord, nextMeta, visit);
                    visitValueDependencies(dependencyRecord, nextMeta, visit);
                });
            }
            if (data && data.whatChangesMe) {
                nextMeta = {
                    direction: 'whatChangesMe',
                    parent: node
                };
                canReflect.eachKey(data.whatChangesMe, function (dependencyRecord, kind) {
                    nextMeta.kind = kind;
                    visitKeyDependencies(dependencyRecord, nextMeta, visit);
                    visitValueDependencies(dependencyRecord, nextMeta, visit);
                });
            }
            return graph;
        };
        return gotKey ? visit(obj, {}, key) : visit(obj, {});
    };
});
/*can-debug@2.0.7#src/format-graph/format-graph*/
define('can-debug@2.0.7#src/format-graph/format-graph', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-assign'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var canAssign = require('can-assign');
    module.exports = function formatGraph(graph) {
        var nodeIdMap = new Map();
        graph.nodes.forEach(function (node, index) {
            nodeIdMap.set(node, index + 1);
        });
        var nodesDataSet = graph.nodes.map(function (node) {
            return {
                shape: 'box',
                id: nodeIdMap.get(node),
                label: canReflect.getName(node.obj) + (node.key ? '.' + node.key : '')
            };
        });
        var getArrowData = function getArrowData(meta) {
            var regular = { arrows: 'to' };
            var withDashes = {
                arrows: 'to',
                dashes: true
            };
            var map = {
                derive: regular,
                mutate: withDashes
            };
            return map[meta.kind];
        };
        var visited = new Map();
        var arrowsDataSet = [];
        graph.nodes.forEach(function (node) {
            var visit = function (node) {
                if (!visited.has(node)) {
                    visited.set(node, true);
                    var arrows = graph.arrows.get(node);
                    var headId = nodeIdMap.get(node);
                    arrows.forEach(function (neighbor) {
                        var tailId = nodeIdMap.get(neighbor);
                        var meta = graph.arrowsMeta.get(node).get(neighbor);
                        arrowsDataSet.push(canAssign({
                            from: headId,
                            to: tailId
                        }, getArrowData(meta)));
                        visit(neighbor);
                    });
                }
            };
            visit(node);
        });
        return {
            nodes: nodesDataSet,
            edges: arrowsDataSet
        };
    };
});
/*can-debug@2.0.7#src/log-data/log-data*/
define('can-debug@2.0.7#src/log-data/log-data', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var quoteString = function quoteString(x) {
        return typeof x === 'string' ? JSON.stringify(x) : x;
    };
    module.exports = function log(data) {
        var node = data.node;
        var nameParts = [
            node.name,
            'key' in node ? '.' + node.key : ''
        ];
        console.group(nameParts.join(''));
        console.log('value  ', quoteString(node.value));
        console.log('object ', node.obj);
        if (data.derive.length) {
            console.group('DERIVED FROM');
            canReflect.eachIndex(data.derive, log);
            console.groupEnd();
        }
        if (data.mutations.length) {
            console.group('MUTATED BY');
            canReflect.eachIndex(data.mutations, log);
            console.groupEnd();
        }
        if (data.twoWay.length) {
            console.group('TWO WAY');
            canReflect.eachIndex(data.twoWay, log);
            console.groupEnd();
        }
        console.groupEnd();
    };
});
/*can-debug@2.0.7#src/label-cycles/label-cycles*/
define('can-debug@2.0.7#src/label-cycles/label-cycles', [
    'require',
    'exports',
    'module',
    '../graph/graph'
], function (require, exports, module) {
    'use strict';
    var Graph = require('../graph/graph');
    module.exports = function labelCycles(graph) {
        var visited = new Map();
        var result = new Graph();
        graph.nodes.forEach(function (node) {
            result.addNode(node);
        });
        var visit = function visit(node) {
            visited.set(node, true);
            graph.getNeighbors(node).forEach(function (adj) {
                if (visited.has(adj)) {
                    var isTwoWay = graph.hasArrow(node, adj);
                    if (isTwoWay) {
                        result.addArrow(adj, node, { kind: 'twoWay' });
                    }
                } else {
                    result.addArrow(node, adj, graph.getArrowMeta(node, adj));
                    visit(adj);
                }
            });
        };
        visit(graph.nodes[0]);
        return result;
    };
});
/*can-debug@2.0.7#src/get-data/get-data*/
define('can-debug@2.0.7#src/get-data/get-data', [
    'require',
    'exports',
    'module',
    '../label-cycles/label-cycles'
], function (require, exports, module) {
    'use strict';
    var labelCycles = require('../label-cycles/label-cycles');
    var isDisconnected = function isDisconnected(data) {
        return !data.derive.length && !data.mutations.length && !data.twoWay.length;
    };
    module.exports = function getDebugData(inputGraph, direction) {
        var visited = new Map();
        var graph = labelCycles(direction === 'whatChangesMe' ? inputGraph.reverse() : inputGraph);
        var visit = function visit(node) {
            var data = {
                node: node,
                derive: [],
                mutations: [],
                twoWay: []
            };
            visited.set(node, true);
            graph.getNeighbors(node).forEach(function (adj) {
                var meta = graph.getArrowMeta(node, adj);
                if (!visited.has(adj)) {
                    switch (meta.kind) {
                    case 'twoWay':
                        data.twoWay.push(visit(adj));
                        break;
                    case 'derive':
                        data.derive.push(visit(adj));
                        break;
                    case 'mutate':
                        data.mutations.push(visit(adj));
                        break;
                    default:
                        throw new Error('Unknow meta.kind value: ', meta.kind);
                    }
                }
            });
            return data;
        };
        var result = visit(graph.nodes[0]);
        return isDisconnected(result) ? null : result;
    };
});
/*can-debug@2.0.7#src/what-i-change/what-i-change*/
define('can-debug@2.0.7#src/what-i-change/what-i-change', [
    'require',
    'exports',
    'module',
    '../log-data/log-data',
    '../get-data/get-data',
    '../get-graph/get-graph'
], function (require, exports, module) {
    'use strict';
    var log = require('../log-data/log-data');
    var getData = require('../get-data/get-data');
    var getGraph = require('../get-graph/get-graph');
    module.exports = function logWhatIChange(obj, key) {
        var gotKey = arguments.length === 2;
        var data = getData(gotKey ? getGraph(obj, key) : getGraph(obj), 'whatIChange');
        if (data) {
            log(data);
        }
    };
});
/*can-debug@2.0.7#src/what-changes-me/what-changes-me*/
define('can-debug@2.0.7#src/what-changes-me/what-changes-me', [
    'require',
    'exports',
    'module',
    '../log-data/log-data',
    '../get-data/get-data',
    '../get-graph/get-graph'
], function (require, exports, module) {
    'use strict';
    var log = require('../log-data/log-data');
    var getData = require('../get-data/get-data');
    var getGraph = require('../get-graph/get-graph');
    module.exports = function logWhatChangesMe(obj, key) {
        var gotKey = arguments.length === 2;
        var data = getData(gotKey ? getGraph(obj, key) : getGraph(obj), 'whatChangesMe');
        if (data) {
            log(data);
        }
    };
});
/*can-debug@2.0.7#src/get-what-i-change/get-what-i-change*/
define('can-debug@2.0.7#src/get-what-i-change/get-what-i-change', [
    'require',
    'exports',
    'module',
    '../get-data/get-data',
    '../get-graph/get-graph'
], function (require, exports, module) {
    'use strict';
    var getData = require('../get-data/get-data');
    var getGraph = require('../get-graph/get-graph');
    module.exports = function getWhatChangesMe(obj, key) {
        var gotKey = arguments.length === 2;
        return getData(gotKey ? getGraph(obj, key) : getGraph(obj), 'whatIChange');
    };
});
/*can-debug@2.0.7#src/get-what-changes-me/get-what-changes-me*/
define('can-debug@2.0.7#src/get-what-changes-me/get-what-changes-me', [
    'require',
    'exports',
    'module',
    '../get-data/get-data',
    '../get-graph/get-graph'
], function (require, exports, module) {
    'use strict';
    var getData = require('../get-data/get-data');
    var getGraph = require('../get-graph/get-graph');
    module.exports = function getWhatChangesMe(obj, key) {
        var gotKey = arguments.length === 2;
        return getData(gotKey ? getGraph(obj, key) : getGraph(obj), 'whatChangesMe');
    };
});
/*can-log@1.0.2#can-log*/
define('can-log@1.0.2#can-log', function (require, exports, module) {
    'use strict';
    exports.warnTimeout = 5000;
    exports.logLevel = 0;
    exports.warn = function () {
        var ll = this.logLevel;
        if (ll < 2) {
            if (typeof console !== 'undefined' && console.warn) {
                this._logger('warn', Array.prototype.slice.call(arguments));
            } else if (typeof console !== 'undefined' && console.log) {
                this._logger('log', Array.prototype.slice.call(arguments));
            }
        }
    };
    exports.log = function () {
        var ll = this.logLevel;
        if (ll < 1) {
            if (typeof console !== 'undefined' && console.log) {
                this._logger('log', Array.prototype.slice.call(arguments));
            }
        }
    };
    exports.error = function () {
        var ll = this.logLevel;
        if (ll < 1) {
            if (typeof console !== 'undefined' && console.error) {
                this._logger('error', Array.prototype.slice.call(arguments));
            }
        }
    };
    exports._logger = function (type, arr) {
        try {
            console[type].apply(console, arr);
        } catch (e) {
            console[type](arr);
        }
    };
});
/*can-log@1.0.2#dev/dev*/
define('can-log@1.0.2#dev/dev', [
    'require',
    'exports',
    'module',
    '../can-log'
], function (require, exports, module) {
    'use strict';
    var canLog = require('../can-log');
    module.exports = {
        warnTimeout: 5000,
        logLevel: 0,
        stringify: function (value) {
            var flagUndefined = function flagUndefined(key, value) {
                return value === undefined ? '/* void(undefined) */' : value;
            };
            return JSON.stringify(value, flagUndefined, '  ').replace(/"\/\* void\(undefined\) \*\/"/g, 'undefined');
        },
        warn: function () {
            if (process.env.NODE_ENV !== 'production') {
                canLog.warn.apply(this, arguments);
            }
        },
        log: function () {
            if (process.env.NODE_ENV !== 'production') {
                canLog.log.apply(this, arguments);
            }
        },
        error: function () {
            if (process.env.NODE_ENV !== 'production') {
                canLog.error.apply(this, arguments);
            }
        },
        _logger: canLog._logger
    };
});
/*can-queues@1.2.2#queue-state*/
define('can-queues@1.2.2#queue-state', function (require, exports, module) {
    'use strict';
    module.exports = { lastTask: null };
});
/*can-queues@1.2.2#queue*/
define('can-queues@1.2.2#queue', [
    'require',
    'exports',
    'module',
    './queue-state',
    'can-log/dev/dev',
    'can-assign'
], function (require, exports, module) {
    'use strict';
    var queueState = require('./queue-state');
    var canDev = require('can-log/dev/dev');
    var assign = require('can-assign');
    function noOperation() {
    }
    var Queue = function (name, callbacks) {
        this.callbacks = assign({
            onFirstTask: noOperation,
            onComplete: function () {
                queueState.lastTask = null;
            }
        }, callbacks || {});
        this.name = name;
        this.index = 0;
        this.tasks = [];
        this._log = false;
    };
    Queue.prototype.constructor = Queue;
    Queue.noop = noOperation;
    Queue.prototype.enqueue = function (fn, context, args, meta) {
        var len = this.tasks.push({
            fn: fn,
            context: context,
            args: args,
            meta: meta || {}
        });
        if (process.env.NODE_ENV !== 'production') {
            this._logEnqueue(this.tasks[len - 1]);
        }
        if (len === 1) {
            this.callbacks.onFirstTask(this);
        }
    };
    Queue.prototype.flush = function () {
        while (this.index < this.tasks.length) {
            var task = this.tasks[this.index++];
            if (process.env.NODE_ENV !== 'production') {
                this._logFlush(task);
            }
            task.fn.apply(task.context, task.args);
        }
        this.index = 0;
        this.tasks = [];
        this.callbacks.onComplete(this);
    };
    Queue.prototype.log = function () {
        this._log = arguments.length ? arguments[0] : true;
    };
    if (process.env.NODE_ENV !== 'production') {
        Queue.prototype._logEnqueue = function (task) {
            task.meta.parentTask = queueState.lastTask;
            task.meta.stack = this;
            if (this._log === true || this._log === 'enqueue') {
                var log = task.meta.log ? task.meta.log.concat(task) : [
                    task.fn.name,
                    task
                ];
                canDev.log.apply(canDev, [this.name + ' enqueuing:'].concat(log));
            }
        };
        Queue.prototype._logFlush = function (task) {
            if (this._log === true || this._log === 'flush') {
                var log = task.meta.log ? task.meta.log.concat(task) : [
                    task.fn.name,
                    task
                ];
                canDev.log.apply(canDev, [this.name + ' running  :'].concat(log));
            }
            queueState.lastTask = task;
        };
    }
    module.exports = Queue;
});
/*can-queues@1.2.2#priority-queue*/
define('can-queues@1.2.2#priority-queue', [
    'require',
    'exports',
    'module',
    './queue'
], function (require, exports, module) {
    'use strict';
    var Queue = require('./queue');
    var PriorityQueue = function () {
        Queue.apply(this, arguments);
        this.taskMap = new Map();
        this.taskContainersByPriority = [];
        this.curPriorityIndex = Infinity;
        this.curPriorityMax = 0;
        this.isFlushing = false;
        this.tasksRemaining = 0;
    };
    PriorityQueue.prototype = Object.create(Queue.prototype);
    PriorityQueue.prototype.constructor = PriorityQueue;
    PriorityQueue.prototype.enqueue = function (fn, context, args, meta) {
        if (!this.taskMap.has(fn)) {
            this.tasksRemaining++;
            var isFirst = this.taskContainersByPriority.length === 0;
            var task = {
                fn: fn,
                context: context,
                args: args,
                meta: meta || {}
            };
            var taskContainer = this.getTaskContainerAndUpdateRange(task);
            taskContainer.tasks.push(task);
            this.taskMap.set(fn, task);
            if (process.env.NODE_ENV !== 'production') {
                this._logEnqueue(task);
            }
            if (isFirst) {
                this.callbacks.onFirstTask(this);
            }
        }
    };
    PriorityQueue.prototype.getTaskContainerAndUpdateRange = function (task) {
        var priority = task.meta.priority || 0;
        if (priority < this.curPriorityIndex) {
            this.curPriorityIndex = priority;
        }
        if (priority > this.curPriorityMax) {
            this.curPriorityMax = priority;
        }
        var tcByPriority = this.taskContainersByPriority;
        var taskContainer = tcByPriority[priority];
        if (!taskContainer) {
            taskContainer = tcByPriority[priority] = {
                tasks: [],
                index: 0
            };
        }
        return taskContainer;
    };
    PriorityQueue.prototype.flush = function () {
        if (this.isFlushing) {
            return;
        }
        this.isFlushing = true;
        while (true) {
            if (this.curPriorityIndex <= this.curPriorityMax) {
                var taskContainer = this.taskContainersByPriority[this.curPriorityIndex];
                if (taskContainer && taskContainer.tasks.length > taskContainer.index) {
                    var task = taskContainer.tasks[taskContainer.index++];
                    if (process.env.NODE_ENV !== 'production') {
                        this._logFlush(task);
                    }
                    this.tasksRemaining--;
                    this.taskMap['delete'](task.fn);
                    task.fn.apply(task.context, task.args);
                } else {
                    this.curPriorityIndex++;
                }
            } else {
                this.taskMap = new Map();
                this.curPriorityIndex = Infinity;
                this.curPriorityMax = 0;
                this.taskContainersByPriority = [];
                this.isFlushing = false;
                this.callbacks.onComplete(this);
                return;
            }
        }
    };
    PriorityQueue.prototype.isEnqueued = function (fn) {
        return this.taskMap.has(fn);
    };
    PriorityQueue.prototype.flushQueuedTask = function (fn) {
        var task = this.dequeue(fn);
        if (task) {
            if (process.env.NODE_ENV !== 'production') {
                this._logFlush(task);
            }
            task.fn.apply(task.context, task.args);
        }
    };
    PriorityQueue.prototype.dequeue = function (fn) {
        var task = this.taskMap.get(fn);
        if (task) {
            var priority = task.meta.priority || 0;
            var taskContainer = this.taskContainersByPriority[priority];
            var index = taskContainer.tasks.indexOf(task, taskContainer.index);
            if (index >= 0) {
                taskContainer.tasks.splice(index, 1);
                this.tasksRemaining--;
                this.taskMap['delete'](task.fn);
                return task;
            } else {
                console.warn('Task', fn, 'has already run');
            }
        }
    };
    PriorityQueue.prototype.tasksRemainingCount = function () {
        return this.tasksRemaining;
    };
    module.exports = PriorityQueue;
});
/*can-queues@1.2.2#completion-queue*/
define('can-queues@1.2.2#completion-queue', [
    'require',
    'exports',
    'module',
    './queue'
], function (require, exports, module) {
    'use strict';
    var Queue = require('./queue');
    var CompletionQueue = function () {
        Queue.apply(this, arguments);
        this.flushCount = 0;
    };
    CompletionQueue.prototype = Object.create(Queue.prototype);
    CompletionQueue.prototype.constructor = CompletionQueue;
    CompletionQueue.prototype.flush = function () {
        if (this.flushCount === 0) {
            this.flushCount++;
            while (this.index < this.tasks.length) {
                var task = this.tasks[this.index++];
                if (process.env.NODE_ENV !== 'production') {
                    this._logFlush(task);
                }
                task.fn.apply(task.context, task.args);
            }
            this.index = 0;
            this.tasks = [];
            this.flushCount--;
            this.callbacks.onComplete(this);
        }
    };
    module.exports = CompletionQueue;
});
/*can-queues@1.2.2#can-queues*/
define('can-queues@1.2.2#can-queues', [
    'require',
    'exports',
    'module',
    'can-log/dev/dev',
    './queue',
    './priority-queue',
    './queue-state',
    './completion-queue',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var canDev = require('can-log/dev/dev');
    var Queue = require('./queue');
    var PriorityQueue = require('./priority-queue');
    var queueState = require('./queue-state');
    var CompletionQueue = require('./completion-queue');
    var ns = require('can-namespace');
    var batchStartCounter = 0;
    var addedTask = false;
    var isFlushing = false;
    var batchNum = 0;
    var batchData;
    var queueNames = [
        'notify',
        'derive',
        'domUI',
        'mutate'
    ];
    var NOTIFY_QUEUE, DERIVE_QUEUE, DOM_UI_QUEUE, MUTATE_QUEUE;
    NOTIFY_QUEUE = new Queue('NOTIFY', {
        onComplete: function () {
            DERIVE_QUEUE.flush();
        },
        onFirstTask: function () {
            if (!batchStartCounter) {
                NOTIFY_QUEUE.flush();
            } else {
                addedTask = true;
            }
        }
    });
    DERIVE_QUEUE = new PriorityQueue('DERIVE', {
        onComplete: function () {
            DOM_UI_QUEUE.flush();
        },
        onFirstTask: function () {
            addedTask = true;
        }
    });
    DOM_UI_QUEUE = new CompletionQueue('DOM_UI', {
        onComplete: function () {
            MUTATE_QUEUE.flush();
        },
        onFirstTask: function () {
            addedTask = true;
        }
    });
    MUTATE_QUEUE = new Queue('MUTATE', {
        onComplete: function () {
            queueState.lastTask = null;
            isFlushing = false;
        },
        onFirstTask: function () {
            addedTask = true;
        }
    });
    var queues = {
        Queue: Queue,
        PriorityQueue: PriorityQueue,
        CompletionQueue: CompletionQueue,
        notifyQueue: NOTIFY_QUEUE,
        deriveQueue: DERIVE_QUEUE,
        domUIQueue: DOM_UI_QUEUE,
        mutateQueue: MUTATE_QUEUE,
        batch: {
            start: function () {
                batchStartCounter++;
                if (batchStartCounter === 1) {
                    batchNum++;
                    batchData = { number: batchNum };
                }
            },
            stop: function () {
                batchStartCounter--;
                if (batchStartCounter === 0) {
                    if (addedTask) {
                        addedTask = false;
                        isFlushing = true;
                        NOTIFY_QUEUE.flush();
                    }
                }
            },
            isCollecting: function () {
                return batchStartCounter > 0;
            },
            number: function () {
                return batchNum;
            },
            data: function () {
                return batchData;
            }
        },
        runAsTask: function (fn, reasonLog) {
            if (process.env.NODE_ENV !== 'production') {
                return function () {
                    queueState.lastTask = {
                        fn: fn,
                        context: this,
                        args: arguments,
                        meta: {
                            reasonLog: typeof reasonLog === 'function' ? reasonLog.apply(this, arguments) : reasonLog,
                            parentTask: queueState.lastTask,
                            stack: { name: 'RUN_AS' }
                        }
                    };
                    var ret = fn.apply(this, arguments);
                    queueState.lastTask = queueState.lastTask && queueState.lastTask.meta.parentTask;
                    return ret;
                };
            }
            return fn;
        },
        enqueueByQueue: function enqueueByQueue(fnByQueue, context, args, makeMeta, reasonLog) {
            if (fnByQueue) {
                queues.batch.start();
                queueNames.forEach(function (queueName) {
                    var name = queueName + 'Queue';
                    var QUEUE = queues[name];
                    var tasks = fnByQueue[queueName];
                    if (tasks !== undefined) {
                        tasks.forEach(function (fn) {
                            var meta = makeMeta != null ? makeMeta(fn, context, args) : {};
                            meta.reasonLog = reasonLog;
                            QUEUE.enqueue(fn, context, args, meta);
                        });
                    }
                });
                queues.batch.stop();
            }
        },
        lastTask: function () {
            return queueState.lastTask;
        },
        stack: function (task) {
            var current = task || queueState.lastTask;
            var stack = [];
            while (current) {
                stack.unshift(current);
                current = current.meta.parentTask;
            }
            return stack;
        },
        logStack: function (task) {
            var stack = this.stack(task);
            stack.forEach(function (task, i) {
                var meta = task.meta;
                if (i === 0 && meta && meta.reasonLog) {
                    canDev.log.apply(canDev, meta.reasonLog);
                }
                var log = meta && meta.log ? meta.log : [
                    task.fn.name,
                    task
                ];
                canDev.log.apply(canDev, [task.meta.stack.name + ' ran task:'].concat(log));
            });
        },
        taskCount: function () {
            return NOTIFY_QUEUE.tasks.length + DERIVE_QUEUE.tasks.length + DOM_UI_QUEUE.tasks.length + MUTATE_QUEUE.tasks.length;
        },
        flush: function () {
            NOTIFY_QUEUE.flush();
        },
        log: function () {
            NOTIFY_QUEUE.log.apply(NOTIFY_QUEUE, arguments);
            DERIVE_QUEUE.log.apply(DERIVE_QUEUE, arguments);
            DOM_UI_QUEUE.log.apply(DOM_UI_QUEUE, arguments);
            MUTATE_QUEUE.log.apply(MUTATE_QUEUE, arguments);
        }
    };
    if (ns.queues) {
        throw new Error('You can\'t have two versions of can-queues, check your dependencies');
    } else {
        module.exports = ns.queues = queues;
    }
});
/*can-observation-recorder@1.3.1#can-observation-recorder*/
define('can-observation-recorder@1.3.1#can-observation-recorder', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var canSymbol = require('can-symbol');
    var stack = [];
    var addParentSymbol = canSymbol.for('can.addParent'), getValueSymbol = canSymbol.for('can.getValue');
    var ObservationRecorder = {
        stack: stack,
        start: function (name) {
            var deps = {
                keyDependencies: new Map(),
                valueDependencies: new Set(),
                childDependencies: new Set(),
                traps: null,
                ignore: 0,
                name: name
            };
            stack.push(deps);
            return deps;
        },
        stop: function () {
            return stack.pop();
        },
        add: function (obj, event) {
            var top = stack[stack.length - 1];
            if (top && top.ignore === 0) {
                if (top.traps) {
                    top.traps.push([
                        obj,
                        event
                    ]);
                } else {
                    if (event === undefined) {
                        top.valueDependencies.add(obj);
                    } else {
                        var eventSet = top.keyDependencies.get(obj);
                        if (!eventSet) {
                            eventSet = new Set();
                            top.keyDependencies.set(obj, eventSet);
                        }
                        eventSet.add(event);
                    }
                }
            }
        },
        addMany: function (observes) {
            var top = stack[stack.length - 1];
            if (top) {
                if (top.traps) {
                    top.traps.push.apply(top.traps, observes);
                } else {
                    for (var i = 0, len = observes.length; i < len; i++) {
                        this.add(observes[i][0], observes[i][1]);
                    }
                }
            }
        },
        created: function (obs) {
            var top = stack[stack.length - 1];
            if (top) {
                top.childDependencies.add(obs);
                if (obs[addParentSymbol]) {
                    obs[addParentSymbol](top);
                }
            }
        },
        ignore: function (fn) {
            return function () {
                if (stack.length) {
                    var top = stack[stack.length - 1];
                    top.ignore++;
                    var res = fn.apply(this, arguments);
                    top.ignore--;
                    return res;
                } else {
                    return fn.apply(this, arguments);
                }
            };
        },
        peekValue: function (value) {
            if (!value || !value[getValueSymbol]) {
                return value;
            }
            if (stack.length) {
                var top = stack[stack.length - 1];
                top.ignore++;
                var res = value[getValueSymbol]();
                top.ignore--;
                return res;
            } else {
                return value[getValueSymbol]();
            }
        },
        isRecording: function () {
            var len = stack.length;
            var last = len && stack[len - 1];
            return last && last.ignore === 0 && last;
        },
        makeDependenciesRecord: function (name) {
            return {
                traps: null,
                keyDependencies: new Map(),
                valueDependencies: new Set(),
                ignore: 0,
                name: name
            };
        },
        makeDependenciesRecorder: function () {
            return ObservationRecorder.makeDependenciesRecord();
        },
        trap: function () {
            if (stack.length) {
                var top = stack[stack.length - 1];
                var oldTraps = top.traps;
                var traps = top.traps = [];
                return function () {
                    top.traps = oldTraps;
                    return traps;
                };
            } else {
                return function () {
                    return [];
                };
            }
        },
        trapsCount: function () {
            if (stack.length) {
                var top = stack[stack.length - 1];
                return top.traps.length;
            } else {
                return 0;
            }
        }
    };
    if (namespace.ObservationRecorder) {
        throw new Error('You can\'t have two versions of can-observation-recorder, check your dependencies');
    } else {
        module.exports = namespace.ObservationRecorder = ObservationRecorder;
    }
});
/*can-key-tree@1.2.2#can-key-tree*/
define('can-key-tree@1.2.2#can-key-tree', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var reflect = require('can-reflect');
    function isBuiltInPrototype(obj) {
        if (obj === Object.prototype) {
            return true;
        }
        var protoString = Object.prototype.toString.call(obj);
        var isNotObjObj = protoString !== '[object Object]';
        var isObjSomething = protoString.indexOf('[object ') !== -1;
        return isNotObjObj && isObjSomething;
    }
    function getDeepSize(root, level) {
        if (level === 0) {
            return reflect.size(root);
        } else if (reflect.size(root) === 0) {
            return 0;
        } else {
            var count = 0;
            reflect.each(root, function (value) {
                count += getDeepSize(value, level - 1);
            });
            return count;
        }
    }
    function getDeep(node, items, depth, maxDepth) {
        if (!node) {
            return;
        }
        if (maxDepth === depth) {
            if (reflect.isMoreListLikeThanMapLike(node)) {
                reflect.addValues(items, reflect.toArray(node));
            } else {
                throw new Error('can-key-tree: Map-type leaf containers are not supported yet.');
            }
        } else {
            reflect.each(node, function (value) {
                getDeep(value, items, depth + 1, maxDepth);
            });
        }
    }
    function clearDeep(node, keys, maxDepth, deleteHandler) {
        if (maxDepth === keys.length) {
            if (reflect.isMoreListLikeThanMapLike(node)) {
                var valuesToRemove = reflect.toArray(node);
                if (deleteHandler) {
                    valuesToRemove.forEach(function (value) {
                        deleteHandler.apply(null, keys.concat(value));
                    });
                }
                reflect.removeValues(node, valuesToRemove);
            } else {
                throw new Error('can-key-tree: Map-type leaf containers are not supported yet.');
            }
        } else {
            reflect.each(node, function (value, key) {
                clearDeep(value, keys.concat(key), maxDepth, deleteHandler);
                reflect.deleteKeyValue(node, key);
            });
        }
    }
    var KeyTree = function (treeStructure, callbacks) {
        var FirstConstructor = treeStructure[0];
        if (reflect.isConstructorLike(FirstConstructor)) {
            this.root = new FirstConstructor();
        } else {
            this.root = FirstConstructor;
        }
        this.callbacks = callbacks || {};
        this.treeStructure = treeStructure;
        this.empty = true;
    };
    reflect.assign(KeyTree.prototype, {
        add: function (keys) {
            if (keys.length > this.treeStructure.length) {
                throw new Error('can-key-tree: Can not add path deeper than tree.');
            }
            var place = this.root;
            var rootWasEmpty = this.empty === true;
            for (var i = 0; i < keys.length - 1; i++) {
                var key = keys[i];
                var childNode = reflect.getKeyValue(place, key);
                if (!childNode) {
                    var Constructor = this.treeStructure[i + 1];
                    if (isBuiltInPrototype(Constructor.prototype)) {
                        childNode = new Constructor();
                    } else {
                        childNode = new Constructor(key);
                    }
                    reflect.setKeyValue(place, key, childNode);
                }
                place = childNode;
            }
            if (reflect.isMoreListLikeThanMapLike(place)) {
                reflect.addValues(place, [keys[keys.length - 1]]);
            } else {
                throw new Error('can-key-tree: Map types are not supported yet.');
            }
            if (rootWasEmpty) {
                this.empty = false;
                if (this.callbacks.onFirst) {
                    this.callbacks.onFirst.call(this);
                }
            }
            return this;
        },
        getNode: function (keys) {
            var node = this.root;
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                node = reflect.getKeyValue(node, key);
                if (!node) {
                    return;
                }
            }
            return node;
        },
        get: function (keys) {
            var node = this.getNode(keys);
            if (this.treeStructure.length === keys.length) {
                return node;
            } else {
                var Type = this.treeStructure[this.treeStructure.length - 1];
                var items = new Type();
                getDeep(node, items, keys.length, this.treeStructure.length - 1);
                return items;
            }
        },
        delete: function (keys, deleteHandler) {
            var parentNode = this.root, path = [this.root], lastKey = keys[keys.length - 1];
            for (var i = 0; i < keys.length - 1; i++) {
                var key = keys[i];
                var childNode = reflect.getKeyValue(parentNode, key);
                if (childNode === undefined) {
                    return false;
                } else {
                    path.push(childNode);
                }
                parentNode = childNode;
            }
            if (!keys.length) {
                clearDeep(parentNode, [], this.treeStructure.length - 1, deleteHandler);
            } else if (keys.length === this.treeStructure.length) {
                if (reflect.isMoreListLikeThanMapLike(parentNode)) {
                    if (deleteHandler) {
                        deleteHandler.apply(null, keys.concat(lastKey));
                    }
                    reflect.removeValues(parentNode, [lastKey]);
                } else {
                    throw new Error('can-key-tree: Map types are not supported yet.');
                }
            } else {
                var nodeToRemove = reflect.getKeyValue(parentNode, lastKey);
                if (nodeToRemove !== undefined) {
                    clearDeep(nodeToRemove, keys, this.treeStructure.length - 1, deleteHandler);
                    reflect.deleteKeyValue(parentNode, lastKey);
                } else {
                    return false;
                }
            }
            for (i = path.length - 2; i >= 0; i--) {
                if (reflect.size(parentNode) === 0) {
                    parentNode = path[i];
                    reflect.deleteKeyValue(parentNode, keys[i]);
                } else {
                    break;
                }
            }
            if (reflect.size(this.root) === 0) {
                this.empty = true;
                if (this.callbacks.onEmpty) {
                    this.callbacks.onEmpty.call(this);
                }
            }
            return true;
        },
        size: function () {
            return getDeepSize(this.root, this.treeStructure.length - 1);
        },
        isEmpty: function () {
            return this.empty;
        }
    });
    module.exports = KeyTree;
});
/*can-define-lazy-value@1.1.1#define-lazy-value*/
define('can-define-lazy-value@1.1.1#define-lazy-value', function (require, exports, module) {
    'use strict';
    module.exports = function defineLazyValue(obj, prop, initializer, writable) {
        Object.defineProperty(obj, prop, {
            configurable: true,
            get: function () {
                Object.defineProperty(this, prop, {
                    value: undefined,
                    writable: true
                });
                var value = initializer.call(this, obj, prop);
                Object.defineProperty(this, prop, {
                    value: value,
                    writable: !!writable
                });
                return value;
            },
            set: function (value) {
                Object.defineProperty(this, prop, {
                    value: value,
                    writable: !!writable
                });
                return value;
            }
        });
    };
});
/*can-event-queue@1.1.6#dependency-record/merge*/
define('can-event-queue@1.1.6#dependency-record/merge', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var mergeValueDependencies = function mergeValueDependencies(obj, source) {
        var sourceValueDeps = source.valueDependencies;
        if (sourceValueDeps) {
            var destValueDeps = obj.valueDependencies;
            if (!destValueDeps) {
                destValueDeps = new Set();
                obj.valueDependencies = destValueDeps;
            }
            canReflect.eachIndex(sourceValueDeps, function (dep) {
                destValueDeps.add(dep);
            });
        }
    };
    var mergeKeyDependencies = function mergeKeyDependencies(obj, source) {
        var sourcekeyDeps = source.keyDependencies;
        if (sourcekeyDeps) {
            var destKeyDeps = obj.keyDependencies;
            if (!destKeyDeps) {
                destKeyDeps = new Map();
                obj.keyDependencies = destKeyDeps;
            }
            canReflect.eachKey(sourcekeyDeps, function (keys, obj) {
                var entry = destKeyDeps.get(obj);
                if (!entry) {
                    entry = new Set();
                    destKeyDeps.set(obj, entry);
                }
                canReflect.eachIndex(keys, function (key) {
                    entry.add(key);
                });
            });
        }
    };
    module.exports = function mergeDependencyRecords(object, source) {
        mergeKeyDependencies(object, source);
        mergeValueDependencies(object, source);
        return object;
    };
});
/*can-event-queue@1.1.6#value/value*/
define('can-event-queue@1.1.6#value/value', [
    'require',
    'exports',
    'module',
    'can-queues',
    'can-key-tree',
    'can-reflect',
    'can-define-lazy-value',
    '../dependency-record/merge'
], function (require, exports, module) {
    'use strict';
    var queues = require('can-queues');
    var KeyTree = require('can-key-tree');
    var canReflect = require('can-reflect');
    var defineLazyValue = require('can-define-lazy-value');
    var mergeDependencyRecords = require('../dependency-record/merge');
    var properties = {
        on: function (handler, queue) {
            this.handlers.add([
                queue || 'mutate',
                handler
            ]);
        },
        off: function (handler, queueName) {
            if (handler === undefined) {
                if (queueName === undefined) {
                    this.handlers.delete([]);
                } else {
                    this.handlers.delete([queueName]);
                }
            } else {
                this.handlers.delete([
                    queueName || 'mutate',
                    handler
                ]);
            }
        }
    };
    var symbols = {
        'can.onValue': properties.on,
        'can.offValue': properties.off,
        'can.dispatch': function (value, old) {
            var queuesArgs = [];
            queuesArgs = [
                this.handlers.getNode([]),
                this,
                [
                    value,
                    old
                ]
            ];
            if (process.env.NODE_ENV !== 'production') {
                queuesArgs = [
                    this.handlers.getNode([]),
                    this,
                    [
                        value,
                        old
                    ],
                    null,
                    [
                        canReflect.getName(this),
                        'changed to',
                        value,
                        'from',
                        old
                    ]
                ];
            }
            queues.enqueueByQueue.apply(queues, queuesArgs);
            if (process.env.NODE_ENV !== 'production') {
                if (typeof this._log === 'function') {
                    this._log(old, value);
                }
            }
        },
        'can.getWhatIChange': function getWhatIChange() {
            if (process.env.NODE_ENV !== 'production') {
                var whatIChange = {};
                var notifyHandlers = this.handlers.get(['notify']);
                var mutateHandlers = [].concat(this.handlers.get(['mutate']), this.handlers.get(['domUI']));
                if (notifyHandlers.length) {
                    notifyHandlers.forEach(function (handler) {
                        var changes = canReflect.getChangesDependencyRecord(handler);
                        if (changes) {
                            var record = whatIChange.derive;
                            if (!record) {
                                record = whatIChange.derive = {};
                            }
                            mergeDependencyRecords(record, changes);
                        }
                    });
                }
                if (mutateHandlers.length) {
                    mutateHandlers.forEach(function (handler) {
                        var changes = canReflect.getChangesDependencyRecord(handler);
                        if (changes) {
                            var record = whatIChange.mutate;
                            if (!record) {
                                record = whatIChange.mutate = {};
                            }
                            mergeDependencyRecords(record, changes);
                        }
                    });
                }
                return Object.keys(whatIChange).length ? whatIChange : undefined;
            }
        },
        'can.isBound': function isBound() {
            return !this.handlers.isEmpty();
        }
    };
    function defineLazyHandlers() {
        return new KeyTree([
            Object,
            Array
        ], {
            onFirst: this.onBound !== undefined && this.onBound.bind(this),
            onEmpty: this.onUnbound !== undefined && this.onUnbound.bind(this)
        });
    }
    var mixinValueEventBindings = function (obj) {
        canReflect.assign(obj, properties);
        canReflect.assignSymbols(obj, symbols);
        defineLazyValue(obj, 'handlers', defineLazyHandlers, true);
        return obj;
    };
    mixinValueEventBindings.addHandlers = function (obj, callbacks) {
        console.warn('can-event-queue/value: Avoid using addHandlers. Add onBound and onUnbound methods instead.');
        obj.handlers = new KeyTree([
            Object,
            Array
        ], callbacks);
        return obj;
    };
    module.exports = mixinValueEventBindings;
});
/*can-observation@4.1.3#recorder-dependency-helpers*/
define('can-observation@4.1.3#recorder-dependency-helpers', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    function addNewKeyDependenciesIfNotInOld(event) {
        if (this.oldEventSet === undefined || this.oldEventSet['delete'](event) === false) {
            canReflect.onKeyValue(this.observable, event, this.onDependencyChange, 'notify');
        }
    }
    function addObservablesNewKeyDependenciesIfNotInOld(eventSet, observable) {
        eventSet.forEach(addNewKeyDependenciesIfNotInOld, {
            onDependencyChange: this.onDependencyChange,
            observable: observable,
            oldEventSet: this.oldDependencies.keyDependencies.get(observable)
        });
    }
    function removeKeyDependencies(event) {
        canReflect.offKeyValue(this.observable, event, this.onDependencyChange, 'notify');
    }
    function removeObservablesKeyDependencies(oldEventSet, observable) {
        oldEventSet.forEach(removeKeyDependencies, {
            onDependencyChange: this.onDependencyChange,
            observable: observable
        });
    }
    function addValueDependencies(observable) {
        if (this.oldDependencies.valueDependencies.delete(observable) === false) {
            canReflect.onValue(observable, this.onDependencyChange, 'notify');
        }
    }
    function removeValueDependencies(observable) {
        canReflect.offValue(observable, this.onDependencyChange, 'notify');
    }
    module.exports = {
        updateObservations: function (observationData) {
            observationData.newDependencies.keyDependencies.forEach(addObservablesNewKeyDependenciesIfNotInOld, observationData);
            observationData.oldDependencies.keyDependencies.forEach(removeObservablesKeyDependencies, observationData);
            observationData.newDependencies.valueDependencies.forEach(addValueDependencies, observationData);
            observationData.oldDependencies.valueDependencies.forEach(removeValueDependencies, observationData);
        },
        stopObserving: function (observationReciever, onDependencyChange) {
            observationReciever.keyDependencies.forEach(removeObservablesKeyDependencies, { onDependencyChange: onDependencyChange });
            observationReciever.valueDependencies.forEach(removeValueDependencies, { onDependencyChange: onDependencyChange });
        }
    };
});
/*can-observation@4.1.3#temporarily-bind*/
define('can-observation@4.1.3#temporarily-bind', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var temporarilyBoundNoOperation = function () {
    };
    var observables;
    var unbindTemporarilyBoundValue = function () {
        for (var i = 0, len = observables.length; i < len; i++) {
            canReflect.offValue(observables[i], temporarilyBoundNoOperation);
        }
        observables = null;
    };
    function temporarilyBind(compute) {
        var computeInstance = compute.computeInstance || compute;
        canReflect.onValue(computeInstance, temporarilyBoundNoOperation);
        if (!observables) {
            observables = [];
            setTimeout(unbindTemporarilyBoundValue, 10);
        }
        observables.push(computeInstance);
    }
    module.exports = temporarilyBind;
});
/*can-observation@4.1.3#can-observation*/
define('can-observation@4.1.3#can-observation', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-reflect',
    'can-queues',
    'can-observation-recorder',
    'can-symbol',
    'can-log/dev/dev',
    'can-event-queue/value/value',
    './recorder-dependency-helpers',
    './temporarily-bind'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var namespace = require('can-namespace');
        var canReflect = require('can-reflect');
        var queues = require('can-queues');
        var ObservationRecorder = require('can-observation-recorder');
        var canSymbol = require('can-symbol');
        var dev = require('can-log/dev/dev');
        var valueEventBindings = require('can-event-queue/value/value');
        var recorderHelpers = require('./recorder-dependency-helpers');
        var temporarilyBind = require('./temporarily-bind');
        var dispatchSymbol = canSymbol.for('can.dispatch');
        var getChangesSymbol = canSymbol.for('can.getChangesDependencyRecord');
        var getValueDependenciesSymbol = canSymbol.for('can.getValueDependencies');
        function Observation(func, context, options) {
            this.func = func;
            this.context = context;
            this.options = options || {
                priority: 0,
                isObservable: true
            };
            this.bound = false;
            this._value = undefined;
            this.newDependencies = ObservationRecorder.makeDependenciesRecord();
            this.oldDependencies = null;
            var self = this;
            this.onDependencyChange = function (newVal) {
                self.dependencyChange(this, newVal);
            };
            this.update = this.update.bind(this);
            if (process.env.NODE_ENV !== 'production') {
                this.onDependencyChange[getChangesSymbol] = function getChanges() {
                    var s = new Set();
                    s.add(self);
                    return { valueDependencies: s };
                };
                Object.defineProperty(this.onDependencyChange, 'name', { value: canReflect.getName(this) + '.onDependencyChange' });
                Object.defineProperty(this.update, 'name', { value: canReflect.getName(this) + '.update' });
                this._name = canReflect.getName(this);
            }
        }
        valueEventBindings(Observation.prototype);
        canReflect.assign(Observation.prototype, {
            onBound: function () {
                this.bound = true;
                this.oldDependencies = this.newDependencies;
                ObservationRecorder.start(this._name);
                this._value = this.func.call(this.context);
                this.newDependencies = ObservationRecorder.stop();
                recorderHelpers.updateObservations(this);
            },
            dependencyChange: function (context, args) {
                if (this.bound === true) {
                    var queuesArgs = [];
                    queuesArgs = [
                        this.update,
                        this,
                        [],
                        { priority: this.options.priority }
                    ];
                    if (process.env.NODE_ENV !== 'production') {
                        queuesArgs = [
                            this.update,
                            this,
                            [],
                            {
                                priority: this.options.priority,
                                log: [canReflect.getName(this.update)]
                            },
                            [
                                canReflect.getName(context),
                                'changed'
                            ]
                        ];
                    }
                    queues.deriveQueue.enqueue.apply(queues.deriveQueue, queuesArgs);
                }
            },
            update: function () {
                if (this.bound === true) {
                    var oldValue = this._value;
                    this.oldValue = null;
                    this.onBound();
                    if (oldValue !== this._value) {
                        this[dispatchSymbol](this._value, oldValue);
                    }
                }
            },
            onUnbound: function () {
                this.bound = false;
                recorderHelpers.stopObserving(this.newDependencies, this.onDependencyChange);
                this.newDependencies = ObservationRecorder.makeDependenciesRecord();
            },
            get: function () {
                if (this.options.isObservable && ObservationRecorder.isRecording()) {
                    ObservationRecorder.add(this);
                    if (this.bound === false) {
                        Observation.temporarilyBind(this);
                    }
                }
                if (this.bound === true) {
                    if (queues.deriveQueue.tasksRemainingCount() > 0) {
                        Observation.updateChildrenAndSelf(this);
                    }
                    return this._value;
                } else {
                    return this.func.call(this.context);
                }
            },
            hasDependencies: function () {
                var newDependencies = this.newDependencies;
                return this.bound ? newDependencies.valueDependencies.size + newDependencies.keyDependencies.size > 0 : undefined;
            },
            log: function () {
                if (process.env.NODE_ENV !== 'production') {
                    var quoteString = function quoteString(x) {
                        return typeof x === 'string' ? JSON.stringify(x) : x;
                    };
                    this._log = function (previous, current) {
                        dev.log(canReflect.getName(this), '\n is  ', quoteString(current), '\n was ', quoteString(previous));
                    };
                }
            }
        });
        Object.defineProperty(Observation.prototype, 'value', {
            get: function () {
                return this.get();
            }
        });
        var observationProto = {
            'can.getValue': Observation.prototype.get,
            'can.isValueLike': true,
            'can.isMapLike': false,
            'can.isListLike': false,
            'can.valueHasDependencies': Observation.prototype.hasDependencies,
            'can.getValueDependencies': function () {
                if (this.bound === true) {
                    var deps = this.newDependencies, result = {};
                    if (deps.keyDependencies.size) {
                        result.keyDependencies = deps.keyDependencies;
                    }
                    if (deps.valueDependencies.size) {
                        result.valueDependencies = deps.valueDependencies;
                    }
                    return result;
                }
                return undefined;
            },
            'can.getPriority': function () {
                return this.options.priority;
            },
            'can.setPriority': function (priority) {
                this.options.priority = priority;
            }
        };
        if (process.env.NODE_ENV !== 'production') {
            observationProto['can.getName'] = function () {
                return canReflect.getName(this.constructor) + '<' + canReflect.getName(this.func) + '>';
            };
        }
        canReflect.assignSymbols(Observation.prototype, observationProto);
        Observation.updateChildrenAndSelf = function (observation) {
            if (observation.update !== undefined && queues.deriveQueue.isEnqueued(observation.update) === true) {
                queues.deriveQueue.flushQueuedTask(observation.update);
                return true;
            }
            if (observation[getValueDependenciesSymbol]) {
                var childHasChanged = false;
                var valueDependencies = observation[getValueDependenciesSymbol]().valueDependencies || [];
                valueDependencies.forEach(function (observable) {
                    if (Observation.updateChildrenAndSelf(observable) === true) {
                        childHasChanged = true;
                    }
                });
                return childHasChanged;
            } else {
                return false;
            }
        };
        var alias = { addAll: 'addMany' };
        [
            'add',
            'addAll',
            'ignore',
            'trap',
            'trapsCount',
            'isRecording'
        ].forEach(function (methodName) {
            Observation[methodName] = function () {
                var name = alias[methodName] ? alias[methodName] : methodName;
                console.warn('can-observation: Call ' + name + '() on can-observation-recorder.');
                return ObservationRecorder[name].apply(this, arguments);
            };
        });
        Observation.prototype.start = function () {
            console.warn('can-observation: Use .on and .off to bind.');
            return this.onBound();
        };
        Observation.prototype.stop = function () {
            console.warn('can-observation: Use .on and .off to bind.');
            return this.onUnbound();
        };
        Observation.temporarilyBind = temporarilyBind;
        module.exports = namespace.Observation = Observation;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-diff@1.4.5#list/list*/
define('can-diff@1.4.5#list/list', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var slice = [].slice;
    function defaultIdentity(a, b) {
        return a === b;
    }
    function makeIdentityFromMapSchema(typeSchema) {
        if (typeSchema.identity && typeSchema.identity.length) {
            return function identityCheck(a, b) {
                var aId = canReflect.getIdentity(a, typeSchema), bId = canReflect.getIdentity(b, typeSchema);
                return aId === bId;
            };
        } else {
            return defaultIdentity;
        }
    }
    function makeIdentityFromListSchema(listSchema) {
        return listSchema.values != null ? makeIdentityFromMapSchema(canReflect.getSchema(listSchema.values)) : defaultIdentity;
    }
    function makeIdentity(oldList, oldListLength) {
        var listSchema = canReflect.getSchema(oldList), typeSchema;
        if (listSchema != null) {
            if (listSchema.values != null) {
                typeSchema = canReflect.getSchema(listSchema.values);
            } else {
                return defaultIdentity;
            }
        }
        if (typeSchema == null && oldListLength > 0) {
            typeSchema = canReflect.getSchema(canReflect.getKeyValue(oldList, 0));
        }
        if (typeSchema) {
            return makeIdentityFromMapSchema(typeSchema);
        } else {
            return defaultIdentity;
        }
    }
    function reverseDiff(oldDiffStopIndex, newDiffStopIndex, oldList, newList, identity) {
        var oldIndex = oldList.length - 1, newIndex = newList.length - 1;
        while (oldIndex > oldDiffStopIndex && newIndex > newDiffStopIndex) {
            var oldItem = oldList[oldIndex], newItem = newList[newIndex];
            if (identity(oldItem, newItem, oldIndex)) {
                oldIndex--;
                newIndex--;
                continue;
            } else {
                return [{
                        type: 'splice',
                        index: newDiffStopIndex,
                        deleteCount: oldIndex - oldDiffStopIndex + 1,
                        insert: slice.call(newList, newDiffStopIndex, newIndex + 1)
                    }];
            }
        }
        return [{
                type: 'splice',
                index: newDiffStopIndex,
                deleteCount: oldIndex - oldDiffStopIndex + 1,
                insert: slice.call(newList, newDiffStopIndex, newIndex + 1)
            }];
    }
    module.exports = function (oldList, newList, schemaOrIdentity) {
        var oldIndex = 0, newIndex = 0, oldLength = canReflect.size(oldList), newLength = canReflect.size(newList), patches = [];
        var schemaType = typeof schemaOrIdentity, identity;
        if (schemaType === 'function') {
            identity = schemaOrIdentity;
        } else if (schemaOrIdentity != null) {
            if (schemaOrIdentity.type === 'map') {
                identity = makeIdentityFromMapSchema(schemaOrIdentity);
            } else {
                identity = makeIdentityFromListSchema(schemaOrIdentity);
            }
        } else {
            identity = makeIdentity(oldList, oldLength);
        }
        while (oldIndex < oldLength && newIndex < newLength) {
            var oldItem = oldList[oldIndex], newItem = newList[newIndex];
            if (identity(oldItem, newItem, oldIndex)) {
                oldIndex++;
                newIndex++;
                continue;
            }
            if (newIndex + 1 < newLength && identity(oldItem, newList[newIndex + 1], oldIndex)) {
                patches.push({
                    index: newIndex,
                    deleteCount: 0,
                    insert: [newList[newIndex]],
                    type: 'splice'
                });
                oldIndex++;
                newIndex += 2;
                continue;
            } else if (oldIndex + 1 < oldLength && identity(oldList[oldIndex + 1], newItem, oldIndex + 1)) {
                patches.push({
                    index: newIndex,
                    deleteCount: 1,
                    insert: [],
                    type: 'splice'
                });
                oldIndex += 2;
                newIndex++;
                continue;
            } else {
                patches.push.apply(patches, reverseDiff(oldIndex, newIndex, oldList, newList, identity));
                return patches;
            }
        }
        if (newIndex === newLength && oldIndex === oldLength) {
            return patches;
        }
        patches.push({
            type: 'splice',
            index: newIndex,
            deleteCount: oldLength - oldIndex,
            insert: slice.call(newList, newIndex)
        });
        return patches;
    };
});
/*can-diff@1.4.5#merge-deep/merge-deep*/
define('can-diff@1.4.5#merge-deep/merge-deep', [
    'require',
    'exports',
    'module',
    'can-reflect',
    '../list/list'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var diffList = require('../list/list');
    function smartMerge(instance, props) {
        props = canReflect.serialize(props);
        if (canReflect.isMoreListLikeThanMapLike(instance)) {
            mergeList(instance, props);
        } else {
            mergeMap(instance, props);
        }
        return instance;
    }
    function mergeMap(instance, data) {
        canReflect.eachKey(instance, function (value, prop) {
            if (!canReflect.hasKey(data, prop)) {
                canReflect.deleteKeyValue(instance, prop);
                return;
            }
            var newValue = canReflect.getKeyValue(data, prop);
            canReflect.deleteKeyValue(data, prop);
            if (canReflect.isPrimitive(value)) {
                canReflect.setKeyValue(instance, prop, newValue);
                return;
            }
            var newValueIsList = Array.isArray(newValue), currentValueIsList = canReflect.isMoreListLikeThanMapLike(value);
            if (currentValueIsList && newValueIsList) {
                mergeList(value, newValue);
            } else if (!newValueIsList && !currentValueIsList && canReflect.isMapLike(value) && canReflect.isPlainObject(newValue)) {
                var schema = canReflect.getSchema(value);
                if (schema && schema.identity && schema.identity.length) {
                    var id = canReflect.getIdentity(value, schema);
                    if (id != null && id === canReflect.getIdentity(newValue, schema)) {
                        mergeMap(value, newValue);
                        return;
                    }
                }
                canReflect.setKeyValue(instance, prop, canReflect.new(value.constructor, newValue));
            } else {
                canReflect.setKeyValue(instance, prop, newValue);
            }
        });
        canReflect.eachKey(data, function (value, prop) {
            canReflect.setKeyValue(instance, prop, value);
        });
    }
    function mergeList(list, data) {
        var ItemType, itemSchema;
        var listSchema = canReflect.getSchema(list);
        if (listSchema) {
            ItemType = listSchema.values;
        }
        if (ItemType) {
            itemSchema = canReflect.getSchema(ItemType);
        }
        if (!itemSchema && canReflect.size(list) > 0) {
            itemSchema = canReflect.getSchema(canReflect.getKeyValue(list, 0));
        }
        var identity;
        if (itemSchema && itemSchema.identity && itemSchema.identity.length) {
            identity = function (a, b) {
                var aId = canReflect.getIdentity(a, itemSchema), bId = canReflect.getIdentity(b, itemSchema);
                var eq = aId === bId;
                if (eq) {
                    mergeMap(a, b);
                }
                return eq;
            };
        } else {
            identity = function (a, b) {
                var eq = a === b;
                if (eq) {
                    if (!canReflect.isPrimitive(a)) {
                        mergeMap(a, b);
                    }
                }
                return eq;
            };
        }
        var patches = diffList(list, data, identity);
        var hydrate = ItemType ? canReflect.new.bind(canReflect, ItemType) : function (v) {
            return v;
        };
        if (!patches.length) {
            return list;
        }
        patches.forEach(function (patch) {
            applyPatch(list, patch, hydrate);
        });
    }
    function applyPatch(list, patch, makeInstance) {
        var insert = makeInstance && patch.insert.map(function (val) {
            return makeInstance(val);
        }) || patch.insert;
        var args = [
            patch.index,
            patch.deleteCount
        ].concat(insert);
        list.splice.apply(list, args);
        return list;
    }
    smartMerge.applyPatch = applyPatch;
    module.exports = smartMerge;
});
/*can-debug@2.0.7#can-debug*/
define('can-debug@2.0.7#can-debug', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-globals',
    './src/proxy-namespace',
    './src/temporarily-bind',
    './src/get-graph/get-graph',
    './src/format-graph/format-graph',
    './src/what-i-change/what-i-change',
    './src/what-changes-me/what-changes-me',
    './src/get-what-i-change/get-what-i-change',
    './src/get-what-changes-me/get-what-changes-me',
    'can-observation',
    'can-symbol',
    'can-reflect',
    'can-queues',
    'can-diff/merge-deep/merge-deep'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var namespace = require('can-namespace');
        var globals = require('can-globals');
        var proxyNamespace = require('./src/proxy-namespace');
        var temporarilyBind = require('./src/temporarily-bind');
        var getGraph = require('./src/get-graph/get-graph');
        var formatGraph = require('./src/format-graph/format-graph');
        var logWhatIChange = require('./src/what-i-change/what-i-change');
        var logWhatChangesMe = require('./src/what-changes-me/what-changes-me');
        var getWhatIChange = require('./src/get-what-i-change/get-what-i-change');
        var getWhatChangesMe = require('./src/get-what-changes-me/get-what-changes-me');
        var Observation = require('can-observation');
        var canSymbol = require('can-symbol');
        var canReflect = require('can-reflect');
        var canQueues = require('can-queues');
        var mergeDeep = require('can-diff/merge-deep/merge-deep');
        var global = globals.getKeyValue('global');
        var devtoolsRegistrationComplete = false;
        function registerWithDevtools() {
            if (devtoolsRegistrationComplete) {
                return;
            }
            var devtoolsGlobalName = '__CANJS_DEVTOOLS__';
            var devtoolsCanModules = {
                Observation: Observation,
                Reflect: canReflect,
                Symbol: canSymbol,
                formatGraph: namespace.debug.formatGraph,
                getGraph: namespace.debug.getGraph,
                mergeDeep: mergeDeep,
                queues: canQueues
            };
            if (global[devtoolsGlobalName]) {
                global[devtoolsGlobalName].register(devtoolsCanModules);
            } else {
                Object.defineProperty(global, devtoolsGlobalName, {
                    set: function (devtoolsGlobal) {
                        Object.defineProperty(global, devtoolsGlobalName, { value: devtoolsGlobal });
                        devtoolsGlobal.register(devtoolsCanModules);
                    },
                    configurable: true
                });
            }
            devtoolsRegistrationComplete = true;
        }
        module.exports = function () {
            namespace.debug = {
                formatGraph: temporarilyBind(formatGraph),
                getGraph: temporarilyBind(getGraph),
                getWhatIChange: temporarilyBind(getWhatIChange),
                getWhatChangesMe: temporarilyBind(getWhatChangesMe),
                logWhatIChange: temporarilyBind(logWhatIChange),
                logWhatChangesMe: temporarilyBind(logWhatChangesMe)
            };
            registerWithDevtools();
            global.can = typeof Proxy !== 'undefined' ? proxyNamespace(namespace) : namespace;
            return namespace.debug;
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can@5.31.0#es/can-debug*/
define('can@5.31.0#es/can-debug', [
    'exports',
    'can-debug'
], function (exports, _canDebug) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canDebug).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#enable-can-debug*/
define('can@5.31.0#enable-can-debug', ['./es/can-debug'], function (_canDebug) {
    'use strict';
    var _canDebug2 = _interopRequireDefault(_canDebug);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    if (process.env.NODE_ENV !== 'production') {
        (0, _canDebug2.default)();
    }
});
/*can-simple-observable@2.4.2#log*/
define('can-simple-observable@2.4.2#log', [
    'require',
    'exports',
    'module',
    'can-log/dev/dev',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var dev = require('can-log/dev/dev');
    var canReflect = require('can-reflect');
    function quoteString(x) {
        return typeof x === 'string' ? JSON.stringify(x) : x;
    }
    module.exports = function log() {
        if (process.env.NODE_ENV !== 'production') {
            this._log = function (previous, current) {
                dev.log(canReflect.getName(this), '\n is  ', quoteString(current), '\n was ', quoteString(previous));
            };
        }
    };
});
/*can-simple-observable@2.4.2#can-simple-observable*/
define('can-simple-observable@2.4.2#can-simple-observable', [
    'require',
    'exports',
    'module',
    './log',
    'can-namespace',
    'can-symbol',
    'can-reflect',
    'can-observation-recorder',
    'can-event-queue/value/value'
], function (require, exports, module) {
    'use strict';
    var log = require('./log');
    var ns = require('can-namespace');
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    var ObservationRecorder = require('can-observation-recorder');
    var valueEventBindings = require('can-event-queue/value/value');
    var dispatchSymbol = canSymbol.for('can.dispatch');
    function SimpleObservable(initialValue) {
        this._value = initialValue;
    }
    valueEventBindings(SimpleObservable.prototype);
    canReflect.assignMap(SimpleObservable.prototype, {
        log: log,
        get: function () {
            ObservationRecorder.add(this);
            return this._value;
        },
        set: function (value) {
            var old = this._value;
            this._value = value;
            this[dispatchSymbol](value, old);
        }
    });
    Object.defineProperty(SimpleObservable.prototype, 'value', {
        set: function (value) {
            return this.set(value);
        },
        get: function () {
            return this.get();
        }
    });
    var simpleObservableProto = {
        'can.getValue': SimpleObservable.prototype.get,
        'can.setValue': SimpleObservable.prototype.set,
        'can.isMapLike': false,
        'can.valueHasDependencies': function () {
            return true;
        }
    };
    if (process.env.NODE_ENV !== 'production') {
        simpleObservableProto['can.getName'] = function () {
            var value = this._value;
            if (typeof value !== 'object' || value === null) {
                value = JSON.stringify(value);
            } else {
                value = '';
            }
            return canReflect.getName(this.constructor) + '<' + value + '>';
        };
    }
    canReflect.assignSymbols(SimpleObservable.prototype, simpleObservableProto);
    module.exports = ns.SimpleObservable = SimpleObservable;
});
/*can-simple-observable@2.4.2#settable/settable*/
define('can-simple-observable@2.4.2#settable/settable', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-observation-recorder',
    '../can-simple-observable',
    'can-observation',
    'can-queues',
    '../log',
    'can-event-queue/value/value'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var ObservationRecorder = require('can-observation-recorder');
    var SimpleObservable = require('../can-simple-observable');
    var Observation = require('can-observation');
    var queues = require('can-queues');
    var log = require('../log');
    var valueEventBindings = require('can-event-queue/value/value');
    var peek = ObservationRecorder.ignore(canReflect.getValue.bind(canReflect));
    function SettableObservable(fn, context, initialValue) {
        this.lastSetValue = new SimpleObservable(initialValue);
        function observe() {
            return fn.call(context, this.lastSetValue.get());
        }
        this.handler = this.handler.bind(this);
        if (process.env.NODE_ENV !== 'production') {
            canReflect.assignSymbols(this, {
                'can.getName': function () {
                    return canReflect.getName(this.constructor) + '<' + canReflect.getName(fn) + '>';
                }
            });
            Object.defineProperty(this.handler, 'name', { value: canReflect.getName(this) + '.handler' });
            Object.defineProperty(observe, 'name', { value: canReflect.getName(fn) + '::' + canReflect.getName(this.constructor) });
        }
        this.observation = new Observation(observe, this);
    }
    valueEventBindings(SettableObservable.prototype);
    canReflect.assignMap(SettableObservable.prototype, {
        log: log,
        constructor: SettableObservable,
        handler: function (newVal) {
            var old = this._value, reasonLog;
            this._value = newVal;
            if (process.env.NODE_ENV !== 'production') {
                if (typeof this._log === 'function') {
                    this._log(old, newVal);
                }
                reasonLog = [
                    canReflect.getName(this),
                    'set to',
                    newVal,
                    'from',
                    old
                ];
            }
            queues.enqueueByQueue(this.handlers.getNode([]), this, [
                newVal,
                old
            ], null, reasonLog);
        },
        onBound: function () {
            if (!this.bound) {
                this.bound = true;
                this.activate();
            }
        },
        activate: function () {
            canReflect.onValue(this.observation, this.handler, 'notify');
            this._value = peek(this.observation);
        },
        onUnbound: function () {
            this.bound = false;
            canReflect.offValue(this.observation, this.handler, 'notify');
        },
        set: function (newVal) {
            var oldVal = this.lastSetValue.get();
            if (canReflect.isObservableLike(oldVal) && canReflect.isValueLike(oldVal) && !canReflect.isObservableLike(newVal)) {
                canReflect.setValue(oldVal, newVal);
            } else {
                if (newVal !== oldVal) {
                    this.lastSetValue.set(newVal);
                }
            }
        },
        get: function () {
            if (ObservationRecorder.isRecording()) {
                ObservationRecorder.add(this);
                if (!this.bound) {
                    this.onBound();
                }
            }
            if (this.bound === true) {
                return this._value;
            } else {
                return this.observation.get();
            }
        },
        hasDependencies: function () {
            return canReflect.valueHasDependencies(this.observation);
        },
        getValueDependencies: function () {
            return canReflect.getValueDependencies(this.observation);
        }
    });
    Object.defineProperty(SettableObservable.prototype, 'value', {
        set: function (value) {
            return this.set(value);
        },
        get: function () {
            return this.get();
        }
    });
    canReflect.assignSymbols(SettableObservable.prototype, {
        'can.getValue': SettableObservable.prototype.get,
        'can.setValue': SettableObservable.prototype.set,
        'can.isMapLike': false,
        'can.getPriority': function () {
            return canReflect.getPriority(this.observation);
        },
        'can.setPriority': function (newPriority) {
            canReflect.setPriority(this.observation, newPriority);
        },
        'can.valueHasDependencies': SettableObservable.prototype.hasDependencies,
        'can.getValueDependencies': SettableObservable.prototype.getValueDependencies
    });
    module.exports = SettableObservable;
});
/*can-simple-observable@2.4.2#async/async*/
define('can-simple-observable@2.4.2#async/async', [
    'require',
    'exports',
    'module',
    '../can-simple-observable',
    'can-observation',
    'can-queues',
    '../settable/settable',
    'can-reflect',
    'can-observation-recorder',
    'can-event-queue/value/value'
], function (require, exports, module) {
    'use strict';
    var SimpleObservable = require('../can-simple-observable');
    var Observation = require('can-observation');
    var queues = require('can-queues');
    var SettableObservable = require('../settable/settable');
    var canReflect = require('can-reflect');
    var ObservationRecorder = require('can-observation-recorder');
    var valueEventBindings = require('can-event-queue/value/value');
    function AsyncObservable(fn, context, initialValue) {
        this.resolve = this.resolve.bind(this);
        this.lastSetValue = new SimpleObservable(initialValue);
        this.handler = this.handler.bind(this);
        function observe() {
            this.resolveCalled = false;
            this.inGetter = true;
            var newVal = fn.call(context, this.lastSetValue.get(), this.bound === true ? this.resolve : undefined);
            this.inGetter = false;
            if (newVal !== undefined) {
                this.resolve(newVal);
            } else if (this.resolveCalled) {
                this.resolve(this._value);
            }
            if (this.bound !== true) {
                return newVal;
            }
        }
        if (process.env.NODE_ENV !== 'production') {
            canReflect.assignSymbols(this, {
                'can.getName': function () {
                    return canReflect.getName(this.constructor) + '<' + canReflect.getName(fn) + '>';
                }
            });
            Object.defineProperty(this.handler, 'name', { value: canReflect.getName(this) + '.handler' });
            Object.defineProperty(observe, 'name', { value: canReflect.getName(fn) + '::' + canReflect.getName(this.constructor) });
        }
        this.observation = new Observation(observe, this);
    }
    AsyncObservable.prototype = Object.create(SettableObservable.prototype);
    AsyncObservable.prototype.constructor = AsyncObservable;
    AsyncObservable.prototype.handler = function (newVal) {
        if (newVal !== undefined) {
            SettableObservable.prototype.handler.apply(this, arguments);
        }
    };
    var peek = ObservationRecorder.ignore(canReflect.getValue.bind(canReflect));
    AsyncObservable.prototype.activate = function () {
        canReflect.onValue(this.observation, this.handler, 'notify');
        if (!this.resolveCalled) {
            this._value = peek(this.observation);
        }
    };
    AsyncObservable.prototype.resolve = function resolve(newVal) {
        this.resolveCalled = true;
        var old = this._value;
        this._value = newVal;
        if (process.env.NODE_ENV !== 'production') {
            if (typeof this._log === 'function') {
                this._log(old, newVal);
            }
        }
        if (!this.inGetter) {
            var queuesArgs = [
                this.handlers.getNode([]),
                this,
                [
                    newVal,
                    old
                ],
                null
            ];
            if (process.env.NODE_ENV !== 'production') {
                queuesArgs = [
                    this.handlers.getNode([]),
                    this,
                    [
                        newVal,
                        old
                    ],
                    null,
                    [
                        canReflect.getName(this),
                        'resolved with',
                        newVal
                    ]
                ];
            }
            queues.enqueueByQueue.apply(queues, queuesArgs);
        }
    };
    module.exports = AsyncObservable;
});
/*can-dom-events@1.3.11#helpers/util*/
define('can-dom-events@1.3.11#helpers/util', [
    'require',
    'exports',
    'module',
    'can-globals/document/document',
    'can-globals/is-browser-window/is-browser-window'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getCurrentDocument = require('can-globals/document/document');
        var isBrowserWindow = require('can-globals/is-browser-window/is-browser-window');
        function getTargetDocument(target) {
            return target.ownerDocument || getCurrentDocument();
        }
        function createEvent(target, eventData, bubbles, cancelable) {
            var doc = getTargetDocument(target);
            var event = doc.createEvent('HTMLEvents');
            var eventType;
            if (typeof eventData === 'string') {
                eventType = eventData;
            } else {
                eventType = eventData.type;
                for (var prop in eventData) {
                    if (event[prop] === undefined) {
                        event[prop] = eventData[prop];
                    }
                }
            }
            if (bubbles === undefined) {
                bubbles = true;
            }
            event.initEvent(eventType, bubbles, cancelable);
            return event;
        }
        function isDomEventTarget(obj) {
            if (!(obj && obj.nodeName)) {
                return obj === window;
            }
            var nodeType = obj.nodeType;
            return nodeType === 1 || nodeType === 9 || nodeType === 11;
        }
        function addDomContext(context, args) {
            if (isDomEventTarget(context)) {
                args = Array.prototype.slice.call(args, 0);
                args.unshift(context);
            }
            return args;
        }
        function removeDomContext(context, args) {
            if (!isDomEventTarget(context)) {
                args = Array.prototype.slice.call(args, 0);
                context = args.shift();
            }
            return {
                context: context,
                args: args
            };
        }
        var fixSyntheticEventsOnDisabled = false;
        (function () {
            if (!isBrowserWindow()) {
                return;
            }
            var testEventName = 'fix_synthetic_events_on_disabled_test';
            var input = document.createElement('input');
            input.disabled = true;
            var timer = setTimeout(function () {
                fixSyntheticEventsOnDisabled = true;
            }, 50);
            var onTest = function onTest() {
                clearTimeout(timer);
                input.removeEventListener(testEventName, onTest);
            };
            input.addEventListener(testEventName, onTest);
            try {
                var event = document.create('HTMLEvents');
                event.initEvent(testEventName, false);
                input.dispatchEvent(event);
            } catch (e) {
                onTest();
                fixSyntheticEventsOnDisabled = true;
            }
        }());
        function isDispatchingOnDisabled(element, event) {
            var eventType = event.type;
            var isInsertedOrRemoved = eventType === 'inserted' || eventType === 'removed';
            var isDisabled = !!element.disabled;
            return isInsertedOrRemoved && isDisabled;
        }
        function forceEnabledForDispatch(element, event) {
            return fixSyntheticEventsOnDisabled && isDispatchingOnDisabled(element, event);
        }
        module.exports = {
            createEvent: createEvent,
            addDomContext: addDomContext,
            removeDomContext: removeDomContext,
            isDomEventTarget: isDomEventTarget,
            getTargetDocument: getTargetDocument,
            forceEnabledForDispatch: forceEnabledForDispatch
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-dom-events@1.3.11#helpers/make-event-registry*/
define('can-dom-events@1.3.11#helpers/make-event-registry', function (require, exports, module) {
    'use strict';
    function EventRegistry() {
        this._registry = {};
    }
    module.exports = function makeEventRegistry() {
        return new EventRegistry();
    };
    EventRegistry.prototype.has = function (eventType) {
        return !!this._registry[eventType];
    };
    EventRegistry.prototype.get = function (eventType) {
        return this._registry[eventType];
    };
    EventRegistry.prototype.add = function (event, eventType) {
        if (!event) {
            throw new Error('An EventDefinition must be provided');
        }
        if (typeof event.addEventListener !== 'function') {
            throw new TypeError('EventDefinition addEventListener must be a function');
        }
        if (typeof event.removeEventListener !== 'function') {
            throw new TypeError('EventDefinition removeEventListener must be a function');
        }
        eventType = eventType || event.defaultEventType;
        if (typeof eventType !== 'string') {
            throw new TypeError('Event type must be a string, not ' + eventType);
        }
        if (this.has(eventType)) {
            throw new Error('Event "' + eventType + '" is already registered');
        }
        this._registry[eventType] = event;
        var self = this;
        return function remove() {
            self._registry[eventType] = undefined;
        };
    };
});
/*can-dom-events@1.3.11#helpers/-make-delegate-event-tree*/
define('can-dom-events@1.3.11#helpers/-make-delegate-event-tree', [
    'require',
    'exports',
    'module',
    'can-key-tree',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var KeyTree = require('can-key-tree');
    var canReflect = require('can-reflect');
    var useCapture = function (eventType) {
        return eventType === 'focus' || eventType === 'blur';
    };
    function makeDelegator(domEvents) {
        var Delegator = function Delegator(parentKey) {
            this.element = parentKey;
            this.events = {};
            this.delegated = {};
        };
        canReflect.assignSymbols(Delegator.prototype, {
            'can.setKeyValue': function (eventType, handlersBySelector) {
                var handler = this.delegated[eventType] = function (ev) {
                    var cur = ev.target;
                    var propagate = true;
                    var origStopPropagation = ev.stopPropagation;
                    ev.stopPropagation = function () {
                        origStopPropagation.apply(this, arguments);
                        propagate = false;
                    };
                    var origStopImmediatePropagation = ev.stopImmediatePropagation;
                    ev.stopImmediatePropagation = function () {
                        origStopImmediatePropagation.apply(this, arguments);
                        propagate = false;
                    };
                    do {
                        var el = cur === document ? document.documentElement : cur;
                        var matches = el.matches || el.msMatchesSelector;
                        canReflect.each(handlersBySelector, function (handlers, selector) {
                            if (matches && matches.call(el, selector)) {
                                handlers.forEach(function (handler) {
                                    handler.call(el, ev);
                                });
                            }
                        });
                        cur = cur.parentNode;
                    } while (cur && cur !== ev.currentTarget && propagate);
                };
                this.events[eventType] = handlersBySelector;
                domEvents.addEventListener(this.element, eventType, handler, useCapture(eventType));
            },
            'can.getKeyValue': function (eventType) {
                return this.events[eventType];
            },
            'can.deleteKeyValue': function (eventType) {
                domEvents.removeEventListener(this.element, eventType, this.delegated[eventType], useCapture(eventType));
                delete this.delegated[eventType];
                delete this.events[eventType];
            },
            'can.getOwnEnumerableKeys': function () {
                return Object.keys(this.events);
            }
        });
        return Delegator;
    }
    module.exports = function makeDelegateEventTree(domEvents) {
        var Delegator = makeDelegator(domEvents);
        return new KeyTree([
            Map,
            Delegator,
            Object,
            Array
        ]);
    };
});
/*can-dom-events@1.3.11#can-dom-events*/
define('can-dom-events@1.3.11#can-dom-events', [
    'require',
    'exports',
    'module',
    'can-namespace',
    './helpers/util',
    './helpers/make-event-registry',
    './helpers/-make-delegate-event-tree'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var namespace = require('can-namespace');
        var util = require('./helpers/util');
        var makeEventRegistry = require('./helpers/make-event-registry');
        var makeDelegateEventTree = require('./helpers/-make-delegate-event-tree');
        var domEvents = {
            _eventRegistry: makeEventRegistry(),
            addEvent: function (event, eventType) {
                return this._eventRegistry.add(event, eventType);
            },
            addEventListener: function (target, eventType) {
                var hasCustomEvent = domEvents._eventRegistry.has(eventType);
                if (hasCustomEvent) {
                    var event = domEvents._eventRegistry.get(eventType);
                    return event.addEventListener.apply(domEvents, arguments);
                }
                var eventArgs = Array.prototype.slice.call(arguments, 1);
                return target.addEventListener.apply(target, eventArgs);
            },
            removeEventListener: function (target, eventType) {
                var hasCustomEvent = domEvents._eventRegistry.has(eventType);
                if (hasCustomEvent) {
                    var event = domEvents._eventRegistry.get(eventType);
                    return event.removeEventListener.apply(domEvents, arguments);
                }
                var eventArgs = Array.prototype.slice.call(arguments, 1);
                return target.removeEventListener.apply(target, eventArgs);
            },
            addDelegateListener: function (root, eventType, selector, handler) {
                domEvents._eventTree.add([
                    root,
                    eventType,
                    selector,
                    handler
                ]);
            },
            removeDelegateListener: function (target, eventType, selector, handler) {
                domEvents._eventTree.delete([
                    target,
                    eventType,
                    selector,
                    handler
                ]);
            },
            dispatch: function (target, eventData, bubbles, cancelable) {
                var event = util.createEvent(target, eventData, bubbles, cancelable);
                var enableForDispatch = util.forceEnabledForDispatch(target, event);
                if (enableForDispatch) {
                    target.disabled = false;
                }
                var ret = target.dispatchEvent(event);
                if (enableForDispatch) {
                    target.disabled = true;
                }
                return ret;
            }
        };
        domEvents._eventTree = makeDelegateEventTree(domEvents);
        module.exports = namespace.domEvents = domEvents;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-event-queue@1.1.6#map/map*/
define('can-event-queue@1.1.6#map/map', [
    'require',
    'exports',
    'module',
    'can-log/dev/dev',
    'can-queues',
    'can-reflect',
    'can-symbol',
    'can-key-tree',
    'can-dom-events',
    'can-dom-events/helpers/util',
    '../dependency-record/merge'
], function (require, exports, module) {
    'use strict';
    var canDev = require('can-log/dev/dev');
    var queues = require('can-queues');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var KeyTree = require('can-key-tree');
    var domEvents = require('can-dom-events');
    var isDomEventTarget = require('can-dom-events/helpers/util').isDomEventTarget;
    var mergeDependencyRecords = require('../dependency-record/merge');
    var metaSymbol = canSymbol.for('can.meta'), dispatchBoundChangeSymbol = canSymbol.for('can.dispatchInstanceBoundChange'), dispatchInstanceOnPatchesSymbol = canSymbol.for('can.dispatchInstanceOnPatches'), onKeyValueSymbol = canSymbol.for('can.onKeyValue'), offKeyValueSymbol = canSymbol.for('can.offKeyValue'), onEventSymbol = canSymbol.for('can.onEvent'), offEventSymbol = canSymbol.for('can.offEvent'), onValueSymbol = canSymbol.for('can.onValue'), offValueSymbol = canSymbol.for('can.offValue'), inSetupSymbol = canSymbol.for('can.initializing');
    var legacyMapBindings;
    function addHandlers(obj, meta) {
        if (!meta.handlers) {
            meta.handlers = new KeyTree([
                Object,
                Object,
                Object,
                Array
            ], {
                onFirst: function () {
                    if (obj._eventSetup !== undefined) {
                        obj._eventSetup();
                    }
                    var constructor = obj.constructor;
                    if (constructor[dispatchBoundChangeSymbol] !== undefined && obj instanceof constructor) {
                        constructor[dispatchBoundChangeSymbol](obj, true);
                    }
                },
                onEmpty: function () {
                    if (obj._eventTeardown !== undefined) {
                        obj._eventTeardown();
                    }
                    var constructor = obj.constructor;
                    if (constructor[dispatchBoundChangeSymbol] !== undefined && obj instanceof constructor) {
                        constructor[dispatchBoundChangeSymbol](obj, false);
                    }
                }
            });
        }
        if (!meta.listenHandlers) {
            meta.listenHandlers = new KeyTree([
                Map,
                Map,
                Object,
                Array
            ]);
        }
    }
    var ensureMeta = function ensureMeta(obj) {
        var meta = obj[metaSymbol];
        if (!meta) {
            meta = {};
            canReflect.setKeyValue(obj, metaSymbol, meta);
        }
        addHandlers(obj, meta);
        return meta;
    };
    function stopListeningArgumentsToKeys(bindTarget, event, handler, queueName) {
        if (arguments.length && canReflect.isPrimitive(bindTarget)) {
            queueName = handler;
            handler = event;
            event = bindTarget;
            bindTarget = this.context;
        }
        if (typeof event === 'function') {
            queueName = handler;
            handler = event;
            event = undefined;
        }
        if (typeof handler === 'string') {
            queueName = handler;
            handler = undefined;
        }
        var keys = [];
        if (bindTarget) {
            keys.push(bindTarget);
            if (event || handler || queueName) {
                keys.push(event);
                if (queueName || handler) {
                    keys.push(queueName || this.defaultQueue);
                    if (handler) {
                        keys.push(handler);
                    }
                }
            }
        }
        return keys;
    }
    var props = {
        dispatch: function (event, args) {
            if (process.env.NODE_ENV !== 'production') {
                if (arguments.length > 4) {
                    canDev.warn('Arguments to dispatch should be an array, not multiple arguments.');
                    args = Array.prototype.slice.call(arguments, 1);
                }
                if (args && !Array.isArray(args)) {
                    canDev.warn('Arguments to dispatch should be an array.');
                    args = [args];
                }
            }
            if (this.__inSetup !== true && this[inSetupSymbol] !== true) {
                if (typeof event === 'string') {
                    event = { type: event };
                }
                var meta = ensureMeta(this);
                if (process.env.NODE_ENV !== 'production') {
                    if (!event.reasonLog) {
                        event.reasonLog = [
                            canReflect.getName(this),
                            'dispatched',
                            '"' + event.type + '"',
                            'with'
                        ].concat(args);
                    }
                }
                if (typeof meta._log === 'function') {
                    meta._log.call(this, event, args);
                }
                var handlers = meta.handlers;
                var handlersByType = event.type !== undefined && handlers.getNode([event.type]);
                var dispatchConstructorPatches = event.patches && this.constructor[dispatchInstanceOnPatchesSymbol];
                var patchesNode = event.patches !== undefined && handlers.getNode([
                    'can.patches',
                    'onKeyValue'
                ]);
                var keysNode = event.keyChanged !== undefined && handlers.getNode([
                    'can.keys',
                    'onKeyValue'
                ]);
                var batch = dispatchConstructorPatches || handlersByType || patchesNode || keysNode;
                if (batch) {
                    queues.batch.start();
                }
                if (handlersByType) {
                    if (handlersByType.onKeyValue) {
                        queues.enqueueByQueue(handlersByType.onKeyValue, this, args, event.makeMeta, event.reasonLog);
                    }
                    if (handlersByType.event) {
                        event.batchNum = queues.batch.number();
                        var eventAndArgs = [event].concat(args);
                        queues.enqueueByQueue(handlersByType.event, this, eventAndArgs, event.makeMeta, event.reasonLog);
                    }
                }
                if (keysNode) {
                    queues.enqueueByQueue(keysNode, this, [event.keyChanged], event.makeMeta, event.reasonLog);
                }
                if (patchesNode) {
                    queues.enqueueByQueue(patchesNode, this, [event.patches], event.makeMeta, event.reasonLog);
                }
                if (dispatchConstructorPatches) {
                    this.constructor[dispatchInstanceOnPatchesSymbol](this, event.patches);
                }
                if (batch) {
                    queues.batch.stop();
                }
            }
            return event;
        },
        addEventListener: function (key, handler, queueName) {
            ensureMeta(this).handlers.add([
                key,
                'event',
                queueName || 'mutate',
                handler
            ]);
            return this;
        },
        removeEventListener: function (key, handler, queueName) {
            if (key === undefined) {
                var handlers = ensureMeta(this).handlers;
                var keyHandlers = handlers.getNode([]);
                Object.keys(keyHandlers).forEach(function (key) {
                    handlers.delete([
                        key,
                        'event'
                    ]);
                });
            } else if (!handler && !queueName) {
                ensureMeta(this).handlers.delete([
                    key,
                    'event'
                ]);
            } else if (!handler) {
                ensureMeta(this).handlers.delete([
                    key,
                    'event',
                    queueName || 'mutate'
                ]);
            } else {
                ensureMeta(this).handlers.delete([
                    key,
                    'event',
                    queueName || 'mutate',
                    handler
                ]);
            }
            return this;
        },
        one: function (event, handler) {
            var one = function () {
                legacyMapBindings.off.call(this, event, one);
                return handler.apply(this, arguments);
            };
            legacyMapBindings.on.call(this, event, one);
            return this;
        },
        listenTo: function (bindTarget, event, handler, queueName) {
            if (canReflect.isPrimitive(bindTarget)) {
                queueName = handler;
                handler = event;
                event = bindTarget;
                bindTarget = this;
            }
            if (typeof event === 'function') {
                queueName = handler;
                handler = event;
                event = undefined;
            }
            ensureMeta(this).listenHandlers.add([
                bindTarget,
                event,
                queueName || 'mutate',
                handler
            ]);
            legacyMapBindings.on.call(bindTarget, event, handler, queueName || 'mutate');
            return this;
        },
        stopListening: function () {
            var keys = stopListeningArgumentsToKeys.apply({
                context: this,
                defaultQueue: 'mutate'
            }, arguments);
            var listenHandlers = ensureMeta(this).listenHandlers;
            function deleteHandler(bindTarget, event, queue, handler) {
                legacyMapBindings.off.call(bindTarget, event, handler, queue);
            }
            listenHandlers.delete(keys, deleteHandler);
            return this;
        },
        on: function (eventName, handler, queue) {
            var listenWithDOM = isDomEventTarget(this);
            if (listenWithDOM) {
                if (typeof handler === 'string') {
                    domEvents.addDelegateListener(this, eventName, handler, queue);
                } else {
                    domEvents.addEventListener(this, eventName, handler, queue);
                }
            } else {
                if (this[onEventSymbol]) {
                    this[onEventSymbol](eventName, handler, queue);
                } else if ('addEventListener' in this) {
                    this.addEventListener(eventName, handler, queue);
                } else if (this[onKeyValueSymbol]) {
                    canReflect.onKeyValue(this, eventName, handler, queue);
                } else {
                    if (!eventName && this[onValueSymbol]) {
                        canReflect.onValue(this, handler, queue);
                    } else {
                        throw new Error('can-event-queue: Unable to bind ' + eventName);
                    }
                }
            }
            return this;
        },
        off: function (eventName, handler, queue) {
            var listenWithDOM = isDomEventTarget(this);
            if (listenWithDOM) {
                if (typeof handler === 'string') {
                    domEvents.removeDelegateListener(this, eventName, handler, queue);
                } else {
                    domEvents.removeEventListener(this, eventName, handler, queue);
                }
            } else {
                if (this[offEventSymbol]) {
                    this[offEventSymbol](eventName, handler, queue);
                } else if ('removeEventListener' in this) {
                    this.removeEventListener(eventName, handler, queue);
                } else if (this[offKeyValueSymbol]) {
                    canReflect.offKeyValue(this, eventName, handler, queue);
                } else {
                    if (!eventName && this[offValueSymbol]) {
                        canReflect.offValue(this, handler, queue);
                    } else {
                        throw new Error('can-event-queue: Unable to unbind ' + eventName);
                    }
                }
            }
            return this;
        }
    };
    var symbols = {
        'can.onKeyValue': function (key, handler, queueName) {
            ensureMeta(this).handlers.add([
                key,
                'onKeyValue',
                queueName || 'mutate',
                handler
            ]);
        },
        'can.offKeyValue': function (key, handler, queueName) {
            ensureMeta(this).handlers.delete([
                key,
                'onKeyValue',
                queueName || 'mutate',
                handler
            ]);
        },
        'can.isBound': function () {
            return !ensureMeta(this).handlers.isEmpty();
        },
        'can.getWhatIChange': function getWhatIChange(key) {
            if (process.env.NODE_ENV !== 'production') {
                var whatIChange = {};
                var meta = ensureMeta(this);
                var notifyHandlers = [].concat(meta.handlers.get([
                    key,
                    'event',
                    'notify'
                ]), meta.handlers.get([
                    key,
                    'onKeyValue',
                    'notify'
                ]));
                var mutateHandlers = [].concat(meta.handlers.get([
                    key,
                    'event',
                    'mutate'
                ]), meta.handlers.get([
                    key,
                    'event',
                    'domUI'
                ]), meta.handlers.get([
                    key,
                    'onKeyValue',
                    'mutate'
                ]), meta.handlers.get([
                    key,
                    'onKeyValue',
                    'domUI'
                ]));
                if (notifyHandlers.length) {
                    notifyHandlers.forEach(function (handler) {
                        var changes = canReflect.getChangesDependencyRecord(handler);
                        if (changes) {
                            var record = whatIChange.derive;
                            if (!record) {
                                record = whatIChange.derive = {};
                            }
                            mergeDependencyRecords(record, changes);
                        }
                    });
                }
                if (mutateHandlers.length) {
                    mutateHandlers.forEach(function (handler) {
                        var changes = canReflect.getChangesDependencyRecord(handler);
                        if (changes) {
                            var record = whatIChange.mutate;
                            if (!record) {
                                record = whatIChange.mutate = {};
                            }
                            mergeDependencyRecords(record, changes);
                        }
                    });
                }
                return Object.keys(whatIChange).length ? whatIChange : undefined;
            }
        },
        'can.onPatches': function (handler, queue) {
            var handlers = ensureMeta(this).handlers;
            handlers.add([
                'can.patches',
                'onKeyValue',
                queue || 'notify',
                handler
            ]);
        },
        'can.offPatches': function (handler, queue) {
            var handlers = ensureMeta(this).handlers;
            handlers.delete([
                'can.patches',
                'onKeyValue',
                queue || 'notify',
                handler
            ]);
        }
    };
    function defineNonEnumerable(obj, prop, value) {
        Object.defineProperty(obj, prop, {
            enumerable: false,
            value: value
        });
    }
    legacyMapBindings = function (obj) {
        canReflect.assignMap(obj, props);
        return canReflect.assignSymbols(obj, symbols);
    };
    defineNonEnumerable(legacyMapBindings, 'addHandlers', addHandlers);
    defineNonEnumerable(legacyMapBindings, 'stopListeningArgumentsToKeys', stopListeningArgumentsToKeys);
    props.bind = props.addEventListener;
    props.unbind = props.removeEventListener;
    canReflect.assignMap(legacyMapBindings, props);
    canReflect.assignSymbols(legacyMapBindings, symbols);
    defineNonEnumerable(legacyMapBindings, 'start', function () {
        console.warn('use can-queues.batch.start()');
        queues.batch.start();
    });
    defineNonEnumerable(legacyMapBindings, 'stop', function () {
        console.warn('use can-queues.batch.stop()');
        queues.batch.stop();
    });
    defineNonEnumerable(legacyMapBindings, 'flush', function () {
        console.warn('use can-queues.flush()');
        queues.flush();
    });
    defineNonEnumerable(legacyMapBindings, 'afterPreviousEvents', function (handler) {
        console.warn('don\'t use afterPreviousEvents');
        queues.mutateQueue.enqueue(function afterPreviousEvents() {
            queues.mutateQueue.enqueue(handler);
        });
        queues.flush();
    });
    defineNonEnumerable(legacyMapBindings, 'after', function (handler) {
        console.warn('don\'t use after');
        queues.mutateQueue.enqueue(handler);
        queues.flush();
    });
    module.exports = legacyMapBindings;
});
/*can-simple-observable@2.4.2#resolver/resolver*/
define('can-simple-observable@2.4.2#resolver/resolver', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-symbol',
    'can-observation-recorder',
    'can-observation',
    'can-queues',
    'can-event-queue/map/map',
    '../settable/settable',
    '../can-simple-observable'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var ObservationRecorder = require('can-observation-recorder');
    var Observation = require('can-observation');
    var queues = require('can-queues');
    var mapEventBindings = require('can-event-queue/map/map');
    var SettableObservable = require('../settable/settable');
    var SimpleObservable = require('../can-simple-observable');
    var getChangesSymbol = canSymbol.for('can.getChangesDependencyRecord');
    function ResolverObservable(resolver, context, initialValue) {
        this.resolver = ObservationRecorder.ignore(resolver);
        this.context = context;
        this._valueOptions = {
            resolve: this.resolve.bind(this),
            listenTo: this.listenTo.bind(this),
            stopListening: this.stopListening.bind(this),
            lastSet: new SimpleObservable(initialValue)
        };
        this.update = this.update.bind(this);
        this.contextHandlers = new WeakMap();
        this.teardown = null;
        this.binder = {};
        if (process.env.NODE_ENV !== 'production') {
            canReflect.assignSymbols(this, {
                'can.getName': function () {
                    return canReflect.getName(this.constructor) + '<' + canReflect.getName(resolver) + '>';
                }
            });
            Object.defineProperty(this.update, 'name', { value: canReflect.getName(this) + '.update' });
            canReflect.assignSymbols(this._valueOptions.lastSet, {
                'can.getName': function () {
                    return canReflect.getName(this.constructor) + '::lastSet' + '<' + canReflect.getName(resolver) + '>';
                }
            });
        }
    }
    ResolverObservable.prototype = Object.create(SettableObservable.prototype);
    function deleteHandler(bindTarget, event, queue, handler) {
        mapEventBindings.off.call(bindTarget, event, handler, queue);
    }
    canReflect.assignMap(ResolverObservable.prototype, {
        constructor: ResolverObservable,
        listenTo: function (bindTarget, event, handler, queueName) {
            if (canReflect.isPrimitive(bindTarget)) {
                handler = event;
                event = bindTarget;
                bindTarget = this.context;
            }
            if (typeof event === 'function') {
                handler = event;
                event = undefined;
            }
            var resolverInstance = this;
            if (process.env.NODE_ENV !== 'production') {
                if (!handler.name) {
                    Object.defineProperty(handler, 'name', { value: (bindTarget ? canReflect.getName(bindTarget) : '') + (event ? '.on(\'' + event + '\',handler)' : '.on(handler)') + '::' + canReflect.getName(this) });
                }
            }
            var contextHandler = handler.bind(this.context);
            contextHandler[getChangesSymbol] = function getChangesDependencyRecord() {
                var s = new Set();
                s.add(resolverInstance);
                return { valueDependencies: s };
            };
            this.contextHandlers.set(handler, contextHandler);
            mapEventBindings.listenTo.call(this.binder, bindTarget, event, contextHandler, queueName || 'notify');
        },
        stopListening: function () {
            var meta = this.binder[canSymbol.for('can.meta')];
            var listenHandlers = meta && meta.listenHandlers;
            if (listenHandlers) {
                var keys = mapEventBindings.stopListeningArgumentsToKeys.call({
                    context: this.context,
                    defaultQueue: 'notify'
                });
                listenHandlers.delete(keys, deleteHandler);
            }
            return this;
        },
        resolve: function (newVal) {
            this._value = newVal;
            if (this.isBinding) {
                this.lastValue = this._value;
                return newVal;
            }
            if (this._value !== this.lastValue) {
                var enqueueMeta = {};
                if (process.env.NODE_ENV !== 'production') {
                    enqueueMeta = {
                        log: [canReflect.getName(this.update)],
                        reasonLog: [
                            canReflect.getName(this),
                            'resolved with',
                            newVal
                        ]
                    };
                }
                queues.batch.start();
                queues.deriveQueue.enqueue(this.update, this, [], enqueueMeta);
                queues.batch.stop();
            }
            return newVal;
        },
        update: function () {
            if (this.lastValue !== this._value) {
                var old = this.lastValue;
                this.lastValue = this._value;
                if (process.env.NODE_ENV !== 'production') {
                    if (typeof this._log === 'function') {
                        this._log(old, this._value);
                    }
                }
                queues.enqueueByQueue(this.handlers.getNode([]), this, [
                    this._value,
                    old
                ]);
            }
        },
        activate: function () {
            this.isBinding = true;
            this.teardown = this.resolver.call(this.context, this._valueOptions);
            this.isBinding = false;
        },
        onUnbound: function () {
            this.bound = false;
            mapEventBindings.stopListening.call(this.binder);
            if (this.teardown != null) {
                this.teardown();
                this.teardown = null;
            }
        },
        set: function (value) {
            this._valueOptions.lastSet.set(value);
        },
        get: function () {
            if (ObservationRecorder.isRecording()) {
                ObservationRecorder.add(this);
                if (!this.bound) {
                    this.onBound();
                }
            }
            if (this.bound === true) {
                return this._value;
            } else {
                var handler = function () {
                };
                this.on(handler);
                var val = this._value;
                this.off(handler);
                return val;
            }
        },
        hasDependencies: function hasDependencies() {
            var hasDependencies = false;
            if (this.bound) {
                var meta = this.binder[canSymbol.for('can.meta')];
                var listenHandlers = meta && meta.listenHandlers;
                hasDependencies = !!listenHandlers.size();
            }
            return hasDependencies;
        },
        getValueDependencies: function getValueDependencies() {
            if (this.bound) {
                var meta = this.binder[canSymbol.for('can.meta')];
                var listenHandlers = meta && meta.listenHandlers;
                var keyDeps = new Map();
                var valueDeps = new Set();
                if (listenHandlers) {
                    canReflect.each(listenHandlers.root, function (events, obj) {
                        canReflect.each(events, function (queues, eventName) {
                            if (eventName === undefined) {
                                valueDeps.add(obj);
                            } else {
                                var entry = keyDeps.get(obj);
                                if (!entry) {
                                    entry = new Set();
                                    keyDeps.set(obj, entry);
                                }
                                entry.add(eventName);
                            }
                        });
                    });
                    if (valueDeps.size || keyDeps.size) {
                        var result = {};
                        if (keyDeps.size) {
                            result.keyDependencies = keyDeps;
                        }
                        if (valueDeps.size) {
                            result.valueDependencies = valueDeps;
                        }
                        return result;
                    }
                }
            }
        }
    });
    canReflect.assignSymbols(ResolverObservable.prototype, {
        'can.getValue': ResolverObservable.prototype.get,
        'can.setValue': ResolverObservable.prototype.set,
        'can.isMapLike': false,
        'can.getPriority': function () {
            return this.priority || 0;
        },
        'can.setPriority': function (newPriority) {
            this.priority = newPriority;
        },
        'can.valueHasDependencies': ResolverObservable.prototype.hasDependencies,
        'can.getValueDependencies': ResolverObservable.prototype.getValueDependencies
    });
    module.exports = ResolverObservable;
});
/*can-event-queue@1.1.6#type/type*/
define('can-event-queue@1.1.6#type/type', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-symbol',
    'can-key-tree',
    'can-queues'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var KeyTree = require('can-key-tree');
    var queues = require('can-queues');
    var metaSymbol = canSymbol.for('can.meta');
    function addHandlers(obj, meta) {
        if (!meta.lifecycleHandlers) {
            meta.lifecycleHandlers = new KeyTree([
                Object,
                Array
            ]);
        }
        if (!meta.instancePatchesHandlers) {
            meta.instancePatchesHandlers = new KeyTree([
                Object,
                Array
            ]);
        }
    }
    function ensureMeta(obj) {
        var meta = obj[metaSymbol];
        if (!meta) {
            meta = {};
            canReflect.setKeyValue(obj, metaSymbol, meta);
        }
        addHandlers(obj, meta);
        return meta;
    }
    var props = {};
    function onOffAndDispatch(symbolName, dispatchName, handlersName) {
        props['can.on' + symbolName] = function (handler, queueName) {
            ensureMeta(this)[handlersName].add([
                queueName || 'mutate',
                handler
            ]);
        };
        props['can.off' + symbolName] = function (handler, queueName) {
            ensureMeta(this)[handlersName].delete([
                queueName || 'mutate',
                handler
            ]);
        };
        props['can.' + dispatchName] = function (instance, arg) {
            queues.enqueueByQueue(ensureMeta(this)[handlersName].getNode([]), this, [
                instance,
                arg
            ]);
        };
    }
    onOffAndDispatch('InstancePatches', 'dispatchInstanceOnPatches', 'instancePatchesHandlers');
    onOffAndDispatch('InstanceBoundChange', 'dispatchInstanceBoundChange', 'lifecycleHandlers');
    function mixinTypeBindings(obj) {
        return canReflect.assignSymbols(obj, props);
    }
    Object.defineProperty(mixinTypeBindings, 'addHandlers', {
        enumerable: false,
        value: addHandlers
    });
    module.exports = mixinTypeBindings;
});
/*can-string-to-any@1.2.1#can-string-to-any*/
define('can-string-to-any@1.2.1#can-string-to-any', function (require, exports, module) {
    'use strict';
    module.exports = function (str) {
        switch (str) {
        case 'NaN':
        case 'Infinity':
            return +str;
        case 'null':
            return null;
        case 'undefined':
            return undefined;
        case 'true':
        case 'false':
            return str === 'true';
        default:
            var val = +str;
            if (!isNaN(val)) {
                return val;
            } else {
                return str;
            }
        }
    };
});
/*can-data-types@1.2.1#maybe-boolean/maybe-boolean*/
define('can-data-types@1.2.1#maybe-boolean/maybe-boolean', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    function toBoolean(val) {
        if (val == null) {
            return val;
        }
        if (val === 'false' || val === '0' || !val) {
            return false;
        }
        return true;
    }
    module.exports = canReflect.assignSymbols(toBoolean, {
        'can.new': toBoolean,
        'can.getSchema': function () {
            return {
                type: 'Or',
                values: [
                    true,
                    false,
                    undefined,
                    null
                ]
            };
        },
        'can.getName': function () {
            return 'MaybeBoolean';
        },
        'can.isMember': function (value) {
            return value == null || typeof value === 'boolean';
        }
    });
});
/*can-data-types@1.2.1#maybe-date/maybe-date*/
define('can-data-types@1.2.1#maybe-date/maybe-date', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    function toDate(str) {
        var type = typeof str;
        if (type === 'string') {
            str = Date.parse(str);
            return isNaN(str) ? null : new Date(str);
        } else if (type === 'number') {
            return new Date(str);
        } else {
            return str;
        }
    }
    function DateStringSet(dateStr) {
        this.setValue = dateStr;
        var date = toDate(dateStr);
        this.value = date == null ? date : date.getTime();
    }
    DateStringSet.prototype.valueOf = function () {
        return this.value;
    };
    canReflect.assignSymbols(DateStringSet.prototype, {
        'can.serialize': function () {
            return this.setValue;
        }
    });
    module.exports = canReflect.assignSymbols(toDate, {
        'can.new': toDate,
        'can.getSchema': function () {
            return {
                type: 'Or',
                values: [
                    Date,
                    undefined,
                    null
                ]
            };
        },
        'can.ComparisonSetType': DateStringSet,
        'can.getName': function () {
            return 'MaybeDate';
        },
        'can.isMember': function (value) {
            return value == null || value instanceof Date;
        }
    });
});
/*can-data-types@1.2.1#maybe-number/maybe-number*/
define('can-data-types@1.2.1#maybe-number/maybe-number', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    function toNumber(val) {
        if (val == null) {
            return val;
        }
        return +val;
    }
    module.exports = canReflect.assignSymbols(toNumber, {
        'can.new': toNumber,
        'can.getSchema': function () {
            return {
                type: 'Or',
                values: [
                    Number,
                    undefined,
                    null
                ]
            };
        },
        'can.getName': function () {
            return 'MaybeNumber';
        },
        'can.isMember': function (value) {
            return value == null || typeof value === 'number';
        }
    });
});
/*can-data-types@1.2.1#maybe-string/maybe-string*/
define('can-data-types@1.2.1#maybe-string/maybe-string', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    function toString(val) {
        if (val == null) {
            return val;
        }
        return '' + val;
    }
    module.exports = canReflect.assignSymbols(toString, {
        'can.new': toString,
        'can.getSchema': function () {
            return {
                type: 'Or',
                values: [
                    String,
                    undefined,
                    null
                ]
            };
        },
        'can.getName': function () {
            return 'MaybeString';
        },
        'can.isMember': function (value) {
            return value == null || typeof value === 'string';
        }
    });
});
/*can-define@2.7.21#can-define*/
define('can-define@2.7.21#can-define', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-symbol',
    'can-reflect',
    'can-observation',
    'can-observation-recorder',
    'can-simple-observable/async/async',
    'can-simple-observable/settable/settable',
    'can-simple-observable/resolver/resolver',
    'can-event-queue/map/map',
    'can-event-queue/type/type',
    'can-queues',
    'can-assign',
    'can-log/dev/dev',
    'can-string-to-any',
    'can-define-lazy-value',
    'can-data-types/maybe-boolean/maybe-boolean',
    'can-data-types/maybe-date/maybe-date',
    'can-data-types/maybe-number/maybe-number',
    'can-data-types/maybe-string/maybe-string'
], function (require, exports, module) {
    'use strict';
    'format cjs';
    var ns = require('can-namespace');
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    var Observation = require('can-observation');
    var ObservationRecorder = require('can-observation-recorder');
    var AsyncObservable = require('can-simple-observable/async/async');
    var SettableObservable = require('can-simple-observable/settable/settable');
    var ResolverObservable = require('can-simple-observable/resolver/resolver');
    var eventQueue = require('can-event-queue/map/map');
    var addTypeEvents = require('can-event-queue/type/type');
    var queues = require('can-queues');
    var assign = require('can-assign');
    var canLogDev = require('can-log/dev/dev');
    var stringToAny = require('can-string-to-any');
    var defineLazyValue = require('can-define-lazy-value');
    var MaybeBoolean = require('can-data-types/maybe-boolean/maybe-boolean'), MaybeDate = require('can-data-types/maybe-date/maybe-date'), MaybeNumber = require('can-data-types/maybe-number/maybe-number'), MaybeString = require('can-data-types/maybe-string/maybe-string');
    var newSymbol = canSymbol.for('can.new'), serializeSymbol = canSymbol.for('can.serialize'), inSetupSymbol = canSymbol.for('can.initializing');
    var eventsProto, define, make, makeDefinition, getDefinitionsAndMethods, getDefinitionOrMethod;
    function isDefineType(func) {
        return func && (func.canDefineType === true || func[newSymbol]);
    }
    var peek = ObservationRecorder.ignore(canReflect.getValue.bind(canReflect));
    var Object_defineNamedPrototypeProperty = Object.defineProperty;
    if (process.env.NODE_ENV !== 'production') {
        Object_defineNamedPrototypeProperty = function (obj, prop, definition) {
            if (definition.get) {
                Object.defineProperty(definition.get, 'name', {
                    value: 'get ' + canReflect.getName(obj) + '.' + prop,
                    writable: true,
                    configurable: true
                });
            }
            if (definition.set) {
                Object.defineProperty(definition.set, 'name', {
                    value: 'set ' + canReflect.getName(obj) + '.' + prop,
                    configurable: true
                });
            }
            return Object.defineProperty(obj, prop, definition);
        };
    }
    function defineConfigurableAndNotEnumerable(obj, prop, value) {
        Object.defineProperty(obj, prop, {
            configurable: true,
            enumerable: false,
            writable: true,
            value: value
        });
    }
    function eachPropertyDescriptor(map, cb) {
        for (var prop in map) {
            if (map.hasOwnProperty(prop)) {
                cb.call(map, prop, Object.getOwnPropertyDescriptor(map, prop));
            }
        }
    }
    function getEveryPropertyAndSymbol(obj) {
        var props = Object.getOwnPropertyNames(obj);
        var symbols = 'getOwnPropertySymbols' in Object ? Object.getOwnPropertySymbols(obj) : [];
        return props.concat(symbols);
    }
    function cleanUpDefinition(prop, definition, shouldWarn, typePrototype) {
        if (definition.value !== undefined && (typeof definition.value !== 'function' || definition.value.length === 0)) {
            if (process.env.NODE_ENV !== 'production') {
                if (shouldWarn) {
                    canLogDev.warn('can-define: Change the \'value\' definition for ' + canReflect.getName(typePrototype) + '.' + prop + ' to \'default\'.');
                }
            }
            definition.default = definition.value;
            delete definition.value;
        }
        if (definition.Value !== undefined) {
            if (process.env.NODE_ENV !== 'production') {
                if (shouldWarn) {
                    canLogDev.warn('can-define: Change the \'Value\' definition for ' + canReflect.getName(typePrototype) + '.' + prop + ' to \'Default\'.');
                }
            }
            definition.Default = definition.Value;
            delete definition.Value;
        }
    }
    function isValueResolver(definition) {
        return typeof definition.value === 'function' && definition.value.length;
    }
    module.exports = define = ns.define = function (typePrototype, defines, baseDefine) {
        var prop, dataInitializers = Object.create(baseDefine ? baseDefine.dataInitializers : null), computedInitializers = Object.create(baseDefine ? baseDefine.computedInitializers : null);
        var result = getDefinitionsAndMethods(defines, baseDefine, typePrototype);
        result.dataInitializers = dataInitializers;
        result.computedInitializers = computedInitializers;
        canReflect.eachKey(result.definitions, function (definition, property) {
            define.property(typePrototype, property, definition, dataInitializers, computedInitializers, result.defaultDefinition);
        });
        if (typePrototype.hasOwnProperty('_data')) {
            for (prop in dataInitializers) {
                defineLazyValue(typePrototype._data, prop, dataInitializers[prop].bind(typePrototype), true);
            }
        } else {
            defineLazyValue(typePrototype, '_data', function () {
                var map = this;
                var data = {};
                for (var prop in dataInitializers) {
                    defineLazyValue(data, prop, dataInitializers[prop].bind(map), true);
                }
                return data;
            });
        }
        if (typePrototype.hasOwnProperty('_computed')) {
            for (prop in computedInitializers) {
                defineLazyValue(typePrototype._computed, prop, computedInitializers[prop].bind(typePrototype));
            }
        } else {
            defineLazyValue(typePrototype, '_computed', function () {
                var map = this;
                var data = Object.create(null);
                for (var prop in computedInitializers) {
                    defineLazyValue(data, prop, computedInitializers[prop].bind(map));
                }
                return data;
            });
        }
        getEveryPropertyAndSymbol(eventsProto).forEach(function (prop) {
            Object.defineProperty(typePrototype, prop, {
                enumerable: false,
                value: eventsProto[prop],
                configurable: true,
                writable: true
            });
        });
        Object.defineProperty(typePrototype, '_define', {
            enumerable: false,
            value: result,
            configurable: true,
            writable: true
        });
        var iteratorSymbol = canSymbol.iterator || canSymbol.for('iterator');
        if (!typePrototype[iteratorSymbol]) {
            defineConfigurableAndNotEnumerable(typePrototype, iteratorSymbol, function () {
                return new define.Iterator(this);
            });
        }
        return result;
    };
    var onlyType = function (obj) {
        for (var prop in obj) {
            if (prop !== 'type') {
                return false;
            }
        }
        return true;
    };
    define.extensions = function () {
    };
    define.property = function (typePrototype, prop, definition, dataInitializers, computedInitializers, defaultDefinition) {
        var propertyDefinition = define.extensions.apply(this, arguments);
        if (propertyDefinition) {
            definition = makeDefinition(prop, propertyDefinition, defaultDefinition || {}, typePrototype);
        }
        var type = definition.type;
        if (process.env.NODE_ENV !== 'production') {
            var hasZeroArgGetter = definition.get && definition.get.length === 0;
            var noSetter = !definition.set;
            var defaultInDefinition = 'default' in definition || 'Default' in definition;
            var typeInDefinition = definition.type && defaultDefinition && definition.type !== defaultDefinition.type || definition.Type && defaultDefinition && definition.Type !== defaultDefinition.Type;
            if (hasZeroArgGetter && noSetter && defaultInDefinition) {
                var defaultOrDefault = 'default' in definition ? 'default' : 'Default';
                canLogDev.warn('can-define: ' + defaultOrDefault + ' value for property ' + canReflect.getName(typePrototype) + '.' + prop + ' ignored, as its definition has a zero-argument getter');
            }
            if (hasZeroArgGetter && noSetter && typeInDefinition) {
                var typeOrType = definition.type ? 'type' : 'Type';
                canLogDev.warn('can-define: ' + typeOrType + ' value for property ' + canReflect.getName(typePrototype) + '.' + prop + ' ignored, as its definition has a zero-argument getter');
            }
            if (type && canReflect.isConstructorLike(type) && !isDefineType(type)) {
                canLogDev.warn('can-define: the definition for ' + canReflect.getName(typePrototype) + '.' + prop + ' uses a constructor for "type". Did you mean "Type"?');
            }
        }
        if (type && onlyType(definition) && type === define.types['*']) {
            Object_defineNamedPrototypeProperty(typePrototype, prop, {
                get: make.get.data(prop),
                set: make.set.events(prop, make.get.data(prop), make.set.data(prop), make.eventType.data(prop)),
                enumerable: true,
                configurable: true
            });
            return;
        }
        definition.type = type;
        var dataProperty = definition.get || isValueResolver(definition) ? 'computed' : 'data', reader = make.read[dataProperty](prop), getter = make.get[dataProperty](prop), setter = make.set[dataProperty](prop), getInitialValue;
        if (process.env.NODE_ENV !== 'production') {
            if (definition.get) {
                Object.defineProperty(definition.get, 'name', {
                    value: canReflect.getName(typePrototype) + '\'s ' + prop + ' getter',
                    configurable: true
                });
            }
            if (definition.set) {
                Object.defineProperty(definition.set, 'name', {
                    value: canReflect.getName(typePrototype) + '\'s ' + prop + ' setter',
                    configurable: true
                });
            }
            if (isValueResolver(definition)) {
                Object.defineProperty(definition.value, 'name', {
                    value: canReflect.getName(typePrototype) + '\'s ' + prop + ' value',
                    configurable: true
                });
            }
        }
        var typeConvert = function (val) {
            return val;
        };
        if (definition.Type) {
            typeConvert = make.set.Type(prop, definition.Type, typeConvert);
        }
        if (type) {
            typeConvert = make.set.type(prop, type, typeConvert);
        }
        var eventsSetter = make.set.events(prop, reader, setter, make.eventType[dataProperty](prop));
        if (isValueResolver(definition)) {
            computedInitializers[prop] = make.valueResolver(prop, definition, typeConvert);
        } else if (definition.default !== undefined || definition.Default !== undefined) {
            if (process.env.NODE_ENV !== 'production') {
                if (definition.default !== null && typeof definition.default === 'object') {
                    canLogDev.warn('can-define: The default value for ' + canReflect.getName(typePrototype) + '.' + prop + ' is set to an object. This will be shared by all instances of the DefineMap. Use a function that returns the object instead.');
                }
                if (definition.default && canReflect.isConstructorLike(definition.default)) {
                    canLogDev.warn('can-define: The "default" for ' + canReflect.getName(typePrototype) + '.' + prop + ' is set to a constructor. Did you mean "Default" instead?');
                }
            }
            getInitialValue = ObservationRecorder.ignore(make.get.defaultValue(prop, definition, typeConvert, eventsSetter));
        }
        if (definition.get) {
            computedInitializers[prop] = make.compute(prop, definition.get, getInitialValue);
        } else if (getInitialValue) {
            dataInitializers[prop] = getInitialValue;
        }
        if (definition.get && definition.set) {
            setter = make.set.setter(prop, definition.set, make.read.lastSet(prop), setter, true);
            if (definition.get.length === 0) {
                if (process.env.NODE_ENV !== 'production') {
                    canLogDev.warn('can-define: Set value for property ' + canReflect.getName(typePrototype) + '.' + prop + ' ignored, as its definition has a zero-argument getter');
                }
            }
        } else if (definition.set) {
            setter = make.set.setter(prop, definition.set, reader, eventsSetter, false);
        } else if (dataProperty === 'data') {
            setter = eventsSetter;
        } else if (definition.get && definition.get.length < 1) {
            setter = function () {
                if (process.env.NODE_ENV !== 'production') {
                    canLogDev.warn('can-define: Set value for property ' + canReflect.getName(typePrototype) + '.' + prop + ' ignored, as its definition has a zero-argument getter and no setter');
                }
            };
        }
        if (type) {
            setter = make.set.type(prop, type, setter);
        }
        if (definition.Type) {
            setter = make.set.Type(prop, definition.Type, setter);
        }
        Object_defineNamedPrototypeProperty(typePrototype, prop, {
            get: getter,
            set: setter,
            enumerable: 'serialize' in definition ? !!definition.serialize : !definition.get,
            configurable: true
        });
    };
    define.makeDefineInstanceKey = function (constructor) {
        constructor[canSymbol.for('can.defineInstanceKey')] = function (property, value) {
            var defineResult = this.prototype._define;
            if (typeof value === 'object') {
                cleanUpDefinition(property, value, false, this);
            }
            var definition = getDefinitionOrMethod(property, value, defineResult.defaultDefinition, this);
            if (definition && typeof definition === 'object') {
                define.property(constructor.prototype, property, definition, defineResult.dataInitializers, defineResult.computedInitializers, defineResult.defaultDefinition);
                defineResult.definitions[property] = definition;
            } else {
                defineResult.methods[property] = definition;
            }
            this.prototype.dispatch({
                type: 'can.keys',
                target: this.prototype
            });
        };
    };
    define.Constructor = function (defines, sealed) {
        var constructor = function DefineConstructor(props) {
            Object.defineProperty(this, inSetupSymbol, {
                configurable: true,
                enumerable: false,
                value: true,
                writable: true
            });
            define.setup.call(this, props, sealed);
            this[inSetupSymbol] = false;
        };
        var result = define(constructor.prototype, defines);
        addTypeEvents(constructor);
        define.makeDefineInstanceKey(constructor, result);
        return constructor;
    };
    make = {
        computeObj: function (map, prop, observable) {
            var computeObj = {
                oldValue: undefined,
                compute: observable,
                count: 0,
                handler: function (newVal) {
                    var oldValue = computeObj.oldValue;
                    computeObj.oldValue = newVal;
                    map.dispatch({
                        type: prop,
                        target: map
                    }, [
                        newVal,
                        oldValue
                    ]);
                }
            };
            return computeObj;
        },
        valueResolver: function (prop, definition, typeConvert) {
            var getDefault = make.get.defaultValue(prop, definition, typeConvert);
            return function () {
                var map = this;
                var defaultValue = getDefault.call(this);
                var computeObj = make.computeObj(map, prop, new ResolverObservable(definition.value, map, defaultValue));
                if (process.env.NODE_ENV !== 'production') {
                    Object.defineProperty(computeObj.handler, 'name', { value: canReflect.getName(definition.value).replace('value', 'event emitter') });
                }
                return computeObj;
            };
        },
        compute: function (prop, get, defaultValueFn) {
            return function () {
                var map = this, defaultValue = defaultValueFn && defaultValueFn.call(this), observable, computeObj;
                if (get.length === 0) {
                    observable = new Observation(get, map);
                } else if (get.length === 1) {
                    observable = new SettableObservable(get, map, defaultValue);
                } else {
                    observable = new AsyncObservable(get, map, defaultValue);
                }
                computeObj = make.computeObj(map, prop, observable);
                if (process.env.NODE_ENV !== 'production') {
                    Object.defineProperty(computeObj.handler, 'name', { value: canReflect.getName(get).replace('getter', 'event emitter') });
                }
                return computeObj;
            };
        },
        set: {
            data: function (prop) {
                return function (newVal) {
                    this._data[prop] = newVal;
                };
            },
            computed: function (prop) {
                return function (val) {
                    canReflect.setValue(this._computed[prop].compute, val);
                };
            },
            events: function (prop, getCurrent, setData, eventType) {
                return function (newVal) {
                    if (this[inSetupSymbol]) {
                        setData.call(this, newVal);
                    } else {
                        var current = getCurrent.call(this);
                        if (newVal === current) {
                            return;
                        }
                        var dispatched;
                        setData.call(this, newVal);
                        dispatched = {
                            patches: [{
                                    type: 'set',
                                    key: prop,
                                    value: newVal
                                }],
                            type: prop,
                            target: this
                        };
                        if (process.env.NODE_ENV !== 'production') {
                            var lastItem, lastFn;
                            dispatched.reasonLog = [
                                canReflect.getName(this) + '\'s',
                                prop,
                                'changed to',
                                newVal,
                                'from',
                                current
                            ];
                            if (ObservationRecorder.isRecording() && queues.stack().length && !this[inSetupSymbol]) {
                                lastItem = queues.stack()[queues.stack().length - 1];
                                lastFn = lastItem.context instanceof Observation ? lastItem.context.func : lastItem.fn;
                                var mutationWarning = 'can-define: The ' + prop + ' property on ' + canReflect.getName(this) + ' is being set in ' + (canReflect.getName(lastFn) || canReflect.getName(lastItem.fn)) + '. This can cause infinite loops and performance issues. ' + 'Use the value() behavior for ' + prop + ' instead, and listen to other properties and observables with listenTo(). https://canjs.com/doc/can-define.types.value.html';
                                canLogDev.warn(mutationWarning);
                                queues.logStack();
                            }
                        }
                        this.dispatch(dispatched, [
                            newVal,
                            current
                        ]);
                    }
                };
            },
            setter: function (prop, setter, getCurrent, setEvents, hasGetter) {
                return function (value) {
                    var asyncTimer;
                    var self = this;
                    queues.batch.start();
                    var setterCalled = false, current = getCurrent.call(this), setValue = setter.call(this, value, function (value) {
                            setEvents.call(self, value);
                            setterCalled = true;
                            if (process.env.NODE_ENV !== 'production') {
                                clearTimeout(asyncTimer);
                            }
                        }, current);
                    if (setterCalled) {
                        queues.batch.stop();
                    } else {
                        if (hasGetter) {
                            if (setValue !== undefined) {
                                if (current !== setValue) {
                                    setEvents.call(this, setValue);
                                }
                                queues.batch.stop();
                            } else if (setter.length === 0) {
                                setEvents.call(this, value);
                                queues.batch.stop();
                                return;
                            } else if (setter.length === 1) {
                                queues.batch.stop();
                            } else {
                                if (process.env.NODE_ENV !== 'production') {
                                    asyncTimer = setTimeout(function () {
                                        canLogDev.warn('can-define: Setter "' + canReflect.getName(self) + '.' + prop + '" did not return a value or call the setter callback.');
                                    }, canLogDev.warnTimeout);
                                }
                                queues.batch.stop();
                                return;
                            }
                        } else {
                            if (setValue !== undefined) {
                                setEvents.call(this, setValue);
                                queues.batch.stop();
                            } else if (setter.length === 0) {
                                setEvents.call(this, value);
                                queues.batch.stop();
                                return;
                            } else if (setter.length === 1) {
                                setEvents.call(this, undefined);
                                queues.batch.stop();
                            } else {
                                if (process.env.NODE_ENV !== 'production') {
                                    asyncTimer = setTimeout(function () {
                                        canLogDev.warn('can/map/setter.js: Setter "' + canReflect.getName(self) + '.' + prop + '" did not return a value or call the setter callback.');
                                    }, canLogDev.warnTimeout);
                                }
                                queues.batch.stop();
                                return;
                            }
                        }
                    }
                };
            },
            type: function (prop, type, set) {
                function setter(newValue) {
                    return set.call(this, type.call(this, newValue, prop));
                }
                if (isDefineType(type)) {
                    if (type.canDefineType) {
                        return setter;
                    } else {
                        return function setter(newValue) {
                            return set.call(this, canReflect.convert(newValue, type));
                        };
                    }
                }
                if (typeof type === 'object') {
                    return make.set.Type(prop, type, set);
                } else {
                    return setter;
                }
            },
            Type: function (prop, Type, set) {
                if (Array.isArray(Type) && define.DefineList) {
                    Type = define.DefineList.extend({ '#': Type[0] });
                } else if (typeof Type === 'object') {
                    if (define.DefineMap) {
                        Type = define.DefineMap.extend(Type);
                    } else {
                        Type = define.Constructor(Type);
                    }
                }
                return function (newValue) {
                    if (newValue instanceof Type || newValue == null) {
                        return set.call(this, newValue);
                    } else {
                        return set.call(this, new Type(newValue));
                    }
                };
            }
        },
        eventType: {
            data: function (prop) {
                return function (newVal, oldVal) {
                    return oldVal !== undefined || this._data.hasOwnProperty(prop) ? 'set' : 'add';
                };
            },
            computed: function () {
                return function () {
                    return 'set';
                };
            }
        },
        read: {
            data: function (prop) {
                return function () {
                    return this._data[prop];
                };
            },
            computed: function (prop) {
                return function () {
                    return canReflect.getValue(this._computed[prop].compute);
                };
            },
            lastSet: function (prop) {
                return function () {
                    var observable = this._computed[prop].compute;
                    if (observable.lastSetValue) {
                        return canReflect.getValue(observable.lastSetValue);
                    }
                };
            }
        },
        get: {
            defaultValue: function (prop, definition, typeConvert, callSetter) {
                return function () {
                    var value = definition.default;
                    if (value !== undefined) {
                        if (typeof value === 'function') {
                            value = value.call(this);
                        }
                        value = typeConvert.call(this, value);
                    } else {
                        var Default = definition.Default;
                        if (Default) {
                            value = typeConvert.call(this, new Default());
                        }
                    }
                    if (definition.set) {
                        var VALUE;
                        var sync = true;
                        var setter = make.set.setter(prop, definition.set, function () {
                        }, function (value) {
                            if (sync) {
                                VALUE = value;
                            } else {
                                callSetter.call(this, value);
                            }
                        }, definition.get);
                        setter.call(this, value);
                        sync = false;
                        return VALUE;
                    }
                    return value;
                };
            },
            data: function (prop) {
                return function () {
                    if (!this[inSetupSymbol]) {
                        ObservationRecorder.add(this, prop);
                    }
                    return this._data[prop];
                };
            },
            computed: function (prop) {
                return function (val) {
                    var compute = this._computed[prop].compute;
                    if (ObservationRecorder.isRecording()) {
                        ObservationRecorder.add(this, prop);
                        if (!canReflect.isBound(compute)) {
                            Observation.temporarilyBind(compute);
                        }
                    }
                    return peek(compute);
                };
            }
        }
    };
    define.behaviors = [
        'get',
        'set',
        'value',
        'Value',
        'type',
        'Type',
        'serialize'
    ];
    var addBehaviorToDefinition = function (definition, behavior, value) {
        if (behavior === 'enumerable') {
            definition.serialize = !!value;
        } else if (behavior === 'type') {
            var behaviorDef = value;
            if (typeof behaviorDef === 'string') {
                behaviorDef = define.types[behaviorDef];
                if (typeof behaviorDef === 'object' && !isDefineType(behaviorDef)) {
                    assign(definition, behaviorDef);
                    behaviorDef = behaviorDef[behavior];
                }
            }
            if (typeof behaviorDef !== 'undefined') {
                definition[behavior] = behaviorDef;
            }
        } else {
            definition[behavior] = value;
        }
    };
    makeDefinition = function (prop, def, defaultDefinition, typePrototype) {
        var definition = {};
        canReflect.eachKey(def, function (value, behavior) {
            addBehaviorToDefinition(definition, behavior, value);
        });
        canReflect.eachKey(defaultDefinition, function (value, prop) {
            if (definition[prop] === undefined) {
                if (prop !== 'type' && prop !== 'Type') {
                    definition[prop] = value;
                }
            }
        });
        if (def.Type) {
            var value = def.Type;
            var serialize = value[serializeSymbol];
            if (serialize) {
                definition.serialize = function (val) {
                    return serialize.call(val);
                };
            }
            if (value[newSymbol]) {
                definition.type = value;
                delete definition.Type;
            }
        }
        if (typeof def.type !== 'string') {
            if (!definition.type && !definition.Type) {
                var defaultsCopy = canReflect.assignMap({}, defaultDefinition);
                definition = canReflect.assignMap(defaultsCopy, definition);
            }
            if (canReflect.size(definition) === 0) {
                definition.type = define.types['*'];
            }
        }
        cleanUpDefinition(prop, definition, true, typePrototype);
        return definition;
    };
    getDefinitionOrMethod = function (prop, value, defaultDefinition, typePrototype) {
        var definition;
        if (typeof value === 'string') {
            definition = { type: value };
        } else if (value && (value[serializeSymbol] || value[newSymbol])) {
            definition = { Type: value };
        } else if (typeof value === 'function') {
            if (canReflect.isConstructorLike(value)) {
                definition = { Type: value };
            }
        } else if (Array.isArray(value)) {
            definition = { Type: value };
        } else if (canReflect.isPlainObject(value)) {
            definition = value;
        }
        if (definition) {
            return makeDefinition(prop, definition, defaultDefinition, typePrototype);
        } else {
            return value;
        }
    };
    getDefinitionsAndMethods = function (defines, baseDefines, typePrototype) {
        var definitions = Object.create(baseDefines ? baseDefines.definitions : null);
        var methods = {};
        var defaults = defines['*'], defaultDefinition;
        if (defaults) {
            delete defines['*'];
            defaultDefinition = getDefinitionOrMethod('*', defaults, {});
        } else {
            defaultDefinition = Object.create(null);
        }
        eachPropertyDescriptor(defines, function (prop, propertyDescriptor) {
            var value;
            if (propertyDescriptor.get || propertyDescriptor.set) {
                value = {
                    get: propertyDescriptor.get,
                    set: propertyDescriptor.set
                };
            } else {
                value = propertyDescriptor.value;
            }
            if (prop === 'constructor') {
                methods[prop] = value;
                return;
            } else {
                var result = getDefinitionOrMethod(prop, value, defaultDefinition, typePrototype);
                if (result && typeof result === 'object' && canReflect.size(result) > 0) {
                    definitions[prop] = result;
                } else {
                    if (typeof result === 'function') {
                        methods[prop] = result;
                    } else if (typeof result !== 'undefined') {
                        if (process.env.NODE_ENV !== 'production') {
                            canLogDev.error(canReflect.getName(typePrototype) + '.' + prop + ' does not match a supported propDefinition. See: https://canjs.com/doc/can-define.types.propDefinition.html');
                        }
                    }
                }
            }
        });
        if (defaults) {
            defineConfigurableAndNotEnumerable(defines, '*', defaults);
        }
        return {
            definitions: definitions,
            methods: methods,
            defaultDefinition: defaultDefinition
        };
    };
    eventsProto = eventQueue({});
    function setupComputed(instance, eventName) {
        var computedBinding = instance._computed && instance._computed[eventName];
        if (computedBinding && computedBinding.compute) {
            if (!computedBinding.count) {
                computedBinding.count = 1;
                canReflect.onValue(computedBinding.compute, computedBinding.handler, 'notify');
                computedBinding.oldValue = peek(computedBinding.compute);
            } else {
                computedBinding.count++;
            }
        }
    }
    function teardownComputed(instance, eventName) {
        var computedBinding = instance._computed && instance._computed[eventName];
        if (computedBinding) {
            if (computedBinding.count === 1) {
                computedBinding.count = 0;
                canReflect.offValue(computedBinding.compute, computedBinding.handler, 'notify');
            } else {
                computedBinding.count--;
            }
        }
    }
    var canMetaSymbol = canSymbol.for('can.meta');
    assign(eventsProto, {
        _eventSetup: function () {
        },
        _eventTeardown: function () {
        },
        addEventListener: function (eventName, handler, queue) {
            setupComputed(this, eventName);
            return eventQueue.addEventListener.apply(this, arguments);
        },
        removeEventListener: function (eventName, handler) {
            teardownComputed(this, eventName);
            return eventQueue.removeEventListener.apply(this, arguments);
        }
    });
    eventsProto.on = eventsProto.bind = eventsProto.addEventListener;
    eventsProto.off = eventsProto.unbind = eventsProto.removeEventListener;
    var onKeyValueSymbol = canSymbol.for('can.onKeyValue');
    var offKeyValueSymbol = canSymbol.for('can.offKeyValue');
    canReflect.assignSymbols(eventsProto, {
        'can.onKeyValue': function (key) {
            setupComputed(this, key);
            return eventQueue[onKeyValueSymbol].apply(this, arguments);
        },
        'can.offKeyValue': function (key) {
            teardownComputed(this, key);
            return eventQueue[offKeyValueSymbol].apply(this, arguments);
        }
    });
    delete eventsProto.one;
    define.setup = function (props, sealed) {
        Object.defineProperty(this, 'constructor', {
            value: this.constructor,
            enumerable: false,
            writable: false
        });
        Object.defineProperty(this, canMetaSymbol, {
            value: Object.create(null),
            enumerable: false,
            writable: false
        });
        var definitions = this._define.definitions;
        var instanceDefinitions = Object.create(null);
        var map = this;
        canReflect.eachKey(props, function (value, prop) {
            if (definitions[prop] !== undefined) {
                map[prop] = value;
            } else {
                define.expando(map, prop, value);
            }
        });
        if (canReflect.size(instanceDefinitions) > 0) {
            defineConfigurableAndNotEnumerable(this, '_instanceDefinitions', instanceDefinitions);
        }
        if (process.env.NODE_ENV !== 'production') {
            this._data;
            this._computed;
            if (sealed !== false) {
                Object.seal(this);
            }
        }
    };
    var returnFirstArg = function (arg) {
        return arg;
    };
    define.expando = function (map, prop, value) {
        if (define._specialKeys[prop]) {
            return true;
        }
        var constructorDefines = map._define.definitions;
        if (constructorDefines && constructorDefines[prop]) {
            return;
        }
        var instanceDefines = map._instanceDefinitions;
        if (!instanceDefines) {
            if (Object.isSealed(map)) {
                return;
            }
            Object.defineProperty(map, '_instanceDefinitions', {
                configurable: true,
                enumerable: false,
                writable: true,
                value: {}
            });
            instanceDefines = map._instanceDefinitions;
        }
        if (!instanceDefines[prop]) {
            var defaultDefinition = map._define.defaultDefinition || { type: define.types.observable };
            define.property(map, prop, defaultDefinition, {}, {});
            if (defaultDefinition.type) {
                map._data[prop] = define.make.set.type(prop, defaultDefinition.type, returnFirstArg).call(map, value);
            } else if (defaultDefinition.Type && canReflect.isConstructorLike(defaultDefinition.Type)) {
                map._data[prop] = define.make.set.Type(prop, defaultDefinition.Type, returnFirstArg).call(map, value);
            } else {
                map._data[prop] = define.types.observable(value);
            }
            instanceDefines[prop] = defaultDefinition;
            if (!map[inSetupSymbol]) {
                queues.batch.start();
                map.dispatch({
                    type: 'can.keys',
                    target: map
                });
                if (Object.prototype.hasOwnProperty.call(map._data, prop)) {
                    map.dispatch({
                        type: prop,
                        target: map,
                        patches: [{
                                type: 'add',
                                key: prop,
                                value: map._data[prop]
                            }]
                    }, [
                        map._data[prop],
                        undefined
                    ]);
                } else {
                    map.dispatch({
                        type: 'set',
                        target: map,
                        patches: [{
                                type: 'add',
                                key: prop,
                                value: map._data[prop]
                            }]
                    }, [
                        map._data[prop],
                        undefined
                    ]);
                }
                queues.batch.stop();
            }
            return true;
        }
    };
    define.replaceWith = defineLazyValue;
    define.eventsProto = eventsProto;
    define.defineConfigurableAndNotEnumerable = defineConfigurableAndNotEnumerable;
    define.make = make;
    define.getDefinitionOrMethod = getDefinitionOrMethod;
    define._specialKeys = {
        _data: true,
        _computed: true
    };
    var simpleGetterSetters = {};
    define.makeSimpleGetterSetter = function (prop) {
        if (simpleGetterSetters[prop] === undefined) {
            var setter = make.set.events(prop, make.get.data(prop), make.set.data(prop), make.eventType.data(prop));
            simpleGetterSetters[prop] = {
                get: make.get.data(prop),
                set: function (newVal) {
                    return setter.call(this, define.types.observable(newVal));
                },
                enumerable: true,
                configurable: true
            };
        }
        return simpleGetterSetters[prop];
    };
    define.Iterator = function (obj) {
        this.obj = obj;
        this.definitions = Object.keys(obj._define.definitions);
        this.instanceDefinitions = obj._instanceDefinitions ? Object.keys(obj._instanceDefinitions) : Object.keys(obj);
        this.hasGet = typeof obj.get === 'function';
    };
    define.Iterator.prototype.next = function () {
        var key;
        if (this.definitions.length) {
            key = this.definitions.shift();
            var def = this.obj._define.definitions[key];
            if (def.get) {
                return this.next();
            }
        } else if (this.instanceDefinitions.length) {
            key = this.instanceDefinitions.shift();
        } else {
            return {
                value: undefined,
                done: true
            };
        }
        return {
            value: [
                key,
                this.hasGet ? this.obj.get(key) : this.obj[key]
            ],
            done: false
        };
    };
    function isObservableValue(obj) {
        return canReflect.isValueLike(obj) && canReflect.isObservableLike(obj);
    }
    define.types = {
        'date': MaybeDate,
        'number': MaybeNumber,
        'boolean': MaybeBoolean,
        'observable': function (newVal) {
            if (Array.isArray(newVal) && define.DefineList) {
                newVal = new define.DefineList(newVal);
            } else if (canReflect.isPlainObject(newVal) && define.DefineMap) {
                newVal = new define.DefineMap(newVal);
            }
            return newVal;
        },
        'stringOrObservable': function (newVal) {
            if (Array.isArray(newVal)) {
                return new define.DefaultList(newVal);
            } else if (canReflect.isPlainObject(newVal)) {
                return new define.DefaultMap(newVal);
            } else {
                return canReflect.convert(newVal, define.types.string);
            }
        },
        'htmlbool': function (val) {
            if (val === '') {
                return true;
            }
            return !!stringToAny(val);
        },
        '*': function (val) {
            return val;
        },
        'any': function (val) {
            return val;
        },
        'string': MaybeString,
        'compute': {
            set: function (newValue, setVal, setErr, oldValue) {
                if (isObservableValue(newValue)) {
                    return newValue;
                }
                if (isObservableValue(oldValue)) {
                    canReflect.setValue(oldValue, newValue);
                    return oldValue;
                }
                return newValue;
            },
            get: function (value) {
                return isObservableValue(value) ? canReflect.getValue(value) : value;
            }
        }
    };
    define.updateSchemaKeys = function (schema, definitions) {
        for (var prop in definitions) {
            var definition = definitions[prop];
            if (definition.serialize !== false) {
                if (definition.Type) {
                    schema.keys[prop] = definition.Type;
                } else if (definition.type) {
                    schema.keys[prop] = definition.type;
                } else {
                    schema.keys[prop] = function (val) {
                        return val;
                    };
                }
                if (definitions[prop].identity === true) {
                    schema.identity.push(prop);
                }
            }
        }
        return schema;
    };
});
/*can-string@1.1.0#can-string*/
define('can-string@1.1.0#can-string', function (require, exports, module) {
    'use strict';
    var strUndHash = /_|-/, strColons = /\=\=/, strWords = /([A-Z]+)([A-Z][a-z])/g, strLowUp = /([a-z\d])([A-Z])/g, strDash = /([a-z\d])([A-Z])/g, strQuote = /"/g, strSingleQuote = /'/g, strHyphenMatch = /-+(.)?/g, strCamelMatch = /[a-z][A-Z]/g, convertBadValues = function (content) {
            var isInvalid = content === null || content === undefined || isNaN(content) && '' + content === 'NaN';
            return '' + (isInvalid ? '' : content);
        };
    var string = {
        esc: function (content) {
            return convertBadValues(content).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(strQuote, '&#34;').replace(strSingleQuote, '&#39;');
        },
        capitalize: function (s) {
            return s.charAt(0).toUpperCase() + s.slice(1);
        },
        camelize: function (str) {
            return convertBadValues(str).replace(strHyphenMatch, function (match, chr) {
                return chr ? chr.toUpperCase() : '';
            });
        },
        hyphenate: function (str) {
            return convertBadValues(str).replace(strCamelMatch, function (str) {
                return str.charAt(0) + '-' + str.charAt(1).toLowerCase();
            });
        },
        pascalize: function (str) {
            return string.capitalize(string.camelize(str));
        },
        underscore: function (s) {
            return s.replace(strColons, '/').replace(strWords, '$1_$2').replace(strLowUp, '$1_$2').replace(strDash, '_').toLowerCase();
        },
        undHash: strUndHash
    };
    module.exports = string;
});
/*can-construct@3.5.6#can-construct*/
define('can-construct@3.5.6#can-construct', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-log/dev/dev',
    'can-namespace',
    'can-symbol',
    'can-string'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var dev = require('can-log/dev/dev');
    var namespace = require('can-namespace');
    var canSymbol = require('can-symbol');
    var inSetupSymbol = canSymbol.for('can.initializing');
    if (process.env.NODE_ENV !== 'production') {
        var CanString = require('can-string');
        var reservedWords = {
            'abstract': true,
            'boolean': true,
            'break': true,
            'byte': true,
            'case': true,
            'catch': true,
            'char': true,
            'class': true,
            'const': true,
            'continue': true,
            'debugger': true,
            'default': true,
            'delete': true,
            'do': true,
            'double': true,
            'else': true,
            'enum': true,
            'export': true,
            'extends': true,
            'false': true,
            'final': true,
            'finally': true,
            'float': true,
            'for': true,
            'function': true,
            'goto': true,
            'if': true,
            'implements': true,
            'import': true,
            'in': true,
            'instanceof': true,
            'int': true,
            'interface': true,
            'let': true,
            'long': true,
            'native': true,
            'new': true,
            'null': true,
            'package': true,
            'private': true,
            'protected': true,
            'public': true,
            'return': true,
            'short': true,
            'static': true,
            'super': true,
            'switch': true,
            'synchronized': true,
            'this': true,
            'throw': true,
            'throws': true,
            'transient': true,
            'true': true,
            'try': true,
            'typeof': true,
            'var': true,
            'void': true,
            'volatile': true,
            'while': true,
            'with': true
        };
        var constructorNameRegex = /[^A-Z0-9_]/gi;
    }
    var initializing = 0;
    if (process.env.NODE_ENV !== 'production') {
        var namedCtor = function (cache) {
            return function (name, fn) {
                return (name in cache ? cache[name] : cache[name] = new Function('__', 'function ' + name + '(){return __.apply(this,arguments)};return ' + name))(fn);
            };
        }({});
    }
    var Construct = function () {
        if (arguments.length) {
            return Construct.extend.apply(Construct, arguments);
        }
    };
    var canGetDescriptor;
    try {
        Object.getOwnPropertyDescriptor({});
        canGetDescriptor = true;
    } catch (e) {
        canGetDescriptor = false;
    }
    var getDescriptor = function (newProps, name) {
            var descriptor = Object.getOwnPropertyDescriptor(newProps, name);
            if (descriptor && (descriptor.get || descriptor.set)) {
                return descriptor;
            }
            return null;
        }, inheritGetterSetter = function (newProps, oldProps, addTo) {
            addTo = addTo || newProps;
            var descriptor;
            for (var name in newProps) {
                if (descriptor = getDescriptor(newProps, name)) {
                    this._defineProperty(addTo, oldProps, name, descriptor);
                } else {
                    Construct._overwrite(addTo, oldProps, name, newProps[name]);
                }
            }
        }, simpleInherit = function (newProps, oldProps, addTo) {
            addTo = addTo || newProps;
            for (var name in newProps) {
                Construct._overwrite(addTo, oldProps, name, newProps[name]);
            }
        }, defineNonEnumerable = function (obj, prop, value) {
            Object.defineProperty(obj, prop, {
                configurable: true,
                writable: true,
                enumerable: false,
                value: value
            });
        };
    canReflect.assignMap(Construct, {
        constructorExtends: true,
        newInstance: function () {
            var inst = this.instance(), args;
            if (inst.setup) {
                Object.defineProperty(inst, '__inSetup', {
                    configurable: true,
                    enumerable: false,
                    value: true,
                    writable: true
                });
                Object.defineProperty(inst, inSetupSymbol, {
                    configurable: true,
                    enumerable: false,
                    value: true,
                    writable: true
                });
                args = inst.setup.apply(inst, arguments);
                if (args instanceof Construct.ReturnValue) {
                    return args.value;
                }
                inst.__inSetup = false;
                inst[inSetupSymbol] = false;
            }
            if (inst.init) {
                inst.init.apply(inst, args || arguments);
            }
            return inst;
        },
        _inherit: canGetDescriptor ? inheritGetterSetter : simpleInherit,
        _defineProperty: function (what, oldProps, propName, descriptor) {
            Object.defineProperty(what, propName, descriptor);
        },
        _overwrite: function (what, oldProps, propName, val) {
            Object.defineProperty(what, propName, {
                value: val,
                configurable: true,
                enumerable: true,
                writable: true
            });
        },
        setup: function (base) {
            var defaults = base.defaults ? canReflect.serialize(base.defaults) : {};
            this.defaults = canReflect.assignDeepMap(defaults, this.defaults);
        },
        instance: function () {
            initializing = 1;
            var inst = new this();
            initializing = 0;
            return inst;
        },
        extend: function (name, staticProperties, instanceProperties) {
            var shortName = name, klass = staticProperties, proto = instanceProperties;
            if (typeof shortName !== 'string') {
                proto = klass;
                klass = shortName;
                shortName = null;
            }
            if (!proto) {
                proto = klass;
                klass = null;
            }
            proto = proto || {};
            var _super_class = this, _super = this.prototype, Constructor, prototype;
            prototype = this.instance();
            Construct._inherit(proto, _super, prototype);
            if (shortName) {
            } else if (klass && klass.shortName) {
                shortName = klass.shortName;
            } else if (this.shortName) {
                shortName = this.shortName;
            }
            var constructorName = shortName ? shortName.replace(constructorNameRegex, '_') : 'Constructor';
            if (process.env.NODE_ENV !== 'production') {
                if (reservedWords[constructorName]) {
                    constructorName = CanString.capitalize(constructorName);
                }
            }
            function init() {
                if (!initializing) {
                    if (process.env.NODE_ENV !== 'production') {
                        if (!this || this.constructor !== Constructor && arguments.length && Constructor.constructorExtends) {
                            dev.warn('can/construct/construct.js: extending a Construct without calling extend');
                        }
                    }
                    return (!this || this.constructor !== Constructor) && arguments.length && Constructor.constructorExtends ? Constructor.extend.apply(Constructor, arguments) : Constructor.newInstance.apply(Constructor, arguments);
                }
            }
            Constructor = typeof namedCtor === 'function' ? namedCtor(constructorName, init) : function () {
                return init.apply(this, arguments);
            };
            for (var propName in _super_class) {
                if (_super_class.hasOwnProperty(propName)) {
                    Constructor[propName] = _super_class[propName];
                }
            }
            Construct._inherit(klass, _super_class, Constructor);
            canReflect.assignMap(Constructor, {
                constructor: Constructor,
                prototype: prototype
            });
            if (shortName !== undefined) {
                if (Object.getOwnPropertyDescriptor) {
                    var desc = Object.getOwnPropertyDescriptor(Constructor, 'name');
                    if (!desc || desc.configurable) {
                        Object.defineProperty(Constructor, 'name', {
                            writable: true,
                            value: shortName,
                            configurable: true
                        });
                    }
                }
                Constructor.shortName = shortName;
            }
            defineNonEnumerable(Constructor.prototype, 'constructor', Constructor);
            var t = [_super_class].concat(Array.prototype.slice.call(arguments)), args = Constructor.setup.apply(Constructor, t);
            if (Constructor.init) {
                Constructor.init.apply(Constructor, args || t);
            }
            return Constructor;
        },
        ReturnValue: function (value) {
            this.value = value;
        }
    });
    defineNonEnumerable(Construct.prototype, 'setup', function () {
    });
    defineNonEnumerable(Construct.prototype, 'init', function () {
    });
    module.exports = namespace.Construct = Construct;
});
/*can-define@2.7.21#ensure-meta*/
define('can-define@2.7.21#ensure-meta', [
    'require',
    'exports',
    'module',
    'can-symbol',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    module.exports = function ensureMeta(obj) {
        var metaSymbol = canSymbol.for('can.meta');
        var meta = obj[metaSymbol];
        if (!meta) {
            meta = {};
            canReflect.setKeyValue(obj, metaSymbol, meta);
        }
        return meta;
    };
});
/*can-define@2.7.21#define-helpers/define-helpers*/
define('can-define@2.7.21#define-helpers/define-helpers', [
    'require',
    'exports',
    'module',
    'can-define',
    'can-reflect',
    'can-queues',
    'can-log/dev/dev',
    '../ensure-meta'
], function (require, exports, module) {
    'use strict';
    var define = require('can-define');
    var canReflect = require('can-reflect');
    var queues = require('can-queues');
    var dev = require('can-log/dev/dev');
    var ensureMeta = require('../ensure-meta');
    var defineHelpers = {
        defineExpando: define.expando,
        reflectSerialize: function (unwrapped) {
            var constructorDefinitions = this._define.definitions;
            var defaultDefinition = this._define.defaultDefinition;
            this.forEach(function (val, name) {
                var propDef = constructorDefinitions[name];
                if (propDef && typeof propDef.serialize === 'function') {
                    val = propDef.serialize.call(this, val, name);
                } else if (defaultDefinition && typeof defaultDefinition.serialize === 'function') {
                    val = defaultDefinition.serialize.call(this, val, name);
                } else {
                    val = canReflect.serialize(val);
                }
                if (val !== undefined) {
                    unwrapped[name] = val;
                }
            }, this);
            return unwrapped;
        },
        reflectUnwrap: function (unwrapped) {
            this.forEach(function (value, key) {
                if (value !== undefined) {
                    unwrapped[key] = canReflect.unwrap(value);
                }
            });
            return unwrapped;
        },
        log: function (key) {
            var instance = this;
            var quoteString = function quoteString(x) {
                return typeof x === 'string' ? JSON.stringify(x) : x;
            };
            var meta = ensureMeta(instance);
            var allowed = meta.allowedLogKeysSet || new Set();
            meta.allowedLogKeysSet = allowed;
            if (key) {
                allowed.add(key);
            }
            meta._log = function (event, data) {
                var type = event.type;
                if (type === 'can.onPatches' || key && !allowed.has(type) || type === 'can.keys' || key && !allowed.has(type)) {
                    return;
                }
                if (type === 'add' || type === 'remove') {
                    dev.log(canReflect.getName(instance), '\n how   ', quoteString(type), '\n what  ', quoteString(data[0]), '\n index ', quoteString(data[1]));
                } else {
                    dev.log(canReflect.getName(instance), '\n key ', quoteString(type), '\n is  ', quoteString(data[0]), '\n was ', quoteString(data[1]));
                }
            };
        },
        deleteKey: function (prop) {
            var instanceDefines = this._instanceDefinitions;
            if (instanceDefines && Object.prototype.hasOwnProperty.call(instanceDefines, prop) && !Object.isSealed(this)) {
                delete instanceDefines[prop];
                queues.batch.start();
                this.dispatch({
                    type: 'can.keys',
                    target: this
                });
                var oldValue = this._data[prop];
                if (oldValue !== undefined) {
                    delete this._data[prop];
                    this.dispatch({
                        type: prop,
                        target: this,
                        patches: [{
                                type: 'delete',
                                key: prop
                            }]
                    }, [
                        undefined,
                        oldValue
                    ]);
                }
                queues.batch.stop();
            } else {
                this.set(prop, undefined);
            }
            return this;
        }
    };
    module.exports = defineHelpers;
});
/*can-define@2.7.21#map/map*/
define('can-define@2.7.21#map/map', [
    'require',
    'exports',
    'module',
    'can-construct',
    'can-define',
    '../define-helpers/define-helpers',
    'can-observation-recorder',
    'can-namespace',
    'can-log',
    'can-log/dev/dev',
    'can-reflect',
    'can-symbol',
    'can-queues',
    'can-event-queue/type/type'
], function (require, exports, module) {
    'use strict';
    var Construct = require('can-construct');
    var define = require('can-define');
    var defineHelpers = require('../define-helpers/define-helpers');
    var ObservationRecorder = require('can-observation-recorder');
    var ns = require('can-namespace');
    var canLog = require('can-log');
    var canLogDev = require('can-log/dev/dev');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var queues = require('can-queues');
    var addTypeEvents = require('can-event-queue/type/type');
    var keysForDefinition = function (definitions) {
        var keys = [];
        for (var prop in definitions) {
            var definition = definitions[prop];
            if (typeof definition !== 'object' || ('serialize' in definition ? !!definition.serialize : !definition.get)) {
                keys.push(prop);
            }
        }
        return keys;
    };
    function assign(source) {
        queues.batch.start();
        canReflect.assignMap(this, source || {});
        queues.batch.stop();
    }
    function update(source) {
        queues.batch.start();
        canReflect.updateMap(this, source || {});
        queues.batch.stop();
    }
    function assignDeep(source) {
        queues.batch.start();
        canReflect.assignDeepMap(this, source || {});
        queues.batch.stop();
    }
    function updateDeep(source) {
        queues.batch.start();
        canReflect.updateDeepMap(this, source || {});
        queues.batch.stop();
    }
    function setKeyValue(key, value) {
        var defined = defineHelpers.defineExpando(this, key, value);
        if (!defined) {
            this[key] = value;
        }
    }
    function getKeyValue(key) {
        var value = this[key];
        if (value !== undefined || key in this || Object.isSealed(this)) {
            return value;
        } else {
            ObservationRecorder.add(this, key);
            return this[key];
        }
    }
    var getSchemaSymbol = canSymbol.for('can.getSchema');
    function getSchema() {
        var def = this.prototype._define;
        var definitions = def ? def.definitions : {};
        var schema = {
            type: 'map',
            identity: [],
            keys: {}
        };
        return define.updateSchemaKeys(schema, definitions);
    }
    var sealedSetup = function (props) {
        define.setup.call(this, props || {}, this.constructor.seal);
    };
    var DefineMap = Construct.extend('DefineMap', {
        setup: function (base) {
            var key, prototype = this.prototype;
            if (DefineMap) {
                var result = define(prototype, prototype, base.prototype._define);
                define.makeDefineInstanceKey(this, result);
                addTypeEvents(this);
                for (key in DefineMap.prototype) {
                    define.defineConfigurableAndNotEnumerable(prototype, key, prototype[key]);
                }
                if (prototype.setup === DefineMap.prototype.setup) {
                    define.defineConfigurableAndNotEnumerable(prototype, 'setup', sealedSetup);
                }
                var _computedGetter = Object.getOwnPropertyDescriptor(prototype, '_computed').get;
                Object.defineProperty(prototype, '_computed', {
                    configurable: true,
                    enumerable: false,
                    get: function () {
                        if (this === prototype) {
                            return;
                        }
                        return _computedGetter.call(this, arguments);
                    }
                });
            } else {
                for (key in prototype) {
                    define.defineConfigurableAndNotEnumerable(prototype, key, prototype[key]);
                }
            }
            define.defineConfigurableAndNotEnumerable(prototype, 'constructor', this);
            this[getSchemaSymbol] = getSchema;
        }
    }, {
        setup: function (props, sealed) {
            if (!this._define) {
                Object.defineProperty(this, '_define', {
                    enumerable: false,
                    value: { definitions: {} }
                });
                Object.defineProperty(this, '_data', {
                    enumerable: false,
                    value: {}
                });
            }
            define.setup.call(this, props || {}, sealed === true);
        },
        get: function (prop) {
            if (prop) {
                return getKeyValue.call(this, prop);
            } else {
                return canReflect.unwrap(this, Map);
            }
        },
        set: function (prop, value) {
            if (typeof prop === 'object') {
                if (process.env.NODE_ENV !== 'production') {
                    canLogDev.warn('can-define/map/map.prototype.set is deprecated; please use can-define/map/map.prototype.assign or can-define/map/map.prototype.update instead');
                }
                if (value === true) {
                    updateDeep.call(this, prop);
                } else {
                    assignDeep.call(this, prop);
                }
            } else {
                setKeyValue.call(this, prop, value);
            }
            return this;
        },
        assignDeep: function (prop) {
            assignDeep.call(this, prop);
            return this;
        },
        updateDeep: function (prop) {
            updateDeep.call(this, prop);
            return this;
        },
        assign: function (prop) {
            assign.call(this, prop);
            return this;
        },
        update: function (prop) {
            update.call(this, prop);
            return this;
        },
        serialize: function () {
            return canReflect.serialize(this, Map);
        },
        deleteKey: defineHelpers.deleteKey,
        forEach: function () {
            var forEach = function (list, cb, thisarg) {
                    return canReflect.eachKey(list, cb, thisarg);
                }, noObserve = ObservationRecorder.ignore(forEach);
            return function (cb, thisarg, observe) {
                return observe === false ? noObserve(this, cb, thisarg) : forEach(this, cb, thisarg);
            };
        }(),
        '*': { type: define.types.observable }
    });
    var defineMapProto = {
        'can.isMapLike': true,
        'can.isListLike': false,
        'can.isValueLike': false,
        'can.getKeyValue': getKeyValue,
        'can.setKeyValue': setKeyValue,
        'can.deleteKeyValue': defineHelpers.deleteKey,
        'can.getOwnKeys': function () {
            var keys = canReflect.getOwnEnumerableKeys(this);
            if (this._computed) {
                var computedKeys = canReflect.getOwnKeys(this._computed);
                var key;
                for (var i = 0; i < computedKeys.length; i++) {
                    key = computedKeys[i];
                    if (keys.indexOf(key) < 0) {
                        keys.push(key);
                    }
                }
            }
            return keys;
        },
        'can.getOwnEnumerableKeys': function () {
            ObservationRecorder.add(this, 'can.keys');
            ObservationRecorder.add(Object.getPrototypeOf(this), 'can.keys');
            return keysForDefinition(this._define.definitions).concat(keysForDefinition(this._instanceDefinitions));
        },
        'can.hasOwnKey': function (key) {
            return Object.hasOwnProperty.call(this._define.definitions, key) || this._instanceDefinitions !== undefined && Object.hasOwnProperty.call(this._instanceDefinitions, key);
        },
        'can.hasKey': function (key) {
            return key in this._define.definitions || this._instanceDefinitions !== undefined && key in this._instanceDefinitions;
        },
        'can.assignDeep': assignDeep,
        'can.updateDeep': updateDeep,
        'can.unwrap': defineHelpers.reflectUnwrap,
        'can.serialize': defineHelpers.reflectSerialize,
        'can.keyHasDependencies': function (key) {
            return !!(this._computed && this._computed[key] && this._computed[key].compute);
        },
        'can.getKeyDependencies': function (key) {
            var ret;
            if (this._computed && this._computed[key] && this._computed[key].compute) {
                ret = {};
                ret.valueDependencies = new Set();
                ret.valueDependencies.add(this._computed[key].compute);
            }
            return ret;
        }
    };
    if (process.env.NODE_ENV !== 'production') {
        defineMapProto['can.getName'] = function () {
            return canReflect.getName(this.constructor) + '{}';
        };
    }
    canReflect.assignSymbols(DefineMap.prototype, defineMapProto);
    canReflect.setKeyValue(DefineMap.prototype, canSymbol.iterator, function () {
        return new define.Iterator(this);
    });
    for (var prop in define.eventsProto) {
        DefineMap[prop] = define.eventsProto[prop];
        Object.defineProperty(DefineMap.prototype, prop, {
            enumerable: false,
            value: define.eventsProto[prop],
            writable: true
        });
    }
    function getSymbolsForIE(obj) {
        return Object.getOwnPropertyNames(obj).filter(function (name) {
            return name.indexOf('@@symbol') === 0;
        });
    }
    var eventsProtoSymbols = 'getOwnPropertySymbols' in Object ? Object.getOwnPropertySymbols(define.eventsProto) : getSymbolsForIE(define.eventsProto);
    eventsProtoSymbols.forEach(function (sym) {
        Object.defineProperty(DefineMap.prototype, sym, {
            configurable: true,
            enumerable: false,
            value: define.eventsProto[sym],
            writable: true
        });
    });
    if (process.env.NODE_ENV !== 'production') {
        define.defineConfigurableAndNotEnumerable(DefineMap.prototype, 'log', defineHelpers.log);
    }
    define.DefineMap = DefineMap;
    Object.defineProperty(DefineMap.prototype, 'toObject', {
        enumerable: false,
        writable: true,
        value: function () {
            canLog.warn('Use DefineMap::get instead of DefineMap::toObject');
            return this.get();
        }
    });
    module.exports = ns.DefineMap = DefineMap;
});
/*can-cid@1.3.1#can-cid*/
define('can-cid@1.3.1#can-cid', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var _cid = 0;
    var domExpando = 'can' + new Date();
    var cid = function (object, name) {
        var propertyName = object.nodeName ? domExpando : '_cid';
        if (!object[propertyName]) {
            _cid++;
            object[propertyName] = (name || '') + _cid;
        }
        return object[propertyName];
    };
    cid.domExpando = domExpando;
    cid.get = function (object) {
        var type = typeof object;
        var isObject = type !== null && (type === 'object' || type === 'function');
        return isObject ? cid(object) : type + ':' + object;
    };
    if (namespace.cid) {
        throw new Error('You can\'t have two versions of can-cid, check your dependencies');
    } else {
        module.exports = namespace.cid = cid;
    }
});
/*can-single-reference@1.2.2#can-single-reference*/
define('can-single-reference@1.2.2#can-single-reference', [
    'require',
    'exports',
    'module',
    'can-cid'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var CID = require('can-cid');
        var singleReference;
        function getKeyName(obj, key, extraKey) {
            var keyName = extraKey ? CID(obj, key) + ':' + extraKey : CID(obj, key);
            return keyName || key;
        }
        singleReference = {
            set: function (obj, key, value, extraKey) {
                obj[getKeyName(obj, key, extraKey)] = value;
            },
            getAndDelete: function (obj, key, extraKey) {
                var keyName = getKeyName(obj, key, extraKey);
                var value = obj[keyName];
                delete obj[keyName];
                delete obj._cid;
                return value;
            }
        };
        module.exports = singleReference;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-define@2.7.21#list/list*/
define('can-define@2.7.21#list/list', [
    'require',
    'exports',
    'module',
    'can-construct',
    'can-define',
    'can-queues',
    'can-event-queue/type/type',
    'can-observation-recorder',
    'can-log',
    'can-log/dev/dev',
    '../define-helpers/define-helpers',
    'can-assign',
    'can-diff/list/list',
    'can-namespace',
    'can-reflect',
    'can-symbol',
    'can-single-reference'
], function (require, exports, module) {
    'use strict';
    var Construct = require('can-construct');
    var define = require('can-define');
    var make = define.make;
    var queues = require('can-queues');
    var addTypeEvents = require('can-event-queue/type/type');
    var ObservationRecorder = require('can-observation-recorder');
    var canLog = require('can-log');
    var canLogDev = require('can-log/dev/dev');
    var defineHelpers = require('../define-helpers/define-helpers');
    var assign = require('can-assign');
    var diff = require('can-diff/list/list');
    var ns = require('can-namespace');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var singleReference = require('can-single-reference');
    var splice = [].splice;
    var runningNative = false;
    var identity = function (x) {
        return x;
    };
    var localOnPatchesSymbol = 'can.patches';
    var makeFilterCallback = function (props) {
        return function (item) {
            for (var prop in props) {
                if (item[prop] !== props[prop]) {
                    return false;
                }
            }
            return true;
        };
    };
    var onKeyValue = define.eventsProto[canSymbol.for('can.onKeyValue')];
    var offKeyValue = define.eventsProto[canSymbol.for('can.offKeyValue')];
    var getSchemaSymbol = canSymbol.for('can.getSchema');
    var inSetupSymbol = canSymbol.for('can.initializing');
    function getSchema() {
        var definitions = this.prototype._define.definitions;
        var schema = {
            type: 'list',
            keys: {}
        };
        schema = define.updateSchemaKeys(schema, definitions);
        if (schema.keys['#']) {
            schema.values = definitions['#'].Type;
            delete schema.keys['#'];
        }
        return schema;
    }
    var DefineList = Construct.extend('DefineList', {
        setup: function (base) {
            if (DefineList) {
                addTypeEvents(this);
                var prototype = this.prototype;
                var result = define(prototype, prototype, base.prototype._define);
                define.makeDefineInstanceKey(this, result);
                var itemsDefinition = result.definitions['#'] || result.defaultDefinition;
                if (itemsDefinition) {
                    if (itemsDefinition.Type) {
                        this.prototype.__type = make.set.Type('*', itemsDefinition.Type, identity);
                    } else if (itemsDefinition.type) {
                        this.prototype.__type = make.set.type('*', itemsDefinition.type, identity);
                    }
                }
                this[getSchemaSymbol] = getSchema;
            }
        }
    }, {
        setup: function (items) {
            if (!this._define) {
                Object.defineProperty(this, '_define', {
                    enumerable: false,
                    value: {
                        definitions: {
                            length: { type: 'number' },
                            _length: { type: 'number' }
                        }
                    }
                });
                Object.defineProperty(this, '_data', {
                    enumerable: false,
                    value: {}
                });
            }
            define.setup.call(this, {}, false);
            Object.defineProperty(this, '_length', {
                enumerable: false,
                configurable: true,
                writable: true,
                value: 0
            });
            if (items) {
                this.splice.apply(this, [
                    0,
                    0
                ].concat(canReflect.toArray(items)));
            }
        },
        __type: define.types.observable,
        _triggerChange: function (attr, how, newVal, oldVal) {
            var index = +attr;
            if (!isNaN(index)) {
                var itemsDefinition = this._define.definitions['#'];
                var patches, dispatched;
                if (how === 'add') {
                    if (itemsDefinition && typeof itemsDefinition.added === 'function') {
                        ObservationRecorder.ignore(itemsDefinition.added).call(this, newVal, index);
                    }
                    patches = [{
                            type: 'splice',
                            insert: newVal,
                            index: index,
                            deleteCount: 0
                        }];
                    dispatched = {
                        type: how,
                        patches: patches
                    };
                    if (process.env.NODE_ENV !== 'production') {
                        dispatched.reasonLog = [
                            canReflect.getName(this),
                            'added',
                            newVal,
                            'at',
                            index
                        ];
                    }
                    this.dispatch(dispatched, [
                        newVal,
                        index
                    ]);
                } else if (how === 'remove') {
                    if (itemsDefinition && typeof itemsDefinition.removed === 'function') {
                        ObservationRecorder.ignore(itemsDefinition.removed).call(this, oldVal, index);
                    }
                    patches = [{
                            type: 'splice',
                            index: index,
                            deleteCount: oldVal.length
                        }];
                    dispatched = {
                        type: how,
                        patches: patches
                    };
                    if (process.env.NODE_ENV !== 'production') {
                        dispatched.reasonLog = [
                            canReflect.getName(this),
                            'remove',
                            oldVal,
                            'at',
                            index
                        ];
                    }
                    this.dispatch(dispatched, [
                        oldVal,
                        index
                    ]);
                } else {
                    this.dispatch(how, [
                        newVal,
                        index
                    ]);
                }
            } else {
                this.dispatch({
                    type: '' + attr,
                    target: this
                }, [
                    newVal,
                    oldVal
                ]);
            }
        },
        get: function (index) {
            if (arguments.length) {
                if (isNaN(index)) {
                    ObservationRecorder.add(this, index);
                } else {
                    ObservationRecorder.add(this, 'length');
                }
                return this[index];
            } else {
                return canReflect.unwrap(this, Map);
            }
        },
        set: function (prop, value) {
            if (typeof prop !== 'object') {
                prop = isNaN(+prop) || prop % 1 ? prop : +prop;
                if (typeof prop === 'number') {
                    if (typeof prop === 'number' && prop > this._length - 1) {
                        var newArr = new Array(prop + 1 - this._length);
                        newArr[newArr.length - 1] = value;
                        this.push.apply(this, newArr);
                        return newArr;
                    }
                    this.splice(prop, 1, value);
                } else {
                    var defined = defineHelpers.defineExpando(this, prop, value);
                    if (!defined) {
                        this[prop] = value;
                    }
                }
            } else {
                if (process.env.NODE_ENV !== 'production') {
                    canLogDev.warn('can-define/list/list.prototype.set is deprecated; please use can-define/list/list.prototype.assign or can-define/list/list.prototype.update instead');
                }
                if (canReflect.isListLike(prop)) {
                    if (value) {
                        this.replace(prop);
                    } else {
                        canReflect.assignList(this, prop);
                    }
                } else {
                    canReflect.assignMap(this, prop);
                }
            }
            return this;
        },
        assign: function (prop) {
            if (canReflect.isListLike(prop)) {
                canReflect.assignList(this, prop);
            } else {
                canReflect.assignMap(this, prop);
            }
            return this;
        },
        update: function (prop) {
            if (canReflect.isListLike(prop)) {
                canReflect.updateList(this, prop);
            } else {
                canReflect.updateMap(this, prop);
            }
            return this;
        },
        assignDeep: function (prop) {
            if (canReflect.isListLike(prop)) {
                canReflect.assignDeepList(this, prop);
            } else {
                canReflect.assignDeepMap(this, prop);
            }
            return this;
        },
        updateDeep: function (prop) {
            if (canReflect.isListLike(prop)) {
                canReflect.updateDeepList(this, prop);
            } else {
                canReflect.updateDeepMap(this, prop);
            }
            return this;
        },
        _items: function () {
            var arr = [];
            this._each(function (item) {
                arr.push(item);
            });
            return arr;
        },
        _each: function (callback) {
            for (var i = 0, len = this._length; i < len; i++) {
                callback(this[i], i);
            }
        },
        splice: function (index, howMany) {
            var args = canReflect.toArray(arguments), added = [], i, len, listIndex, allSame = args.length > 2, oldLength = this._length;
            index = index || 0;
            for (i = 0, len = args.length - 2; i < len; i++) {
                listIndex = i + 2;
                args[listIndex] = this.__type(args[listIndex], listIndex);
                added.push(args[listIndex]);
                if (this[i + index] !== args[listIndex]) {
                    allSame = false;
                }
            }
            if (allSame && this._length <= added.length) {
                return added;
            }
            if (howMany === undefined) {
                howMany = args[1] = this._length - index;
            }
            runningNative = true;
            var removed = splice.apply(this, args);
            runningNative = false;
            queues.batch.start();
            if (howMany > 0) {
                this._triggerChange('' + index, 'remove', undefined, removed);
            }
            if (args.length > 2) {
                this._triggerChange('' + index, 'add', added, removed);
            }
            this.dispatch('length', [
                this._length,
                oldLength
            ]);
            queues.batch.stop();
            return removed;
        },
        serialize: function () {
            return canReflect.serialize(this, Map);
        }
    });
    for (var prop in define.eventsProto) {
        Object.defineProperty(DefineList.prototype, prop, {
            enumerable: false,
            value: define.eventsProto[prop],
            writable: true
        });
    }
    var eventsProtoSymbols = 'getOwnPropertySymbols' in Object ? Object.getOwnPropertySymbols(define.eventsProto) : [
        canSymbol.for('can.onKeyValue'),
        canSymbol.for('can.offKeyValue')
    ];
    eventsProtoSymbols.forEach(function (sym) {
        Object.defineProperty(DefineList.prototype, sym, {
            configurable: true,
            enumerable: false,
            value: define.eventsProto[sym],
            writable: true
        });
    });
    var getArgs = function (args) {
        return args[0] && Array.isArray(args[0]) ? args[0] : canReflect.toArray(args);
    };
    canReflect.eachKey({
        push: 'length',
        unshift: 0
    }, function (where, name) {
        var orig = [][name];
        DefineList.prototype[name] = function () {
            var args = [], len = where ? this._length : 0, i = arguments.length, res, val;
            while (i--) {
                val = arguments[i];
                args[i] = this.__type(val, i);
            }
            runningNative = true;
            res = orig.apply(this, args);
            runningNative = false;
            if (!this.comparator || args.length) {
                queues.batch.start();
                this._triggerChange('' + len, 'add', args, undefined);
                this.dispatch('length', [
                    this._length,
                    len
                ]);
                queues.batch.stop();
            }
            return res;
        };
    });
    canReflect.eachKey({
        pop: 'length',
        shift: 0
    }, function (where, name) {
        var orig = [][name];
        DefineList.prototype[name] = function () {
            if (!this._length) {
                return undefined;
            }
            var args = getArgs(arguments), len = where && this._length ? this._length - 1 : 0, oldLength = this._length ? this._length : 0, res;
            runningNative = true;
            res = orig.apply(this, args);
            runningNative = false;
            queues.batch.start();
            this._triggerChange('' + len, 'remove', undefined, [res]);
            this.dispatch('length', [
                this._length,
                oldLength
            ]);
            queues.batch.stop();
            return res;
        };
    });
    canReflect.eachKey({
        'map': 3,
        'filter': 3,
        'reduce': 4,
        'reduceRight': 4,
        'every': 3,
        'some': 3
    }, function a(fnLength, fnName) {
        DefineList.prototype[fnName] = function () {
            var self = this;
            var args = [].slice.call(arguments, 0);
            var callback = args[0];
            var thisArg = args[fnLength - 1] || self;
            if (typeof callback === 'object') {
                callback = makeFilterCallback(callback);
            }
            args[0] = function () {
                var cbArgs = [].slice.call(arguments, 0);
                cbArgs[fnLength - 3] = self.get(cbArgs[fnLength - 2]);
                return callback.apply(thisArg, cbArgs);
            };
            var ret = Array.prototype[fnName].apply(this, args);
            if (fnName === 'map') {
                return new DefineList(ret);
            } else if (fnName === 'filter') {
                return new self.constructor(ret);
            } else {
                return ret;
            }
        };
    });
    assign(DefineList.prototype, {
        includes: function () {
            var arrayIncludes = Array.prototype.includes;
            if (arrayIncludes) {
                return function includes() {
                    return arrayIncludes.apply(this, arguments);
                };
            } else {
                return function includes() {
                    throw new Error('DefineList.prototype.includes must have Array.prototype.includes available. Please add a polyfill to this environment.');
                };
            }
        }(),
        indexOf: function (item, fromIndex) {
            for (var i = fromIndex || 0, len = this.length; i < len; i++) {
                if (this.get(i) === item) {
                    return i;
                }
            }
            return -1;
        },
        lastIndexOf: function (item, fromIndex) {
            fromIndex = typeof fromIndex === 'undefined' ? this.length - 1 : fromIndex;
            for (var i = fromIndex; i >= 0; i--) {
                if (this.get(i) === item) {
                    return i;
                }
            }
            return -1;
        },
        join: function () {
            ObservationRecorder.add(this, 'length');
            return [].join.apply(this, arguments);
        },
        reverse: function () {
            var list = [].reverse.call(this._items());
            return this.replace(list);
        },
        slice: function () {
            ObservationRecorder.add(this, 'length');
            var temp = Array.prototype.slice.apply(this, arguments);
            return new this.constructor(temp);
        },
        concat: function () {
            var args = [];
            canReflect.eachIndex(arguments, function (arg) {
                if (canReflect.isListLike(arg)) {
                    var arr = Array.isArray(arg) ? arg : canReflect.toArray(arg);
                    arr.forEach(function (innerArg) {
                        args.push(this.__type(innerArg));
                    }, this);
                } else {
                    args.push(this.__type(arg));
                }
            }, this);
            return new this.constructor(Array.prototype.concat.apply(canReflect.toArray(this), args));
        },
        forEach: function (cb, thisarg) {
            var item;
            for (var i = 0, len = this.length; i < len; i++) {
                item = this.get(i);
                if (cb.call(thisarg || item, item, i, this) === false) {
                    break;
                }
            }
            return this;
        },
        replace: function (newList) {
            var patches = diff(this, newList);
            queues.batch.start();
            for (var i = 0, len = patches.length; i < len; i++) {
                this.splice.apply(this, [
                    patches[i].index,
                    patches[i].deleteCount
                ].concat(patches[i].insert));
            }
            queues.batch.stop();
            return this;
        },
        sort: function (compareFunction) {
            var sorting = Array.prototype.slice.call(this);
            Array.prototype.sort.call(sorting, compareFunction);
            this.splice.apply(this, [
                0,
                sorting.length
            ].concat(sorting));
            return this;
        }
    });
    for (var prop in define.eventsProto) {
        DefineList[prop] = define.eventsProto[prop];
        Object.defineProperty(DefineList.prototype, prop, {
            enumerable: false,
            value: define.eventsProto[prop],
            writable: true
        });
    }
    Object.defineProperty(DefineList.prototype, 'length', {
        get: function () {
            if (!this[inSetupSymbol]) {
                ObservationRecorder.add(this, 'length');
            }
            return this._length;
        },
        set: function (newVal) {
            if (runningNative) {
                this._length = newVal;
                return;
            }
            if (newVal == null || isNaN(+newVal) || newVal === this._length) {
                return;
            }
            if (newVal > this._length - 1) {
                var newArr = new Array(newVal - this._length);
                this.push.apply(this, newArr);
            } else {
                this.splice(newVal);
            }
        },
        enumerable: true
    });
    DefineList.prototype.attr = function (prop, value) {
        canLog.warn('DefineMap::attr shouldn\'t be called');
        if (arguments.length === 0) {
            return this.get();
        } else if (prop && typeof prop === 'object') {
            return this.set.apply(this, arguments);
        } else if (arguments.length === 1) {
            return this.get(prop);
        } else {
            return this.set(prop, value);
        }
    };
    DefineList.prototype.item = function (index, value) {
        if (arguments.length === 1) {
            return this.get(index);
        } else {
            return this.set(index, value);
        }
    };
    DefineList.prototype.items = function () {
        canLog.warn('DefineList::get should should be used instead of DefineList::items');
        return this.get();
    };
    var defineListProto = {
        'can.isMoreListLikeThanMapLike': true,
        'can.isMapLike': true,
        'can.isListLike': true,
        'can.isValueLike': false,
        'can.getKeyValue': DefineList.prototype.get,
        'can.setKeyValue': DefineList.prototype.set,
        'can.onKeyValue': function (key, handler, queue) {
            var translationHandler;
            if (isNaN(key)) {
                return onKeyValue.apply(this, arguments);
            } else {
                translationHandler = function () {
                    handler(this[key]);
                };
                if (process.env.NODE_ENV !== 'production') {
                    Object.defineProperty(translationHandler, 'name', { value: 'translationHandler(' + key + ')::' + canReflect.getName(this) + '.onKeyValue(\'length\',' + canReflect.getName(handler) + ')' });
                }
                singleReference.set(handler, this, translationHandler, key);
                return onKeyValue.call(this, 'length', translationHandler, queue);
            }
        },
        'can.offKeyValue': function (key, handler, queue) {
            var translationHandler;
            if (isNaN(key)) {
                return offKeyValue.apply(this, arguments);
            } else {
                translationHandler = singleReference.getAndDelete(handler, this, key);
                return offKeyValue.call(this, 'length', translationHandler, queue);
            }
        },
        'can.deleteKeyValue': function (prop) {
            prop = isNaN(+prop) || prop % 1 ? prop : +prop;
            if (typeof prop === 'number') {
                this.splice(prop, 1);
            } else if (prop === 'length' || prop === '_length') {
                return;
            } else {
                this.set(prop, undefined);
            }
            return this;
        },
        'can.assignDeep': function (source) {
            queues.batch.start();
            canReflect.assignList(this, source);
            queues.batch.stop();
        },
        'can.updateDeep': function (source) {
            queues.batch.start();
            this.replace(source);
            queues.batch.stop();
        },
        'can.keyHasDependencies': function (key) {
            return !!(this._computed && this._computed[key] && this._computed[key].compute);
        },
        'can.getKeyDependencies': function (key) {
            var ret;
            if (this._computed && this._computed[key] && this._computed[key].compute) {
                ret = {};
                ret.valueDependencies = new Set();
                ret.valueDependencies.add(this._computed[key].compute);
            }
            return ret;
        },
        'can.splice': function (index, deleteCount, insert) {
            this.splice.apply(this, [
                index,
                deleteCount
            ].concat(insert));
        },
        'can.onPatches': function (handler, queue) {
            this[canSymbol.for('can.onKeyValue')](localOnPatchesSymbol, handler, queue);
        },
        'can.offPatches': function (handler, queue) {
            this[canSymbol.for('can.offKeyValue')](localOnPatchesSymbol, handler, queue);
        }
    };
    if (process.env.NODE_ENV !== 'production') {
        defineListProto['can.getName'] = function () {
            return canReflect.getName(this.constructor) + '[]';
        };
    }
    canReflect.assignSymbols(DefineList.prototype, defineListProto);
    canReflect.setKeyValue(DefineList.prototype, canSymbol.iterator, function () {
        var index = -1;
        if (typeof this.length !== 'number') {
            this.length = 0;
        }
        return {
            next: function () {
                index++;
                return {
                    value: this[index],
                    done: index >= this.length
                };
            }.bind(this)
        };
    });
    if (process.env.NODE_ENV !== 'production') {
        DefineList.prototype.log = defineHelpers.log;
    }
    define.DefineList = DefineList;
    module.exports = ns.DefineList = DefineList;
});
/*can@5.31.0#es/can-define*/
define('can@5.31.0#es/can-define', [
    'exports',
    'can-define',
    'can-define/map/map',
    'can-define/list/list'
], function (exports, _canDefine, _map, _list) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'define', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canDefine).default;
        }
    });
    Object.defineProperty(exports, 'DefineMap', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_map).default;
        }
    });
    Object.defineProperty(exports, 'DefineList', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_list).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-key@1.2.1#utils*/
define('can-key@1.2.1#utils', function (require, exports, module) {
    'use strict';
    var utils = {
        isContainer: function (current) {
            var type = typeof current;
            return current && (type === 'object' || type === 'function');
        },
        strReplacer: /\{([^\}]+)\}/g,
        parts: function (name) {
            if (Array.isArray(name)) {
                return name;
            } else {
                return typeof name !== 'undefined' ? (name + '').replace(/\[/g, '.').replace(/]/g, '').split('.') : [];
            }
        }
    };
    module.exports = utils;
});
/*can-key@1.2.1#delete/delete*/
define('can-key@1.2.1#delete/delete', [
    'require',
    'exports',
    'module',
    'can-reflect',
    '../utils'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var utils = require('../utils');
    module.exports = function deleteAtPath(data, path) {
        var parts = utils.parts(path);
        var current = data;
        for (var i = 0; i < parts.length - 1; i++) {
            if (current) {
                current = canReflect.getKeyValue(current, parts[i]);
            }
        }
        if (current) {
            canReflect.deleteKeyValue(current, parts[parts.length - 1]);
        }
    };
});
/*can-key@1.2.1#get/get*/
define('can-key@1.2.1#get/get', [
    'require',
    'exports',
    'module',
    'can-reflect',
    '../utils'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var utils = require('../utils');
    function get(obj, name) {
        var parts = utils.parts(name);
        var length = parts.length, current, i, container;
        if (!length) {
            return obj;
        }
        current = obj;
        for (i = 0; i < length && utils.isContainer(current) && current !== null; i++) {
            container = current;
            current = canReflect.getKeyValue(container, parts[i]);
        }
        return current;
    }
    module.exports = get;
});
/*can-key@1.2.1#replace-with/replace-with*/
define('can-key@1.2.1#replace-with/replace-with', [
    'require',
    'exports',
    'module',
    '../utils',
    '../get/get',
    '../delete/delete'
], function (require, exports, module) {
    'use strict';
    var utils = require('../utils');
    var get = require('../get/get');
    var deleteKey = require('../delete/delete');
    module.exports = function (str, data, replacer, shouldRemoveMatchedPaths) {
        return str.replace(utils.strReplacer, function (whole, path) {
            var value = get(data, path);
            if (shouldRemoveMatchedPaths) {
                deleteKey(data, path);
            }
            return replacer ? replacer(path, value) : value;
        });
    };
});
/*can-key@1.2.1#set/set*/
define('can-key@1.2.1#set/set', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-symbol',
    '../utils'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var utils = require('../utils');
    var setValueSymbol = canSymbol.for('can.setValue');
    function set(object, path, value) {
        var parts = utils.parts(path);
        var current = object;
        var length = parts.length;
        for (var i = 0; i < length - 1; i++) {
            if (utils.isContainer(current)) {
                current = canReflect.getKeyValue(current, parts[i]);
            } else {
                break;
            }
        }
        if (current) {
            canReflect.setKeyValue(current, parts[i], value);
        } else {
            throw new TypeError('Cannot set value at key path \'' + path + '\'');
        }
        return object;
    }
    module.exports = set;
});
/*can-key@1.2.1#walk/walk*/
define('can-key@1.2.1#walk/walk', [
    'require',
    'exports',
    'module',
    'can-reflect',
    '../utils'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var utils = require('../utils');
    module.exports = function walk(obj, name, keyCallback) {
        var parts = utils.parts(name);
        var length = parts.length, current, i, container, part;
        if (!length) {
            return;
        }
        current = obj;
        for (i = 0; i < length; i++) {
            container = current;
            part = parts[i];
            current = utils.isContainer(container) && canReflect.getKeyValue(container, part);
            var result = keyCallback({
                parent: container,
                key: part,
                value: current
            }, i);
            if (result !== undefined) {
                current = result;
            }
        }
    };
});
/*can-key@1.2.1#transform/transform*/
define('can-key@1.2.1#transform/transform', [
    'require',
    'exports',
    'module',
    '../walk/walk',
    '../utils',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var walk = require('../walk/walk');
    var utils = require('../utils');
    var canReflect = require('can-reflect');
    function deleteKeys(parentsAndKeys) {
        for (var i = parentsAndKeys.length - 1; i >= 0; i--) {
            var parentAndKey = parentsAndKeys[i];
            delete parentAndKey.parent[parentAndKey.key];
            if (canReflect.size(parentAndKey.parent) !== 0) {
                return;
            }
        }
    }
    module.exports = function (obj, transformer) {
        var copy = canReflect.serialize(obj);
        canReflect.eachKey(transformer, function (writeKey, readKey) {
            var readParts = utils.parts(readKey), writeParts = utils.parts(writeKey);
            var parentsAndKeys = [];
            walk(copy, readParts, function (info) {
                parentsAndKeys.push(info);
            });
            var last = parentsAndKeys[parentsAndKeys.length - 1];
            var value = last.value;
            if (value !== undefined) {
                walk(copy, writeParts, function (info, i) {
                    if (i < writeParts.length - 1 && !info.value) {
                        return info.parent[info.key] = {};
                    } else if (i === writeParts.length - 1) {
                        info.parent[info.key] = value;
                    }
                });
                deleteKeys(parentsAndKeys);
            }
        });
        return copy;
    };
});
/*can-key@1.2.1#can-key*/
define('can-key@1.2.1#can-key', [
    'require',
    'exports',
    'module',
    'can-key/delete/delete',
    'can-key/get/get',
    'can-key/replace-with/replace-with',
    'can-key/set/set',
    'can-key/transform/transform',
    'can-key/walk/walk',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var deleteKey = require('can-key/delete/delete'), get = require('can-key/get/get'), replaceWith = require('can-key/replace-with/replace-with'), set = require('can-key/set/set'), transform = require('can-key/transform/transform'), walk = require('can-key/walk/walk'), namespace = require('can-namespace');
    module.exports = namespace.key = {
        deleteKey: deleteKey,
        get: get,
        replaceWith: replaceWith,
        set: set,
        transform: transform,
        walk: walk
    };
});
/*can-simple-observable@2.4.2#key/key*/
define('can-simple-observable@2.4.2#key/key', [
    'require',
    'exports',
    'module',
    'can-key',
    'can-key/utils',
    'can-reflect',
    'can-observation',
    'can-reflect-dependencies'
], function (require, exports, module) {
    var canKey = require('can-key');
    var canKeyUtils = require('can-key/utils');
    var canReflect = require('can-reflect');
    var Observation = require('can-observation');
    if (process.env.NODE_ENV !== 'production') {
        var canReflectDependencies = require('can-reflect-dependencies');
    }
    module.exports = function keyObservable(root, keyPath) {
        var keyPathParts = canKeyUtils.parts(keyPath);
        var lastIndex = keyPathParts.length - 1;
        if (process.env.NODE_ENV !== 'production') {
            var lastKey;
            var lastParent;
        }
        var observation = new Observation(function () {
            var value;
            canKey.walk(root, keyPathParts, function (keyData, i) {
                if (i === lastIndex) {
                    if (process.env.NODE_ENV !== 'production') {
                        if (lastParent && (keyData.key !== lastKey || keyData.parent !== lastParent)) {
                            canReflectDependencies.deleteMutatedBy(lastParent, lastKey, observation);
                        }
                        lastKey = keyData.key;
                        lastParent = keyData.parent;
                        canReflectDependencies.addMutatedBy(lastParent, lastKey, observation);
                    }
                    value = keyData.value;
                }
            });
            return value;
        });
        var valueSetter = function (newVal) {
            canKey.set(root, keyPathParts, newVal);
        };
        Object.defineProperty(observation, 'value', {
            get: observation.get,
            set: valueSetter
        });
        var symbolsToAssign = { 'can.setValue': valueSetter };
        if (process.env.NODE_ENV !== 'production') {
            symbolsToAssign['can.getName'] = function getName() {
                var objectName = canReflect.getName(root);
                return 'keyObservable<' + objectName + '.' + keyPath + '>';
            };
            symbolsToAssign['can.getWhatIChange'] = function getWhatIChange() {
                var m = new Map();
                var s = new Set();
                s.add(lastKey);
                m.set(lastParent, s);
                return { mutate: { keyDependencies: m } };
            };
        }
        return canReflect.assignSymbols(observation, symbolsToAssign);
    };
});
/*can-value@1.1.1#can-value*/
define('can-value@1.1.1#can-value', [
    'require',
    'exports',
    'module',
    'can-key',
    'can-reflect',
    'can-simple-observable/key/key',
    'can-namespace',
    'can-observation',
    'can-simple-observable',
    'can-simple-observable/settable/settable'
], function (require, exports, module) {
    'use strict';
    var canKey = require('can-key');
    var canReflect = require('can-reflect');
    var keyObservable = require('can-simple-observable/key/key');
    var namespace = require('can-namespace');
    var Observation = require('can-observation');
    var SimpleObservable = require('can-simple-observable');
    var SettableObservable = require('can-simple-observable/settable/settable');
    module.exports = namespace.value = {
        bind: function (object, keyPath) {
            return keyObservable(object, keyPath);
        },
        from: function (object, keyPath) {
            var observationFunction = function () {
                return canKey.get(object, keyPath);
            };
            if (process.env.NODE_ENV !== 'production') {
                var objectName = canReflect.getName(object);
                Object.defineProperty(observationFunction, 'name', { value: 'ValueFrom<' + objectName + '.' + keyPath + '>' });
            }
            return new Observation(observationFunction);
        },
        returnedBy: function (getter, context, initialValue) {
            if (getter.length === 1) {
                return new SettableObservable(getter, context, initialValue);
            } else {
                return new Observation(getter, context);
            }
        },
        to: function (object, keyPath) {
            var observable = keyObservable(object, keyPath);
            if (process.env.NODE_ENV !== 'production') {
                canReflect.assignSymbols(observable.onDependencyChange, {
                    'can.getChangesDependencyRecord': function getChangesDependencyRecord() {
                    }
                });
            }
            var symbolsToAssign = { 'can.getValue': null };
            if (process.env.NODE_ENV !== 'production') {
                symbolsToAssign['can.getValueDependencies'] = function getValueDependencies() {
                };
            }
            return canReflect.assignSymbols(observable, symbolsToAssign);
        },
        with: function (initialValue) {
            return new SimpleObservable(initialValue);
        }
    };
});
/*can@5.31.0#es/can-value*/
define('can@5.31.0#es/can-value', [
    'exports',
    'can-value'
], function (exports, _canValue) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canValue).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-observation*/
define('can@5.31.0#es/can-observation', [
    'exports',
    'can-observation'
], function (exports, _canObservation) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canObservation).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-observation-recorder*/
define('can@5.31.0#es/can-observation-recorder', [
    'exports',
    'can-observation-recorder'
], function (exports, _canObservationRecorder) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canObservationRecorder).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-simple-map@4.3.2#can-simple-map*/
define('can-simple-map@4.3.2#can-simple-map', [
    'require',
    'exports',
    'module',
    'can-construct',
    'can-event-queue/map/map',
    'can-queues',
    'can-observation-recorder',
    'can-reflect',
    'can-log/dev/dev',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var Construct = require('can-construct');
    var eventQueue = require('can-event-queue/map/map');
    var queues = require('can-queues');
    var ObservationRecorder = require('can-observation-recorder');
    var canReflect = require('can-reflect');
    var dev = require('can-log/dev/dev');
    var canSymbol = require('can-symbol');
    var ensureMeta = function ensureMeta(obj) {
        var metaSymbol = canSymbol.for('can.meta');
        var meta = obj[metaSymbol];
        if (!meta) {
            meta = {};
            canReflect.setKeyValue(obj, metaSymbol, meta);
        }
        return meta;
    };
    var SimpleMap = Construct.extend('SimpleMap', {
        setup: function (initialData) {
            this._data = {};
            if (initialData && typeof initialData === 'object') {
                this.attr(initialData);
            }
        },
        attr: function (prop, value) {
            var self = this;
            if (arguments.length === 0) {
                ObservationRecorder.add(this, 'can.keys');
                var data = {};
                canReflect.eachKey(this._data, function (value, prop) {
                    ObservationRecorder.add(this, prop);
                    data[prop] = value;
                }, this);
                return data;
            } else if (arguments.length > 1) {
                var had = this._data.hasOwnProperty(prop);
                var old = this._data[prop];
                this._data[prop] = value;
                if (old !== value) {
                    if (process.env.NODE_ENV !== 'production') {
                        if (typeof this._log === 'function') {
                            this._log(prop, value, old);
                        }
                    }
                    var dispatched = {
                        keyChanged: !had ? prop : undefined,
                        type: prop
                    };
                    if (process.env.NODE_ENV !== 'production') {
                        dispatched = {
                            keyChanged: !had ? prop : undefined,
                            type: prop,
                            reasonLog: [
                                canReflect.getName(this) + '\'s',
                                prop,
                                'changed to',
                                value,
                                'from',
                                old
                            ]
                        };
                    }
                    this.dispatch(dispatched, [
                        value,
                        old
                    ]);
                }
            } else if (typeof prop === 'object') {
                queues.batch.start();
                canReflect.eachKey(prop, function (value, key) {
                    self.attr(key, value);
                });
                queues.batch.stop();
            } else {
                if (prop !== 'constructor') {
                    ObservationRecorder.add(this, prop);
                    return this._data[prop];
                }
                return this.constructor;
            }
        },
        serialize: function () {
            return canReflect.serialize(this, Map);
        },
        get: function () {
            return this.attr.apply(this, arguments);
        },
        set: function () {
            return this.attr.apply(this, arguments);
        },
        log: function (key) {
            if (process.env.NODE_ENV !== 'production') {
                var quoteString = function quoteString(x) {
                    return typeof x === 'string' ? JSON.stringify(x) : x;
                };
            }
            var meta = ensureMeta(this);
            meta.allowedLogKeysSet = meta.allowedLogKeysSet || new Set();
            if (key) {
                meta.allowedLogKeysSet.add(key);
            }
            this._log = function (prop, current, previous, log) {
                if (key && !meta.allowedLogKeysSet.has(prop)) {
                    return;
                }
                dev.log(canReflect.getName(this), '\n key ', quoteString(prop), '\n is  ', quoteString(current), '\n was ', quoteString(previous));
            };
        }
    });
    eventQueue(SimpleMap.prototype);
    var simpleMapProto = {
        'can.isMapLike': true,
        'can.isListLike': false,
        'can.isValueLike': false,
        'can.getKeyValue': SimpleMap.prototype.get,
        'can.setKeyValue': SimpleMap.prototype.set,
        'can.deleteKeyValue': function (prop) {
            var dispatched;
            if (this._data.hasOwnProperty(prop)) {
                var old = this._data[prop];
                delete this._data[prop];
                if (process.env.NODE_ENV !== 'production') {
                    if (typeof this._log === 'function') {
                        this._log(prop, undefined, old);
                    }
                }
                dispatched = {
                    keyChanged: prop,
                    type: prop
                };
                if (process.env.NODE_ENV !== 'production') {
                    dispatched = {
                        keyChanged: prop,
                        type: prop,
                        reasonLog: [
                            canReflect.getName(this) + '\'s',
                            prop,
                            'deleted',
                            old
                        ]
                    };
                }
                this.dispatch(dispatched, [
                    undefined,
                    old
                ]);
            }
        },
        'can.getOwnEnumerableKeys': function () {
            ObservationRecorder.add(this, 'can.keys');
            return Object.keys(this._data);
        },
        'can.assignDeep': function (source) {
            queues.batch.start();
            canReflect.assignMap(this, source);
            queues.batch.stop();
        },
        'can.updateDeep': function (source) {
            queues.batch.start();
            canReflect.updateMap(this, source);
            queues.batch.stop();
        },
        'can.keyHasDependencies': function (key) {
            return false;
        },
        'can.getKeyDependencies': function (key) {
            return undefined;
        },
        'can.hasOwnKey': function (key) {
            return this._data.hasOwnProperty(key);
        }
    };
    if (process.env.NODE_ENV !== 'production') {
        simpleMapProto['can.getName'] = function () {
            return canReflect.getName(this.constructor) + '{}';
        };
    }
    canReflect.assignSymbols(SimpleMap.prototype, simpleMapProto);
    module.exports = SimpleMap;
});
/*can@5.31.0#es/can-simple-map*/
define('can@5.31.0#es/can-simple-map', [
    'exports',
    'can-simple-map'
], function (exports, _canSimpleMap) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canSimpleMap).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-bind@1.4.3#can-bind*/
define('can-bind@1.4.3#can-bind', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-symbol',
    'can-namespace',
    'can-queues',
    'can-assign',
    'can-log/dev/dev',
    'can-reflect-dependencies'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var namespace = require('can-namespace');
    var queues = require('can-queues');
    var canAssign = require('can-assign');
    if (process.env.NODE_ENV !== 'production') {
        var canLog = require('can-log/dev/dev');
        var canReflectDeps = require('can-reflect-dependencies');
    }
    var getChangesSymbol = canSymbol.for('can.getChangesDependencyRecord');
    var getValueSymbol = canSymbol.for('can.getValue');
    var onValueSymbol = canSymbol.for('can.onValue');
    var onEmitSymbol = canSymbol.for('can.onEmit');
    var offEmitSymbol = canSymbol.for('can.offEmit');
    var setValueSymbol = canSymbol.for('can.setValue');
    function defaultSetValue(newValue, observable) {
        canReflect.setValue(observable, newValue);
    }
    function onEmit(listenToObservable, updateFunction, queue) {
        return listenToObservable[onEmitSymbol](updateFunction, queue);
    }
    function offEmit(listenToObservable, updateFunction, queue) {
        return listenToObservable[offEmitSymbol](updateFunction, queue);
    }
    function turnOffListeningAndUpdate(listenToObservable, updateObservable, updateFunction, queue) {
        var offValueOrOffEmitFn;
        if (listenToObservable[onValueSymbol]) {
            offValueOrOffEmitFn = canReflect.offValue;
        } else if (listenToObservable[onEmitSymbol]) {
            offValueOrOffEmitFn = offEmit;
        }
        if (offValueOrOffEmitFn) {
            offValueOrOffEmitFn(listenToObservable, updateFunction, queue);
            if (process.env.NODE_ENV !== 'production') {
                canReflectDeps.deleteMutatedBy(updateObservable, listenToObservable);
                updateFunction[getChangesSymbol] = function getChangesDependencyRecord() {
                };
            }
        }
    }
    function turnOnListeningAndUpdate(listenToObservable, updateObservable, updateFunction, queue) {
        var onValueOrOnEmitFn;
        if (listenToObservable[onValueSymbol]) {
            onValueOrOnEmitFn = canReflect.onValue;
        } else if (listenToObservable[onEmitSymbol]) {
            onValueOrOnEmitFn = onEmit;
        }
        if (onValueOrOnEmitFn) {
            onValueOrOnEmitFn(listenToObservable, updateFunction, queue);
            if (process.env.NODE_ENV !== 'production') {
                canReflectDeps.addMutatedBy(updateObservable, listenToObservable);
                updateFunction[getChangesSymbol] = function getChangesDependencyRecord() {
                    var s = new Set();
                    s.add(updateObservable);
                    return { valueDependencies: s };
                };
            }
        }
    }
    function Semaphore(binding, type) {
        this.value = 0;
        this._binding = binding;
        this._type = type;
    }
    canAssign(Semaphore.prototype, {
        decrement: function () {
            this.value -= 1;
        },
        increment: function (args) {
            this._incremented = true;
            this.value += 1;
            if (process.env.NODE_ENV !== 'production') {
                if (this.value === 1) {
                    this._binding._debugSemaphores = [];
                }
                var semaphoreData = {
                    type: this._type,
                    action: 'increment',
                    observable: args.observable,
                    newValue: args.newValue,
                    value: this.value,
                    lastTask: queues.lastTask()
                };
                this._binding._debugSemaphores.push(semaphoreData);
            }
        }
    });
    function Bind(options) {
        this._options = options;
        if (process.env.NODE_ENV !== 'production') {
            if (options.child === undefined) {
                throw new TypeError('You must supply a child');
            }
            if (options.parent === undefined) {
                throw new TypeError('You must supply a parent');
            }
            if (options.queue && [
                    'notify',
                    'derive',
                    'domUI'
                ].indexOf(options.queue) === -1) {
                throw new RangeError('Invalid queue; must be one of notify, derive, or domUI');
            }
        }
        if (options.queue === undefined) {
            options.queue = 'domUI';
        }
        if (options.cycles > 0 === false) {
            options.cycles = 0;
        }
        options.onInitDoNotUpdateChild = typeof options.onInitDoNotUpdateChild === 'boolean' ? options.onInitDoNotUpdateChild : false;
        options.onInitDoNotUpdateParent = typeof options.onInitDoNotUpdateParent === 'boolean' ? options.onInitDoNotUpdateParent : false;
        options.onInitSetUndefinedParentIfChildIsDefined = typeof options.onInitSetUndefinedParentIfChildIsDefined === 'boolean' ? options.onInitSetUndefinedParentIfChildIsDefined : true;
        var childSemaphore = new Semaphore(this, 'child');
        var parentSemaphore = new Semaphore(this, 'parent');
        var childToParent = true;
        if (typeof options.childToParent === 'boolean') {
            childToParent = options.childToParent;
        } else if (options.child[getValueSymbol] == null) {
            childToParent = false;
        } else if (options.setParent === undefined && options.parent[setValueSymbol] == null) {
            childToParent = false;
        }
        var parentToChild = true;
        if (typeof options.parentToChild === 'boolean') {
            parentToChild = options.parentToChild;
        } else if (options.parent[getValueSymbol] == null) {
            parentToChild = false;
        } else if (options.setChild === undefined && options.child[setValueSymbol] == null) {
            parentToChild = false;
        }
        if (childToParent === false && parentToChild === false) {
            throw new Error('Neither the child nor parent will be updated; this is a no-way binding');
        }
        this._childToParent = childToParent;
        this._parentToChild = parentToChild;
        if (options.setChild === undefined) {
            options.setChild = defaultSetValue;
        }
        if (options.setParent === undefined) {
            options.setParent = defaultSetValue;
        }
        if (options.priority !== undefined) {
            canReflect.setPriority(options.child, options.priority);
            canReflect.setPriority(options.parent, options.priority);
        }
        var allowedUpdates = options.cycles * 2;
        var allowedChildUpdates = allowedUpdates + (options.sticky === 'childSticksToParent' ? 1 : 0);
        var allowedParentUpdates = allowedUpdates + (options.sticky === 'parentSticksToChild' ? 1 : 0);
        this._bindingState = {
            child: false,
            parent: false
        };
        this._updateChild = function (newValue) {
            updateValue.call(this, {
                bindingState: this._bindingState,
                newValue: newValue,
                debugObservableName: 'child',
                debugPartnerName: 'parent',
                observable: options.child,
                setValue: options.setChild,
                semaphore: childSemaphore,
                allowedUpdates: allowedChildUpdates,
                sticky: options.sticky === 'parentSticksToChild',
                partner: options.parent,
                setPartner: options.setParent,
                partnerSemaphore: parentSemaphore
            });
        }.bind(this);
        this._updateParent = function (newValue) {
            updateValue.call(this, {
                bindingState: this._bindingState,
                newValue: newValue,
                debugObservableName: 'parent',
                debugPartnerName: 'child',
                observable: options.parent,
                setValue: options.setParent,
                semaphore: parentSemaphore,
                allowedUpdates: allowedParentUpdates,
                sticky: options.sticky === 'childSticksToParent',
                partner: options.child,
                setPartner: options.setChild,
                partnerSemaphore: childSemaphore
            });
        }.bind(this);
        if (process.env.NODE_ENV !== 'production') {
            Object.defineProperty(this._updateChild, 'name', {
                value: options.updateChildName ? options.updateChildName : 'update ' + canReflect.getName(options.child),
                configurable: true
            });
            Object.defineProperty(this._updateParent, 'name', {
                value: options.updateParentName ? options.updateParentName : 'update ' + canReflect.getName(options.parent),
                configurable: true
            });
        }
    }
    Object.defineProperty(Bind.prototype, 'parentValue', {
        get: function () {
            return canReflect.getValue(this._options.parent);
        }
    });
    canAssign(Bind.prototype, {
        start: function () {
            var childValue;
            var options = this._options;
            var parentValue;
            this.startParent();
            this.startChild();
            if (this._childToParent === true && this._parentToChild === true) {
                parentValue = canReflect.getValue(options.parent);
                if (parentValue === undefined) {
                    childValue = canReflect.getValue(options.child);
                    if (childValue === undefined) {
                        if (options.onInitDoNotUpdateChild === false) {
                            this._updateChild(parentValue);
                        }
                    } else if (options.onInitDoNotUpdateParent === false && options.onInitSetUndefinedParentIfChildIsDefined === true) {
                        this._updateParent(childValue);
                    }
                } else {
                    if (options.onInitDoNotUpdateChild === false) {
                        this._updateChild(parentValue);
                    }
                }
                if (process.env.NODE_ENV !== 'production') {
                    var parentContext = options.parent.observation && options.parent.observation.func || options.parent;
                    var childContext = options.child.observation && options.child.observation.func || options.child;
                    parentValue = canReflect.getValue(options.parent);
                    childValue = canReflect.getValue(options.child);
                    if (options.sticky && childValue !== parentValue) {
                        canLog.warn('can-bind: The ' + (options.sticky === 'parentSticksToChild' ? 'parent' : 'child') + ' of the sticky two-way binding ' + (options.debugName || canReflect.getName(parentContext) + '<->' + canReflect.getName(childContext)) + ' is changing or converting its value when set. Conversions should only be done on the binding ' + (options.sticky === 'parentSticksToChild' ? 'child' : 'parent') + ' to preserve synchronization. ' + 'See https://canjs.com/doc/can-stache-bindings.html#StickyBindings for more about sticky bindings');
                    }
                }
            } else if (this._childToParent === true) {
                if (options.onInitDoNotUpdateParent === false) {
                    childValue = canReflect.getValue(options.child);
                    this._updateParent(childValue);
                }
            } else if (this._parentToChild === true) {
                if (options.onInitDoNotUpdateChild === false) {
                    parentValue = canReflect.getValue(options.parent);
                    this._updateChild(parentValue);
                }
            }
        },
        startChild: function () {
            if (this._bindingState.child === false && this._childToParent === true) {
                var options = this._options;
                this._bindingState.child = true;
                turnOnListeningAndUpdate(options.child, options.parent, this._updateParent, options.queue);
            }
        },
        startParent: function () {
            if (this._bindingState.parent === false && this._parentToChild === true) {
                var options = this._options;
                this._bindingState.parent = true;
                turnOnListeningAndUpdate(options.parent, options.child, this._updateChild, options.queue);
            }
        },
        stop: function () {
            var bindingState = this._bindingState;
            var options = this._options;
            if (bindingState.parent === true && this._parentToChild === true) {
                bindingState.parent = false;
                turnOffListeningAndUpdate(options.parent, options.child, this._updateChild, options.queue);
            }
            if (bindingState.child === true && this._childToParent === true) {
                bindingState.child = false;
                turnOffListeningAndUpdate(options.child, options.parent, this._updateParent, options.queue);
            }
        }
    });
    [
        'parent',
        'child'
    ].forEach(function (property) {
        Object.defineProperty(Bind.prototype, property, {
            get: function () {
                return this._options[property];
            }
        });
    });
    function updateValue(args) {
        var bindingState = args.bindingState;
        if (bindingState.child === false && bindingState.parent === false) {
            return;
        }
        var semaphore = args.semaphore;
        if (semaphore.value + args.partnerSemaphore.value <= args.allowedUpdates) {
            queues.batch.start();
            semaphore.increment(args);
            args.setValue(args.newValue, args.observable);
            queues.mutateQueue.enqueue(semaphore.decrement, semaphore, []);
            queues.batch.stop();
            if (args.sticky) {
                var observableValue = canReflect.getValue(args.observable);
                if (observableValue !== canReflect.getValue(args.partner)) {
                    args.setPartner(observableValue, args.partner);
                }
            }
        } else {
            if (process.env.NODE_ENV !== 'production') {
                var currentValue = canReflect.getValue(args.observable);
                if (currentValue !== args.newValue) {
                    var warningParts = [
                        'can-bind: attempting to update ' + args.debugObservableName + ' ' + canReflect.getName(args.observable) + ' to new value: %o',
                        '\u2026but the ' + args.debugObservableName + ' semaphore is at ' + semaphore.value + ' and the ' + args.debugPartnerName + ' semaphore is at ' + args.partnerSemaphore.value + '. The number of allowed updates is ' + args.allowedUpdates + '.',
                        'The ' + args.debugObservableName + ' value will remain unchanged; it\u2019s currently: %o. ',
                        'Read https://canjs.com/doc/can-bind.html#Warnings for more information. Printing mutation history:'
                    ];
                    canLog.warn(warningParts.join('\n'), args.newValue, currentValue);
                    if (console.groupCollapsed) {
                        var lastStack = [];
                        var getFromLastStack = function (stack) {
                            if (lastStack.length) {
                                for (var i = lastStack.length - 1; i >= 0; i--) {
                                    var index = stack.indexOf(lastStack[i]);
                                    if (index !== -1) {
                                        return stack.slice(i + 1);
                                    }
                                }
                            }
                            return stack;
                        };
                        this._debugSemaphores.forEach(function (semaphoreMutation) {
                            if (semaphoreMutation.action === 'increment') {
                                console.groupCollapsed(semaphoreMutation.type + ' ' + canReflect.getName(semaphoreMutation.observable) + ' set.');
                                var stack = queues.stack(semaphoreMutation.lastTask);
                                var printStack = getFromLastStack(stack);
                                lastStack = stack;
                                queues.logStack.call({
                                    stack: function () {
                                        return printStack;
                                    }
                                });
                                console.log(semaphoreMutation.type + ' semaphore incremented to ' + semaphoreMutation.value + '.');
                                console.log(canReflect.getName(semaphoreMutation.observable), semaphoreMutation.observable, 'set to ', semaphoreMutation.newValue);
                                console.groupEnd();
                            }
                        });
                        console.groupCollapsed(args.debugObservableName + ' ' + canReflect.getName(args.observable) + ' NOT set.');
                        var stack = getFromLastStack(queues.stack());
                        queues.logStack.call({
                            stack: function () {
                                return stack;
                            }
                        });
                        console.log(args.debugObservableName + ' semaphore (' + semaphore.value + ') + ' + args.debugPartnerName + ' semaphore (' + args.partnerSemaphore.value + ') IS NOT <= allowed updates (' + args.allowedUpdates + ')');
                        console.log('Prevented from setting ' + canReflect.getName(args.observable), args.observable, 'to', args.newValue);
                        console.groupEnd();
                    }
                }
            }
        }
    }
    module.exports = namespace.Bind = Bind;
});
/*can@5.31.0#es/can-bind*/
define('can@5.31.0#es/can-bind', [
    'exports',
    'can-bind'
], function (exports, _canBind) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canBind).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-event-queue*/
define('can@5.31.0#es/can-event-queue', [
    'exports',
    'can-event-queue/map/map',
    'can-event-queue/value/value'
], function (exports, _map, _value) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'mapEventBindings', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_map).default;
        }
    });
    Object.defineProperty(exports, 'valueEventBindings', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_value).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-simple-observable*/
define('can@5.31.0#es/can-simple-observable', [
    'exports',
    'can-simple-observable'
], function (exports, _canSimpleObservable) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canSimpleObservable).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-attribute-encoder@1.1.4#can-attribute-encoder*/
define('can-attribute-encoder@1.1.4#can-attribute-encoder', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-log/dev/dev'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var dev = require('can-log/dev/dev');
    function each(items, callback) {
        for (var i = 0; i < items.length; i++) {
            callback(items[i], i);
        }
    }
    function makeMap(str) {
        var obj = {}, items = str.split(',');
        each(items, function (name) {
            obj[name] = true;
        });
        return obj;
    }
    var caseMattersAttributes = makeMap('allowReorder,attributeName,attributeType,autoReverse,baseFrequency,baseProfile,calcMode,clipPathUnits,contentScriptType,contentStyleType,diffuseConstant,edgeMode,externalResourcesRequired,filterRes,filterUnits,glyphRef,gradientTransform,gradientUnits,kernelMatrix,kernelUnitLength,keyPoints,keySplines,keyTimes,lengthAdjust,limitingConeAngle,markerHeight,markerUnits,markerWidth,maskContentUnits,maskUnits,patternContentUnits,patternTransform,patternUnits,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,repeatCount,repeatDur,requiredExtensions,requiredFeatures,specularConstant,specularExponent,spreadMethod,startOffset,stdDeviation,stitchTiles,surfaceScale,systemLanguage,tableValues,textLength,viewBox,viewTarget,xChannelSelector,yChannelSelector,controlsList');
    function camelCaseToSpinalCase(match, lowerCaseChar, upperCaseChar) {
        return lowerCaseChar + '-' + upperCaseChar.toLowerCase();
    }
    function startsWith(allOfIt, startsWith) {
        return allOfIt.indexOf(startsWith) === 0;
    }
    function endsWith(allOfIt, endsWith) {
        return allOfIt.length - allOfIt.lastIndexOf(endsWith) === endsWith.length;
    }
    var regexes = {
        leftParens: /\(/g,
        rightParens: /\)/g,
        leftBrace: /\{/g,
        rightBrace: /\}/g,
        camelCase: /([a-z]|[0-9]|^)([A-Z])/g,
        forwardSlash: /\//g,
        space: /\s/g,
        uppercase: /[A-Z]/g,
        uppercaseDelimiterThenChar: /:u:([a-z])/g,
        caret: /\^/g,
        dollar: /\$/g,
        at: /@/g
    };
    var delimiters = {
        prependUppercase: ':u:',
        replaceSpace: ':s:',
        replaceForwardSlash: ':f:',
        replaceLeftParens: ':lp:',
        replaceRightParens: ':rp:',
        replaceLeftBrace: ':lb:',
        replaceRightBrace: ':rb:',
        replaceCaret: ':c:',
        replaceDollar: ':d:',
        replaceAt: ':at:'
    };
    var encoder = {};
    encoder.encode = function (name) {
        var encoded = name;
        if (!caseMattersAttributes[encoded] && encoded.match(regexes.camelCase)) {
            if (startsWith(encoded, 'on:') || endsWith(encoded, ':to') || endsWith(encoded, ':from') || endsWith(encoded, ':bind') || endsWith(encoded, ':raw')) {
                encoded = encoded.replace(regexes.uppercase, function (char) {
                    return delimiters.prependUppercase + char.toLowerCase();
                });
            } else if (startsWith(encoded, '(') || startsWith(encoded, '{')) {
                encoded = encoded.replace(regexes.camelCase, camelCaseToSpinalCase);
                if (process.env.NODE_ENV !== 'production') {
                    dev.warn('can-attribute-encoder: Found attribute with name: ' + name + '. Converting to: ' + encoded + '.');
                }
            }
        }
        encoded = encoded.replace(regexes.space, delimiters.replaceSpace).replace(regexes.forwardSlash, delimiters.replaceForwardSlash).replace(regexes.leftParens, delimiters.replaceLeftParens).replace(regexes.rightParens, delimiters.replaceRightParens).replace(regexes.leftBrace, delimiters.replaceLeftBrace).replace(regexes.rightBrace, delimiters.replaceRightBrace).replace(regexes.caret, delimiters.replaceCaret).replace(regexes.dollar, delimiters.replaceDollar).replace(regexes.at, delimiters.replaceAt);
        return encoded;
    };
    encoder.decode = function (name) {
        var decoded = name;
        if (!caseMattersAttributes[decoded] && regexes.uppercaseDelimiterThenChar.test(decoded)) {
            if (startsWith(decoded, 'on:') || endsWith(decoded, ':to') || endsWith(decoded, ':from') || endsWith(decoded, ':bind') || endsWith(decoded, ':raw')) {
                decoded = decoded.replace(regexes.uppercaseDelimiterThenChar, function (match, char) {
                    return char.toUpperCase();
                });
            }
        }
        decoded = decoded.replace(delimiters.replaceLeftParens, '(').replace(delimiters.replaceRightParens, ')').replace(delimiters.replaceLeftBrace, '{').replace(delimiters.replaceRightBrace, '}').replace(delimiters.replaceForwardSlash, '/').replace(delimiters.replaceSpace, ' ').replace(delimiters.replaceCaret, '^').replace(delimiters.replaceDollar, '$').replace(delimiters.replaceAt, '@');
        return decoded;
    };
    if (namespace.encoder) {
        throw new Error('You can\'t have two versions of can-attribute-encoder, check your dependencies');
    } else {
        module.exports = namespace.encoder = encoder;
    }
});
/*can-view-parser@4.1.3#can-view-parser*/
define('can-view-parser@4.1.3#can-view-parser', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-log/dev/dev',
    'can-attribute-encoder'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace'), dev = require('can-log/dev/dev'), encoder = require('can-attribute-encoder');
    function each(items, callback) {
        for (var i = 0; i < items.length; i++) {
            callback(items[i], i);
        }
    }
    function makeMap(str) {
        var obj = {}, items = str.split(',');
        each(items, function (name) {
            obj[name] = true;
        });
        return obj;
    }
    function handleIntermediate(intermediate, handler) {
        for (var i = 0, len = intermediate.length; i < len; i++) {
            var item = intermediate[i];
            handler[item.tokenType].apply(handler, item.args);
        }
        return intermediate;
    }
    if (process.env.NODE_ENV !== 'production') {
        var countLines = function countLines(input) {
            return input.split('\n').length - 1;
        };
    }
    var alphaNumeric = 'A-Za-z0-9', alphaNumericHU = '-:_' + alphaNumeric, magicStart = '{{', endTag = new RegExp('^<\\/([' + alphaNumericHU + ']+)[^>]*>'), magicMatch = new RegExp('\\{\\{(![\\s\\S]*?!|[\\s\\S]*?)\\}\\}\\}?', 'g'), space = /\s/, alphaRegex = new RegExp('[' + alphaNumeric + ']'), attributeRegexp = new RegExp('[' + alphaNumericHU + ']+s*=s*("[^"]*"|\'[^\']*\')');
    var empty = makeMap('area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed');
    var caseMattersElements = makeMap('altGlyph,altGlyphDef,altGlyphItem,animateColor,animateMotion,animateTransform,clipPath,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,foreignObject,glyphRef,linearGradient,radialGradient,textPath');
    var closeSelf = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr');
    var special = makeMap('script');
    var tokenTypes = 'start,end,close,attrStart,attrEnd,attrValue,chars,comment,special,done'.split(',');
    var startOppositesMap = {
        '{': '}',
        '(': ')'
    };
    var fn = function () {
    };
    var HTMLParser = function (html, handler, returnIntermediate) {
        if (typeof html === 'object') {
            return handleIntermediate(html, handler);
        }
        var intermediate = [];
        handler = handler || {};
        if (returnIntermediate) {
            each(tokenTypes, function (name) {
                var callback = handler[name] || fn;
                handler[name] = function () {
                    if (callback.apply(this, arguments) !== false) {
                        var end = arguments.length;
                        if (arguments[end - 1] === undefined) {
                            end = arguments.length - 1;
                        }
                        if (process.env.NODE_ENV !== 'production') {
                            end = arguments.length;
                        }
                        intermediate.push({
                            tokenType: name,
                            args: [].slice.call(arguments, 0, end)
                        });
                    }
                };
            });
        }
        function parseStartTag(tag, tagName, rest, unary) {
            tagName = caseMattersElements[tagName] ? tagName : tagName.toLowerCase();
            if (closeSelf[tagName] && stack.last() === tagName) {
                parseEndTag('', tagName);
            }
            unary = empty[tagName] || !!unary;
            handler.start(tagName, unary, lineNo);
            if (!unary) {
                stack.push(tagName);
            }
            HTMLParser.parseAttrs(rest, handler, lineNo);
            if (process.env.NODE_ENV !== 'production') {
                lineNo += countLines(tag);
            }
            handler.end(tagName, unary, lineNo);
            if (tagName === 'html') {
                skipChars = true;
            }
        }
        function parseEndTag(tag, tagName) {
            var pos;
            if (!tagName) {
                pos = 0;
            } else {
                tagName = caseMattersElements[tagName] ? tagName : tagName.toLowerCase();
                for (pos = stack.length - 1; pos >= 0; pos--) {
                    if (stack[pos] === tagName) {
                        break;
                    }
                }
            }
            if (process.env.NODE_ENV !== 'production') {
                if (typeof tag === 'undefined') {
                    if (stack.length > 0) {
                        if (handler.filename) {
                            dev.warn(handler.filename + ': expected closing tag </' + stack[pos] + '>');
                        } else {
                            dev.warn('expected closing tag </' + stack[pos] + '>');
                        }
                    }
                } else if (pos < 0 || pos !== stack.length - 1) {
                    if (stack.length > 0) {
                        if (handler.filename) {
                            dev.warn(handler.filename + ':' + lineNo + ': unexpected closing tag ' + tag + ' expected </' + stack[stack.length - 1] + '>');
                        } else {
                            dev.warn(lineNo + ': unexpected closing tag ' + tag + ' expected </' + stack[stack.length - 1] + '>');
                        }
                    } else {
                        if (handler.filename) {
                            dev.warn(handler.filename + ':' + lineNo + ': unexpected closing tag ' + tag);
                        } else {
                            dev.warn(lineNo + ': unexpected closing tag ' + tag);
                        }
                    }
                }
            }
            if (pos >= 0) {
                for (var i = stack.length - 1; i >= pos; i--) {
                    if (handler.close) {
                        handler.close(stack[i], lineNo);
                    }
                }
                stack.length = pos;
                if (tagName === 'body') {
                    skipChars = true;
                }
            }
        }
        function parseMustache(mustache, inside) {
            if (handler.special) {
                handler.special(inside, lineNo);
            }
        }
        var callChars = function () {
            if (charsText && !skipChars) {
                if (handler.chars) {
                    handler.chars(charsText, lineNo);
                }
                if (process.env.NODE_ENV !== 'production') {
                    lineNo += countLines(charsText);
                }
            }
            skipChars = false;
            charsText = '';
        };
        var index, chars, skipChars, match, lineNo, stack = [], last = html, charsText = '';
        if (process.env.NODE_ENV !== 'production') {
            lineNo = 1;
        }
        stack.last = function () {
            return this[this.length - 1];
        };
        while (html) {
            chars = true;
            if (!stack.last() || !special[stack.last()]) {
                if (html.indexOf('<!--') === 0) {
                    index = html.indexOf('-->');
                    if (index >= 0) {
                        callChars();
                        if (handler.comment) {
                            handler.comment(html.substring(4, index), lineNo);
                        }
                        if (process.env.NODE_ENV !== 'production') {
                            lineNo += countLines(html.substring(0, index + 3));
                        }
                        html = html.substring(index + 3);
                        chars = false;
                    }
                } else if (html.indexOf('</') === 0) {
                    match = html.match(endTag);
                    if (match) {
                        callChars();
                        match[0].replace(endTag, parseEndTag);
                        if (process.env.NODE_ENV !== 'production') {
                            lineNo += countLines(html.substring(0, match[0].length));
                        }
                        html = html.substring(match[0].length);
                        chars = false;
                    }
                } else if (html.indexOf('<') === 0) {
                    var res = HTMLParser.searchStartTag(html);
                    if (res) {
                        callChars();
                        parseStartTag.apply(null, res.match);
                        html = res.html;
                        chars = false;
                    }
                } else if (html.indexOf(magicStart) === 0) {
                    match = html.match(magicMatch);
                    if (match) {
                        callChars();
                        match[0].replace(magicMatch, parseMustache);
                        if (process.env.NODE_ENV !== 'production') {
                            lineNo += countLines(html.substring(0, match[0].length));
                        }
                        html = html.substring(match[0].length);
                    }
                }
                if (chars) {
                    index = findBreak(html, magicStart);
                    if (index === 0 && html === last) {
                        charsText += html.charAt(0);
                        html = html.substr(1);
                        index = findBreak(html, magicStart);
                    }
                    var text = index < 0 ? html : html.substring(0, index);
                    html = index < 0 ? '' : html.substring(index);
                    if (text) {
                        charsText += text;
                    }
                }
            } else {
                html = html.replace(new RegExp('([\\s\\S]*?)</' + stack.last() + '[^>]*>'), function (all, text) {
                    text = text.replace(/<!--([\s\S]*?)-->|<!\[CDATA\[([\s\S]*?)]]>/g, '$1$2');
                    if (handler.chars) {
                        handler.chars(text, lineNo);
                    }
                    if (process.env.NODE_ENV !== 'production') {
                        lineNo += countLines(text);
                    }
                    return '';
                });
                parseEndTag('', stack.last());
            }
            if (html === last) {
                throw new Error('Parse Error: ' + html);
            }
            last = html;
        }
        callChars();
        parseEndTag();
        handler.done(lineNo);
        return intermediate;
    };
    var callAttrStart = function (state, curIndex, handler, rest, lineNo) {
        var attrName = rest.substring(typeof state.nameStart === 'number' ? state.nameStart : curIndex, curIndex), newAttrName = encoder.encode(attrName);
        state.attrStart = newAttrName;
        handler.attrStart(state.attrStart, lineNo);
        state.inName = false;
    };
    var callAttrEnd = function (state, curIndex, handler, rest, lineNo) {
        if (state.valueStart !== undefined && state.valueStart < curIndex) {
            var val = rest.substring(state.valueStart, curIndex);
            if (process.env.NODE_ENV !== 'production') {
                var quotedVal, closedQuote;
                quotedVal = rest.substring(state.valueStart - 1, curIndex + 1);
                quotedVal = quotedVal.trim();
                closedQuote = quotedVal.charAt(quotedVal.length - 1);
                if (state.inQuote !== closedQuote) {
                    if (handler.filename) {
                        dev.warn(handler.filename + ':' + lineNo + ': End quote is missing for ' + val);
                    } else {
                        dev.warn(lineNo + ': End quote is missing for ' + val);
                    }
                }
            }
            handler.attrValue(val, lineNo);
        }
        handler.attrEnd(state.attrStart, lineNo);
        state.attrStart = undefined;
        state.valueStart = undefined;
        state.inValue = false;
        state.inName = false;
        state.lookingForEq = false;
        state.inQuote = false;
        state.lookingForName = true;
    };
    var findBreak = function (str, magicStart) {
        var magicLength = magicStart.length;
        for (var i = 0, len = str.length; i < len; i++) {
            if (str[i] === '<' || str.substr(i, magicLength) === magicStart) {
                return i;
            }
        }
        return -1;
    };
    HTMLParser.parseAttrs = function (rest, handler, lineNo) {
        if (!rest) {
            return;
        }
        var i = 0;
        var curIndex;
        var state = {
            inName: false,
            nameStart: undefined,
            inValue: false,
            valueStart: undefined,
            inQuote: false,
            attrStart: undefined,
            lookingForName: true,
            lookingForValue: false,
            lookingForEq: false
        };
        while (i < rest.length) {
            curIndex = i;
            var cur = rest.charAt(i);
            i++;
            if (magicStart === rest.substr(curIndex, magicStart.length)) {
                if (state.inValue && curIndex > state.valueStart) {
                    handler.attrValue(rest.substring(state.valueStart, curIndex), lineNo);
                } else if (state.inName && state.nameStart < curIndex) {
                    callAttrStart(state, curIndex, handler, rest, lineNo);
                    callAttrEnd(state, curIndex, handler, rest, lineNo);
                } else if (state.lookingForValue) {
                    state.inValue = true;
                } else if (state.lookingForEq && state.attrStart) {
                    callAttrEnd(state, curIndex, handler, rest, lineNo);
                }
                magicMatch.lastIndex = curIndex;
                var match = magicMatch.exec(rest);
                if (match) {
                    handler.special(match[1], lineNo);
                    i = curIndex + match[0].length;
                    if (state.inValue) {
                        state.valueStart = curIndex + match[0].length;
                    }
                }
            } else if (state.inValue) {
                if (state.inQuote) {
                    if (cur === state.inQuote) {
                        callAttrEnd(state, curIndex, handler, rest, lineNo);
                    }
                } else if (space.test(cur)) {
                    callAttrEnd(state, curIndex, handler, rest, lineNo);
                }
            } else if (cur === '=' && (state.lookingForEq || state.lookingForName || state.inName)) {
                if (!state.attrStart) {
                    callAttrStart(state, curIndex, handler, rest, lineNo);
                }
                state.lookingForValue = true;
                state.lookingForEq = false;
                state.lookingForName = false;
            } else if (state.inName) {
                var started = rest[state.nameStart], otherStart, otherOpposite;
                if (startOppositesMap[started] === cur) {
                    otherStart = started === '{' ? '(' : '{';
                    otherOpposite = startOppositesMap[otherStart];
                    if (rest[curIndex + 1] === otherOpposite) {
                        callAttrStart(state, curIndex + 2, handler, rest, lineNo);
                        i++;
                    } else {
                        callAttrStart(state, curIndex + 1, handler, rest, lineNo);
                    }
                    state.lookingForEq = true;
                } else if (space.test(cur) && started !== '{' && started !== '(') {
                    callAttrStart(state, curIndex, handler, rest, lineNo);
                    state.lookingForEq = true;
                }
            } else if (state.lookingForName) {
                if (!space.test(cur)) {
                    if (state.attrStart) {
                        callAttrEnd(state, curIndex, handler, rest, lineNo);
                    }
                    state.nameStart = curIndex;
                    state.inName = true;
                }
            } else if (state.lookingForValue) {
                if (!space.test(cur)) {
                    state.lookingForValue = false;
                    state.inValue = true;
                    if (cur === '\'' || cur === '"') {
                        state.inQuote = cur;
                        state.valueStart = curIndex + 1;
                    } else {
                        state.valueStart = curIndex;
                    }
                } else if (i === rest.length) {
                    callAttrEnd(state, curIndex, handler, rest, lineNo);
                }
            }
        }
        if (state.inName) {
            callAttrStart(state, curIndex + 1, handler, rest, lineNo);
            callAttrEnd(state, curIndex + 1, handler, rest, lineNo);
        } else if (state.lookingForEq || state.lookingForValue || state.inValue) {
            callAttrEnd(state, curIndex + 1, handler, rest, lineNo);
        }
        magicMatch.lastIndex = 0;
    };
    HTMLParser.searchStartTag = function (html) {
        var closingIndex = html.indexOf('>');
        var attributeRange = attributeRegexp.exec(html.substring(1));
        var afterAttributeOffset = 1;
        while (attributeRange && closingIndex >= afterAttributeOffset + attributeRange.index) {
            afterAttributeOffset += attributeRange.index + attributeRange[0].length;
            while (closingIndex < afterAttributeOffset) {
                closingIndex += html.substring(closingIndex + 1).indexOf('>') + 1;
            }
            attributeRange = attributeRegexp.exec(html.substring(afterAttributeOffset));
        }
        if (closingIndex === -1 || !alphaRegex.test(html[1])) {
            return null;
        }
        var tagName, tagContent, match, rest = '', unary = '';
        var startTag = html.substring(0, closingIndex + 1);
        var isUnary = startTag[startTag.length - 2] === '/';
        var spaceIndex = startTag.search(space);
        if (isUnary) {
            unary = '/';
            tagContent = startTag.substring(1, startTag.length - 2).trim();
        } else {
            tagContent = startTag.substring(1, startTag.length - 1).trim();
        }
        if (spaceIndex === -1) {
            tagName = tagContent;
        } else {
            spaceIndex--;
            tagName = tagContent.substring(0, spaceIndex);
            rest = tagContent.substring(spaceIndex);
        }
        match = [
            startTag,
            tagName,
            rest,
            unary
        ];
        return {
            match: match,
            html: html.substring(startTag.length)
        };
    };
    module.exports = namespace.HTMLParser = HTMLParser;
});
/*can-dom-mutate@1.3.9#-util*/
define('can-dom-mutate@1.3.9#-util', [
    'require',
    'exports',
    'module',
    'can-globals/document/document'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getDocument = require('can-globals/document/document');
        function eliminate(array, item) {
            var index = array.indexOf(item);
            if (index >= 0) {
                array.splice(index, 1);
            }
        }
        function addToSet(items, set) {
            for (var i = 0, length = items.length; i < length; i++) {
                set.add(items[i]);
            }
        }
        function contains(parent, child) {
            if (parent.contains) {
                return parent.contains(child);
            }
            if (parent.nodeType === Node.DOCUMENT_NODE && parent.documentElement) {
                return contains(parent.documentElement, child);
            } else {
                child = child.parentNode;
                if (child === parent) {
                    return true;
                }
                return false;
            }
        }
        function isInDocument(node) {
            var root = getDocument();
            if (root === node) {
                return true;
            }
            return contains(root, node);
        }
        function isDocumentElement(node) {
            return getDocument().documentElement === node;
        }
        function isFragment(node) {
            return !!(node && node.nodeType === 11);
        }
        function isElementNode(node) {
            return !!(node && node.nodeType === 1);
        }
        function getChildren(parentNode) {
            var nodes = [];
            var node = parentNode.firstChild;
            while (node) {
                nodes.push(node);
                node = node.nextSibling;
            }
            return nodes;
        }
        function getParents(node) {
            var nodes;
            if (isFragment(node)) {
                nodes = getChildren(node);
            } else {
                nodes = [node];
            }
            return nodes;
        }
        function getNodesLegacyB(node) {
            var skip, tmp;
            var depth = 0;
            var items = isFragment(node) ? [] : [node];
            if (node.firstChild == null) {
                return items;
            }
            do {
                if (!skip && (tmp = node.firstChild)) {
                    depth++;
                    items.push(tmp);
                } else if (tmp = node.nextSibling) {
                    skip = false;
                    items.push(tmp);
                } else {
                    tmp = node.parentNode;
                    depth--;
                    skip = true;
                }
                node = tmp;
            } while (depth > 0);
            return items;
        }
        function treeWalkerFilterFunction() {
            return NodeFilter.FILTER_ACCEPT;
        }
        var treeWalkerFilter = treeWalkerFilterFunction;
        treeWalkerFilter.acceptNode = treeWalkerFilterFunction;
        function getNodesWithTreeWalker(rootNode) {
            var result = isFragment(rootNode) ? [] : [rootNode];
            var walker = isElementNode(rootNode) && getDocument().createTreeWalker(rootNode, NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT, treeWalkerFilter, false);
            var node;
            while (node = walker && walker.nextNode()) {
                result.push(node);
            }
            return result;
        }
        function getAllNodes(node) {
            if (getDocument().createTreeWalker !== undefined) {
                return getNodesWithTreeWalker(node);
            } else {
                return getNodesLegacyB(node);
            }
        }
        function subscription(fn) {
            return function _subscription() {
                var disposal = fn.apply(this, arguments);
                var isDisposed = false;
                return function _disposal() {
                    if (isDisposed) {
                        var fnName = fn.name || fn.displayName || 'an anonymous function';
                        var message = 'Disposal function returned by ' + fnName + ' called more than once.';
                        throw new Error(message);
                    }
                    disposal.apply(this, arguments);
                    isDisposed = true;
                };
            };
        }
        module.exports = {
            eliminate: eliminate,
            isInDocument: isInDocument,
            getDocument: getDocument,
            isDocumentElement: isDocumentElement,
            isFragment: isFragment,
            getParents: getParents,
            getAllNodes: getAllNodes,
            getChildren: getChildren,
            subscription: subscription,
            addToSet: addToSet
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-dom-mutate@1.3.9#can-dom-mutate*/
define('can-dom-mutate@1.3.9#can-dom-mutate', [
    'require',
    'exports',
    'module',
    'can-globals',
    'can-globals/global/global',
    'can-globals/mutation-observer/mutation-observer',
    'can-namespace',
    'can-globals/document/document',
    'can-reflect',
    './-util'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('can-globals');
        var getRoot = require('can-globals/global/global');
        var getMutationObserver = require('can-globals/mutation-observer/mutation-observer');
        var namespace = require('can-namespace');
        var DOCUMENT = require('can-globals/document/document');
        var canReflect = require('can-reflect');
        var util = require('./-util');
        var eliminate = util.eliminate;
        var subscription = util.subscription;
        var isDocumentElement = util.isDocumentElement;
        var getAllNodes = util.getAllNodes;
        var slice = Array.prototype.slice;
        var domMutate, dispatchInsertion, dispatchRemoval;
        var dataStore = new WeakMap();
        function getRelatedData(node, key) {
            var data = dataStore.get(node);
            if (data) {
                return data[key];
            }
        }
        function setRelatedData(node, key, targetListenersMap) {
            var data = dataStore.get(node);
            if (!data) {
                data = {};
                dataStore.set(node, data);
            }
            data[key] = targetListenersMap;
        }
        function deleteRelatedData(node, key) {
            var data = dataStore.get(node);
            return delete data[key];
        }
        function toMutationEvents(nodes) {
            var events = [];
            for (var i = 0; i < nodes.length; i++) {
                events.push({ target: nodes[i] });
            }
            return events;
        }
        function batch(processBatchItems) {
            return function batchAdd(items, callback) {
                processBatchItems(items);
                if (callback) {
                    callback();
                }
            };
        }
        function getDocumentListeners(target, key) {
            var doc = DOCUMENT();
            var data = getRelatedData(doc, key);
            if (data) {
                return data.listeners;
            }
        }
        function getTargetListeners(target, key) {
            var doc = DOCUMENT();
            var targetListenersMap = getRelatedData(doc, key);
            if (!targetListenersMap) {
                return;
            }
            return targetListenersMap.get(target);
        }
        function addTargetListener(target, key, listener) {
            var doc = DOCUMENT();
            var targetListenersMap = getRelatedData(doc, key);
            if (!targetListenersMap) {
                targetListenersMap = new WeakMap();
                setRelatedData(doc, key, targetListenersMap);
            }
            var targetListeners = targetListenersMap.get(target);
            if (!targetListeners) {
                targetListeners = [];
                targetListenersMap.set(target, targetListeners);
            }
            targetListeners.push(listener);
        }
        function removeTargetListener(target, key, listener) {
            var doc = DOCUMENT();
            var targetListenersMap = getRelatedData(doc, key);
            if (!targetListenersMap) {
                return;
            }
            var targetListeners = targetListenersMap.get(target);
            if (!targetListeners) {
                return;
            }
            eliminate(targetListeners, listener);
            if (targetListeners.length === 0) {
                targetListenersMap['delete'](target);
                if (targetListenersMap.size === 0) {
                    deleteRelatedData(doc, key);
                }
            }
        }
        function fire(callbacks, arg) {
            var safeCallbacks = slice.call(callbacks, 0);
            var safeCallbackCount = safeCallbacks.length;
            for (var i = 0; i < safeCallbackCount; i++) {
                safeCallbacks[i](arg);
            }
        }
        function dispatch(listenerKey, documentDataKey) {
            return function dispatchEvents(events) {
                for (var e = 0; e < events.length; e++) {
                    var event = events[e];
                    var target = event.target;
                    var targetListeners = getTargetListeners(target, listenerKey);
                    if (targetListeners) {
                        fire(targetListeners, event);
                    }
                    if (!documentDataKey) {
                        continue;
                    }
                    var documentListeners = getDocumentListeners(target, documentDataKey);
                    if (documentListeners) {
                        fire(documentListeners, event);
                    }
                }
            };
        }
        var count = 0;
        function observeMutations(target, observerKey, config, handler) {
            var observerData = getRelatedData(target, observerKey);
            if (!observerData) {
                observerData = { observingCount: 0 };
                setRelatedData(target, observerKey, observerData);
            }
            var setupObserver = function () {
                if (observerData.observer) {
                    observerData.observer.disconnect();
                    observerData.observer = null;
                }
                var MutationObserver = getMutationObserver();
                if (MutationObserver) {
                    var Node = getRoot().Node;
                    var isRealNode = !!(Node && target instanceof Node);
                    if (isRealNode) {
                        var targetObserver = new MutationObserver(handler);
                        targetObserver.id = count++;
                        targetObserver.observe(target, config);
                        observerData.observer = targetObserver;
                    }
                }
            };
            if (observerData.observingCount === 0) {
                globals.onKeyValue('MutationObserver', setupObserver);
                setupObserver();
            }
            observerData.observingCount++;
            return function stopObservingMutations() {
                var observerData = getRelatedData(target, observerKey);
                if (observerData) {
                    observerData.observingCount--;
                    if (observerData.observingCount <= 0) {
                        if (observerData.observer) {
                            observerData.observer.disconnect();
                        }
                        deleteRelatedData(target, observerKey);
                        globals.offKeyValue('MutationObserver', setupObserver);
                    }
                }
            };
        }
        function handleTreeMutations(mutations) {
            if (typeof Set === 'undefined') {
                return;
            }
            var mutationCount = mutations.length;
            var added = new Set(), removed = new Set();
            for (var m = 0; m < mutationCount; m++) {
                var mutation = mutations[m];
                var addedCount = mutation.addedNodes.length;
                for (var a = 0; a < addedCount; a++) {
                    util.addToSet(getAllNodes(mutation.addedNodes[a]), added);
                }
                var removedCount = mutation.removedNodes.length;
                for (var r = 0; r < removedCount; r++) {
                    util.addToSet(getAllNodes(mutation.removedNodes[r]), removed);
                }
            }
            dispatchRemoval(toMutationEvents(canReflect.toArray(removed)));
            dispatchInsertion(toMutationEvents(canReflect.toArray(added)));
        }
        function handleAttributeMutations(mutations) {
            var mutationCount = mutations.length;
            for (var m = 0; m < mutationCount; m++) {
                var mutation = mutations[m];
                if (mutation.type === 'attributes') {
                    var node = mutation.target;
                    var attributeName = mutation.attributeName;
                    var oldValue = mutation.oldValue;
                    domMutate.dispatchNodeAttributeChange(node, attributeName, oldValue);
                }
            }
        }
        var treeMutationConfig = {
            subtree: true,
            childList: true
        };
        var attributeMutationConfig = {
            attributes: true,
            attributeOldValue: true
        };
        function addNodeListener(listenerKey, observerKey, isAttributes) {
            return subscription(function _addNodeListener(target, listener) {
                if (target.nodeType === 11) {
                    return Function.prototype;
                }
                var stopObserving;
                if (isAttributes) {
                    stopObserving = observeMutations(target, observerKey, attributeMutationConfig, handleAttributeMutations);
                } else {
                    stopObserving = observeMutations(DOCUMENT(), observerKey, treeMutationConfig, handleTreeMutations);
                }
                addTargetListener(target, listenerKey, listener);
                return function removeNodeListener() {
                    stopObserving();
                    removeTargetListener(target, listenerKey, listener);
                };
            });
        }
        function addGlobalListener(globalDataKey, addNodeListener) {
            return subscription(function addGlobalGroupListener(documentElement, listener) {
                if (!isDocumentElement(documentElement)) {
                    throw new Error('Global mutation listeners must pass a documentElement');
                }
                var doc = DOCUMENT();
                var documentData = getRelatedData(doc, globalDataKey);
                if (!documentData) {
                    documentData = { listeners: [] };
                    setRelatedData(doc, globalDataKey, documentData);
                }
                var listeners = documentData.listeners;
                if (listeners.length === 0) {
                    documentData.removeListener = addNodeListener(doc, function () {
                    });
                }
                listeners.push(listener);
                return function removeGlobalGroupListener() {
                    var documentData = getRelatedData(doc, globalDataKey);
                    if (!documentData) {
                        return;
                    }
                    var listeners = documentData.listeners;
                    eliminate(listeners, listener);
                    if (listeners.length === 0) {
                        documentData.removeListener();
                        deleteRelatedData(doc, globalDataKey);
                    }
                };
            });
        }
        var domMutationPrefix = 'domMutation';
        var insertionDataKey = domMutationPrefix + 'InsertionData';
        var removalDataKey = domMutationPrefix + 'RemovalData';
        var attributeChangeDataKey = domMutationPrefix + 'AttributeChangeData';
        var documentInsertionDataKey = domMutationPrefix + 'DocumentInsertionData';
        var documentRemovalDataKey = domMutationPrefix + 'DocumentRemovalData';
        var documentAttributeChangeDataKey = domMutationPrefix + 'DocumentAttributeChangeData';
        var treeDataKey = domMutationPrefix + 'TreeData';
        var attributeDataKey = domMutationPrefix + 'AttributeData';
        dispatchInsertion = batch(dispatch(insertionDataKey, documentInsertionDataKey));
        dispatchRemoval = batch(dispatch(removalDataKey, documentRemovalDataKey));
        var dispatchAttributeChange = batch(dispatch(attributeChangeDataKey, documentAttributeChangeDataKey));
        var addNodeInsertionListener = addNodeListener(insertionDataKey, treeDataKey);
        var addNodeRemovalListener = addNodeListener(removalDataKey, treeDataKey);
        var addNodeAttributeChangeListener = addNodeListener(attributeChangeDataKey, attributeDataKey, true);
        var addInsertionListener = addGlobalListener(documentInsertionDataKey, addNodeInsertionListener);
        var addRemovalListener = addGlobalListener(documentRemovalDataKey, addNodeRemovalListener);
        var addAttributeChangeListener = addGlobalListener(documentAttributeChangeDataKey, addNodeAttributeChangeListener);
        domMutate = {
            dispatchNodeInsertion: function (node, callback) {
                var nodes = new Set();
                util.addToSet(getAllNodes(node), nodes);
                var events = toMutationEvents(canReflect.toArray(nodes));
                dispatchInsertion(events, callback);
            },
            dispatchNodeRemoval: function (node, callback) {
                var nodes = new Set();
                util.addToSet(getAllNodes(node), nodes);
                var events = toMutationEvents(canReflect.toArray(nodes));
                dispatchRemoval(events, callback);
            },
            dispatchNodeAttributeChange: function (target, attributeName, oldValue, callback) {
                dispatchAttributeChange([{
                        target: target,
                        attributeName: attributeName,
                        oldValue: oldValue
                    }], callback);
            },
            onNodeInsertion: addNodeInsertionListener,
            onNodeRemoval: addNodeRemovalListener,
            onNodeAttributeChange: addNodeAttributeChangeListener,
            onRemoval: addRemovalListener,
            onInsertion: addInsertionListener,
            onAttributeChange: addAttributeChangeListener
        };
        module.exports = namespace.domMutate = domMutate;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-dom-mutate@1.3.9#node/node*/
define('can-dom-mutate@1.3.9#node/node', [
    'require',
    'exports',
    'module',
    'can-globals',
    'can-namespace',
    '../can-dom-mutate',
    '../-util'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('can-globals');
        var namespace = require('can-namespace');
        var domMutate = require('../can-dom-mutate');
        var util = require('../-util');
        var isInDocument = util.isInDocument;
        var getParents = util.getParents;
        var synthetic = {
            dispatchNodeInsertion: function (container, node) {
                if (isInDocument(node)) {
                    domMutate.dispatchNodeInsertion(node);
                }
            },
            dispatchNodeRemoval: function (container, node) {
                if (isInDocument(container) && !isInDocument(node)) {
                    domMutate.dispatchNodeRemoval(node);
                }
            }
        };
        var compat = {
            replaceChild: function (newChild, oldChild) {
                var newChildren = getParents(newChild);
                var result = this.replaceChild(newChild, oldChild);
                synthetic.dispatchNodeRemoval(this, oldChild);
                for (var i = 0; i < newChildren.length; i++) {
                    synthetic.dispatchNodeInsertion(this, newChildren[i]);
                }
                return result;
            },
            setAttribute: function (name, value) {
                var oldAttributeValue = this.getAttribute(name);
                var result = this.setAttribute(name, value);
                var newAttributeValue = this.getAttribute(name);
                if (oldAttributeValue !== newAttributeValue) {
                    domMutate.dispatchNodeAttributeChange(this, name, oldAttributeValue);
                }
                return result;
            },
            removeAttribute: function (name) {
                var oldAttributeValue = this.getAttribute(name);
                var result = this.removeAttribute(name);
                if (oldAttributeValue) {
                    domMutate.dispatchNodeAttributeChange(this, name, oldAttributeValue);
                }
                return result;
            }
        };
        var compatData = [
            [
                'appendChild',
                'Insertion'
            ],
            [
                'insertBefore',
                'Insertion'
            ],
            [
                'removeChild',
                'Removal'
            ]
        ];
        compatData.forEach(function (pair) {
            var nodeMethod = pair[0];
            var dispatchMethod = 'dispatchNode' + pair[1];
            compat[nodeMethod] = function (node) {
                var nodes = getParents(node);
                var result = this[nodeMethod].apply(this, arguments);
                for (var i = 0; i < nodes.length; i++) {
                    synthetic[dispatchMethod](this, nodes[i]);
                }
                return result;
            };
        });
        var normal = {};
        var nodeMethods = [
            'appendChild',
            'insertBefore',
            'removeChild',
            'replaceChild',
            'setAttribute',
            'removeAttribute'
        ];
        nodeMethods.forEach(function (methodName) {
            normal[methodName] = function () {
                return this[methodName].apply(this, arguments);
            };
        });
        var mutate = {};
        function setMutateStrategy(observer) {
            var strategy = observer ? normal : compat;
            for (var key in strategy) {
                mutate[key] = strategy[key];
            }
        }
        var mutationObserverKey = 'MutationObserver';
        setMutateStrategy(globals.getKeyValue(mutationObserverKey));
        globals.onKeyValue(mutationObserverKey, setMutateStrategy);
        module.exports = namespace.domMutateNode = domMutate.node = mutate;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-dom-mutate@1.3.9#node*/
define('can-dom-mutate@1.3.9#node', [
    'require',
    'exports',
    'module',
    'can-namespace',
    './node/node'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var node = require('./node/node');
    module.exports = namespace.node = node;
});
/*can-view-nodelist@4.3.4#can-view-nodelist*/
define('can-view-nodelist@4.3.4#can-view-nodelist', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-dom-mutate/node'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var domMutate = require('can-dom-mutate/node');
    var nodeMap = new Map(), splice = [].splice, push = [].push, itemsInChildListTree = function (list) {
            var count = 0;
            for (var i = 0, len = list.length; i < len; i++) {
                var item = list[i];
                if (item.nodeType) {
                    count++;
                } else {
                    count += itemsInChildListTree(item);
                }
            }
            return count;
        }, replacementMap = function (replacements) {
            var map = new Map();
            for (var i = 0, len = replacements.length; i < len; i++) {
                var node = nodeLists.first(replacements[i]);
                map.set(node, replacements[i]);
            }
            return map;
        }, addUnfoundAsDeepChildren = function (list, rMap) {
            rMap.forEach(function (replacement) {
                list.newDeepChildren.push(replacement);
            });
        };
    var nodeLists = {
        update: function (nodeList, newNodes, oldNodes) {
            if (!oldNodes) {
                oldNodes = nodeLists.unregisterChildren(nodeList);
            }
            var arr = [];
            for (var i = 0, ref = arr.length = newNodes.length; i < ref; i++) {
                arr[i] = newNodes[i];
            }
            newNodes = arr;
            var oldListLength = nodeList.length;
            splice.apply(nodeList, [
                0,
                oldListLength
            ].concat(newNodes));
            if (nodeList.replacements) {
                nodeLists.nestReplacements(nodeList);
                nodeList.deepChildren = nodeList.newDeepChildren;
                nodeList.newDeepChildren = [];
            } else {
                nodeLists.nestList(nodeList);
            }
            return oldNodes;
        },
        nestReplacements: function (list) {
            var index = 0, rMap = replacementMap(list.replacements), rCount = list.replacements.length;
            while (index < list.length && rCount) {
                var node = list[index], replacement = rMap.get(node);
                if (replacement) {
                    rMap['delete'](node);
                    list.splice(index, itemsInChildListTree(replacement), replacement);
                    rCount--;
                }
                index++;
            }
            if (rCount) {
                addUnfoundAsDeepChildren(list, rMap);
            }
            list.replacements = [];
        },
        nestList: function (list) {
            var index = 0;
            while (index < list.length) {
                var node = list[index], childNodeList = nodeMap.get(node);
                if (childNodeList) {
                    if (childNodeList !== list) {
                        list.splice(index, itemsInChildListTree(childNodeList), childNodeList);
                    }
                } else {
                    nodeMap.set(node, list);
                }
                index++;
            }
        },
        last: function (nodeList) {
            var last = nodeList[nodeList.length - 1];
            if (last.nodeType) {
                return last;
            } else {
                return nodeLists.last(last);
            }
        },
        first: function (nodeList) {
            var first = nodeList[0];
            if (first.nodeType) {
                return first;
            } else {
                return nodeLists.first(first);
            }
        },
        flatten: function (nodeList) {
            var items = [];
            for (var i = 0; i < nodeList.length; i++) {
                var item = nodeList[i];
                if (item.nodeType) {
                    items.push(item);
                } else {
                    items.push.apply(items, nodeLists.flatten(item));
                }
            }
            return items;
        },
        register: function (nodeList, unregistered, parent, directlyNested) {
            nodeList.unregistered = unregistered;
            nodeList.parentList = parent;
            nodeList.nesting = parent && typeof parent.nesting !== 'undefined' ? parent.nesting + 1 : 0;
            if (parent) {
                nodeList.deepChildren = [];
                nodeList.newDeepChildren = [];
                nodeList.replacements = [];
                if (parent !== true) {
                    if (directlyNested) {
                        parent.replacements.push(nodeList);
                    } else {
                        parent.newDeepChildren.push(nodeList);
                    }
                }
            } else {
                nodeLists.nestList(nodeList);
            }
            return nodeList;
        },
        unregisterChildren: function (nodeList) {
            var nodes = [];
            for (var n = 0; n < nodeList.length; n++) {
                var node = nodeList[n];
                if (node.nodeType) {
                    if (!nodeList.replacements) {
                        nodeMap['delete'](node);
                    }
                    nodes.push(node);
                } else {
                    push.apply(nodes, nodeLists.unregister(node, true));
                }
            }
            var deepChildren = nodeList.deepChildren;
            if (deepChildren) {
                for (var l = 0; l < deepChildren.length; l++) {
                    nodeLists.unregister(deepChildren[l], true);
                }
            }
            return nodes;
        },
        unregister: function (nodeList, isChild) {
            var nodes = nodeLists.unregisterChildren(nodeList, true);
            nodeList.isUnregistered = true;
            if (nodeList.unregistered) {
                var unregisteredCallback = nodeList.unregistered;
                nodeList.replacements = nodeList.unregistered = null;
                if (!isChild) {
                    var deepChildren = nodeList.parentList && nodeList.parentList.deepChildren;
                    if (deepChildren) {
                        var index = deepChildren.indexOf(nodeList);
                        if (index !== -1) {
                            deepChildren.splice(index, 1);
                        }
                    }
                }
                unregisteredCallback();
            }
            return nodes;
        },
        after: function (oldElements, newFrag) {
            var last = oldElements[oldElements.length - 1];
            if (last.nextSibling) {
                domMutate.insertBefore.call(last.parentNode, newFrag, last.nextSibling);
            } else {
                domMutate.appendChild.call(last.parentNode, newFrag);
            }
        },
        replace: function (oldElements, newFrag) {
            var selectedValue, parentNode = oldElements[0].parentNode;
            if (parentNode.nodeName.toUpperCase() === 'SELECT' && parentNode.selectedIndex >= 0) {
                selectedValue = parentNode.value;
            }
            if (oldElements.length === 1) {
                domMutate.replaceChild.call(parentNode, newFrag, oldElements[0]);
            } else {
                nodeLists.after(oldElements, newFrag);
                nodeLists.remove(oldElements);
            }
            if (selectedValue !== undefined) {
                parentNode.value = selectedValue;
            }
        },
        remove: function (elementsToBeRemoved) {
            var parent = elementsToBeRemoved[0] && elementsToBeRemoved[0].parentNode;
            var child;
            for (var i = 0; i < elementsToBeRemoved.length; i++) {
                child = elementsToBeRemoved[i];
                if (child.parentNode === parent) {
                    domMutate.removeChild.call(parent, child);
                }
            }
        },
        nodeMap: nodeMap
    };
    module.exports = namespace.nodeLists = nodeLists;
});
/*can-child-nodes@1.2.1#can-child-nodes*/
define('can-child-nodes@1.2.1#can-child-nodes', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    function childNodes(node) {
        var childNodes = node.childNodes;
        if ('length' in childNodes) {
            return childNodes;
        } else {
            var cur = node.firstChild;
            var nodes = [];
            while (cur) {
                nodes.push(cur);
                cur = cur.nextSibling;
            }
            return nodes;
        }
    }
    module.exports = namespace.childNodes = childNodes;
});
/*can-fragment@1.3.1#can-fragment*/
define('can-fragment@1.3.1#can-fragment', [
    'require',
    'exports',
    'module',
    'can-globals/document/document',
    'can-namespace',
    'can-reflect',
    'can-child-nodes',
    'can-symbol'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getDocument = require('can-globals/document/document');
        var namespace = require('can-namespace');
        var canReflect = require('can-reflect');
        var childNodes = require('can-child-nodes');
        var canSymbol = require('can-symbol');
        var fragmentRE = /^\s*<(\w+)[^>]*>/, toString = {}.toString, toDOMSymbol = canSymbol.for('can.toDOM');
        function makeFragment(html, name, doc) {
            if (name === undefined) {
                name = fragmentRE.test(html) && RegExp.$1;
            }
            if (html && toString.call(html.replace) === '[object Function]') {
                html = html.replace(/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, '<$1></$2>');
            }
            var container = doc.createElement('div'), temp = doc.createElement('div');
            if (name === 'tbody' || name === 'tfoot' || name === 'thead' || name === 'colgroup') {
                temp.innerHTML = '<table>' + html + '</table>';
                container = temp.firstChild.nodeType === 3 ? temp.lastChild : temp.firstChild;
            } else if (name === 'col') {
                temp.innerHTML = '<table><colgroup>' + html + '</colgroup></table>';
                container = temp.firstChild.nodeType === 3 ? temp.lastChild : temp.firstChild.firstChild;
            } else if (name === 'tr') {
                temp.innerHTML = '<table><tbody>' + html + '</tbody></table>';
                container = temp.firstChild.nodeType === 3 ? temp.lastChild : temp.firstChild.firstChild;
            } else if (name === 'td' || name === 'th') {
                temp.innerHTML = '<table><tbody><tr>' + html + '</tr></tbody></table>';
                container = temp.firstChild.nodeType === 3 ? temp.lastChild : temp.firstChild.firstChild.firstChild;
            } else if (name === 'option') {
                temp.innerHTML = '<select>' + html + '</select>';
                container = temp.firstChild.nodeType === 3 ? temp.lastChild : temp.firstChild;
            } else {
                container.innerHTML = '' + html;
            }
            return [].slice.call(childNodes(container));
        }
        function fragment(html, doc) {
            if (html && html.nodeType === 11) {
                return html;
            }
            if (!doc) {
                doc = getDocument();
            } else if (doc.length) {
                doc = doc[0];
            }
            var parts = makeFragment(html, undefined, doc), frag = (doc || document).createDocumentFragment();
            for (var i = 0, length = parts.length; i < length; i++) {
                frag.appendChild(parts[i]);
            }
            return frag;
        }
        var makeFrag = function (item, doc) {
            var document = doc || getDocument();
            var frag;
            if (!item || typeof item === 'string') {
                frag = fragment(item == null ? '' : '' + item, document);
            } else if (typeof item[toDOMSymbol] === 'function') {
                return makeFrag(item[toDOMSymbol]());
            } else if (item.nodeType === 11) {
                return item;
            } else if (typeof item.nodeType === 'number') {
                frag = document.createDocumentFragment();
                frag.appendChild(item);
                return frag;
            } else if (canReflect.isListLike(item)) {
                frag = document.createDocumentFragment();
                canReflect.eachIndex(item, function (item) {
                    frag.appendChild(makeFrag(item));
                });
            } else {
                frag = fragment('' + item, document);
            }
            if (!childNodes(frag).length) {
                frag.appendChild(document.createTextNode(''));
            }
            return frag;
        };
        module.exports = namespace.fragment = namespace.frag = makeFrag;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-view-callbacks@4.4.0#can-view-callbacks*/
define('can-view-callbacks@4.4.0#can-view-callbacks', [
    'require',
    'exports',
    'module',
    'can-observation-recorder',
    'can-log/dev/dev',
    'can-globals/global/global',
    'can-globals/document/document',
    'can-dom-mutate',
    'can-dom-mutate/node',
    'can-namespace',
    'can-view-nodelist',
    'can-fragment',
    'can-globals',
    'can-symbol',
    'can-reflect'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var ObservationRecorder = require('can-observation-recorder');
        var dev = require('can-log/dev/dev');
        var getGlobal = require('can-globals/global/global');
        var getDocument = require('can-globals/document/document');
        var domMutate = require('can-dom-mutate');
        var domMutateNode = require('can-dom-mutate/node');
        var namespace = require('can-namespace');
        var nodeLists = require('can-view-nodelist');
        var makeFrag = require('can-fragment');
        var globals = require('can-globals');
        var canSymbol = require('can-symbol');
        var canReflect = require('can-reflect');
        var callbackMapSymbol = canSymbol.for('can.callbackMap');
        var initializeSymbol = canSymbol.for('can.initialize');
        if (process.env.NODE_ENV !== 'production') {
            var requestedAttributes = {};
        }
        var tags = {};
        var automountEnabled = function () {
            var document = globals.getKeyValue('document');
            if (document == null || document.documentElement == null) {
                return false;
            }
            return document.documentElement.getAttribute('data-can-automount') !== 'false';
        };
        var renderedElements = new WeakMap();
        var mountElement = function (node) {
            var tagName = node.tagName && node.tagName.toLowerCase();
            var tagHandler = tags[tagName];
            if (tagHandler) {
                callbacks.tagHandler(node, tagName, {});
            }
        };
        var mutationObserverEnabled = false;
        var disableMutationObserver;
        var enableMutationObserver = function () {
            var docEl = getDocument().documentElement;
            if (mutationObserverEnabled) {
                if (mutationObserverEnabled === docEl) {
                    return;
                }
                disableMutationObserver();
            }
            var undoOnInsertionHandler = domMutate.onInsertion(docEl, function (mutation) {
                mountElement(mutation.target);
            });
            mutationObserverEnabled = true;
            disableMutationObserver = function () {
                undoOnInsertionHandler();
                mutationObserverEnabled = false;
            };
        };
        var renderTagsInDocument = function (tagName) {
            var nodes = getDocument().getElementsByTagName(tagName);
            for (var i = 0, node; (node = nodes[i]) !== undefined; i++) {
                mountElement(node);
            }
        };
        var attr = function (attributeName, attrHandler) {
            if (attrHandler) {
                if (typeof attributeName === 'string') {
                    attributes[attributeName] = attrHandler;
                    if (process.env.NODE_ENV !== 'production') {
                        if (requestedAttributes[attributeName]) {
                            dev.warn('can-view-callbacks: ' + attributeName + ' custom attribute behavior requested before it was defined.  Make sure ' + attributeName + ' is defined before it is needed.');
                        }
                    }
                } else {
                    regExpAttributes.push({
                        match: attributeName,
                        handler: attrHandler
                    });
                    if (process.env.NODE_ENV !== 'production') {
                        Object.keys(requestedAttributes).forEach(function (requested) {
                            if (attributeName.test(requested)) {
                                dev.warn('can-view-callbacks: ' + requested + ' custom attribute behavior requested before it was defined.  Make sure ' + requested + ' is defined before it is needed.');
                            }
                        });
                    }
                }
            } else {
                var cb = attributes[attributeName];
                if (!cb) {
                    for (var i = 0, len = regExpAttributes.length; i < len; i++) {
                        var attrMatcher = regExpAttributes[i];
                        if (attrMatcher.match.test(attributeName)) {
                            return attrMatcher.handler;
                        }
                    }
                }
                if (process.env.NODE_ENV !== 'production') {
                    requestedAttributes[attributeName] = true;
                }
                return cb;
            }
        };
        var attrs = function (attrMap) {
            var map = canReflect.getKeyValue(attrMap, callbackMapSymbol) || attrMap;
            if (attrMaps.has(map)) {
                return;
            } else {
                attrMaps.set(map, true);
            }
            canReflect.eachKey(map, function (callback, exp) {
                attr(exp, callback);
            });
        };
        var attributes = {}, regExpAttributes = [], attrMaps = new WeakMap(), automaticCustomElementCharacters = /[-\:]/;
        var defaultCallback = function () {
        };
        var tag = function (tagName, tagHandler) {
            if (tagHandler) {
                var GLOBAL = getGlobal();
                var validCustomElementName = automaticCustomElementCharacters.test(tagName), tagExists = typeof tags[tagName.toLowerCase()] !== 'undefined', customElementExists;
                if (process.env.NODE_ENV !== 'production') {
                    if (tagExists) {
                        dev.warn('Custom tag: ' + tagName.toLowerCase() + ' is already defined');
                    }
                    if (!validCustomElementName && tagName !== 'content') {
                        dev.warn('Custom tag: ' + tagName.toLowerCase() + ' hyphen missed');
                    }
                }
                if (GLOBAL.html5) {
                    GLOBAL.html5.elements += ' ' + tagName;
                    GLOBAL.html5.shivDocument();
                }
                tags[tagName.toLowerCase()] = tagHandler;
                if (automountEnabled()) {
                    var customElements = globals.getKeyValue('customElements');
                    if (customElements) {
                        customElementExists = customElements.get(tagName.toLowerCase());
                        if (validCustomElementName && !customElementExists) {
                            var CustomElement = function () {
                                return Reflect.construct(HTMLElement, [], CustomElement);
                            };
                            CustomElement.prototype = Object.create(HTMLElement.prototype);
                            CustomElement.prototype.connectedCallback = function () {
                                callbacks.tagHandler(this, tagName.toLowerCase(), {});
                            };
                            customElements.define(tagName, CustomElement);
                        }
                    } else {
                        enableMutationObserver();
                        renderTagsInDocument(tagName);
                    }
                } else if (mutationObserverEnabled) {
                    disableMutationObserver();
                }
            } else {
                var cb;
                if (tagHandler === null) {
                    delete tags[tagName.toLowerCase()];
                } else {
                    cb = tags[tagName.toLowerCase()];
                }
                if (!cb && automaticCustomElementCharacters.test(tagName)) {
                    cb = defaultCallback;
                }
                return cb;
            }
        };
        var callbacks = {
            _tags: tags,
            _attributes: attributes,
            _regExpAttributes: regExpAttributes,
            defaultCallback: defaultCallback,
            tag: tag,
            attr: attr,
            attrs: attrs,
            tagHandler: function (el, tagName, tagData) {
                if (renderedElements.has(el)) {
                    return;
                }
                var scope = tagData.scope, helperTagCallback = scope && scope.templateContext.tags.get(tagName), tagCallback = helperTagCallback || tags[tagName] || el[initializeSymbol], res;
                if (tagCallback) {
                    res = ObservationRecorder.ignore(tagCallback)(el, tagData);
                    renderedElements.set(el, true);
                } else {
                    res = scope;
                }
                if (process.env.NODE_ENV !== 'production') {
                    if (!tagCallback) {
                        var GLOBAL = getGlobal();
                        var ceConstructor = getDocument().createElement(tagName).constructor;
                        if (ceConstructor === GLOBAL.HTMLElement || ceConstructor === GLOBAL.HTMLUnknownElement) {
                            dev.warn('can-view-callbacks: No custom element found for ' + tagName);
                        }
                    }
                }
                if (res && tagData.subtemplate) {
                    if (scope !== res) {
                        scope = scope.add(res);
                    }
                    var nodeList = nodeLists.register([], undefined, tagData.parentNodeList || true, false);
                    nodeList.expression = '<' + el.tagName + '>';
                    var result = tagData.subtemplate(scope, tagData.options, nodeList);
                    var frag = typeof result === 'string' ? makeFrag(result) : result;
                    domMutateNode.appendChild.call(el, frag);
                }
            }
        };
        namespace.view = namespace.view || {};
        if (namespace.view.callbacks) {
            throw new Error('You can\'t have two versions of can-view-callbacks, check your dependencies');
        } else {
            module.exports = namespace.view.callbacks = callbacks;
        }
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-view-target@4.1.6#can-view-target*/
define('can-view-target@4.1.6#can-view-target', [
    'require',
    'exports',
    'module',
    'can-globals/document/document',
    'can-dom-mutate/node',
    'can-namespace',
    'can-globals/mutation-observer/mutation-observer'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getDocument = require('can-globals/document/document');
        var domMutate = require('can-dom-mutate/node');
        var namespace = require('can-namespace');
        var MUTATION_OBSERVER = require('can-globals/mutation-observer/mutation-observer');
        var processNodes = function (nodes, paths, location, document) {
                var frag = document.createDocumentFragment();
                for (var i = 0, len = nodes.length; i < len; i++) {
                    var node = nodes[i];
                    frag.appendChild(processNode(node, paths, location.concat(i), document));
                }
                return frag;
            }, keepsTextNodes = typeof document !== 'undefined' && function () {
                var testFrag = document.createDocumentFragment();
                var div = document.createElement('div');
                div.appendChild(document.createTextNode(''));
                div.appendChild(document.createTextNode(''));
                testFrag.appendChild(div);
                var cloned = testFrag.cloneNode(true);
                return cloned.firstChild.childNodes.length === 2;
            }(), clonesWork = typeof document !== 'undefined' && function () {
                var el = document.createElement('a');
                el.innerHTML = '<xyz></xyz>';
                var clone = el.cloneNode(true);
                var works = clone.innerHTML === '<xyz></xyz>';
                var MO, observer;
                if (works) {
                    el = document.createDocumentFragment();
                    el.appendChild(document.createTextNode('foo-bar'));
                    MO = MUTATION_OBSERVER();
                    if (MO) {
                        observer = new MO(function () {
                        });
                        observer.observe(document.documentElement, {
                            childList: true,
                            subtree: true
                        });
                        clone = el.cloneNode(true);
                        observer.disconnect();
                    } else {
                        clone = el.cloneNode(true);
                    }
                    return clone.childNodes.length === 1;
                }
                return works;
            }(), namespacesWork = typeof document !== 'undefined' && !!document.createElementNS;
        var cloneNode = clonesWork ? function (el) {
            return el.cloneNode(true);
        } : function (node) {
            var document = node.ownerDocument;
            var copy;
            if (node.nodeType === 1) {
                if (node.namespaceURI !== 'http://www.w3.org/1999/xhtml' && namespacesWork && document.createElementNS) {
                    copy = document.createElementNS(node.namespaceURI, node.nodeName);
                } else {
                    copy = document.createElement(node.nodeName);
                }
            } else if (node.nodeType === 3) {
                copy = document.createTextNode(node.nodeValue);
            } else if (node.nodeType === 8) {
                copy = document.createComment(node.nodeValue);
            } else if (node.nodeType === 11) {
                copy = document.createDocumentFragment();
            }
            if (node.attributes) {
                var attributes = node.attributes;
                for (var i = 0; i < attributes.length; i++) {
                    var attribute = attributes[i];
                    if (attribute && attribute.specified) {
                        if (attribute.namespaceURI) {
                            copy.setAttributeNS(attribute.namespaceURI, attribute.nodeName || attribute.name, attribute.nodeValue || attribute.value);
                        } else {
                            copy.setAttribute(attribute.nodeName || attribute.name, attribute.nodeValue || attribute.value);
                        }
                    }
                }
            }
            if (node && node.firstChild) {
                var child = node.firstChild;
                while (child) {
                    copy.appendChild(cloneNode(child));
                    child = child.nextSibling;
                }
            }
            return copy;
        };
        function processNode(node, paths, location, document) {
            var callback, loc = location, nodeType = typeof node, el, p, i, len;
            var getCallback = function () {
                if (!callback) {
                    callback = {
                        path: location,
                        callbacks: []
                    };
                    paths.push(callback);
                    loc = [];
                }
                return callback;
            };
            if (nodeType === 'object') {
                if (node.tag) {
                    if (namespacesWork && node.namespace) {
                        el = document.createElementNS(node.namespace, node.tag);
                    } else {
                        el = document.createElement(node.tag);
                    }
                    if (node.attrs) {
                        for (var attrName in node.attrs) {
                            var value = node.attrs[attrName];
                            if (typeof value === 'function') {
                                getCallback().callbacks.push({ callback: value });
                            } else if (value !== null && typeof value === 'object' && value.namespaceURI) {
                                el.setAttributeNS(value.namespaceURI, attrName, value.value);
                            } else {
                                domMutate.setAttribute.call(el, attrName, value);
                            }
                        }
                    }
                    if (node.attributes) {
                        for (i = 0, len = node.attributes.length; i < len; i++) {
                            getCallback().callbacks.push({ callback: node.attributes[i] });
                        }
                    }
                    if (node.children && node.children.length) {
                        if (callback) {
                            p = callback.paths = [];
                        } else {
                            p = paths;
                        }
                        el.appendChild(processNodes(node.children, p, loc, document));
                    }
                } else if (node.comment) {
                    el = document.createComment(node.comment);
                    if (node.callbacks) {
                        for (i = 0, len = node.callbacks.length; i < len; i++) {
                            getCallback().callbacks.push({ callback: node.callbacks[i] });
                        }
                    }
                }
            } else if (nodeType === 'string') {
                el = document.createTextNode(node);
            } else if (nodeType === 'function') {
                if (keepsTextNodes) {
                    el = document.createTextNode('');
                    getCallback().callbacks.push({ callback: node });
                } else {
                    el = document.createComment('~');
                    getCallback().callbacks.push({
                        callback: function () {
                            var el = document.createTextNode('');
                            domMutate.replaceChild.call(this.parentNode, el, this);
                            return node.apply(el, arguments);
                        }
                    });
                }
            }
            return el;
        }
        function getCallbacks(el, pathData, elementCallbacks) {
            var path = pathData.path, callbacks = pathData.callbacks, paths = pathData.paths, child = el, pathLength = path ? path.length : 0, pathsLength = paths ? paths.length : 0;
            for (var i = 0; i < pathLength; i++) {
                child = child.childNodes.item(path[i]);
            }
            for (i = 0; i < pathsLength; i++) {
                getCallbacks(child, paths[i], elementCallbacks);
            }
            elementCallbacks.push({
                element: child,
                callbacks: callbacks
            });
        }
        function hydrateCallbacks(callbacks, args) {
            var len = callbacks.length, callbacksLength, callbackElement, callbackData;
            for (var i = 0; i < len; i++) {
                callbackData = callbacks[i];
                callbacksLength = callbackData.callbacks.length;
                callbackElement = callbackData.element;
                for (var c = 0; c < callbacksLength; c++) {
                    callbackData.callbacks[c].callback.apply(callbackElement, args);
                }
            }
        }
        function makeTarget(nodes, doc) {
            var paths = [];
            var frag = processNodes(nodes, paths, [], doc || getDocument());
            return {
                paths: paths,
                clone: frag,
                hydrate: function () {
                    var cloned = cloneNode(this.clone);
                    var args = [];
                    for (var a = 0, ref = args.length = arguments.length; a < ref; a++) {
                        args[a] = arguments[a];
                    }
                    var callbacks = [];
                    for (var i = 0; i < paths.length; i++) {
                        getCallbacks(cloned, paths[i], callbacks);
                    }
                    hydrateCallbacks(callbacks, args);
                    return cloned;
                }
            };
        }
        makeTarget.keepsTextNodes = keepsTextNodes;
        makeTarget.cloneNode = cloneNode;
        namespace.view = namespace.view || {};
        module.exports = namespace.view.target = makeTarget;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-reflect-promise@2.2.1#can-reflect-promise*/
define('can-reflect-promise@2.2.1#can-reflect-promise', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-symbol',
    'can-observation-recorder',
    'can-queues',
    'can-key-tree',
    'can-log/dev/dev'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var ObservationRecorder = require('can-observation-recorder');
    var queues = require('can-queues');
    var KeyTree = require('can-key-tree');
    var dev = require('can-log/dev/dev');
    var getKeyValueSymbol = canSymbol.for('can.getKeyValue'), observeDataSymbol = canSymbol.for('can.meta');
    var promiseDataPrototype = {
        isPending: true,
        state: 'pending',
        isResolved: false,
        isRejected: false,
        value: undefined,
        reason: undefined
    };
    function setVirtualProp(promise, property, value) {
        var observeData = promise[observeDataSymbol];
        var old = observeData[property];
        observeData[property] = value;
        queues.enqueueByQueue(observeData.handlers.getNode([property]), promise, [
            value,
            old
        ], function () {
            return {};
        }, [
            'Promise',
            promise,
            'resolved with value',
            value,
            'and changed virtual property: ' + property
        ]);
    }
    function initPromise(promise) {
        var observeData = promise[observeDataSymbol];
        if (!observeData) {
            Object.defineProperty(promise, observeDataSymbol, {
                enumerable: false,
                configurable: false,
                writable: false,
                value: Object.create(promiseDataPrototype)
            });
            observeData = promise[observeDataSymbol];
            observeData.handlers = new KeyTree([
                Object,
                Object,
                Array
            ]);
        }
        promise.then(function (value) {
            queues.batch.start();
            setVirtualProp(promise, 'isPending', false);
            setVirtualProp(promise, 'isResolved', true);
            setVirtualProp(promise, 'value', value);
            setVirtualProp(promise, 'state', 'resolved');
            queues.batch.stop();
        }, function (reason) {
            queues.batch.start();
            setVirtualProp(promise, 'isPending', false);
            setVirtualProp(promise, 'isRejected', true);
            setVirtualProp(promise, 'reason', reason);
            setVirtualProp(promise, 'state', 'rejected');
            queues.batch.stop();
            if (process.env.NODE_ENV !== 'production') {
                dev.error('Failed promise:', reason);
            }
        });
    }
    function setupPromise(value) {
        var oldPromiseFn;
        var proto = 'getPrototypeOf' in Object ? Object.getPrototypeOf(value) : value.__proto__;
        if (value[getKeyValueSymbol] && value[observeDataSymbol]) {
            return;
        }
        if (proto === null || proto === Object.prototype) {
            proto = value;
            if (typeof proto.promise === 'function') {
                oldPromiseFn = proto.promise;
                proto.promise = function () {
                    var result = oldPromiseFn.call(proto);
                    setupPromise(result);
                    return result;
                };
            }
        }
        canReflect.assignSymbols(proto, {
            'can.getKeyValue': function (key) {
                if (!this[observeDataSymbol]) {
                    initPromise(this);
                }
                ObservationRecorder.add(this, key);
                switch (key) {
                case 'state':
                case 'isPending':
                case 'isResolved':
                case 'isRejected':
                case 'value':
                case 'reason':
                    return this[observeDataSymbol][key];
                default:
                    return this[key];
                }
            },
            'can.getValue': function () {
                return this[getKeyValueSymbol]('value');
            },
            'can.isValueLike': false,
            'can.onKeyValue': function (key, handler, queue) {
                if (!this[observeDataSymbol]) {
                    initPromise(this);
                }
                this[observeDataSymbol].handlers.add([
                    key,
                    queue || 'mutate',
                    handler
                ]);
            },
            'can.offKeyValue': function (key, handler, queue) {
                if (!this[observeDataSymbol]) {
                    initPromise(this);
                }
                this[observeDataSymbol].handlers.delete([
                    key,
                    queue || 'mutate',
                    handler
                ]);
            },
            'can.hasOwnKey': function (key) {
                if (!this[observeDataSymbol]) {
                    initPromise(this);
                }
                return key in this[observeDataSymbol];
            }
        });
    }
    module.exports = setupPromise;
});
/*can-stache-key@1.4.3#can-stache-key*/
define('can-stache-key@1.4.3#can-stache-key', [
    'require',
    'exports',
    'module',
    'can-observation-recorder',
    'can-log/dev/dev',
    'can-symbol',
    'can-reflect',
    'can-reflect-promise'
], function (require, exports, module) {
    'use strict';
    var ObservationRecorder = require('can-observation-recorder');
    var dev = require('can-log/dev/dev');
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    var canReflectPromise = require('can-reflect-promise');
    var getValueSymbol = canSymbol.for('can.getValue');
    var setValueSymbol = canSymbol.for('can.setValue');
    var isValueLikeSymbol = canSymbol.for('can.isValueLike');
    var peek = ObservationRecorder.ignore(canReflect.getKeyValue.bind(canReflect));
    var observeReader;
    var isPromiseLike = ObservationRecorder.ignore(function isPromiseLike(value) {
        return typeof value === 'object' && value && typeof value.then === 'function';
    });
    var bindName = Function.prototype.bind;
    if (process.env.NODE_ENV !== 'production') {
        bindName = function (source) {
            var fn = Function.prototype.bind.call(this, source);
            Object.defineProperty(fn, 'name', { value: canReflect.getName(source) + '.' + canReflect.getName(this) });
            return fn;
        };
    }
    var isAt = function (index, reads) {
        var prevRead = reads[index - 1];
        return prevRead && prevRead.at;
    };
    var readValue = function (value, index, reads, options, state, prev) {
        var usedValueReader;
        do {
            usedValueReader = false;
            for (var i = 0, len = observeReader.valueReaders.length; i < len; i++) {
                if (observeReader.valueReaders[i].test(value, index, reads, options)) {
                    value = observeReader.valueReaders[i].read(value, index, reads, options, state, prev);
                }
            }
        } while (usedValueReader);
        return value;
    };
    var specialRead = {
        index: true,
        key: true,
        event: true,
        element: true,
        viewModel: true
    };
    var checkForObservableAndNotify = function (options, state, getObserves, value, index) {
        if (options.foundObservable && !state.foundObservable) {
            if (ObservationRecorder.trapsCount()) {
                ObservationRecorder.addMany(getObserves());
                options.foundObservable(value, index);
                state.foundObservable = true;
            }
        }
    };
    var objHasKeyAtIndex = function (obj, reads, index) {
        return !!(reads && reads.length && canReflect.hasKey(obj, reads[index].key));
    };
    observeReader = {
        read: function (parent, reads, options) {
            options = options || {};
            var state = { foundObservable: false };
            var getObserves;
            if (options.foundObservable) {
                getObserves = ObservationRecorder.trap();
            }
            var cur = readValue(parent, 0, reads, options, state), type, prev, readLength = reads.length, i = 0, last, parentHasKey;
            checkForObservableAndNotify(options, state, getObserves, parent, 0);
            while (i < readLength) {
                prev = cur;
                for (var r = 0, readersLength = observeReader.propertyReaders.length; r < readersLength; r++) {
                    var reader = observeReader.propertyReaders[r];
                    if (reader.test(cur)) {
                        cur = reader.read(cur, reads[i], i, options, state);
                        break;
                    }
                }
                checkForObservableAndNotify(options, state, getObserves, prev, i);
                last = cur;
                i = i + 1;
                cur = readValue(cur, i, reads, options, state, prev);
                checkForObservableAndNotify(options, state, getObserves, prev, i - 1);
                type = typeof cur;
                if (i < reads.length && (cur === null || cur === undefined)) {
                    parentHasKey = objHasKeyAtIndex(prev, reads, i - 1);
                    if (options.earlyExit && !parentHasKey) {
                        options.earlyExit(prev, i - 1, cur);
                    }
                    return {
                        value: undefined,
                        parent: prev,
                        parentHasKey: parentHasKey,
                        foundLastParent: false
                    };
                }
            }
            parentHasKey = objHasKeyAtIndex(prev, reads, reads.length - 1);
            if (cur === undefined && !parentHasKey) {
                if (options.earlyExit) {
                    options.earlyExit(prev, i - 1);
                }
            }
            return {
                value: cur,
                parent: prev,
                parentHasKey: parentHasKey,
                foundLastParent: true
            };
        },
        get: function (parent, reads, options) {
            return observeReader.read(parent, observeReader.reads(reads), options || {}).value;
        },
        valueReadersMap: {},
        valueReaders: [
            {
                name: 'function',
                test: function (value) {
                    return value && canReflect.isFunctionLike(value) && !canReflect.isConstructorLike(value);
                },
                read: function (value, i, reads, options, state, prev) {
                    if (options.callMethodsOnObservables && canReflect.isObservableLike(prev) && canReflect.isMapLike(prev)) {
                        dev.warn('can-stache-key: read() called with `callMethodsOnObservables: true`.');
                        return value.apply(prev, options.args || []);
                    }
                    return options.proxyMethods !== false ? bindName.call(value, prev) : value;
                }
            },
            {
                name: 'isValueLike',
                test: function (value, i, reads, options) {
                    return value && value[getValueSymbol] && value[isValueLikeSymbol] !== false && (options.foundAt || !isAt(i, reads));
                },
                read: function (value, i, reads, options) {
                    if (options.readCompute === false && i === reads.length) {
                        return value;
                    }
                    return canReflect.getValue(value);
                },
                write: function (base, newVal) {
                    if (base[setValueSymbol]) {
                        base[setValueSymbol](newVal);
                    } else if (base.set) {
                        base.set(newVal);
                    } else {
                        base(newVal);
                    }
                }
            }
        ],
        propertyReadersMap: {},
        propertyReaders: [
            {
                name: 'map',
                test: function (value) {
                    if (canReflect.isPromise(value) || isPromiseLike(value)) {
                        canReflectPromise(value);
                    }
                    return canReflect.isObservableLike(value) && canReflect.isMapLike(value);
                },
                read: function (value, prop) {
                    var res = canReflect.getKeyValue(value, prop.key);
                    if (res !== undefined) {
                        return res;
                    } else {
                        return value[prop.key];
                    }
                },
                write: canReflect.setKeyValue
            },
            {
                name: 'object',
                test: function () {
                    return true;
                },
                read: function (value, prop, i, options) {
                    if (value == null) {
                        return undefined;
                    } else {
                        if (typeof value === 'object') {
                            if (prop.key in value) {
                                return value[prop.key];
                            }
                            if (process.env.NODE_ENV !== 'production') {
                                if (prop.at && specialRead[prop.key] && '@' + prop.key in value) {
                                    options.foundAt = true;
                                    dev.warn('Use %' + prop.key + ' in place of @' + prop.key + '.');
                                    return undefined;
                                }
                            }
                        } else {
                            return value[prop.key];
                        }
                    }
                },
                write: function (base, prop, newVal) {
                    var propValue = base[prop];
                    if (newVal != null && typeof newVal === 'object' && canReflect.isMapLike(propValue)) {
                        dev.warn('can-stache-key: Merging data into "' + prop + '" because its parent is non-observable');
                        canReflect.update(propValue, newVal);
                    } else if (propValue != null && propValue[setValueSymbol] !== undefined) {
                        canReflect.setValue(propValue, newVal);
                    } else {
                        base[prop] = newVal;
                    }
                }
            }
        ],
        reads: function (keyArg) {
            var key = '' + keyArg;
            var keys = [];
            var last = 0;
            var at = false;
            if (key.charAt(0) === '@') {
                last = 1;
                at = true;
            }
            var keyToAdd = '';
            for (var i = last; i < key.length; i++) {
                var character = key.charAt(i);
                if (character === '.' || character === '@') {
                    if (key.charAt(i - 1) !== '\\') {
                        keys.push({
                            key: keyToAdd,
                            at: at
                        });
                        at = character === '@';
                        keyToAdd = '';
                    } else {
                        keyToAdd = keyToAdd.substr(0, keyToAdd.length - 1) + '.';
                    }
                } else {
                    keyToAdd += character;
                }
            }
            keys.push({
                key: keyToAdd,
                at: at
            });
            return keys;
        },
        write: function (parent, key, value, options) {
            var keys = typeof key === 'string' ? observeReader.reads(key) : key;
            var last;
            options = options || {};
            if (keys.length > 1) {
                last = keys.pop();
                parent = observeReader.read(parent, keys, options).value;
                keys.push(last);
            } else {
                last = keys[0];
            }
            if (!parent) {
                return;
            }
            var keyValue = peek(parent, last.key);
            if (observeReader.valueReadersMap.isValueLike.test(keyValue, keys.length - 1, keys, options)) {
                observeReader.valueReadersMap.isValueLike.write(keyValue, value, options);
            } else {
                if (observeReader.valueReadersMap.isValueLike.test(parent, keys.length - 1, keys, options)) {
                    parent = parent[getValueSymbol]();
                }
                if (observeReader.propertyReadersMap.map.test(parent)) {
                    observeReader.propertyReadersMap.map.write(parent, last.key, value, options);
                } else if (observeReader.propertyReadersMap.object.test(parent)) {
                    observeReader.propertyReadersMap.object.write(parent, last.key, value, options);
                    if (options.observation) {
                        options.observation.update();
                    }
                }
            }
        }
    };
    observeReader.propertyReaders.forEach(function (reader) {
        observeReader.propertyReadersMap[reader.name] = reader;
    });
    observeReader.valueReaders.forEach(function (reader) {
        observeReader.valueReadersMap[reader.name] = reader;
    });
    observeReader.set = observeReader.write;
    module.exports = observeReader;
});
/*can-view-scope@4.13.2#template-context*/
define('can-view-scope@4.13.2#template-context', [
    'require',
    'exports',
    'module',
    'can-simple-map'
], function (require, exports, module) {
    'use strict';
    var SimpleMap = require('can-simple-map');
    var TemplateContext = function (options) {
        options = options || {};
        this.vars = new SimpleMap(options.vars || {});
        this.helpers = new SimpleMap(options.helpers || {});
        this.partials = new SimpleMap(options.partials || {});
        this.tags = new SimpleMap(options.tags || {});
    };
    module.exports = TemplateContext;
});
/*can-view-scope@4.13.2#make-compute-like*/
define('can-view-scope@4.13.2#make-compute-like', [
    'require',
    'exports',
    'module',
    'can-single-reference',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var singleReference = require('can-single-reference');
    var canReflect = require('can-reflect');
    var Compute = function (newVal) {
        if (arguments.length) {
            return canReflect.setValue(this, newVal);
        } else {
            return canReflect.getValue(this);
        }
    };
    module.exports = function (observable) {
        var compute = Compute.bind(observable);
        if (process.env.NODE_ENV !== 'production') {
            Object.defineProperty(compute, 'name', { value: 'Compute<' + canReflect.getName(observable) + '>' });
        }
        compute.on = compute.bind = compute.addEventListener = function (event, handler) {
            var translationHandler = function (newVal, oldVal) {
                handler.call(compute, { type: 'change' }, newVal, oldVal);
            };
            singleReference.set(handler, this, translationHandler);
            observable.on(translationHandler);
        };
        compute.off = compute.unbind = compute.removeEventListener = function (event, handler) {
            observable.off(singleReference.getAndDelete(handler, this));
        };
        canReflect.assignSymbols(compute, {
            'can.getValue': function () {
                return canReflect.getValue(observable);
            },
            'can.setValue': function (newVal) {
                return canReflect.setValue(observable, newVal);
            },
            'can.onValue': function (handler, queue) {
                return canReflect.onValue(observable, handler, queue);
            },
            'can.offValue': function (handler, queue) {
                return canReflect.offValue(observable, handler, queue);
            },
            'can.valueHasDependencies': function () {
                return canReflect.valueHasDependencies(observable);
            },
            'can.getPriority': function () {
                return canReflect.getPriority(observable);
            },
            'can.setPriority': function (newPriority) {
                canReflect.setPriority(observable, newPriority);
            },
            'can.isValueLike': true,
            'can.isFunctionLike': false
        });
        compute.isComputed = true;
        return compute;
    };
});
/*can-stache-helpers@1.2.0#can-stache-helpers*/
define('can-stache-helpers@1.2.0#can-stache-helpers', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    if (namespace.stacheHelpers) {
        throw new Error('You can\'t have two versions of can-stache-helpers, check your dependencies');
    } else {
        module.exports = namespace.stacheHelpers = {};
    }
});
/*can-view-scope@4.13.2#scope-key-data*/
define('can-view-scope@4.13.2#scope-key-data', [
    'require',
    'exports',
    'module',
    'can-observation',
    'can-stache-key',
    'can-assign',
    'can-reflect',
    'can-symbol',
    'can-observation-recorder',
    './make-compute-like',
    'can-reflect-dependencies',
    'can-event-queue/value/value',
    'can-stache-helpers',
    'can-simple-observable',
    'can-log/dev/dev'
], function (require, exports, module) {
    'use strict';
    var Observation = require('can-observation');
    var observeReader = require('can-stache-key');
    var assign = require('can-assign');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var ObservationRecorder = require('can-observation-recorder');
    var makeComputeLike = require('./make-compute-like');
    var canReflectDeps = require('can-reflect-dependencies');
    var valueEventBindings = require('can-event-queue/value/value');
    var stacheHelpers = require('can-stache-helpers');
    var SimpleObservable = require('can-simple-observable');
    var dev = require('can-log/dev/dev');
    var dispatchSymbol = canSymbol.for('can.dispatch');
    var getFastPathRoot = ObservationRecorder.ignore(function (computeData) {
        if (computeData.reads && computeData.reads.length === 1) {
            var root = computeData.root;
            if (root && root[canSymbol.for('can.getValue')]) {
                root = canReflect.getValue(root);
            }
            return root && canReflect.isObservableLike(root) && canReflect.isMapLike(root) && typeof root[computeData.reads[0].key] !== 'function' && root;
        }
        return;
    });
    var isEventObject = function (obj) {
        return obj && typeof obj.batchNum === 'number' && typeof obj.type === 'string';
    };
    function getMutated(scopeKeyData) {
        var value = ObservationRecorder.peekValue(scopeKeyData._thisArg);
        return !canReflect.isPrimitive(value) ? value : scopeKeyData.root;
    }
    function callMutateWithRightArgs(method, mutated, reads, mutator) {
        if (reads.length) {
            method.call(canReflectDeps, mutated, reads[reads.length - 1].key, mutator);
        } else {
            method.call(canReflectDeps, mutated, mutator);
        }
    }
    var warnOnUndefinedProperty;
    if (process.env.NODE_ENV !== 'production') {
        warnOnUndefinedProperty = function (options) {
            if (options.key !== 'debugger' && !options.parentHasKey) {
                var filename = options.scope.peek('scope.filename');
                var lineNumber = options.scope.peek('scope.lineNumber');
                var reads = observeReader.reads(options.key);
                var firstKey = reads[0].key;
                var key = reads.map(function (read) {
                    return read.key + (read.at ? '()' : '');
                }).join('.');
                var pathsForKey = options.scope.getPathsForKey(firstKey);
                var paths = Object.keys(pathsForKey);
                var includeSuggestions = paths.length && paths.indexOf(firstKey) < 0;
                var warning = [(filename ? filename + ':' : '') + (lineNumber ? lineNumber + ': ' : '') + 'Unable to find key "' + key + '".' + (includeSuggestions ? ' Did you mean' + (paths.length > 1 ? ' one of these' : '') + '?\n' : '\n')];
                if (includeSuggestions) {
                    paths.forEach(function (path) {
                        warning.push('\t"' + path + '" which will read from');
                        warning.push(pathsForKey[path]);
                        warning.push('\n');
                    });
                }
                warning.push('\n');
                dev.warn.apply(dev, warning);
            }
        };
    }
    var ScopeKeyData = function (scope, key, options) {
        this.startingScope = scope;
        this.key = key;
        this.read = this.read.bind(this);
        this.dispatch = this.dispatch.bind(this);
        if (key === 'debugger') {
            this.startingScope = { _context: stacheHelpers };
            this.read = function () {
                var helperOptions = { scope: scope };
                var debuggerHelper = stacheHelpers['debugger'];
                return debuggerHelper(helperOptions);
            };
        }
        if (process.env.NODE_ENV !== 'production') {
            Object.defineProperty(this.read, 'name', { value: canReflect.getName(this) + '.read' });
            Object.defineProperty(this.dispatch, 'name', { value: canReflect.getName(this) + '.dispatch' });
        }
        var observation = this.observation = new Observation(this.read, this);
        this.options = assign({ observation: this.observation }, options);
        this.fastPath = undefined;
        this.root = undefined;
        this.reads = undefined;
        this.setRoot = undefined;
        this._thisArg = new SimpleObservable();
        this.parentHasKey = undefined;
        var valueDependencies = new Set();
        valueDependencies.add(observation);
        this.dependencies = { valueDependencies: valueDependencies };
        this._latestValue = undefined;
    };
    valueEventBindings(ScopeKeyData.prototype);
    function fastOnBoundSet_Value() {
        this._value = this.newVal;
    }
    function fastOnBoundSetValue() {
        this.value = this.newVal;
    }
    assign(ScopeKeyData.prototype, {
        constructor: ScopeKeyData,
        dispatch: function dispatch(newVal) {
            var old = this.value;
            this._latestValue = this.value = newVal;
            this[dispatchSymbol].call(this, this.value, old);
        },
        onBound: function onBound() {
            this.bound = true;
            canReflect.onValue(this.observation, this.dispatch, 'notify');
            var fastPathRoot = getFastPathRoot(this);
            if (fastPathRoot) {
                this.toFastPath(fastPathRoot);
            }
            this._latestValue = this.value = ObservationRecorder.peekValue(this.observation);
        },
        onUnbound: function onUnbound() {
            this.bound = false;
            canReflect.offValue(this.observation, this.dispatch, 'notify');
            this.toSlowPath();
        },
        set: function (newVal) {
            var root = this.root || this.setRoot;
            if (root) {
                if (this.reads.length) {
                    observeReader.write(root, this.reads, newVal, this.options);
                } else {
                    canReflect.setValue(root, newVal);
                }
            } else {
                this.startingScope.set(this.key, newVal, this.options);
            }
        },
        get: function () {
            if (ObservationRecorder.isRecording()) {
                ObservationRecorder.add(this);
                if (!this.bound) {
                    Observation.temporarilyBind(this);
                }
            }
            if (this.bound === true && this.fastPath === true) {
                return this._latestValue;
            } else {
                return ObservationRecorder.peekValue(this.observation);
            }
        },
        toFastPath: function (fastPathRoot) {
            var self = this, observation = this.observation;
            this.fastPath = true;
            observation.dependencyChange = function (target, newVal) {
                if (isEventObject(newVal)) {
                    throw 'no event objects!';
                }
                if (target === fastPathRoot && typeof newVal !== 'function') {
                    self._latestValue = newVal;
                    this.newVal = newVal;
                } else {
                    self.toSlowPath();
                }
                return Observation.prototype.dependencyChange.apply(this, arguments);
            };
            if (observation.hasOwnProperty('_value')) {
                observation.onBound = fastOnBoundSet_Value;
            } else {
                observation.onBound = fastOnBoundSetValue;
            }
        },
        toSlowPath: function () {
            this.observation.dependencyChange = Observation.prototype.dependencyChange;
            this.observation.onBound = Observation.prototype.onBound;
            this.fastPath = false;
        },
        read: function () {
            var data;
            if (this.root) {
                data = observeReader.read(this.root, this.reads, this.options);
                if (process.env.NODE_ENV !== 'production') {
                    if (this.reads.length) {
                        callMutateWithRightArgs(canReflectDeps.deleteMutatedBy, getMutated(this), this.reads, this);
                    }
                }
                this.thisArg = data.parent;
                if (process.env.NODE_ENV !== 'production') {
                    var valueDeps = new Set();
                    valueDeps.add(this);
                    callMutateWithRightArgs(canReflectDeps.addMutatedBy, data.parent || this.root, this.reads, { valueDependencies: valueDeps });
                }
                return data.value;
            }
            data = this.startingScope.read(this.key, this.options);
            this.scope = data.scope;
            this.reads = data.reads;
            this.root = data.rootObserve;
            this.setRoot = data.setRoot;
            this.thisArg = data.thisArg;
            this.parentHasKey = data.parentHasKey;
            if (process.env.NODE_ENV !== 'production') {
                if (data.rootObserve) {
                    var rootValueDeps = new Set();
                    rootValueDeps.add(this);
                    callMutateWithRightArgs(canReflectDeps.addMutatedBy, getMutated(this), data.reads, { valueDependencies: rootValueDeps });
                }
                if (data.value === undefined && this.options.warnOnMissingKey === true) {
                    warnOnUndefinedProperty({
                        scope: this.startingScope,
                        key: this.key,
                        parentHasKey: data.parentHasKey
                    });
                }
            }
            return data.value;
        },
        hasDependencies: function () {
            if (!this.bound) {
                Observation.temporarilyBind(this);
            }
            return canReflect.valueHasDependencies(this.observation);
        }
    });
    Object.defineProperty(ScopeKeyData.prototype, 'thisArg', {
        get: function () {
            return this._thisArg.get();
        },
        set: function (newVal) {
            this._thisArg.set(newVal);
        }
    });
    var scopeKeyDataPrototype = {
        'can.getValue': ScopeKeyData.prototype.get,
        'can.setValue': ScopeKeyData.prototype.set,
        'can.valueHasDependencies': ScopeKeyData.prototype.hasDependencies,
        'can.getValueDependencies': function () {
            return this.dependencies;
        },
        'can.getPriority': function () {
            return canReflect.getPriority(this.observation);
        },
        'can.setPriority': function (newPriority) {
            canReflect.setPriority(this.observation, newPriority);
        }
    };
    if (process.env.NODE_ENV !== 'production') {
        scopeKeyDataPrototype['can.getName'] = function () {
            return canReflect.getName(this.constructor) + '{{' + this.key + '}}';
        };
    }
    canReflect.assignSymbols(ScopeKeyData.prototype, scopeKeyDataPrototype);
    Object.defineProperty(ScopeKeyData.prototype, 'compute', {
        get: function () {
            var compute = makeComputeLike(this);
            Object.defineProperty(this, 'compute', {
                value: compute,
                writable: false,
                configurable: false
            });
            return compute;
        },
        configurable: true
    });
    Object.defineProperty(ScopeKeyData.prototype, 'initialValue', {
        get: function () {
            if (!this.bound) {
                Observation.temporarilyBind(this);
            }
            return ObservationRecorder.peekValue(this);
        },
        set: function () {
            throw new Error('initialValue should not be set');
        },
        configurable: true
    });
    module.exports = ScopeKeyData;
});
/*can-view-scope@4.13.2#compute_data*/
define('can-view-scope@4.13.2#compute_data', [
    'require',
    'exports',
    'module',
    './scope-key-data'
], function (require, exports, module) {
    'use strict';
    var ScopeKeyData = require('./scope-key-data');
    module.exports = function (scope, key, options) {
        return new ScopeKeyData(scope, key, options || { args: [] });
    };
});
/*can-view-scope@4.13.2#let-context*/
define('can-view-scope@4.13.2#let-context', [
    'require',
    'exports',
    'module',
    'can-simple-map'
], function (require, exports, module) {
    var SimpleMap = require('can-simple-map');
    function objectCreateWithSymbolsAndSpecificProperties(obj, propertiesToKeep) {
        var newObj = {};
        if ('getOwnPropertySymbols' in Object) {
            Object.getOwnPropertySymbols(obj).forEach(function (key) {
                newObj[key] = obj[key];
            });
        }
        Object.getOwnPropertyNames(obj).forEach(function (key) {
            if (propertiesToKeep.indexOf(key) >= 0 || key.indexOf('@@symbol') === 0) {
                newObj[key] = obj[key];
            }
        });
        return Object.create(newObj);
    }
    var LetContext = SimpleMap.extend('LetContext', {});
    LetContext.prototype = objectCreateWithSymbolsAndSpecificProperties(SimpleMap.prototype, [
        'setup',
        'attr',
        'serialize',
        'get',
        'set',
        'log',
        'dispatch',
        'constructorExtends',
        'newInstance',
        '_inherit',
        '_defineProperty',
        '_overwrite',
        'instance',
        'extend',
        'ReturnValue',
        'setup',
        'init'
    ]);
    LetContext.prototype.constructor = LetContext;
    module.exports = LetContext;
});
/*can-view-scope@4.13.2#can-view-scope*/
define('can-view-scope@4.13.2#can-view-scope', [
    'require',
    'exports',
    'module',
    'can-stache-key',
    'can-observation-recorder',
    './template-context',
    './compute_data',
    'can-assign',
    'can-namespace',
    'can-reflect',
    'can-log/dev/dev',
    'can-define-lazy-value',
    'can-stache-helpers',
    './let-context'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var stacheKey = require('can-stache-key');
        var ObservationRecorder = require('can-observation-recorder');
        var TemplateContext = require('./template-context');
        var makeComputeData = require('./compute_data');
        var assign = require('can-assign');
        var namespace = require('can-namespace');
        var canReflect = require('can-reflect');
        var canLog = require('can-log/dev/dev');
        var defineLazyValue = require('can-define-lazy-value');
        var stacheHelpers = require('can-stache-helpers');
        var LetContext = require('./let-context');
        function canHaveProperties(obj) {
            return obj != null;
        }
        function returnFalse() {
            return false;
        }
        function Scope(context, parent, meta) {
            this._context = context;
            this._parent = parent;
            this._meta = meta || {};
            this.__cache = {};
        }
        var parentContextSearch = /(\.\.\/)|(\.\/)|(this[\.@])/g;
        assign(Scope, {
            read: stacheKey.read,
            TemplateContext: TemplateContext,
            keyInfo: function (attr) {
                if (attr === './') {
                    attr = 'this';
                }
                var info = { remainingKey: attr };
                info.isScope = attr === 'scope';
                if (info.isScope) {
                    return info;
                }
                var firstSix = attr.substr(0, 6);
                info.isInScope = firstSix === 'scope.' || firstSix === 'scope@';
                if (info.isInScope) {
                    info.remainingKey = attr.substr(6);
                    return info;
                } else if (firstSix === 'scope/') {
                    info.walkScope = true;
                    info.remainingKey = attr.substr(6);
                    return info;
                } else if (attr.substr(0, 7) === '@scope/') {
                    info.walkScope = true;
                    info.remainingKey = attr.substr(7);
                    return info;
                }
                info.parentContextWalkCount = 0;
                info.remainingKey = attr.replace(parentContextSearch, function (token, parentContext, dotSlash, thisContext, index) {
                    info.isContextBased = true;
                    if (parentContext !== undefined) {
                        info.parentContextWalkCount++;
                    }
                    return '';
                });
                if (info.remainingKey === '..') {
                    info.parentContextWalkCount++;
                    info.remainingKey = 'this';
                } else if (info.remainingKey === '.' || info.remainingKey === '') {
                    info.remainingKey = 'this';
                }
                if (info.remainingKey === 'this') {
                    info.isContextBased = true;
                }
                return info;
            },
            isTemplateContextOrCanNotHaveProperties: function (currentScope) {
                var currentContext = currentScope._context;
                if (currentContext instanceof TemplateContext) {
                    return true;
                } else if (!canHaveProperties(currentContext)) {
                    return true;
                }
                return false;
            },
            shouldSkipIfSpecial: function (currentScope) {
                var isSpecialContext = currentScope._meta.special === true;
                if (isSpecialContext === true) {
                    return true;
                }
                if (Scope.isTemplateContextOrCanNotHaveProperties(currentScope)) {
                    return true;
                }
                return false;
            },
            shouldSkipEverythingButSpecial: function (currentScope) {
                var isSpecialContext = currentScope._meta.special === true;
                if (isSpecialContext === false) {
                    return true;
                }
                if (Scope.isTemplateContextOrCanNotHaveProperties(currentScope)) {
                    return true;
                }
                return false;
            },
            makeShouldExitOnSecondNormalContext: function () {
                var foundNormalContext = false;
                return function shouldExitOnSecondNormalContext(currentScope) {
                    var isNormalContext = !currentScope.isSpecial();
                    var shouldExit = isNormalContext && foundNormalContext;
                    if (isNormalContext) {
                        foundNormalContext = true;
                    }
                    return shouldExit;
                };
            },
            makeShouldExitAfterFirstNormalContext: function () {
                var foundNormalContext = false;
                return function shouldExitAfterFirstNormalContext(currentScope) {
                    if (foundNormalContext) {
                        return true;
                    }
                    var isNormalContext = !currentScope.isSpecial();
                    if (isNormalContext) {
                        foundNormalContext = true;
                    }
                    return false;
                };
            },
            makeShouldSkipSpecialContexts: function (parentContextWalkCount) {
                var walkCount = parentContextWalkCount || 0;
                return function shouldSkipSpecialContexts(currentScope) {
                    if (walkCount < 0 && currentScope._meta.notContext) {
                        return false;
                    }
                    if (currentScope.isSpecial()) {
                        return true;
                    }
                    walkCount--;
                    if (walkCount < 0) {
                        return false;
                    }
                    return true;
                };
            }
        });
        assign(Scope.prototype, {
            add: function (context, meta) {
                if (context !== this._context) {
                    return new this.constructor(context, this, meta);
                } else {
                    return this;
                }
            },
            find: function (attr, options) {
                var keyReads = stacheKey.reads(attr);
                var howToRead = {
                    shouldExit: returnFalse,
                    shouldSkip: Scope.shouldSkipIfSpecial,
                    shouldLookForHelper: true,
                    read: stacheKey.read
                };
                var result = this._walk(keyReads, options, howToRead);
                return result.value;
            },
            readFromSpecialContext: function (key) {
                return this._walk([{
                        key: key,
                        at: false
                    }], { special: true }, {
                    shouldExit: returnFalse,
                    shouldSkip: Scope.shouldSkipEverythingButSpecial,
                    shouldLookForHelper: false,
                    read: stacheKey.read
                });
            },
            readFromTemplateContext: function (key, readOptions) {
                var keyReads = stacheKey.reads(key);
                return stacheKey.read(this.templateContext, keyReads, readOptions);
            },
            read: function (attr, options) {
                options = options || {};
                return this.readKeyInfo(Scope.keyInfo(attr), options || {});
            },
            readKeyInfo: function (keyInfo, options) {
                var readValue, keyReads, howToRead = { read: options.read || stacheKey.read };
                if (keyInfo.isScope) {
                    return { value: this };
                } else if (keyInfo.isInScope) {
                    keyReads = stacheKey.reads(keyInfo.remainingKey);
                    readValue = stacheKey.read(this, keyReads, options);
                    if (typeof readValue.value === 'undefined' && !readValue.parentHasKey) {
                        readValue = this.readFromTemplateContext(keyInfo.remainingKey, options);
                    }
                    return assign(readValue, { thisArg: keyReads.length > 0 ? readValue.parent : undefined });
                } else if (keyInfo.isContextBased) {
                    if (keyInfo.remainingKey !== 'this') {
                        keyReads = stacheKey.reads(keyInfo.remainingKey);
                    } else {
                        keyReads = [];
                    }
                    howToRead.shouldExit = Scope.makeShouldExitOnSecondNormalContext();
                    howToRead.shouldSkip = Scope.makeShouldSkipSpecialContexts(keyInfo.parentContextWalkCount);
                    howToRead.shouldLookForHelper = true;
                    return this._walk(keyReads, options, howToRead);
                } else if (keyInfo.walkScope) {
                    howToRead.shouldExit = returnFalse;
                    howToRead.shouldSkip = Scope.shouldSkipIfSpecial;
                    howToRead.shouldLookForHelper = true;
                    keyReads = stacheKey.reads(keyInfo.remainingKey);
                    return this._walk(keyReads, options, howToRead);
                } else {
                    keyReads = stacheKey.reads(keyInfo.remainingKey);
                    var isSpecialRead = options && options.special === true;
                    howToRead.shouldExit = Scope.makeShouldExitOnSecondNormalContext();
                    howToRead.shouldSkip = isSpecialRead ? Scope.shouldSkipEverythingButSpecial : Scope.shouldSkipIfSpecial;
                    howToRead.shouldLookForHelper = isSpecialRead ? false : true;
                    return this._walk(keyReads, options, howToRead);
                }
            },
            _walk: function (keyReads, options, howToRead) {
                var currentScope = this, currentContext, undefinedObserves = [], currentObserve, currentReads, setObserveDepth = -1, currentSetReads, currentSetObserve, readOptions = assign({
                        foundObservable: function (observe, nameIndex) {
                            currentObserve = observe;
                            currentReads = keyReads.slice(nameIndex);
                        },
                        earlyExit: function (parentValue, nameIndex) {
                            var isVariableScope = currentScope._meta.variable === true, updateSetObservable = false;
                            if (isVariableScope === true && nameIndex === 0) {
                                updateSetObservable = canReflect.hasKey(parentValue, keyReads[nameIndex].key);
                            } else {
                                updateSetObservable = nameIndex > setObserveDepth || nameIndex === setObserveDepth && (typeof parentValue === 'object' && canReflect.hasOwnKey(parentValue, keyReads[nameIndex].key));
                            }
                            if (updateSetObservable) {
                                currentSetObserve = currentObserve;
                                currentSetReads = currentReads;
                                setObserveDepth = nameIndex;
                            }
                        }
                    }, options);
                var isRecording = ObservationRecorder.isRecording(), readAContext = false;
                while (currentScope) {
                    if (howToRead.shouldSkip(currentScope) === true) {
                        currentScope = currentScope._parent;
                        continue;
                    }
                    if (howToRead.shouldExit(currentScope) === true) {
                        break;
                    }
                    readAContext = true;
                    currentContext = currentScope._context;
                    var getObserves = ObservationRecorder.trap();
                    var data = howToRead.read(currentContext, keyReads, readOptions);
                    var observes = getObserves();
                    if (data.value !== undefined || data.parentHasKey) {
                        if (!observes.length && isRecording) {
                            currentObserve = data.parent;
                            currentReads = keyReads.slice(keyReads.length - 1);
                        } else {
                            ObservationRecorder.addMany(observes);
                        }
                        return {
                            scope: currentScope,
                            rootObserve: currentObserve,
                            value: data.value,
                            reads: currentReads,
                            thisArg: data.parent,
                            parentHasKey: data.parentHasKey
                        };
                    } else {
                        undefinedObserves.push.apply(undefinedObserves, observes);
                    }
                    currentScope = currentScope._parent;
                }
                if (howToRead.shouldLookForHelper) {
                    var helper = this.getHelperOrPartial(keyReads);
                    if (helper && helper.value) {
                        return { value: helper.value };
                    }
                }
                ObservationRecorder.addMany(undefinedObserves);
                return {
                    setRoot: currentSetObserve,
                    reads: currentSetReads,
                    value: undefined,
                    noContextAvailable: !readAContext
                };
            },
            getDataForScopeSet: function getDataForScopeSet(key, options) {
                var keyInfo = Scope.keyInfo(key);
                var firstSearchedContext;
                var opts = assign({
                    read: function (context, keys) {
                        if (firstSearchedContext === undefined && !(context instanceof LetContext)) {
                            firstSearchedContext = context;
                        }
                        if (keys.length > 1) {
                            var parentKeys = keys.slice(0, keys.length - 1);
                            var parent = stacheKey.read(context, parentKeys, options).value;
                            if (parent != null && canReflect.hasKey(parent, keys[keys.length - 1].key)) {
                                return {
                                    parent: parent,
                                    parentHasKey: true,
                                    value: undefined
                                };
                            } else {
                                return {};
                            }
                        } else if (keys.length === 1) {
                            if (canReflect.hasKey(context, keys[0].key)) {
                                return {
                                    parent: context,
                                    parentHasKey: true,
                                    value: undefined
                                };
                            } else {
                                return {};
                            }
                        } else {
                            return { value: context };
                        }
                    }
                }, options);
                var readData = this.readKeyInfo(keyInfo, opts);
                if (keyInfo.remainingKey === 'this') {
                    return {
                        parent: readData.value,
                        how: 'setValue'
                    };
                }
                var parent;
                var props = keyInfo.remainingKey.split('.');
                var propName = props.pop();
                if (readData.thisArg) {
                    parent = readData.thisArg;
                } else if (firstSearchedContext) {
                    parent = firstSearchedContext;
                }
                if (parent === undefined) {
                    return { error: 'Attempting to set a value at ' + key + ' where the context is undefined.' };
                }
                if (!canReflect.isObservableLike(parent) && canReflect.isObservableLike(parent[propName])) {
                    if (canReflect.isMapLike(parent[propName])) {
                        return {
                            parent: parent,
                            key: propName,
                            how: 'updateDeep',
                            warn: 'can-view-scope: Merging data into "' + propName + '" because its parent is non-observable'
                        };
                    } else if (canReflect.isValueLike(parent[propName])) {
                        return {
                            parent: parent,
                            key: propName,
                            how: 'setValue'
                        };
                    } else {
                        return {
                            parent: parent,
                            how: 'write',
                            key: propName,
                            passOptions: true
                        };
                    }
                } else {
                    return {
                        parent: parent,
                        how: 'write',
                        key: propName,
                        passOptions: true
                    };
                }
            },
            getHelper: function (keyReads) {
                console.warn('.getHelper is deprecated, use .getHelperOrPartial');
                return this.getHelperOrPartial(keyReads);
            },
            getHelperOrPartial: function (keyReads) {
                var scope = this, context, helper;
                while (scope) {
                    context = scope._context;
                    if (context instanceof TemplateContext) {
                        helper = stacheKey.read(context.helpers, keyReads, { proxyMethods: false });
                        if (helper.value !== undefined) {
                            return helper;
                        }
                        helper = stacheKey.read(context.partials, keyReads, { proxyMethods: false });
                        if (helper.value !== undefined) {
                            return helper;
                        }
                    }
                    scope = scope._parent;
                }
                return stacheKey.read(stacheHelpers, keyReads, { proxyMethods: false });
            },
            get: function (key, options) {
                options = assign({ isArgument: true }, options);
                var res = this.read(key, options);
                return res.value;
            },
            peek: ObservationRecorder.ignore(function (key, options) {
                return this.get(key, options);
            }),
            peak: ObservationRecorder.ignore(function (key, options) {
                if (process.env.NODE_ENV !== 'production') {
                    canLog.warn('peak is deprecated, please use peek instead');
                }
                return this.peek(key, options);
            }),
            getScope: function (tester) {
                var scope = this;
                while (scope) {
                    if (tester(scope)) {
                        return scope;
                    }
                    scope = scope._parent;
                }
            },
            getContext: function (tester) {
                var res = this.getScope(tester);
                return res && res._context;
            },
            getTemplateContext: function () {
                var lastScope;
                var templateContext = this.getScope(function (scope) {
                    lastScope = scope;
                    return scope._context instanceof TemplateContext;
                });
                if (!templateContext) {
                    templateContext = new Scope(new TemplateContext());
                    lastScope._parent = templateContext;
                }
                return templateContext;
            },
            addTemplateContext: function () {
                return this.add(new TemplateContext());
            },
            addLetContext: function (values) {
                return this.add(new LetContext(values || {}), { variable: true });
            },
            getRoot: function () {
                var cur = this, child = this;
                while (cur._parent) {
                    child = cur;
                    cur = cur._parent;
                }
                if (cur._context instanceof TemplateContext) {
                    cur = child;
                }
                return cur._context;
            },
            getViewModel: function () {
                var vmScope = this.getScope(function (scope) {
                    return scope._meta.viewModel;
                });
                return vmScope && vmScope._context;
            },
            getTop: function () {
                var top;
                this.getScope(function (scope) {
                    if (scope._meta.viewModel) {
                        top = scope;
                    }
                    return false;
                });
                return top && top._context;
            },
            getPathsForKey: function getPathsForKey(key) {
                if (process.env.NODE_ENV !== 'production') {
                    var paths = {};
                    var getKeyDefinition = function (obj, key) {
                        if (!obj || typeof obj !== 'object') {
                            return {};
                        }
                        var keyExistsOnObj = key in obj;
                        var objHasKey = canReflect.hasKey(obj, key);
                        return {
                            isDefined: keyExistsOnObj || objHasKey,
                            isFunction: keyExistsOnObj && typeof obj[key] === 'function'
                        };
                    };
                    var reads = stacheKey.reads(key);
                    var keyParts = reads.map(function (read) {
                        return read.key;
                    });
                    var scopeIndex = keyParts.indexOf('scope');
                    if (scopeIndex > -1) {
                        keyParts.splice(scopeIndex, 2);
                    }
                    var normalizedKey = keyParts.join('.');
                    var vm = this.getViewModel();
                    var vmKeyDefinition = getKeyDefinition(vm, normalizedKey);
                    if (vmKeyDefinition.isDefined) {
                        paths['scope.vm.' + normalizedKey + (vmKeyDefinition.isFunction ? '()' : '')] = vm;
                    }
                    var top = this.getTop();
                    var topKeyDefinition = getKeyDefinition(top, normalizedKey);
                    if (topKeyDefinition.isDefined) {
                        paths['scope.top.' + normalizedKey + (topKeyDefinition.isFunction ? '()' : '')] = top;
                    }
                    var cur = '';
                    this.getScope(function (scope) {
                        var canBeRead = !scope.isSpecial();
                        if (canBeRead) {
                            var contextKeyDefinition = getKeyDefinition(scope._context, normalizedKey);
                            if (contextKeyDefinition.isDefined) {
                                paths[cur + normalizedKey + (contextKeyDefinition.isFunction ? '()' : '')] = scope._context;
                            }
                            cur += '../';
                        }
                        return false;
                    });
                    return paths;
                }
            },
            hasKey: function hasKey(key) {
                var reads = stacheKey.reads(key);
                var readValue;
                if (reads[0].key === 'scope') {
                    readValue = stacheKey.read(this, reads.slice(1), key);
                } else {
                    readValue = stacheKey.read(this._context, reads, key);
                }
                return readValue.foundLastParent && readValue.parentHasKey;
            },
            set: function (key, value, options) {
                options = options || {};
                var data = this.getDataForScopeSet(key, options);
                var parent = data.parent;
                if (process.env.NODE_ENV !== 'production') {
                    if (data.error) {
                        return canLog.error(data.error);
                    }
                }
                if (data.warn) {
                    canLog.warn(data.warn);
                }
                switch (data.how) {
                case 'set':
                    parent.set(data.key, value, data.passOptions ? options : undefined);
                    break;
                case 'write':
                    stacheKey.write(parent, data.key, value, options);
                    break;
                case 'setValue':
                    canReflect.setValue('key' in data ? parent[data.key] : parent, value);
                    break;
                case 'setKeyValue':
                    canReflect.setKeyValue(parent, data.key, value);
                    break;
                case 'updateDeep':
                    canReflect.updateDeep(parent[data.key], value);
                    break;
                }
            },
            attr: ObservationRecorder.ignore(function (key, value, options) {
                canLog.warn('can-view-scope::attr is deprecated, please use peek, get or set');
                options = assign({ isArgument: true }, options);
                if (arguments.length === 2) {
                    return this.set(key, value, options);
                } else {
                    return this.get(key, options);
                }
            }),
            computeData: function (key, options) {
                return makeComputeData(this, key, options);
            },
            compute: function (key, options) {
                return this.computeData(key, options).compute;
            },
            cloneFromRef: function () {
                var scopes = [];
                var scope = this, context, parent;
                while (scope) {
                    context = scope._context;
                    if (context instanceof TemplateContext) {
                        parent = scope._parent;
                        break;
                    }
                    scopes.unshift(scope);
                    scope = scope._parent;
                }
                if (parent) {
                    scopes.forEach(function (scope) {
                        parent = parent.add(scope._context, scope._meta);
                    });
                    return parent;
                } else {
                    return this;
                }
            },
            isSpecial: function () {
                return this._meta.notContext || this._meta.special || this._context instanceof TemplateContext || this._meta.variable;
            }
        });
        Scope.prototype._read = Scope.prototype._walk;
        canReflect.assignSymbols(Scope.prototype, { 'can.hasKey': Scope.prototype.hasKey });
        var templateContextPrimitives = [
            'filename',
            'lineNumber'
        ];
        templateContextPrimitives.forEach(function (key) {
            Object.defineProperty(Scope.prototype, key, {
                get: function () {
                    return this.readFromTemplateContext(key).value;
                },
                set: function (val) {
                    this.templateContext[key] = val;
                }
            });
        });
        defineLazyValue(Scope.prototype, 'templateContext', function () {
            return this.getTemplateContext()._context;
        });
        defineLazyValue(Scope.prototype, 'root', function () {
            canLog.warn('`scope.root` is deprecated. Use either `scope.top` or `scope.vm` instead.');
            return this.getRoot();
        });
        defineLazyValue(Scope.prototype, 'vm', function () {
            return this.getViewModel();
        });
        defineLazyValue(Scope.prototype, 'top', function () {
            return this.getTop();
        });
        defineLazyValue(Scope.prototype, 'helpers', function () {
            return stacheHelpers;
        });
        var specialKeywords = [
            'index',
            'key',
            'element',
            'event',
            'viewModel',
            'arguments',
            'helperOptions',
            'args'
        ];
        specialKeywords.forEach(function (key) {
            Object.defineProperty(Scope.prototype, key, {
                get: function () {
                    return this.readFromSpecialContext(key).value;
                }
            });
        });
        if (process.env.NODE_ENV !== 'production') {
            Scope.prototype.log = function () {
                var scope = this;
                var indent = '';
                var contextType = '';
                while (scope) {
                    contextType = scope._meta.notContext ? ' (notContext)' : scope._meta.special ? ' (special)' : '';
                    console.log(indent, canReflect.getName(scope._context) + contextType, scope._context);
                    scope = scope._parent;
                    indent += ' ';
                }
            };
        }
        namespace.view = namespace.view || {};
        module.exports = namespace.view.Scope = Scope;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-stache@4.17.19#src/key-observable*/
define('can-stache@4.17.19#src/key-observable', [
    'require',
    'exports',
    'module',
    'can-simple-observable/settable/settable',
    'can-stache-key'
], function (require, exports, module) {
    'use strict';
    var SettableObservable = require('can-simple-observable/settable/settable');
    var stacheKey = require('can-stache-key');
    function KeyObservable(root, key) {
        key = '' + key;
        this.key = key;
        this.root = root;
        SettableObservable.call(this, function () {
            return stacheKey.get(this, key);
        }, root);
    }
    KeyObservable.prototype = Object.create(SettableObservable.prototype);
    KeyObservable.prototype.set = function (newVal) {
        stacheKey.set(this.root, this.key, newVal);
    };
    module.exports = KeyObservable;
});
/*can-stache@4.17.19#src/utils*/
define('can-stache@4.17.19#src/utils', [
    'require',
    'exports',
    'module',
    'can-view-scope',
    'can-observation-recorder',
    'can-stache-key',
    'can-reflect',
    './key-observable',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var Scope = require('can-view-scope');
    var ObservationRecorder = require('can-observation-recorder');
    var observationReader = require('can-stache-key');
    var canReflect = require('can-reflect');
    var KeyObservable = require('./key-observable');
    var canSymbol = require('can-symbol');
    var isViewSymbol = canSymbol.for('can.isView');
    var createNoOpRenderer = function (metadata) {
        return function noop() {
            if (metadata) {
                metadata.rendered = true;
            }
        };
    };
    module.exports = {
        last: function (arr) {
            return arr != null && arr[arr.length - 1];
        },
        emptyHandler: function () {
        },
        jsonParse: function (str) {
            if (str[0] === '\'') {
                return str.substr(1, str.length - 2);
            } else if (str === 'undefined') {
                return undefined;
            } else {
                return JSON.parse(str);
            }
        },
        mixins: {
            last: function () {
                return this.stack[this.stack.length - 1];
            },
            add: function (chars) {
                this.last().add(chars);
            },
            subSectionDepth: function () {
                return this.stack.length - 1;
            }
        },
        createRenderers: function (helperOptions, scope, nodeList, truthyRenderer, falseyRenderer, isStringOnly) {
            helperOptions.fn = truthyRenderer ? this.makeRendererConvertScopes(truthyRenderer, scope, nodeList, isStringOnly, helperOptions.metadata) : createNoOpRenderer(helperOptions.metadata);
            helperOptions.inverse = falseyRenderer ? this.makeRendererConvertScopes(falseyRenderer, scope, nodeList, isStringOnly, helperOptions.metadata) : createNoOpRenderer(helperOptions.metadata);
            helperOptions.isSection = !!(truthyRenderer || falseyRenderer);
        },
        makeRendererConvertScopes: function (renderer, parentScope, nodeList, observeObservables, metadata) {
            var convertedRenderer = function (newScope, newOptions, parentNodeList) {
                if (newScope !== undefined && !(newScope instanceof Scope)) {
                    if (parentScope) {
                        newScope = parentScope.add(newScope);
                    } else {
                        newScope = new Scope(newScope || {});
                    }
                }
                if (metadata) {
                    metadata.rendered = true;
                }
                var result = renderer(newScope || parentScope, parentNodeList || nodeList);
                return result;
            };
            return observeObservables ? convertedRenderer : ObservationRecorder.ignore(convertedRenderer);
        },
        makeView: function (renderer) {
            var view = ObservationRecorder.ignore(function (scope, nodeList) {
                if (!(scope instanceof Scope)) {
                    scope = new Scope(scope);
                }
                return renderer(scope, nodeList);
            });
            view[isViewSymbol] = true;
            return view;
        },
        getItemsStringContent: function (items, isObserveList, helperOptions) {
            var txt = '', len = observationReader.get(items, 'length'), isObservable = canReflect.isObservableLike(items);
            for (var i = 0; i < len; i++) {
                var item = isObservable ? new KeyObservable(items, i) : items[i];
                txt += helperOptions.fn(item);
            }
            return txt;
        },
        getItemsFragContent: function (items, helperOptions, scope) {
            var result = [], len = observationReader.get(items, 'length'), isObservable = canReflect.isObservableLike(items), hashExprs = helperOptions.exprData && helperOptions.exprData.hashExprs, hashOptions;
            if (canReflect.size(hashExprs) > 0) {
                hashOptions = {};
                canReflect.eachKey(hashExprs, function (exprs, key) {
                    hashOptions[exprs.key] = key;
                });
            }
            for (var i = 0; i < len; i++) {
                var aliases = {};
                var item = isObservable ? new KeyObservable(items, i) : items[i];
                if (canReflect.size(hashOptions) > 0) {
                    if (hashOptions.value) {
                        aliases[hashOptions.value] = item;
                    }
                    if (hashOptions.index) {
                        aliases[hashOptions.index] = i;
                    }
                }
                result.push(helperOptions.fn(scope.add(aliases, { notContext: true }).add({ index: i }, { special: true }).add(item)));
            }
            return result;
        }
    };
});
/*can-stache@4.17.19#src/html_section*/
define('can-stache@4.17.19#src/html_section', [
    'require',
    'exports',
    'module',
    'can-view-target',
    './utils',
    'can-globals/document/document',
    'can-assign'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var target = require('can-view-target');
        var utils = require('./utils');
        var getDocument = require('can-globals/document/document');
        var assign = require('can-assign');
        var last = utils.last;
        var decodeHTML = typeof document !== 'undefined' && function () {
            var el = getDocument().createElement('div');
            return function (html) {
                if (html.indexOf('&') === -1) {
                    return html.replace(/\r\n/g, '\n');
                }
                el.innerHTML = html;
                return el.childNodes.length === 0 ? '' : el.childNodes.item(0).nodeValue;
            };
        }();
        var HTMLSectionBuilder = function (filename) {
            if (filename) {
                this.filename = filename;
            }
            this.stack = [new HTMLSection()];
        };
        assign(HTMLSectionBuilder.prototype, utils.mixins);
        assign(HTMLSectionBuilder.prototype, {
            startSubSection: function (process) {
                var newSection = new HTMLSection(process);
                this.stack.push(newSection);
                return newSection;
            },
            endSubSectionAndReturnRenderer: function () {
                if (this.last().isEmpty()) {
                    this.stack.pop();
                    return null;
                } else {
                    var htmlSection = this.endSection();
                    return utils.makeView(htmlSection.compiled.hydrate.bind(htmlSection.compiled));
                }
            },
            startSection: function (process) {
                var newSection = new HTMLSection(process);
                this.last().add(newSection.targetCallback);
                this.stack.push(newSection);
            },
            endSection: function () {
                this.last().compile();
                return this.stack.pop();
            },
            inverse: function () {
                this.last().inverse();
            },
            compile: function () {
                var compiled = this.stack.pop().compile();
                return utils.makeView(compiled.hydrate.bind(compiled));
            },
            push: function (chars) {
                this.last().push(chars);
            },
            pop: function () {
                return this.last().pop();
            },
            removeCurrentNode: function () {
                this.last().removeCurrentNode();
            }
        });
        var HTMLSection = function (process) {
            this.data = 'targetData';
            this.targetData = [];
            this.targetStack = [];
            var self = this;
            this.targetCallback = function (scope, sectionNode) {
                process.call(this, scope, sectionNode, self.compiled.hydrate.bind(self.compiled), self.inverseCompiled && self.inverseCompiled.hydrate.bind(self.inverseCompiled));
            };
        };
        assign(HTMLSection.prototype, {
            inverse: function () {
                this.inverseData = [];
                this.data = 'inverseData';
            },
            push: function (data) {
                this.add(data);
                this.targetStack.push(data);
            },
            pop: function () {
                return this.targetStack.pop();
            },
            add: function (data) {
                if (typeof data === 'string') {
                    data = decodeHTML(data);
                }
                if (this.targetStack.length) {
                    last(this.targetStack).children.push(data);
                } else {
                    this[this.data].push(data);
                }
            },
            compile: function () {
                this.compiled = target(this.targetData, getDocument());
                if (this.inverseData) {
                    this.inverseCompiled = target(this.inverseData, getDocument());
                    delete this.inverseData;
                }
                this.targetStack = this.targetData = null;
                return this.compiled;
            },
            removeCurrentNode: function () {
                var children = this.children();
                return children.pop();
            },
            children: function () {
                if (this.targetStack.length) {
                    return last(this.targetStack).children;
                } else {
                    return this[this.data];
                }
            },
            isEmpty: function () {
                return !this.targetData.length;
            }
        });
        HTMLSectionBuilder.HTMLSection = HTMLSection;
        module.exports = HTMLSectionBuilder;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-view-live@4.2.8#lib/core*/
define('can-view-live@4.2.8#lib/core', [
    'require',
    'exports',
    'module',
    'can-view-parser',
    'can-dom-mutate',
    'can-view-nodelist',
    'can-fragment',
    'can-child-nodes',
    'can-reflect',
    'can-reflect-dependencies'
], function (require, exports, module) {
    'use strict';
    var parser = require('can-view-parser');
    var domMutate = require('can-dom-mutate');
    var nodeLists = require('can-view-nodelist');
    var makeFrag = require('can-fragment');
    var childNodes = require('can-child-nodes');
    var canReflect = require('can-reflect');
    var canReflectDeps = require('can-reflect-dependencies');
    function contains(parent, child) {
        if (parent.contains) {
            return parent.contains(child);
        }
        if (parent.nodeType === Node.DOCUMENT_NODE && parent.documentElement) {
            return contains(parent.documentElement, child);
        } else {
            child = child.parentNode;
            if (child === parent) {
                return true;
            }
            return false;
        }
    }
    var live = {
        setup: function (el, bind, unbind) {
            var tornDown = false, removalDisposal, data, teardown = function () {
                    if (!tornDown) {
                        tornDown = true;
                        unbind(data);
                        if (removalDisposal) {
                            removalDisposal();
                            removalDisposal = undefined;
                        }
                    }
                    return true;
                };
            data = {
                teardownCheck: function (parent) {
                    return parent ? false : teardown();
                }
            };
            removalDisposal = domMutate.onNodeRemoval(el, function () {
                var doc = el.ownerDocument;
                if (!contains(doc, el)) {
                    teardown();
                }
            });
            bind(data);
            return data;
        },
        listen: function (el, compute, change, queueName) {
            return live.setup(el, function bind() {
                canReflect.onValue(compute, change, queueName || 'notify');
                if (process.env.NODE_ENV !== 'production') {
                    canReflectDeps.addMutatedBy(el, compute);
                }
            }, function unbind(data) {
                canReflect.offValue(compute, change, queueName || 'notify');
                if (process.env.NODE_ENV !== 'production') {
                    canReflectDeps.deleteMutatedBy(el, compute);
                }
                if (data.nodeList) {
                    nodeLists.unregister(data.nodeList);
                }
            });
        },
        getAttributeParts: function (newVal) {
            var attrs = {}, attr;
            parser.parseAttrs(newVal, {
                attrStart: function (name) {
                    attrs[name] = '';
                    attr = name;
                },
                attrValue: function (value) {
                    attrs[attr] += value;
                },
                attrEnd: function () {
                }
            });
            return attrs;
        },
        isNode: function (obj) {
            return obj && obj.nodeType;
        },
        addTextNodeIfNoChildren: function (frag) {
            if (!frag.firstChild) {
                frag.appendChild(frag.ownerDocument.createTextNode(''));
            }
        },
        replace: function (nodes, val, teardown) {
            var oldNodes = nodes.slice(0), frag = makeFrag(val);
            nodeLists.register(nodes, teardown);
            nodeLists.update(nodes, childNodes(frag));
            nodeLists.replace(oldNodes, frag);
            return nodes;
        },
        getParentNode: function (el, defaultParentNode) {
            return defaultParentNode && el.parentNode.nodeType === 11 ? defaultParentNode : el.parentNode;
        },
        makeString: function (txt) {
            return txt == null ? '' : '' + txt;
        }
    };
    module.exports = live;
});
/*can-dom-data@1.0.3#can-dom-data*/
define('can-dom-data@1.0.3#can-dom-data', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var isEmptyObject = function (obj) {
        for (var prop in obj) {
            return false;
        }
        return true;
    };
    var data = new WeakMap();
    var deleteNode = function (node) {
        var nodeDeleted = false;
        if (data.has(node)) {
            nodeDeleted = true;
            data.delete(node);
        }
        return nodeDeleted;
    };
    var setData = function (node, name, value) {
        var store = data.get(node);
        if (store === undefined) {
            store = {};
            data.set(node, store);
        }
        if (name !== undefined) {
            store[name] = value;
        }
        return store;
    };
    var domData = {
        _data: data,
        get: function (node, key) {
            var store = data.get(node);
            return key === undefined ? store : store && store[key];
        },
        set: setData,
        clean: function (node, prop) {
            var itemData = data.get(node);
            if (itemData && itemData[prop]) {
                delete itemData[prop];
            }
            if (isEmptyObject(itemData)) {
                deleteNode(node);
            }
        },
        delete: deleteNode
    };
    if (namespace.domData) {
        throw new Error('You can\'t have two versions of can-dom-data, check your dependencies');
    } else {
        module.exports = namespace.domData = domData;
    }
});
/*can-attribute-observable@1.2.6#behaviors*/
define('can-attribute-observable@1.2.6#behaviors', [
    'require',
    'exports',
    'module',
    'can-globals/document/document',
    'can-globals/global/global',
    'can-dom-data',
    'can-dom-events',
    'can-dom-mutate',
    'can-dom-mutate/node',
    'can-globals/mutation-observer/mutation-observer',
    'can-diff/list/list',
    'can-queues'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getDocument = require('can-globals/document/document');
        var global = require('can-globals/global/global')();
        var setData = require('can-dom-data');
        var domEvents = require('can-dom-events');
        var domMutate = require('can-dom-mutate');
        var domMutateNode = require('can-dom-mutate/node');
        var getMutationObserver = require('can-globals/mutation-observer/mutation-observer');
        var diff = require('can-diff/list/list');
        var queues = require('can-queues');
        var formElements = {
                'INPUT': true,
                'TEXTAREA': true,
                'SELECT': true,
                'BUTTON': true
            }, toString = function (value) {
                if (value == null) {
                    return '';
                } else {
                    return '' + value;
                }
            }, isSVG = function (el) {
                return el.namespaceURI === 'http://www.w3.org/2000/svg';
            }, truthy = function () {
                return true;
            }, getSpecialTest = function (special) {
                return special && special.test || truthy;
            }, propProp = function (prop, obj) {
                obj = obj || {};
                obj.get = function () {
                    return this[prop];
                };
                obj.set = function (value) {
                    if (this[prop] !== value) {
                        this[prop] = value;
                    }
                };
                return obj;
            }, booleanProp = function (prop) {
                return {
                    isBoolean: true,
                    set: function (value) {
                        if (prop in this) {
                            this[prop] = value;
                        } else {
                            domMutateNode.setAttribute.call(this, prop, '');
                        }
                    },
                    remove: function () {
                        this[prop] = false;
                    }
                };
            }, setupMO = function (el, callback) {
                var attrMO = setData.get(el, 'attrMO');
                if (!attrMO) {
                    var onMutation = function () {
                        callback.call(el);
                    };
                    var MO = getMutationObserver();
                    if (MO) {
                        var observer = new MO(onMutation);
                        observer.observe(el, {
                            childList: true,
                            subtree: true
                        });
                        setData.set(el, 'attrMO', observer);
                    } else {
                        setData.set(el, 'attrMO', true);
                        setData.set(el, 'canBindingCallback', { onMutation: onMutation });
                    }
                }
            }, _findOptionToSelect = function (parent, value) {
                var child = parent.firstChild;
                while (child) {
                    if (child.nodeName === 'OPTION' && value === child.value) {
                        return child;
                    }
                    if (child.nodeName === 'OPTGROUP') {
                        var groupChild = _findOptionToSelect(child, value);
                        if (groupChild) {
                            return groupChild;
                        }
                    }
                    child = child.nextSibling;
                }
            }, setChildOptions = function (el, value) {
                var option;
                if (value != null) {
                    option = _findOptionToSelect(el, value);
                }
                if (option) {
                    option.selected = true;
                } else {
                    el.selectedIndex = -1;
                }
            }, forEachOption = function (parent, fn) {
                var child = parent.firstChild;
                while (child) {
                    if (child.nodeName === 'OPTION') {
                        fn(child);
                    }
                    if (child.nodeName === 'OPTGROUP') {
                        forEachOption(child, fn);
                    }
                    child = child.nextSibling;
                }
            }, collectSelectedOptions = function (parent) {
                var selectedValues = [];
                forEachOption(parent, function (option) {
                    if (option.selected) {
                        selectedValues.push(option.value);
                    }
                });
                return selectedValues;
            }, markSelectedOptions = function (parent, values) {
                forEachOption(parent, function (option) {
                    option.selected = values.indexOf(option.value) !== -1;
                });
            }, setChildOptionsOnChange = function (select, aEL) {
                var handler = setData.get(select, 'attrSetChildOptions');
                if (handler) {
                    return Function.prototype;
                }
                handler = function () {
                    setChildOptions(select, select.value);
                };
                setData.set(select, 'attrSetChildOptions', handler);
                aEL.call(select, 'change', handler);
                return function (rEL) {
                    setData.clean(select, 'attrSetChildOptions');
                    rEL.call(select, 'change', handler);
                };
            }, behaviorRules = new Map(), isPropWritable = function (el, prop) {
                var desc = Object.getOwnPropertyDescriptor(el, prop);
                if (desc) {
                    return desc.writable || desc.set;
                } else {
                    var proto = Object.getPrototypeOf(el);
                    if (proto) {
                        return isPropWritable(proto, prop);
                    }
                }
                return false;
            }, cacheRule = function (el, attrOrPropName, rule) {
                var rulesForElementType;
                rulesForElementType = behaviorRules.get(el.prototype);
                if (!rulesForElementType) {
                    rulesForElementType = {};
                    behaviorRules.set(el.constructor, rulesForElementType);
                }
                rulesForElementType[attrOrPropName] = rule;
                return rule;
            };
        var specialAttributes = {
            checked: {
                get: function () {
                    return this.checked;
                },
                set: function (val) {
                    var notFalse = !!val || val === '' || arguments.length === 0;
                    this.checked = notFalse;
                    if (notFalse && this.type === 'radio') {
                        this.defaultChecked = true;
                    }
                },
                remove: function () {
                    this.checked = false;
                },
                test: function () {
                    return this.nodeName === 'INPUT';
                }
            },
            'class': {
                get: function () {
                    if (isSVG(this)) {
                        return this.getAttribute('class');
                    }
                    return this.className;
                },
                set: function (val) {
                    val = val || '';
                    if (isSVG(this)) {
                        domMutateNode.setAttribute.call(this, 'class', '' + val);
                    } else {
                        this.className = val;
                    }
                }
            },
            disabled: booleanProp('disabled'),
            focused: {
                get: function () {
                    return this === document.activeElement;
                },
                set: function (val) {
                    var cur = attr.get(this, 'focused');
                    var docEl = this.ownerDocument.documentElement;
                    var element = this;
                    function focusTask() {
                        if (val) {
                            element.focus();
                        } else {
                            element.blur();
                        }
                    }
                    if (cur !== val) {
                        if (!docEl.contains(element)) {
                            var insertionDisposal = domMutate.onNodeInsertion(element, function () {
                                insertionDisposal();
                                focusTask();
                            });
                        } else {
                            queues.enqueueByQueue({ mutate: [focusTask] }, null, []);
                        }
                    }
                    return true;
                },
                addEventListener: function (eventName, handler, aEL) {
                    aEL.call(this, 'focus', handler);
                    aEL.call(this, 'blur', handler);
                    return function (rEL) {
                        rEL.call(this, 'focus', handler);
                        rEL.call(this, 'blur', handler);
                    };
                },
                test: function () {
                    return this.nodeName === 'INPUT';
                }
            },
            'for': propProp('htmlFor'),
            innertext: propProp('innerText'),
            innerhtml: propProp('innerHTML'),
            innerHTML: propProp('innerHTML', {
                addEventListener: function (eventName, handler, aEL) {
                    var handlers = [];
                    var el = this;
                    [
                        'change',
                        'blur'
                    ].forEach(function (eventName) {
                        var localHandler = function () {
                            handler.apply(this, arguments);
                        };
                        domEvents.addEventListener(el, eventName, localHandler);
                        handlers.push([
                            eventName,
                            localHandler
                        ]);
                    });
                    return function (rEL) {
                        handlers.forEach(function (info) {
                            rEL.call(el, info[0], info[1]);
                        });
                    };
                }
            }),
            required: booleanProp('required'),
            readonly: booleanProp('readOnly'),
            selected: {
                get: function () {
                    return this.selected;
                },
                set: function (val) {
                    val = !!val;
                    setData.set(this, 'lastSetValue', val);
                    this.selected = val;
                },
                addEventListener: function (eventName, handler, aEL) {
                    var option = this;
                    var select = this.parentNode;
                    var lastVal = option.selected;
                    var localHandler = function (changeEvent) {
                        var curVal = option.selected;
                        lastVal = setData.get(option, 'lastSetValue') || lastVal;
                        if (curVal !== lastVal) {
                            lastVal = curVal;
                            domEvents.dispatch(option, eventName);
                        }
                    };
                    var removeChangeHandler = setChildOptionsOnChange(select, aEL);
                    domEvents.addEventListener(select, 'change', localHandler);
                    aEL.call(option, eventName, handler);
                    return function (rEL) {
                        removeChangeHandler(rEL);
                        domEvents.removeEventListener(select, 'change', localHandler);
                        rEL.call(option, eventName, handler);
                    };
                },
                test: function () {
                    return this.nodeName === 'OPTION' && this.parentNode && this.parentNode.nodeName === 'SELECT';
                }
            },
            style: {
                set: function () {
                    var el = global.document && getDocument().createElement('div');
                    if (el && el.style && 'cssText' in el.style) {
                        return function (val) {
                            this.style.cssText = val || '';
                        };
                    } else {
                        return function (val) {
                            domMutateNode.setAttribute.call(this, 'style', val);
                        };
                    }
                }()
            },
            textcontent: propProp('textContent'),
            value: {
                get: function () {
                    var value = this.value;
                    if (this.nodeName === 'SELECT') {
                        if ('selectedIndex' in this && this.selectedIndex === -1) {
                            value = undefined;
                        }
                    }
                    return value;
                },
                set: function (value) {
                    var nodeName = this.nodeName.toLowerCase();
                    if (nodeName === 'input' || nodeName === 'textarea') {
                        value = toString(value);
                    }
                    if (this.value !== value || nodeName === 'option') {
                        this.value = value;
                    }
                    if (nodeName === 'input' || nodeName === 'textarea') {
                        this.defaultValue = value;
                    }
                    if (nodeName === 'select') {
                        setData.set(this, 'attrValueLastVal', value);
                        setChildOptions(this, value === null ? value : this.value);
                        var docEl = this.ownerDocument.documentElement;
                        if (!docEl.contains(this)) {
                            var select = this;
                            var insertionDisposal = domMutate.onNodeInsertion(select, function () {
                                insertionDisposal();
                                setChildOptions(select, value === null ? value : select.value);
                            });
                        }
                        setupMO(this, function () {
                            var value = setData.get(this, 'attrValueLastVal');
                            attr.set(this, 'value', value);
                            domEvents.dispatch(this, 'change');
                        });
                    }
                },
                test: function () {
                    return formElements[this.nodeName];
                }
            },
            values: {
                get: function () {
                    return collectSelectedOptions(this);
                },
                set: function (values) {
                    values = values || [];
                    markSelectedOptions(this, values);
                    setData.set(this, 'stickyValues', attr.get(this, 'values'));
                    setupMO(this, function () {
                        var previousValues = setData.get(this, 'stickyValues');
                        attr.set(this, 'values', previousValues);
                        var currentValues = setData.get(this, 'stickyValues');
                        var changes = diff(previousValues.slice().sort(), currentValues.slice().sort());
                        if (changes.length) {
                            domEvents.dispatch(this, 'values');
                        }
                    });
                },
                addEventListener: function (eventName, handler, aEL) {
                    var localHandler = function () {
                        domEvents.dispatch(this, 'values');
                    };
                    domEvents.addEventListener(this, 'change', localHandler);
                    aEL.call(this, eventName, handler);
                    return function (rEL) {
                        domEvents.removeEventListener(this, 'change', localHandler);
                        rEL.call(this, eventName, handler);
                    };
                }
            }
        };
        var attr = {
            rules: behaviorRules,
            specialAttributes: specialAttributes,
            getRule: function (el, attrOrPropName) {
                var special = specialAttributes[attrOrPropName];
                if (special) {
                    return special;
                }
                var rulesForElementType = behaviorRules.get(el.constructor);
                var cached = rulesForElementType && rulesForElementType[attrOrPropName];
                if (cached) {
                    return cached;
                }
                if (!(attrOrPropName in el)) {
                    return this.attribute(attrOrPropName);
                }
                var newRule = isPropWritable(el, attrOrPropName) ? this.property(attrOrPropName) : this.attribute(attrOrPropName);
                return cacheRule(el, attrOrPropName, newRule);
            },
            attribute: function (attrName) {
                return {
                    get: function () {
                        return this.getAttribute(attrName);
                    },
                    set: function (val) {
                        domMutateNode.setAttribute.call(this, attrName, val);
                    }
                };
            },
            property: function (propName) {
                return {
                    get: function () {
                        return this[propName];
                    },
                    set: function (val) {
                        this[propName] = val;
                    }
                };
            },
            findSpecialListener: function (attributeName) {
                return specialAttributes[attributeName] && specialAttributes[attributeName].addEventListener;
            },
            setAttrOrProp: function (el, attrName, val) {
                return this.set(el, attrName, val);
            },
            set: function (el, attrName, val) {
                var rule = this.getRule(el, attrName);
                var setter = rule && rule.set;
                if (setter) {
                    return setter.call(el, val);
                }
            },
            get: function (el, attrName) {
                var rule = this.getRule(el, attrName);
                var getter = rule && rule.get;
                if (getter) {
                    return rule.test ? rule.test.call(el) && getter.call(el) : getter.call(el);
                }
            },
            remove: function (el, attrName) {
                attrName = attrName.toLowerCase();
                var special = specialAttributes[attrName];
                var setter = special && special.set;
                var remover = special && special.remove;
                var test = getSpecialTest(special);
                if (typeof remover === 'function' && test.call(el)) {
                    remover.call(el);
                } else if (typeof setter === 'function' && test.call(el)) {
                    setter.call(el, undefined);
                } else {
                    domMutateNode.removeAttribute.call(el, attrName);
                }
            }
        };
        module.exports = attr;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-view-live@4.2.8#lib/attr*/
define('can-view-live@4.2.8#lib/attr', [
    'require',
    'exports',
    'module',
    './core',
    'can-reflect',
    'can-queues',
    'can-attribute-observable/behaviors'
], function (require, exports, module) {
    'use strict';
    var live = require('./core');
    var canReflect = require('can-reflect');
    var queues = require('can-queues');
    var attr = require('can-attribute-observable/behaviors');
    live.attr = function (el, attributeName, compute) {
        function liveUpdateAttr(newVal) {
            queues.domUIQueue.enqueue(attr.set, attr, [
                el,
                attributeName,
                newVal
            ]);
        }
        if (process.env.NODE_ENV !== 'production') {
            canReflect.assignSymbols(liveUpdateAttr, {
                'can.getChangesDependencyRecord': function () {
                    var s = new Set();
                    s.add(el);
                    return { valueDependencies: s };
                }
            });
            Object.defineProperty(liveUpdateAttr, 'name', { value: 'live.attr update::' + canReflect.getName(compute) });
        }
        live.listen(el, compute, liveUpdateAttr);
        attr.set(el, attributeName, canReflect.getValue(compute));
    };
});
/*can-view-live@4.2.8#lib/attrs*/
define('can-view-live@4.2.8#lib/attrs', [
    'require',
    'exports',
    'module',
    './core',
    'can-view-callbacks',
    'can-dom-mutate',
    'can-dom-mutate/node',
    'can-reflect',
    'can-reflect-dependencies'
], function (require, exports, module) {
    'use strict';
    var live = require('./core');
    var viewCallbacks = require('can-view-callbacks');
    var domMutate = require('can-dom-mutate');
    var domMutateNode = require('can-dom-mutate/node');
    var canReflect = require('can-reflect');
    var canReflectDeps = require('can-reflect-dependencies');
    live.attrs = function (el, compute, scope, options) {
        if (!canReflect.isObservableLike(compute)) {
            var attrs = live.getAttributeParts(compute);
            for (var name in attrs) {
                domMutateNode.setAttribute.call(el, name, attrs[name]);
            }
            return;
        }
        var oldAttrs = {};
        function liveAttrsUpdate(newVal) {
            var newAttrs = live.getAttributeParts(newVal), name;
            for (name in newAttrs) {
                var newValue = newAttrs[name], oldValue = oldAttrs[name];
                if (newValue !== oldValue) {
                    domMutateNode.setAttribute.call(el, name, newValue);
                    var callback = viewCallbacks.attr(name);
                    if (callback) {
                        callback(el, {
                            attributeName: name,
                            scope: scope,
                            options: options
                        });
                    }
                }
                delete oldAttrs[name];
            }
            for (name in oldAttrs) {
                domMutateNode.removeAttribute.call(el, name);
            }
            oldAttrs = newAttrs;
        }
        if (process.env.NODE_ENV !== 'production') {
            canReflect.assignSymbols(liveAttrsUpdate, {
                'can.getChangesDependencyRecord': function () {
                    var s = new Set();
                    s.add(el);
                    return { valueDependencies: s };
                }
            });
            Object.defineProperty(liveAttrsUpdate, 'name', { value: 'live.attrs update::' + canReflect.getName(compute) });
            canReflectDeps.addMutatedBy(el, compute);
        }
        canReflect.onValue(compute, liveAttrsUpdate, 'domUI');
        var removalDisposal;
        var teardownHandler = function () {
            canReflect.offValue(compute, liveAttrsUpdate, 'domUI');
            if (removalDisposal) {
                removalDisposal();
                removalDisposal = undefined;
            }
            if (process.env.NODE_ENV !== 'production') {
                canReflectDeps.deleteMutatedBy(el, compute);
            }
        };
        removalDisposal = domMutate.onNodeRemoval(el, function () {
            var doc = el.ownerDocument;
            var ownerNode = doc.contains ? doc : doc.documentElement;
            if (!ownerNode.contains(el)) {
                teardownHandler();
            }
        });
        liveAttrsUpdate(canReflect.getValue(compute));
    };
});
/*can-view-live@4.2.8#lib/html*/
define('can-view-live@4.2.8#lib/html', [
    'require',
    'exports',
    'module',
    './core',
    'can-view-nodelist',
    'can-fragment',
    'can-child-nodes',
    'can-reflect',
    'can-symbol',
    'can-queues'
], function (require, exports, module) {
    'use strict';
    var live = require('./core');
    var nodeLists = require('can-view-nodelist');
    var makeFrag = require('can-fragment');
    var childNodes = require('can-child-nodes');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var queues = require('can-queues');
    var viewInsertSymbol = canSymbol.for('can.viewInsert');
    function updateNodeList(data, frag, nodeListUpdatedByFn) {
        if (data.nodeList.isUnregistered !== true) {
            var newChildren = canReflect.toArray(childNodes(frag));
            if (!nodeListUpdatedByFn) {
                nodeLists.update(data.nodeList, newChildren, data.oldNodes);
            }
            var oldNodes = data.oldNodes;
            data.oldNodes = newChildren;
            nodeLists.replace(oldNodes, frag);
        }
    }
    live.html = function (el, compute, parentNode, nodeListOrOptions) {
        var data;
        var makeAndPut;
        var nodeList;
        var nodes;
        var options;
        if (nodeListOrOptions !== undefined) {
            if (Array.isArray(nodeListOrOptions)) {
                nodeList = nodeListOrOptions;
            } else {
                nodeList = nodeListOrOptions.nodeList;
                options = nodeListOrOptions;
            }
        }
        var meta = { reasonLog: 'live.html replace::' + canReflect.getName(compute) };
        parentNode = live.getParentNode(el, parentNode);
        function liveHTMLUpdateHTML(newVal) {
            var attached = nodeLists.first(nodes).parentNode;
            if (attached) {
                makeAndPut(newVal, true);
            }
            var pn = nodeLists.first(nodes).parentNode;
            data.teardownCheck(pn);
        }
        if (process.env.NODE_ENV !== 'production') {
            canReflect.assignSymbols(liveHTMLUpdateHTML, {
                'can.getChangesDependencyRecord': function () {
                    var s = new Set();
                    s.add(parentNode);
                    return { valueDependencies: s };
                }
            });
            Object.defineProperty(liveHTMLUpdateHTML, 'name', { value: 'live.html update::' + canReflect.getName(compute) });
        }
        data = live.listen(parentNode, compute, liveHTMLUpdateHTML);
        nodes = nodeList || [el];
        makeAndPut = function (val, useQueue) {
            if (val && typeof val[viewInsertSymbol] === 'function') {
                val = val[viewInsertSymbol](options);
            }
            var isFunction = typeof val === 'function';
            var frag = makeFrag(isFunction ? '' : val);
            live.addTextNodeIfNoChildren(frag);
            if (useQueue === true) {
                data.oldNodes = nodeLists.unregisterChildren(nodes, true);
                var nodeListUpdatedByFn = false;
                if (isFunction) {
                    val(frag.firstChild);
                    nodeListUpdatedByFn = nodeLists.first(nodes) === frag.firstChild;
                }
                queues.domUIQueue.enqueue(updateNodeList, null, [
                    data,
                    frag,
                    nodeListUpdatedByFn
                ], meta);
            } else {
                data.oldNodes = nodeLists.update(nodes, childNodes(frag));
                if (isFunction) {
                    val(frag.firstChild);
                }
                nodeLists.replace(data.oldNodes, frag);
            }
        };
        data.nodeList = nodes;
        if (!nodeList) {
            nodeLists.register(nodes, data.teardownCheck);
        } else {
            nodeList.unregistered = data.teardownCheck;
        }
        makeAndPut(canReflect.getValue(compute));
    };
});
/*can-view-live@4.2.8#lib/set-observable*/
define('can-view-live@4.2.8#lib/set-observable', [
    'require',
    'exports',
    'module',
    'can-simple-observable',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var SimpleObservable = require('can-simple-observable');
    var canReflect = require('can-reflect');
    function SetObservable(initialValue, setter) {
        this.setter = setter;
        SimpleObservable.call(this, initialValue);
    }
    SetObservable.prototype = Object.create(SimpleObservable.prototype);
    SetObservable.prototype.constructor = SetObservable;
    SetObservable.prototype.set = function (newVal) {
        this.setter(newVal);
    };
    canReflect.assignSymbols(SetObservable.prototype, { 'can.setValue': SetObservable.prototype.set });
    module.exports = SetObservable;
});
/*can-diff@1.4.5#patcher/patcher*/
define('can-diff@1.4.5#patcher/patcher', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-key-tree',
    'can-symbol',
    '../list/list',
    'can-queues',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var KeyTree = require('can-key-tree');
    var canSymbol = require('can-symbol');
    var diff = require('../list/list');
    var queues = require('can-queues');
    var canSymbol = require('can-symbol');
    var onValueSymbol = canSymbol.for('can.onValue'), offValueSymbol = canSymbol.for('can.offValue');
    var onPatchesSymbol = canSymbol.for('can.onPatches');
    var offPatchesSymbol = canSymbol.for('can.offPatches');
    var Patcher = function (observableOrList, priority) {
        this.handlers = new KeyTree([
            Object,
            Array
        ], {
            onFirst: this.setup.bind(this),
            onEmpty: this.teardown.bind(this)
        });
        this.observableOrList = observableOrList;
        this.isObservableValue = canReflect.isValueLike(this.observableOrList) || canReflect.isObservableLike(this.observableOrList);
        if (this.isObservableValue) {
            this.priority = canReflect.getPriority(observableOrList);
        } else {
            this.priority = priority || 0;
        }
        this.onList = this.onList.bind(this);
        this.onPatchesNotify = this.onPatchesNotify.bind(this);
        this.onPatchesDerive = this.onPatchesDerive.bind(this);
        this.patches = [];
        if (process.env.NODE_ENV !== 'production') {
            Object.defineProperty(this.onList, 'name', { value: 'live.list new list::' + canReflect.getName(observableOrList) });
            Object.defineProperty(this.onPatchesNotify, 'name', { value: 'live.list notify::' + canReflect.getName(observableOrList) });
            Object.defineProperty(this.onPatchesDerive, 'name', { value: 'live.list derive::' + canReflect.getName(observableOrList) });
        }
    };
    Patcher.prototype = {
        constructor: Patcher,
        setup: function () {
            if (this.observableOrList[onValueSymbol]) {
                canReflect.onValue(this.observableOrList, this.onList, 'notify');
                this.setupList(canReflect.getValue(this.observableOrList));
            } else {
                this.setupList(this.observableOrList);
            }
        },
        teardown: function () {
            if (this.observableOrList[offValueSymbol]) {
                canReflect.offValue(this.observableOrList, this.onList, 'notify');
            }
            if (this.currentList && this.currentList[offPatchesSymbol]) {
                this.currentList[offPatchesSymbol](this.onPatchesNotify, 'notify');
            }
        },
        setupList: function (list) {
            this.currentList = list;
            if (list && list[onPatchesSymbol]) {
                list[onPatchesSymbol](this.onPatchesNotify, 'notify');
            }
        },
        onList: function onList(newList) {
            var current = this.currentList || [];
            newList = newList || [];
            if (current[offPatchesSymbol]) {
                current[offPatchesSymbol](this.onPatchesNotify, 'notify');
            }
            var patches = diff(current, newList);
            this.currentList = newList;
            this.onPatchesNotify(patches);
            if (newList[onPatchesSymbol]) {
                newList[onPatchesSymbol](this.onPatchesNotify, 'notify');
            }
        },
        onPatchesNotify: function onPatchesNotify(patches) {
            this.patches.push.apply(this.patches, patches);
            queues.deriveQueue.enqueue(this.onPatchesDerive, this, [], { priority: this.priority });
        },
        onPatchesDerive: function onPatchesDerive() {
            var patches = this.patches;
            this.patches = [];
            queues.enqueueByQueue(this.handlers.getNode([]), this.currentList, [
                patches,
                this.currentList
            ], null, [
                'Apply patches',
                patches
            ]);
        }
    };
    canReflect.assignSymbols(Patcher.prototype, {
        'can.onPatches': function (handler, queue) {
            this.handlers.add([
                queue || 'mutate',
                handler
            ]);
        },
        'can.offPatches': function (handler, queue) {
            this.handlers.delete([
                queue || 'mutate',
                handler
            ]);
        }
    });
    module.exports = Patcher;
});
/*can-view-live@4.2.8#lib/list*/
define('can-view-live@4.2.8#lib/list', [
    'require',
    'exports',
    'module',
    './core',
    'can-view-nodelist',
    'can-fragment',
    'can-child-nodes',
    'can-dom-mutate/node',
    'can-reflect',
    'can-symbol',
    'can-reflect-dependencies',
    'can-simple-observable',
    './set-observable',
    'can-diff/patcher/patcher'
], function (require, exports, module) {
    'use strict';
    var live = require('./core');
    var nodeLists = require('can-view-nodelist');
    var frag = require('can-fragment');
    var childNodes = require('can-child-nodes');
    var domMutateNode = require('can-dom-mutate/node');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var canReflectDeps = require('can-reflect-dependencies');
    var SimpleObservable = require('can-simple-observable');
    var SetObservable = require('./set-observable');
    var Patcher = require('can-diff/patcher/patcher');
    var splice = [].splice;
    var renderAndAddToNodeLists = function (newNodeLists, parentNodeList, render, context, args) {
            var itemNodeList = [];
            if (parentNodeList) {
                nodeLists.register(itemNodeList, null, true, true);
                itemNodeList.parentList = parentNodeList;
                itemNodeList.expression = '#each SUBEXPRESSION';
            }
            var itemHTML = render.apply(context, args.concat([itemNodeList])), itemFrag = frag(itemHTML);
            var children = canReflect.toArray(childNodes(itemFrag));
            if (parentNodeList) {
                nodeLists.update(itemNodeList, children);
                newNodeLists.push(itemNodeList);
            } else {
                newNodeLists.push(nodeLists.register(children));
            }
            return itemFrag;
        }, removeFromNodeList = function (masterNodeList, index, length) {
            var removedMappings = masterNodeList.splice(index + 1, length), itemsToRemove = [];
            removedMappings.forEach(function (nodeList) {
                var nodesToRemove = nodeLists.unregister(nodeList);
                [].push.apply(itemsToRemove, nodesToRemove);
            });
            return itemsToRemove;
        };
    var onPatchesSymbol = canSymbol.for('can.onPatches');
    var offPatchesSymbol = canSymbol.for('can.offPatches');
    function ListDOMPatcher(el, compute, render, context, parentNode, nodeList, falseyRender) {
        this.patcher = new Patcher(compute);
        parentNode = live.getParentNode(el, parentNode);
        this.value = compute;
        this.render = render;
        this.context = context;
        this.parentNode = parentNode;
        this.falseyRender = falseyRender;
        this.masterNodeList = nodeList || nodeLists.register([el], null, true);
        this.placeholder = el;
        this.indexMap = [];
        this.isValueLike = canReflect.isValueLike(this.value);
        this.isObservableLike = canReflect.isObservableLike(this.value);
        this.onPatches = this.onPatches.bind(this);
        var data = this.data = live.setup(parentNode, this.setupValueBinding.bind(this), this.teardownValueBinding.bind(this));
        this.masterNodeList.unregistered = function () {
            data.teardownCheck();
        };
        if (process.env.NODE_ENV !== 'production') {
            Object.defineProperty(this.onPatches, 'name', { value: 'live.list update::' + canReflect.getName(compute) });
        }
    }
    var onPatchesSymbol = canSymbol.for('can.onPatches');
    var offPatchesSymbol = canSymbol.for('can.offPatches');
    ListDOMPatcher.prototype = {
        setupValueBinding: function () {
            this.patcher[onPatchesSymbol](this.onPatches, 'domUI');
            if (this.patcher.currentList && this.patcher.currentList.length) {
                this.onPatches([{
                        insert: this.patcher.currentList,
                        index: 0,
                        deleteCount: 0
                    }]);
            } else {
                this.addFalseyIfEmpty();
            }
            if (process.env.NODE_ENV !== 'production') {
                canReflectDeps.addMutatedBy(this.parentNode, this.patcher.observableOrList);
            }
        },
        teardownValueBinding: function () {
            this.patcher[offPatchesSymbol](this.onPatches, 'domUI');
            this.exit = true;
            this.remove({ length: this.patcher.currentList ? this.patcher.currentList.length : 0 }, 0, true);
            if (process.env.NODE_ENV !== 'production') {
                canReflectDeps.deleteMutatedBy(this.parentNode, this.patcher.observableOrList);
            }
        },
        onPatches: function ListDOMPatcher_onPatches(patches) {
            if (this.exit) {
                return;
            }
            for (var i = 0, patchLen = patches.length; i < patchLen; i++) {
                var patch = patches[i];
                if (patch.type === 'move') {
                    this.move(patch.toIndex, patch.fromIndex);
                } else {
                    if (patch.deleteCount) {
                        this.remove({ length: patch.deleteCount }, patch.index, true);
                    }
                    if (patch.insert && patch.insert.length) {
                        this.add(patch.insert, patch.index);
                    }
                }
            }
        },
        add: function (items, index) {
            var frag = this.placeholder.ownerDocument.createDocumentFragment(), newNodeLists = [], newIndicies = [], masterNodeList = this.masterNodeList, render = this.render, context = this.context;
            items.forEach(function (item, key) {
                var itemIndex = new SimpleObservable(key + index), itemCompute = new SetObservable(item, function (newVal) {
                        canReflect.setKeyValue(this.patcher.currentList, itemIndex.get(), newVal);
                    }.bind(this)), itemFrag = renderAndAddToNodeLists(newNodeLists, masterNodeList, render, context, [
                        itemCompute,
                        itemIndex
                    ]);
                frag.appendChild(itemFrag);
                newIndicies.push(itemIndex);
            }, this);
            var masterListIndex = index + 1;
            if (!this.indexMap.length) {
                var falseyItemsToRemove = removeFromNodeList(masterNodeList, 0, masterNodeList.length - 1);
                nodeLists.remove(falseyItemsToRemove);
            }
            if (!masterNodeList[masterListIndex]) {
                nodeLists.after(masterListIndex === 1 ? [this.placeholder] : [nodeLists.last(this.masterNodeList[masterListIndex - 1])], frag);
            } else {
                var el = nodeLists.first(masterNodeList[masterListIndex]);
                domMutateNode.insertBefore.call(el.parentNode, frag, el);
            }
            splice.apply(this.masterNodeList, [
                masterListIndex,
                0
            ].concat(newNodeLists));
            splice.apply(this.indexMap, [
                index,
                0
            ].concat(newIndicies));
            for (var i = index + newIndicies.length, len = this.indexMap.length; i < len; i++) {
                this.indexMap[i].set(i);
            }
        },
        remove: function (items, index) {
            if (index < 0) {
                index = this.indexMap.length + index;
            }
            var itemsToRemove = removeFromNodeList(this.masterNodeList, index, items.length);
            var indexMap = this.indexMap;
            indexMap.splice(index, items.length);
            for (var i = index, len = indexMap.length; i < len; i++) {
                indexMap[i].set(i);
            }
            if (!this.exit) {
                this.addFalseyIfEmpty();
                nodeLists.remove(itemsToRemove);
            } else {
                nodeLists.unregister(this.masterNodeList);
            }
        },
        addFalseyIfEmpty: function () {
            if (this.falseyRender && this.indexMap.length === 0) {
                var falseyNodeLists = [];
                var falseyFrag = renderAndAddToNodeLists(falseyNodeLists, this.masterNodeList, this.falseyRender, this.currentList, [this.currentList]);
                nodeLists.after([this.masterNodeList[0]], falseyFrag);
                this.masterNodeList.push(falseyNodeLists[0]);
            }
        },
        move: function move(newIndex, currentIndex) {
            newIndex = newIndex + 1;
            currentIndex = currentIndex + 1;
            var masterNodeList = this.masterNodeList, indexMap = this.indexMap;
            var referenceNodeList = masterNodeList[newIndex];
            var movedElements = frag(nodeLists.flatten(masterNodeList[currentIndex]));
            var referenceElement;
            if (currentIndex < newIndex) {
                referenceElement = nodeLists.last(referenceNodeList).nextSibling;
            } else {
                referenceElement = nodeLists.first(referenceNodeList);
            }
            var parentNode = masterNodeList[0].parentNode;
            parentNode.insertBefore(movedElements, referenceElement);
            var temp = masterNodeList[currentIndex];
            [].splice.apply(masterNodeList, [
                currentIndex,
                1
            ]);
            [].splice.apply(masterNodeList, [
                newIndex,
                0,
                temp
            ]);
            newIndex = newIndex - 1;
            currentIndex = currentIndex - 1;
            var indexCompute = indexMap[currentIndex];
            [].splice.apply(indexMap, [
                currentIndex,
                1
            ]);
            [].splice.apply(indexMap, [
                newIndex,
                0,
                indexCompute
            ]);
            var i = Math.min(currentIndex, newIndex);
            var len = indexMap.length;
            for (i, len; i < len; i++) {
                indexMap[i].set(i);
            }
        },
        set: function (newVal, index) {
            this.remove({ length: 1 }, index, true);
            this.add([newVal], index);
        }
    };
    live.list = function (el, list, render, context, parentNode, nodeList, falseyRender) {
        if (el.nodeType !== Node.TEXT_NODE) {
            var textNode;
            if (!nodeList) {
                textNode = document.createTextNode('');
                el.parentNode.replaceChild(textNode, el);
                el = textNode;
            } else {
                textNode = document.createTextNode('');
                nodeLists.replace(nodeList, textNode);
                nodeLists.update(nodeList, [textNode]);
                el = textNode;
            }
        }
        new ListDOMPatcher(el, list, render, context, parentNode, nodeList, falseyRender);
    };
});
/*can-view-live@4.2.8#lib/text*/
define('can-view-live@4.2.8#lib/text', [
    'require',
    'exports',
    'module',
    './core',
    'can-view-nodelist',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var live = require('./core');
    var nodeLists = require('can-view-nodelist');
    var canReflect = require('can-reflect');
    live.text = function (el, compute, parentNode, nodeList) {
        if (el.nodeType !== Node.TEXT_NODE) {
            var textNode;
            if (!nodeList) {
                textNode = document.createTextNode('');
                el.parentNode.replaceChild(textNode, el);
                el = textNode;
            } else {
                textNode = document.createTextNode('');
                nodeLists.replace(nodeList, textNode);
                nodeLists.update(nodeList, [textNode]);
                el = textNode;
            }
        }
        var parent = live.getParentNode(el, parentNode);
        el.nodeValue = live.makeString(canReflect.getValue(compute));
        function liveTextUpdateTextNode(newVal) {
            el.nodeValue = live.makeString(newVal);
        }
        if (process.env.NODE_ENV !== 'production') {
            canReflect.assignSymbols(liveTextUpdateTextNode, {
                'can.getChangesDependencyRecord': function () {
                    var s = new Set();
                    s.add(parent);
                    return { valueDependencies: s };
                }
            });
            Object.defineProperty(liveTextUpdateTextNode, 'name', { value: 'live.text update::' + canReflect.getName(compute) });
        }
        var data = live.listen(parent, compute, liveTextUpdateTextNode, 'domUI');
        if (!nodeList) {
            nodeList = nodeLists.register([el], null, true);
        }
        nodeList.unregistered = data.teardownCheck;
        data.nodeList = nodeList;
    };
});
/*can-view-live@4.2.8#can-view-live*/
define('can-view-live@4.2.8#can-view-live', [
    'require',
    'exports',
    'module',
    './lib/core',
    './lib/attr',
    './lib/attrs',
    './lib/html',
    './lib/list',
    './lib/text'
], function (require, exports, module) {
    'use strict';
    var live = require('./lib/core');
    require('./lib/attr');
    require('./lib/attrs');
    require('./lib/html');
    require('./lib/list');
    require('./lib/text');
    module.exports = live;
});
/*can-stache@4.17.19#src/text_section*/
define('can-stache@4.17.19#src/text_section', [
    'require',
    'exports',
    'module',
    'can-view-live',
    './utils',
    'can-dom-mutate/node',
    'can-assign',
    'can-reflect',
    'can-observation'
], function (require, exports, module) {
    'use strict';
    var live = require('can-view-live');
    var utils = require('./utils');
    var domMutate = require('can-dom-mutate/node');
    var assign = require('can-assign');
    var canReflect = require('can-reflect');
    var Observation = require('can-observation');
    var noop = function () {
    };
    var TextSectionBuilder = function (filename) {
        if (filename) {
            this.filename = filename;
        }
        this.stack = [new TextSection()];
    };
    assign(TextSectionBuilder.prototype, utils.mixins);
    assign(TextSectionBuilder.prototype, {
        startSection: function (process) {
            var subSection = new TextSection();
            this.last().add({
                process: process,
                truthy: subSection
            });
            this.stack.push(subSection);
        },
        endSection: function () {
            this.stack.pop();
        },
        inverse: function () {
            this.stack.pop();
            var falseySection = new TextSection();
            this.last().last().falsey = falseySection;
            this.stack.push(falseySection);
        },
        compile: function (state) {
            var renderer = this.stack[0].compile();
            if (process.env.NODE_ENV !== 'production') {
                Object.defineProperty(renderer, 'name', { value: 'textSectionRenderer<' + state.tag + '.' + state.attr + '>' });
            }
            return function (scope) {
                function textSectionRender() {
                    return renderer(scope);
                }
                if (process.env.NODE_ENV !== 'production') {
                    Object.defineProperty(textSectionRender, 'name', { value: 'textSectionRender<' + state.tag + '.' + state.attr + '>' });
                }
                var observation = new Observation(textSectionRender, null, { isObservable: false });
                canReflect.onValue(observation, noop);
                var value = canReflect.getValue(observation);
                if (canReflect.valueHasDependencies(observation)) {
                    if (state.textContentOnly) {
                        live.text(this, observation);
                    } else if (state.attr) {
                        live.attr(this, state.attr, observation);
                    } else {
                        live.attrs(this, observation, scope);
                    }
                    canReflect.offValue(observation, noop);
                } else {
                    if (state.textContentOnly) {
                        this.nodeValue = value;
                    } else if (state.attr) {
                        domMutate.setAttribute.call(this, state.attr, value);
                    } else {
                        live.attrs(this, value);
                    }
                }
            };
        }
    });
    var passTruthyFalsey = function (process, truthy, falsey) {
        return function (scope) {
            return process.call(this, scope, truthy, falsey);
        };
    };
    var TextSection = function () {
        this.values = [];
    };
    assign(TextSection.prototype, {
        add: function (data) {
            this.values.push(data);
        },
        last: function () {
            return this.values[this.values.length - 1];
        },
        compile: function () {
            var values = this.values, len = values.length;
            for (var i = 0; i < len; i++) {
                var value = this.values[i];
                if (typeof value === 'object') {
                    values[i] = passTruthyFalsey(value.process, value.truthy && value.truthy.compile(), value.falsey && value.falsey.compile());
                }
            }
            return function (scope) {
                var txt = '', value;
                for (var i = 0; i < len; i++) {
                    value = values[i];
                    txt += typeof value === 'string' ? value : value.call(this, scope);
                }
                return txt;
            };
        }
    });
    module.exports = TextSectionBuilder;
});
/*can-stache@4.17.19#expressions/arg*/
define('can-stache@4.17.19#expressions/arg', function (require, exports, module) {
    'use strict';
    var Arg = function (expression, modifiers) {
        this.expr = expression;
        this.modifiers = modifiers || {};
        this.isCompute = false;
    };
    Arg.prototype.value = function () {
        return this.expr.value.apply(this.expr, arguments);
    };
    if (process.env.NODE_ENV !== 'production') {
        Arg.prototype.sourceText = function () {
            return (this.modifiers.compute ? '~' : '') + this.expr.sourceText();
        };
    }
    module.exports = Arg;
});
/*can-stache@4.17.19#expressions/literal*/
define('can-stache@4.17.19#expressions/literal', function (require, exports, module) {
    'use strict';
    var Literal = function (value) {
        this._value = value;
    };
    Literal.prototype.value = function () {
        return this._value;
    };
    if (process.env.NODE_ENV !== 'production') {
        Literal.prototype.sourceText = function () {
            return JSON.stringify(this._value);
        };
    }
    module.exports = Literal;
});
/*can-simple-observable@2.4.2#setter/setter*/
define('can-simple-observable@2.4.2#setter/setter', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-observation',
    '../settable/settable',
    'can-event-queue/value/value'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var Observation = require('can-observation');
    var SettableObservable = require('../settable/settable');
    var valueEventBindings = require('can-event-queue/value/value');
    function SetterObservable(getter, setter) {
        this.setter = setter;
        this.observation = new Observation(getter);
        this.handler = this.handler.bind(this);
        if (process.env.NODE_ENV !== 'production') {
            canReflect.assignSymbols(this, {
                'can.getName': function () {
                    return canReflect.getName(this.constructor) + '<' + canReflect.getName(getter) + '>';
                }
            });
            Object.defineProperty(this.handler, 'name', { value: canReflect.getName(this) + '.handler' });
        }
    }
    SetterObservable.prototype = Object.create(SettableObservable.prototype);
    SetterObservable.prototype.constructor = SetterObservable;
    SetterObservable.prototype.set = function (newVal) {
        this.setter(newVal);
    };
    SetterObservable.prototype.hasDependencies = function () {
        return canReflect.valueHasDependencies(this.observation);
    };
    canReflect.assignSymbols(SetterObservable.prototype, {
        'can.setValue': SetterObservable.prototype.set,
        'can.valueHasDependencies': SetterObservable.prototype.hasDependencies
    });
    module.exports = SetterObservable;
});
/*can-stache@4.17.19#src/expression-helpers*/
define('can-stache@4.17.19#src/expression-helpers', [
    'require',
    'exports',
    'module',
    '../expressions/arg',
    '../expressions/literal',
    'can-reflect',
    'can-stache-key',
    'can-observation',
    'can-observation-recorder',
    'can-view-scope/make-compute-like',
    'can-simple-observable/setter/setter'
], function (require, exports, module) {
    'use strict';
    var Arg = require('../expressions/arg');
    var Literal = require('../expressions/literal');
    var canReflect = require('can-reflect');
    var stacheKey = require('can-stache-key');
    var Observation = require('can-observation');
    var ObservationRecorder = require('can-observation-recorder');
    var makeComputeLike = require('can-view-scope/make-compute-like');
    var SetterObservable = require('can-simple-observable/setter/setter');
    function getObservableValue_fromDynamicKey_fromObservable(key, root, helperOptions, readOptions) {
        var getKeys = function () {
            return stacheKey.reads(('' + canReflect.getValue(key)).replace(/\./g, '\\.'));
        };
        var parentHasKey;
        var computeValue = new SetterObservable(function getDynamicKey() {
            var readData = stacheKey.read(canReflect.getValue(root), getKeys());
            parentHasKey = readData.parentHasKey;
            return readData.value;
        }, function setDynamicKey(newVal) {
            stacheKey.write(canReflect.getValue(root), getKeys(), newVal);
        });
        Observation.temporarilyBind(computeValue);
        computeValue.initialValue = ObservationRecorder.peekValue(computeValue);
        computeValue.parentHasKey = parentHasKey;
        return computeValue;
    }
    function convertToArgExpression(expr) {
        if (!(expr instanceof Arg) && !(expr instanceof Literal)) {
            return new Arg(expr);
        } else {
            return expr;
        }
    }
    function toComputeOrValue(value) {
        if (canReflect.isObservableLike(value)) {
            if (canReflect.isValueLike(value) && canReflect.valueHasDependencies(value) === false) {
                return canReflect.getValue(value);
            }
            if (value.compute) {
                return value.compute;
            } else {
                return makeComputeLike(value);
            }
        }
        return value;
    }
    function toCompute(value) {
        if (value) {
            if (value.isComputed) {
                return value;
            }
            if (value.compute) {
                return value.compute;
            } else {
                return makeComputeLike(value);
            }
        }
        return value;
    }
    module.exports = {
        getObservableValue_fromDynamicKey_fromObservable: getObservableValue_fromDynamicKey_fromObservable,
        convertToArgExpression: convertToArgExpression,
        toComputeOrValue: toComputeOrValue,
        toCompute: toCompute
    };
});
/*can-stache@4.17.19#expressions/hashes*/
define('can-stache@4.17.19#expressions/hashes', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-observation',
    '../src/expression-helpers'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var Observation = require('can-observation');
    var expressionHelpers = require('../src/expression-helpers');
    var Hashes = function (hashes) {
        this.hashExprs = hashes;
    };
    Hashes.prototype.value = function (scope, helperOptions) {
        var hash = {};
        for (var prop in this.hashExprs) {
            var val = expressionHelpers.convertToArgExpression(this.hashExprs[prop]), value = val.value.apply(val, arguments);
            hash[prop] = {
                call: !val.modifiers || !val.modifiers.compute,
                value: value
            };
        }
        return new Observation(function () {
            var finalHash = {};
            for (var prop in hash) {
                finalHash[prop] = hash[prop].call ? canReflect.getValue(hash[prop].value) : expressionHelpers.toComputeOrValue(hash[prop].value);
            }
            return finalHash;
        });
    };
    if (process.env.NODE_ENV !== 'production') {
        Hashes.prototype.sourceText = function () {
            var hashes = [];
            canReflect.eachKey(this.hashExprs, function (expr, prop) {
                hashes.push(prop + '=' + expr.sourceText());
            });
            return hashes.join(' ');
        };
    }
    module.exports = Hashes;
});
/*can-stache@4.17.19#expressions/bracket*/
define('can-stache@4.17.19#expressions/bracket', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../src/expression-helpers'
], function (require, exports, module) {
    'use strict';
    if (process.env.NODE_ENV !== 'production') {
        var canSymbol = require('can-symbol');
    }
    var expressionHelpers = require('../src/expression-helpers');
    var Bracket = function (key, root, originalKey) {
        this.root = root;
        this.key = key;
        if (process.env.NODE_ENV !== 'production') {
            this[canSymbol.for('can-stache.originalKey')] = originalKey;
        }
    };
    Bracket.prototype.value = function (scope, helpers) {
        var root = this.root ? this.root.value(scope, helpers) : scope.peek('this');
        return expressionHelpers.getObservableValue_fromDynamicKey_fromObservable(this.key.value(scope, helpers), root, scope, helpers, {});
    };
    if (process.env.NODE_ENV !== 'production') {
        Bracket.prototype.sourceText = function () {
            if (this.rootExpr) {
                return this.rootExpr.sourceText() + '[' + this.key + ']';
            } else {
                return '[' + this.key + ']';
            }
        };
    }
    Bracket.prototype.closingTag = function () {
        if (process.env.NODE_ENV !== 'production') {
            return this[canSymbol.for('can-stache.originalKey')] || '';
        }
    };
    module.exports = Bracket;
});
/*can-stache@4.17.19#src/set-identifier*/
define('can-stache@4.17.19#src/set-identifier', function (require, exports, module) {
    'use strict';
    module.exports = function SetIdentifier(value) {
        this.value = value;
    };
});
/*can-stache@4.17.19#expressions/call*/
define('can-stache@4.17.19#expressions/call', [
    'require',
    'exports',
    'module',
    './hashes',
    '../src/set-identifier',
    'can-symbol',
    'can-simple-observable/setter/setter',
    '../src/expression-helpers',
    'can-reflect',
    'can-assign',
    'can-view-scope',
    'can-observation'
], function (require, exports, module) {
    'use strict';
    var Hashes = require('./hashes');
    var SetIdentifier = require('../src/set-identifier');
    var canSymbol = require('can-symbol');
    var SetterObservable = require('can-simple-observable/setter/setter');
    var expressionHelpers = require('../src/expression-helpers');
    var canReflect = require('can-reflect');
    var assign = require('can-assign');
    var sourceTextSymbol = canSymbol.for('can-stache.sourceText');
    var isViewSymbol = canSymbol.for('can.isView');
    var Scope = require('can-view-scope');
    var Observation = require('can-observation');
    var Call = function (methodExpression, argExpressions) {
        this.methodExpr = methodExpression;
        this.argExprs = argExpressions.map(expressionHelpers.convertToArgExpression);
    };
    Call.prototype.args = function (scope, ignoreArgLookup) {
        var hashExprs = {};
        var args = [];
        var gotIgnoreFunction = typeof ignoreArgLookup === 'function';
        for (var i = 0, len = this.argExprs.length; i < len; i++) {
            var arg = this.argExprs[i];
            if (arg.expr instanceof Hashes) {
                assign(hashExprs, arg.expr.hashExprs);
            }
            if (!gotIgnoreFunction || !ignoreArgLookup(i)) {
                var value = arg.value.apply(arg, arguments);
                args.push({
                    call: !arg.modifiers || !arg.modifiers.compute,
                    value: value
                });
            }
        }
        return function (doNotWrapArguments) {
            var finalArgs = [];
            if (canReflect.size(hashExprs) > 0) {
                finalArgs.hashExprs = hashExprs;
            }
            for (var i = 0, len = args.length; i < len; i++) {
                if (doNotWrapArguments) {
                    finalArgs[i] = args[i].value;
                } else {
                    finalArgs[i] = args[i].call ? canReflect.getValue(args[i].value) : expressionHelpers.toCompute(args[i].value);
                }
            }
            return finalArgs;
        };
    };
    Call.prototype.value = function (scope, helperOptions) {
        var callExpression = this;
        var method = this.methodExpr.value(scope, { proxyMethods: false });
        Observation.temporarilyBind(method);
        var func = canReflect.getValue(method);
        var getArgs = callExpression.args(scope, func && func.ignoreArgLookup);
        var computeFn = function (newVal) {
            var func = canReflect.getValue(method);
            if (typeof func === 'function') {
                if (canReflect.isObservableLike(func)) {
                    func = canReflect.getValue(func);
                }
                var args = getArgs(func.isLiveBound);
                if (func.requiresOptionsArgument) {
                    if (args.hashExprs && helperOptions && helperOptions.exprData) {
                        helperOptions.exprData.hashExprs = args.hashExprs;
                    }
                    if (helperOptions !== undefined) {
                        args.push(helperOptions);
                    }
                }
                if (func[isViewSymbol] === true) {
                    if (!(args[0] instanceof Scope)) {
                        args[0] = scope.getTemplateContext().add(args[0]);
                    }
                    args.push(helperOptions.nodeList);
                }
                if (arguments.length) {
                    args.unshift(new SetIdentifier(newVal));
                }
                return func.apply(method.thisArg || scope.peek('this'), args);
            }
        };
        if (process.env.NODE_ENV !== 'production') {
            Object.defineProperty(computeFn, 'name', { value: '{{' + this.sourceText() + '}}' });
        }
        if (helperOptions && helperOptions.doNotWrapInObservation) {
            return computeFn();
        } else {
            var computeValue = new SetterObservable(computeFn, computeFn);
            return computeValue;
        }
    };
    if (process.env.NODE_ENV !== 'production') {
        Call.prototype.sourceText = function () {
            var args = this.argExprs.map(function (arg) {
                return arg.sourceText();
            });
            return this.methodExpr.sourceText() + '(' + args.join(',') + ')';
        };
    }
    Call.prototype.closingTag = function () {
        if (process.env.NODE_ENV !== 'production') {
            if (this.methodExpr[sourceTextSymbol]) {
                return this.methodExpr[sourceTextSymbol];
            }
        }
        return this.methodExpr.key;
    };
    module.exports = Call;
});
/*can-stache@4.17.19#expressions/helper*/
define('can-stache@4.17.19#expressions/helper', [
    'require',
    'exports',
    'module',
    './literal',
    './hashes',
    'can-assign',
    'can-log/dev/dev',
    '../src/expression-helpers',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var Literal = require('./literal');
    var Hashes = require('./hashes');
    var assign = require('can-assign');
    var dev = require('can-log/dev/dev');
    var expressionHelpers = require('../src/expression-helpers');
    var canReflect = require('can-reflect');
    var Helper = function (methodExpression, argExpressions, hashExpressions) {
        this.methodExpr = methodExpression;
        this.argExprs = argExpressions;
        this.hashExprs = hashExpressions;
        this.mode = null;
    };
    Helper.prototype.args = function (scope) {
        var args = [];
        for (var i = 0, len = this.argExprs.length; i < len; i++) {
            var arg = this.argExprs[i];
            args.push(expressionHelpers.toComputeOrValue(arg.value.apply(arg, arguments)));
        }
        return args;
    };
    Helper.prototype.hash = function (scope) {
        var hash = {};
        for (var prop in this.hashExprs) {
            var val = this.hashExprs[prop];
            hash[prop] = expressionHelpers.toComputeOrValue(val.value.apply(val, arguments));
        }
        return hash;
    };
    Helper.prototype.value = function (scope, helperOptions) {
        var methodKey = this.methodExpr instanceof Literal ? '' + this.methodExpr._value : this.methodExpr.key, helperInstance = this, helperFn = scope.computeData(methodKey, { proxyMethods: false }), initialValue = helperFn && helperFn.initialValue, thisArg = helperFn && helperFn.thisArg;
        if (typeof initialValue === 'function') {
            helperFn = function helperFn() {
                var args = helperInstance.args(scope), helperOptionArg = assign(assign({}, helperOptions), {
                        hash: helperInstance.hash(scope),
                        exprData: helperInstance
                    });
                args.push(helperOptionArg);
                return initialValue.apply(thisArg || scope.peek('this'), args);
            };
            if (process.env.NODE_ENV !== 'production') {
                Object.defineProperty(helperFn, 'name', {
                    configurable: true,
                    value: canReflect.getName(this)
                });
            }
        } else if (process.env.NODE_ENV !== 'production') {
            var filename = scope.peek('scope.filename');
            var lineNumber = scope.peek('scope.lineNumber');
            dev.warn((filename ? filename + ':' : '') + (lineNumber ? lineNumber + ': ' : '') + 'Unable to find helper "' + methodKey + '".');
        }
        return helperFn;
    };
    Helper.prototype.closingTag = function () {
        return this.methodExpr.key;
    };
    if (process.env.NODE_ENV !== 'production') {
        Helper.prototype.sourceText = function () {
            var text = [this.methodExpr.sourceText()];
            if (this.argExprs.length) {
                text.push(this.argExprs.map(function (arg) {
                    return arg.sourceText();
                }).join(' '));
            }
            if (canReflect.size(this.hashExprs) > 0) {
                text.push(Hashes.prototype.sourceText.call(this));
            }
            return text.join(' ');
        };
        canReflect.assignSymbols(Helper.prototype, {
            'can.getName': function () {
                return canReflect.getName(this.constructor) + '{{' + this.sourceText() + '}}';
            }
        });
    }
    module.exports = Helper;
});
/*can-stache@4.17.19#expressions/lookup*/
define('can-stache@4.17.19#expressions/lookup', [
    'require',
    'exports',
    'module',
    '../src/expression-helpers',
    'can-reflect',
    'can-symbol',
    'can-assign'
], function (require, exports, module) {
    'use strict';
    var expressionHelpers = require('../src/expression-helpers');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var sourceTextSymbol = canSymbol.for('can-stache.sourceText');
    var assign = require('can-assign');
    var Lookup = function (key, root, sourceText) {
        this.key = key;
        this.rootExpr = root;
        canReflect.setKeyValue(this, sourceTextSymbol, sourceText);
    };
    Lookup.prototype.value = function (scope, readOptions) {
        if (this.rootExpr) {
            return expressionHelpers.getObservableValue_fromDynamicKey_fromObservable(this.key, this.rootExpr.value(scope), scope, {}, {});
        } else {
            return scope.computeData(this.key, assign({ warnOnMissingKey: true }, readOptions));
        }
    };
    if (process.env.NODE_ENV !== 'production') {
        Lookup.prototype.sourceText = function () {
            if (this[sourceTextSymbol]) {
                return this[sourceTextSymbol];
            } else if (this.rootExpr) {
                return this.rootExpr.sourceText() + '.' + this.key;
            } else {
                return this.key;
            }
        };
    }
    module.exports = Lookup;
});
/*can-stache@4.17.19#src/expression*/
define('can-stache@4.17.19#src/expression', [
    'require',
    'exports',
    'module',
    '../expressions/arg',
    '../expressions/literal',
    '../expressions/hashes',
    '../expressions/bracket',
    '../expressions/call',
    '../expressions/helper',
    '../expressions/lookup',
    './set-identifier',
    '../src/expression-helpers',
    './utils',
    'can-assign',
    'can-reflect',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var Arg = require('../expressions/arg');
    var Literal = require('../expressions/literal');
    var Hashes = require('../expressions/hashes');
    var Bracket = require('../expressions/bracket');
    var Call = require('../expressions/call');
    var Helper = require('../expressions/helper');
    var Lookup = require('../expressions/lookup');
    var SetIdentifier = require('./set-identifier');
    var expressionHelpers = require('../src/expression-helpers');
    var utils = require('./utils');
    var assign = require('can-assign');
    var last = utils.last;
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var sourceTextSymbol = canSymbol.for('can-stache.sourceText');
    var Hash = function () {
    };
    var keyRegExp = /[\w\.\\\-_@\/\&%]+/, tokensRegExp = /('.*?'|".*?"|=|[\w\.\\\-_@\/*%\$]+|[\(\)]|,|\~|\[|\]\s*|\s*(?=\[))/g, bracketSpaceRegExp = /\]\s+/, literalRegExp = /^('.*?'|".*?"|-?[0-9]+\.?[0-9]*|true|false|null|undefined)$/;
    var isTokenKey = function (token) {
        return keyRegExp.test(token);
    };
    var testDot = /^[\.@]\w/;
    var isAddingToExpression = function (token) {
        return isTokenKey(token) && testDot.test(token);
    };
    var ensureChildren = function (type) {
        if (!type.children) {
            type.children = [];
        }
        return type;
    };
    var Stack = function () {
        this.root = {
            children: [],
            type: 'Root'
        };
        this.current = this.root;
        this.stack = [this.root];
    };
    assign(Stack.prototype, {
        top: function () {
            return last(this.stack);
        },
        isRootTop: function () {
            return this.top() === this.root;
        },
        popTo: function (types) {
            this.popUntil(types);
            this.pop();
        },
        pop: function () {
            if (!this.isRootTop()) {
                this.stack.pop();
            }
        },
        first: function (types) {
            var curIndex = this.stack.length - 1;
            while (curIndex > 0 && types.indexOf(this.stack[curIndex].type) === -1) {
                curIndex--;
            }
            return this.stack[curIndex];
        },
        firstParent: function (types) {
            var curIndex = this.stack.length - 2;
            while (curIndex > 0 && types.indexOf(this.stack[curIndex].type) === -1) {
                curIndex--;
            }
            return this.stack[curIndex];
        },
        popUntil: function (types) {
            while (types.indexOf(this.top().type) === -1 && !this.isRootTop()) {
                this.stack.pop();
            }
            return this.top();
        },
        addTo: function (types, type) {
            var cur = this.popUntil(types);
            ensureChildren(cur).children.push(type);
        },
        addToAndPush: function (types, type) {
            this.addTo(types, type);
            this.stack.push(type);
        },
        push: function (type) {
            this.stack.push(type);
        },
        topLastChild: function () {
            return last(this.top().children);
        },
        replaceTopLastChild: function (type) {
            var children = ensureChildren(this.top()).children;
            children.pop();
            children.push(type);
            return type;
        },
        replaceTopLastChildAndPush: function (type) {
            this.replaceTopLastChild(type);
            this.stack.push(type);
        },
        replaceTopAndPush: function (type) {
            var children;
            if (this.top() === this.root) {
                children = ensureChildren(this.top()).children;
            } else {
                this.stack.pop();
                children = ensureChildren(this.top()).children;
            }
            children.pop();
            children.push(type);
            this.stack.push(type);
            return type;
        }
    });
    var convertKeyToLookup = function (key) {
        var lastPath = key.lastIndexOf('./');
        var lastDot = key.lastIndexOf('.');
        if (lastDot > lastPath) {
            return key.substr(0, lastDot) + '@' + key.substr(lastDot + 1);
        }
        var firstNonPathCharIndex = lastPath === -1 ? 0 : lastPath + 2;
        var firstNonPathChar = key.charAt(firstNonPathCharIndex);
        if (firstNonPathChar === '.' || firstNonPathChar === '@') {
            return key.substr(0, firstNonPathCharIndex) + '@' + key.substr(firstNonPathCharIndex + 1);
        } else {
            return key.substr(0, firstNonPathCharIndex) + '@' + key.substr(firstNonPathCharIndex);
        }
    };
    var convertToAtLookup = function (ast) {
        if (ast.type === 'Lookup') {
            canReflect.setKeyValue(ast, sourceTextSymbol, ast.key);
            ast.key = convertKeyToLookup(ast.key);
        }
        return ast;
    };
    var convertToHelperIfTopIsLookup = function (stack) {
        var top = stack.top();
        if (top && top.type === 'Lookup') {
            var base = stack.stack[stack.stack.length - 2];
            if (base.type !== 'Helper' && base) {
                stack.replaceTopAndPush({
                    type: 'Helper',
                    method: top
                });
            }
        }
    };
    var expression = {
        toComputeOrValue: expressionHelpers.toComputeOrValue,
        convertKeyToLookup: convertKeyToLookup,
        Literal: Literal,
        Lookup: Lookup,
        Arg: Arg,
        Hash: Hash,
        Hashes: Hashes,
        Call: Call,
        Helper: Helper,
        Bracket: Bracket,
        SetIdentifier: SetIdentifier,
        tokenize: function (expression) {
            var tokens = [];
            (expression.trim() + ' ').replace(tokensRegExp, function (whole, arg) {
                if (bracketSpaceRegExp.test(arg)) {
                    tokens.push(arg[0]);
                    tokens.push(arg.slice(1));
                } else {
                    tokens.push(arg);
                }
            });
            return tokens;
        },
        lookupRules: {
            'default': function (ast, methodType, isArg) {
                return ast.type === 'Helper' ? Helper : Lookup;
            },
            'method': function (ast, methodType, isArg) {
                return Lookup;
            }
        },
        methodRules: {
            'default': function (ast) {
                return ast.type === 'Call' ? Call : Helper;
            },
            'call': function (ast) {
                return Call;
            }
        },
        parse: function (expressionString, options) {
            options = options || {};
            var ast = this.ast(expressionString);
            if (!options.lookupRule) {
                options.lookupRule = 'default';
            }
            if (typeof options.lookupRule === 'string') {
                options.lookupRule = expression.lookupRules[options.lookupRule];
            }
            if (!options.methodRule) {
                options.methodRule = 'default';
            }
            if (typeof options.methodRule === 'string') {
                options.methodRule = expression.methodRules[options.methodRule];
            }
            var expr = this.hydrateAst(ast, options, options.baseMethodType || 'Helper');
            return expr;
        },
        hydrateAst: function (ast, options, methodType, isArg) {
            var hashes;
            if (ast.type === 'Lookup') {
                var LookupRule = options.lookupRule(ast, methodType, isArg);
                var lookup = new LookupRule(ast.key, ast.root && this.hydrateAst(ast.root, options, methodType), ast[sourceTextSymbol]);
                return lookup;
            } else if (ast.type === 'Literal') {
                return new Literal(ast.value);
            } else if (ast.type === 'Arg') {
                return new Arg(this.hydrateAst(ast.children[0], options, methodType, isArg), { compute: true });
            } else if (ast.type === 'Hash') {
                throw new Error('');
            } else if (ast.type === 'Hashes') {
                hashes = {};
                ast.children.forEach(function (hash) {
                    hashes[hash.prop] = this.hydrateAst(hash.children[0], options, methodType, true);
                }, this);
                return new Hashes(hashes);
            } else if (ast.type === 'Call' || ast.type === 'Helper') {
                hashes = {};
                var args = [], children = ast.children, ExpressionType = options.methodRule(ast);
                if (children) {
                    for (var i = 0; i < children.length; i++) {
                        var child = children[i];
                        if (child.type === 'Hashes' && ast.type === 'Helper' && ExpressionType !== Call) {
                            child.children.forEach(function (hash) {
                                hashes[hash.prop] = this.hydrateAst(hash.children[0], options, ast.type, true);
                            }, this);
                        } else {
                            args.push(this.hydrateAst(child, options, ast.type, true));
                        }
                    }
                }
                return new ExpressionType(this.hydrateAst(ast.method, options, ast.type), args, hashes);
            } else if (ast.type === 'Bracket') {
                var originalKey;
                if (process.env.NODE_ENV !== 'production') {
                    originalKey = ast[canSymbol.for('can-stache.originalKey')];
                }
                return new Bracket(this.hydrateAst(ast.children[0], options), ast.root ? this.hydrateAst(ast.root, options) : undefined, originalKey);
            }
        },
        ast: function (expression) {
            var tokens = this.tokenize(expression);
            return this.parseAst(tokens, { index: 0 });
        },
        parseAst: function (tokens, cursor) {
            var stack = new Stack(), top, firstParent, lastToken;
            while (cursor.index < tokens.length) {
                var token = tokens[cursor.index], nextToken = tokens[cursor.index + 1];
                cursor.index++;
                if (nextToken === '=') {
                    top = stack.top();
                    if (top && top.type === 'Lookup') {
                        firstParent = stack.firstParent([
                            'Call',
                            'Helper',
                            'Hash'
                        ]);
                        if (firstParent.type === 'Call' || firstParent.type === 'Root') {
                            stack.popUntil(['Call']);
                            top = stack.top();
                            stack.replaceTopAndPush({
                                type: 'Helper',
                                method: top.type === 'Root' ? last(top.children) : top
                            });
                        }
                    }
                    firstParent = stack.first([
                        'Call',
                        'Helper',
                        'Hashes',
                        'Root'
                    ]);
                    var hash = {
                        type: 'Hash',
                        prop: token
                    };
                    if (firstParent.type === 'Hashes') {
                        stack.addToAndPush(['Hashes'], hash);
                    } else {
                        stack.addToAndPush([
                            'Helper',
                            'Call',
                            'Root'
                        ], {
                            type: 'Hashes',
                            children: [hash]
                        });
                        stack.push(hash);
                    }
                    cursor.index++;
                } else if (literalRegExp.test(token)) {
                    convertToHelperIfTopIsLookup(stack);
                    firstParent = stack.first([
                        'Helper',
                        'Call',
                        'Hash',
                        'Bracket'
                    ]);
                    if (firstParent.type === 'Hash' && (firstParent.children && firstParent.children.length > 0)) {
                        stack.addTo([
                            'Helper',
                            'Call',
                            'Bracket'
                        ], {
                            type: 'Literal',
                            value: utils.jsonParse(token)
                        });
                    } else if (firstParent.type === 'Bracket' && (firstParent.children && firstParent.children.length > 0)) {
                        stack.addTo([
                            'Helper',
                            'Call',
                            'Hash'
                        ], {
                            type: 'Literal',
                            value: utils.jsonParse(token)
                        });
                    } else {
                        stack.addTo([
                            'Helper',
                            'Call',
                            'Hash',
                            'Bracket'
                        ], {
                            type: 'Literal',
                            value: utils.jsonParse(token)
                        });
                    }
                } else if (keyRegExp.test(token)) {
                    lastToken = stack.topLastChild();
                    firstParent = stack.first([
                        'Helper',
                        'Call',
                        'Hash',
                        'Bracket'
                    ]);
                    if (lastToken && (lastToken.type === 'Call' || lastToken.type === 'Bracket') && isAddingToExpression(token)) {
                        stack.replaceTopLastChildAndPush({
                            type: 'Lookup',
                            root: lastToken,
                            key: token.slice(1)
                        });
                    } else if (firstParent.type === 'Bracket') {
                        if (!(firstParent.children && firstParent.children.length > 0)) {
                            stack.addToAndPush(['Bracket'], {
                                type: 'Lookup',
                                key: token
                            });
                        } else {
                            if (stack.first([
                                    'Helper',
                                    'Call',
                                    'Hash',
                                    'Arg'
                                ]).type === 'Helper' && token[0] !== '.') {
                                stack.addToAndPush(['Helper'], {
                                    type: 'Lookup',
                                    key: token
                                });
                            } else {
                                stack.replaceTopAndPush({
                                    type: 'Lookup',
                                    key: token.slice(1),
                                    root: firstParent
                                });
                            }
                        }
                    } else {
                        convertToHelperIfTopIsLookup(stack);
                        stack.addToAndPush([
                            'Helper',
                            'Call',
                            'Hash',
                            'Arg',
                            'Bracket'
                        ], {
                            type: 'Lookup',
                            key: token
                        });
                    }
                } else if (token === '~') {
                    convertToHelperIfTopIsLookup(stack);
                    stack.addToAndPush([
                        'Helper',
                        'Call',
                        'Hash'
                    ], {
                        type: 'Arg',
                        key: token
                    });
                } else if (token === '(') {
                    top = stack.top();
                    lastToken = stack.topLastChild();
                    if (top.type === 'Lookup') {
                        stack.replaceTopAndPush({
                            type: 'Call',
                            method: convertToAtLookup(top)
                        });
                    } else if (lastToken && lastToken.type === 'Call') {
                        stack.replaceTopAndPush({
                            type: 'Call',
                            method: lastToken
                        });
                    } else {
                        throw new Error('Unable to understand expression ' + tokens.join(''));
                    }
                } else if (token === ')') {
                    stack.popTo(['Call']);
                } else if (token === ',') {
                    var call = stack.first(['Call']);
                    if (call.type !== 'Call') {
                        stack.popUntil(['Hash']);
                    } else {
                        stack.popUntil(['Call']);
                    }
                } else if (token === '[') {
                    top = stack.top();
                    lastToken = stack.topLastChild();
                    if (lastToken && (lastToken.type === 'Call' || lastToken.type === 'Bracket')) {
                        stack.replaceTopLastChildAndPush({
                            type: 'Bracket',
                            root: lastToken
                        });
                    } else if (top.type === 'Lookup' || top.type === 'Bracket') {
                        var bracket = {
                            type: 'Bracket',
                            root: top
                        };
                        if (process.env.NODE_ENV !== 'production') {
                            canReflect.setKeyValue(bracket, canSymbol.for('can-stache.originalKey'), top.key);
                        }
                        stack.replaceTopAndPush(bracket);
                    } else if (top.type === 'Call') {
                        stack.addToAndPush(['Call'], { type: 'Bracket' });
                    } else if (top === ' ') {
                        stack.popUntil([
                            'Lookup',
                            'Call'
                        ]);
                        convertToHelperIfTopIsLookup(stack);
                        stack.addToAndPush([
                            'Helper',
                            'Call',
                            'Hash'
                        ], { type: 'Bracket' });
                    } else {
                        stack.replaceTopAndPush({ type: 'Bracket' });
                    }
                } else if (token === ']') {
                    stack.pop();
                } else if (token === ' ') {
                    stack.push(token);
                }
            }
            return stack.root.children[0];
        }
    };
    module.exports = expression;
});
/*can-stache@4.17.19#src/mustache_core*/
define('can-stache@4.17.19#src/mustache_core', [
    'require',
    'exports',
    'module',
    'can-view-live',
    'can-view-nodelist',
    'can-observation',
    'can-observation-recorder',
    './utils',
    './expression',
    'can-fragment',
    'can-dom-mutate',
    'can-symbol',
    'can-reflect',
    'can-log/dev/dev',
    'can-globals/document/document',
    'can-define-lazy-value'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var live = require('can-view-live');
        var nodeLists = require('can-view-nodelist');
        var Observation = require('can-observation');
        var ObservationRecorder = require('can-observation-recorder');
        var utils = require('./utils');
        var expression = require('./expression');
        var frag = require('can-fragment');
        var domMutate = require('can-dom-mutate');
        var canSymbol = require('can-symbol');
        var canReflect = require('can-reflect');
        var dev = require('can-log/dev/dev');
        var getDocument = require('can-globals/document/document');
        var defineLazyValue = require('can-define-lazy-value');
        var toDOMSymbol = canSymbol.for('can.toDOM');
        function HelperOptions(scope, nodeList, exprData, stringOnly) {
            this.metadata = { rendered: false };
            this.stringOnly = stringOnly;
            this.scope = scope;
            this.nodeList = nodeList;
            this.exprData = exprData;
        }
        defineLazyValue(HelperOptions.prototype, 'context', function () {
            return this.scope.peek('this');
        });
        var mustacheLineBreakRegExp = /(?:(^|\r?\n)(\s*)(\{\{([\s\S]*)\}\}\}?)([^\S\n\r]*)($|\r?\n))|(\{\{([\s\S]*)\}\}\}?)/g, mustacheWhitespaceRegExp = /\s*\{\{--\}\}\s*|\s*(\{\{\{?)-|-(\}\}\}?)\s*/g, k = function () {
            };
        var viewInsertSymbol = canSymbol.for('can.viewInsert');
        function valueShouldBeInsertedAsHTML(value) {
            return value !== null && typeof value === 'object' && (typeof value[toDOMSymbol] === 'function' || typeof value[viewInsertSymbol] === 'function' || typeof value.nodeType === 'number');
        }
        var core = {
            expression: expression,
            makeEvaluator: function (scope, nodeList, mode, exprData, truthyRenderer, falseyRenderer, stringOnly) {
                if (mode === '^') {
                    var temp = truthyRenderer;
                    truthyRenderer = falseyRenderer;
                    falseyRenderer = temp;
                }
                var value, helperOptions = new HelperOptions(scope, nodeList, exprData, stringOnly);
                utils.createRenderers(helperOptions, scope, nodeList, truthyRenderer, falseyRenderer, stringOnly);
                if (exprData instanceof expression.Call) {
                    value = exprData.value(scope, helperOptions);
                } else if (exprData instanceof expression.Bracket) {
                    value = exprData.value(scope);
                } else if (exprData instanceof expression.Lookup) {
                    value = exprData.value(scope);
                } else if (exprData instanceof expression.Literal) {
                    value = exprData.value.bind(exprData);
                } else if (exprData instanceof expression.Helper && exprData.methodExpr instanceof expression.Bracket) {
                    value = exprData.methodExpr.value(scope, helperOptions);
                } else {
                    value = exprData.value(scope, helperOptions);
                    if (typeof value === 'function') {
                        return value;
                    }
                }
                if (!mode || helperOptions.metadata.rendered) {
                    return value;
                } else if (mode === '#' || mode === '^') {
                    return function () {
                        var finalValue = canReflect.getValue(value);
                        var result;
                        if (helperOptions.metadata.rendered) {
                            result = finalValue;
                        } else if (typeof finalValue !== 'string' && canReflect.isListLike(finalValue)) {
                            var isObserveList = canReflect.isObservableLike(finalValue) && canReflect.isListLike(finalValue);
                            if (canReflect.getKeyValue(finalValue, 'length')) {
                                if (stringOnly) {
                                    result = utils.getItemsStringContent(finalValue, isObserveList, helperOptions);
                                } else {
                                    result = frag(utils.getItemsFragContent(finalValue, helperOptions, scope));
                                }
                            } else {
                                result = helperOptions.inverse(scope);
                            }
                        } else {
                            result = finalValue ? helperOptions.fn(finalValue || scope) : helperOptions.inverse(scope);
                        }
                        helperOptions.metadata.rendered = false;
                        return result;
                    };
                } else {
                }
            },
            makeLiveBindingPartialRenderer: function (expressionString, state) {
                expressionString = expressionString.trim();
                var exprData, partialName = expressionString.split(/\s+/).shift();
                if (partialName !== expressionString) {
                    exprData = core.expression.parse(expressionString);
                }
                return function (scope, parentSectionNodeList) {
                    if (process.env.NODE_ENV !== 'production') {
                        scope.set('scope.filename', state.filename);
                        scope.set('scope.lineNumber', state.lineNo);
                    }
                    var nodeList = [this];
                    nodeList.expression = '>' + partialName;
                    nodeLists.register(nodeList, null, parentSectionNodeList || true, state.directlyNested);
                    var partialFrag = new Observation(function () {
                        var localPartialName = partialName;
                        var partialScope = scope;
                        if (exprData && exprData.argExprs.length === 1) {
                            var newContext = canReflect.getValue(exprData.argExprs[0].value(scope));
                            if (typeof newContext === 'undefined') {
                                if (process.env.NODE_ENV !== 'production') {
                                    dev.warn('The context (' + exprData.argExprs[0].key + ') you passed into the' + 'partial (' + partialName + ') is not defined in the scope!');
                                }
                            } else {
                                partialScope = scope.add(newContext);
                            }
                        }
                        var partial = canReflect.getKeyValue(partialScope.templateContext.partials, localPartialName);
                        var renderer;
                        if (partial) {
                            renderer = function () {
                                return partial.render ? partial.render(partialScope, nodeList) : partial(partialScope);
                            };
                        } else {
                            var scopePartialName = partialScope.read(localPartialName, { isArgument: true }).value;
                            if (scopePartialName === null || !scopePartialName && localPartialName[0] === '*') {
                                return frag('');
                            }
                            if (scopePartialName) {
                                localPartialName = scopePartialName;
                            }
                            renderer = function () {
                                if (typeof localPartialName === 'function') {
                                    return localPartialName(partialScope, {}, nodeList);
                                } else {
                                    var domRenderer = core.getTemplateById(localPartialName);
                                    if (process.env.NODE_ENV !== 'production') {
                                        if (!domRenderer) {
                                            dev.warn((state.filename ? state.filename + ':' : '') + (state.lineNo ? state.lineNo + ': ' : '') + 'Unable to find partial "' + localPartialName + '".');
                                        }
                                    }
                                    return domRenderer ? domRenderer(partialScope, {}, nodeList) : getDocument().createDocumentFragment();
                                }
                            };
                        }
                        var res = ObservationRecorder.ignore(renderer)();
                        return frag(res);
                    });
                    canReflect.setPriority(partialFrag, nodeList.nesting);
                    live.html(this, partialFrag, this.parentNode, nodeList);
                };
            },
            makeStringBranchRenderer: function (mode, expressionString, state) {
                var exprData = core.expression.parse(expressionString), fullExpression = mode + expressionString;
                var branchRenderer = function branchRenderer(scope, truthyRenderer, falseyRenderer) {
                    if (process.env.NODE_ENV !== 'production') {
                        scope.set('scope.filename', state.filename);
                        scope.set('scope.lineNumber', state.lineNo);
                    }
                    var evaluator = scope.__cache[fullExpression];
                    if (mode || !evaluator) {
                        evaluator = makeEvaluator(scope, null, mode, exprData, truthyRenderer, falseyRenderer, true);
                        if (!mode) {
                            scope.__cache[fullExpression] = evaluator;
                        }
                    }
                    var gotObservableValue = evaluator[canSymbol.for('can.onValue')], res;
                    if (gotObservableValue) {
                        res = canReflect.getValue(evaluator);
                    } else {
                        res = evaluator();
                    }
                    return res == null ? '' : '' + res;
                };
                branchRenderer.exprData = exprData;
                return branchRenderer;
            },
            makeLiveBindingBranchRenderer: function (mode, expressionString, state) {
                var exprData = core.expression.parse(expressionString);
                var branchRenderer = function branchRenderer(scope, parentSectionNodeList, truthyRenderer, falseyRenderer) {
                    var stringOnly = state.tag;
                    if (process.env.NODE_ENV !== 'production') {
                        scope.set('scope.filename', state.filename);
                        scope.set('scope.lineNumber', state.lineNo);
                    }
                    var nodeList = [this];
                    nodeList.expression = expressionString;
                    nodeLists.register(nodeList, null, parentSectionNodeList || true, state.directlyNested);
                    var evaluator = makeEvaluator(scope, nodeList, mode, exprData, truthyRenderer, falseyRenderer, stringOnly);
                    var gotObservableValue = evaluator[canSymbol.for('can.onValue')];
                    var observable;
                    if (gotObservableValue) {
                        observable = evaluator;
                    } else {
                        if (process.env.NODE_ENV !== 'production') {
                            Object.defineProperty(evaluator, 'name', { value: '{{' + (mode || '') + expressionString + '}}' });
                        }
                        observable = new Observation(evaluator, null, { isObservable: false });
                    }
                    if (canReflect.setPriority(observable, nodeList.nesting) === false) {
                        throw new Error('can-stache unable to set priority on observable');
                    }
                    canReflect.onValue(observable, k);
                    var value = canReflect.getValue(observable);
                    if (typeof value === 'function' && !(exprData instanceof expression.Lookup)) {
                        ObservationRecorder.ignore(value)(this);
                    } else if (canReflect.valueHasDependencies(observable)) {
                        if (state.attr) {
                            live.attr(this, state.attr, observable);
                        } else if (state.tag) {
                            live.attrs(this, observable);
                        } else if (state.text && !valueShouldBeInsertedAsHTML(value)) {
                            if (process.env.NODE_ENV !== 'production') {
                                if (value !== null && typeof value === 'object') {
                                    dev.warn('Previously, the result of ' + expressionString + ' in ' + state.filename + ':' + state.lineNo + ', was being inserted as HTML instead of TEXT. Please use stache.safeString(obj) ' + 'if you would like the object to be treated as HTML.');
                                }
                            }
                            live.text(this, observable, this.parentNode, nodeList);
                        } else {
                            live.html(this, observable, this.parentNode, { nodeList: nodeList });
                        }
                    } else {
                        if (state.attr) {
                            domMutate.setAttribute(this, state.attr, value);
                        } else if (state.tag) {
                            live.attrs(this, value);
                        } else if (state.text && !valueShouldBeInsertedAsHTML(value)) {
                            this.nodeValue = live.makeString(value);
                        } else if (value != null) {
                            if (typeof value[viewInsertSymbol] === 'function') {
                                var insert = value[viewInsertSymbol]({ nodeList: nodeList });
                                var oldNodes = nodeLists.update(nodeList, [insert]);
                                nodeLists.replace(oldNodes, insert);
                            } else {
                                nodeLists.replace([this], frag(value, this.ownerDocument));
                            }
                        }
                    }
                    canReflect.offValue(observable, k);
                };
                branchRenderer.exprData = exprData;
                return branchRenderer;
            },
            splitModeFromExpression: function (expression, state) {
                expression = expression.trim();
                var mode = expression.charAt(0);
                if ('#/{&^>!<'.indexOf(mode) >= 0) {
                    expression = expression.substr(1).trim();
                } else {
                    mode = null;
                }
                if (mode === '{' && state.node) {
                    mode = null;
                }
                return {
                    mode: mode,
                    expression: expression
                };
            },
            cleanLineEndings: function (template) {
                return template.replace(mustacheLineBreakRegExp, function (whole, returnBefore, spaceBefore, special, expression, spaceAfter, returnAfter, spaceLessSpecial, spaceLessExpression, matchIndex) {
                    spaceAfter = spaceAfter || '';
                    returnBefore = returnBefore || '';
                    spaceBefore = spaceBefore || '';
                    var modeAndExpression = splitModeFromExpression(expression || spaceLessExpression, {});
                    if (spaceLessSpecial || '>{'.indexOf(modeAndExpression.mode) >= 0) {
                        return whole;
                    } else if ('^#!/'.indexOf(modeAndExpression.mode) >= 0) {
                        spaceBefore = returnBefore + spaceBefore && ' ';
                        return spaceBefore + special + (matchIndex !== 0 && returnAfter.length ? returnBefore + '\n' : '');
                    } else {
                        return spaceBefore + special + spaceAfter + (spaceBefore.length || matchIndex !== 0 ? returnBefore + '\n' : '');
                    }
                });
            },
            cleanWhitespaceControl: function (template) {
                return template.replace(mustacheWhitespaceRegExp, '$1$2');
            },
            getTemplateById: function () {
            }
        };
        var makeEvaluator = core.makeEvaluator, splitModeFromExpression = core.splitModeFromExpression;
        module.exports = core;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.2#base-url/base-url*/
define('can-globals@1.2.2#base-url/base-url', [
    'require',
    'exports',
    'module',
    '../can-globals-instance',
    '../global/global',
    '../document/document'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('../can-globals-instance');
        require('../global/global');
        require('../document/document');
        globals.define('base-url', function () {
            var global = globals.getKeyValue('global');
            var domDocument = globals.getKeyValue('document');
            if (domDocument && 'baseURI' in domDocument) {
                return domDocument.baseURI;
            } else if (global.location) {
                var href = global.location.href;
                var lastSlash = href.lastIndexOf('/');
                return lastSlash !== -1 ? href.substr(0, lastSlash) : href;
            } else if (typeof process !== 'undefined') {
                return process.cwd();
            }
        });
        module.exports = globals.makeExport('base-url');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-parse-uri@1.2.2#can-parse-uri*/
define('can-parse-uri@1.2.2#can-parse-uri', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    module.exports = namespace.parseURI = function (url) {
        var m = String(url).replace(/^\s+|\s+$/g, '').match(/^([^:\/?#]+:)?(\/\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);
        return m ? {
            href: m[0] || '',
            protocol: m[1] || '',
            authority: m[2] || '',
            host: m[3] || '',
            hostname: m[4] || '',
            port: m[5] || '',
            pathname: m[6] || '',
            search: m[7] || '',
            hash: m[8] || ''
        } : null;
    };
});
/*can-join-uris@1.2.0#can-join-uris*/
define('can-join-uris@1.2.0#can-join-uris', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-parse-uri'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var parseURI = require('can-parse-uri');
    module.exports = namespace.joinURIs = function (base, href) {
        function removeDotSegments(input) {
            var output = [];
            input.replace(/^(\.\.?(\/|$))+/, '').replace(/\/(\.(\/|$))+/g, '/').replace(/\/\.\.$/, '/../').replace(/\/?[^\/]*/g, function (p) {
                if (p === '/..') {
                    output.pop();
                } else {
                    output.push(p);
                }
            });
            return output.join('').replace(/^\//, input.charAt(0) === '/' ? '/' : '');
        }
        href = parseURI(href || '');
        base = parseURI(base || '');
        return !href || !base ? null : (href.protocol || base.protocol) + (href.protocol || href.authority ? href.authority : base.authority) + removeDotSegments(href.protocol || href.authority || href.pathname.charAt(0) === '/' ? href.pathname : href.pathname ? (base.authority && !base.pathname ? '/' : '') + base.pathname.slice(0, base.pathname.lastIndexOf('/') + 1) + href.pathname : base.pathname) + (href.protocol || href.authority || href.pathname ? href.search : href.search || base.search) + href.hash;
    };
});
/*can-stache@4.17.19#helpers/-debugger*/
define('can-stache@4.17.19#helpers/-debugger', [
    'require',
    'exports',
    'module',
    'can-log',
    'can-reflect',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var canLog = require('can-log');
    function noop() {
    }
    var resolveValue = noop;
    var evaluateArgs = noop;
    var __testing = {};
    if (process.env.NODE_ENV !== 'production') {
        var canReflect = require('can-reflect');
        var canSymbol = require('can-symbol');
        __testing = { allowDebugger: true };
        resolveValue = function (value) {
            if (value && value[canSymbol.for('can.getValue')]) {
                return canReflect.getValue(value);
            }
            return value;
        };
        evaluateArgs = function (left, right) {
            switch (arguments.length) {
            case 0:
                return true;
            case 1:
                return !!resolveValue(left);
            case 2:
                return resolveValue(left) === resolveValue(right);
            default:
                canLog.log([
                    'Usage:',
                    '  {{debugger}}: break any time this helper is evaluated',
                    '  {{debugger condition}}: break when `condition` is truthy',
                    '  {{debugger left right}}: break when `left` === `right`'
                ].join('\n'));
                throw new Error('{{debugger}} must have less than three arguments');
            }
        };
    }
    function debuggerHelper(left, right) {
        if (process.env.NODE_ENV !== 'production') {
            var shouldBreak = evaluateArgs.apply(null, Array.prototype.slice.call(arguments, 0, -1));
            if (!shouldBreak) {
                return;
            }
            var options = arguments[arguments.length - 1], scope = options && options.scope;
            var get = function (path) {
                return scope.get(path);
            };
            debuggerHelper._lastGet = get;
            canLog.log('Use `get(<path>)` to debug this template');
            var allowDebugger = __testing.allowDebugger;
            if (allowDebugger) {
                debugger;
                return;
            }
        }
        canLog.warn('Forgotten {{debugger}} helper');
    }
    debuggerHelper.requiresOptionsArgument = true;
    module.exports = {
        helper: debuggerHelper,
        evaluateArgs: evaluateArgs,
        resolveValue: resolveValue,
        __testing: __testing
    };
});
/*can-stache@4.17.19#src/truthy-observable*/
define('can-stache@4.17.19#src/truthy-observable', [
    'require',
    'exports',
    'module',
    'can-observation',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var Observation = require('can-observation');
    var canReflect = require('can-reflect');
    module.exports = function (observable) {
        return new Observation(function truthyObservation() {
            var val = canReflect.getValue(observable);
            return !!val;
        });
    };
});
/*can-stache@4.17.19#helpers/converter*/
define('can-stache@4.17.19#helpers/converter', [
    'require',
    'exports',
    'module',
    '../src/set-identifier',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var SetIdentifier = require('../src/set-identifier');
    var canReflect = require('can-reflect');
    function makeConverter(getterSetter) {
        getterSetter = getterSetter || {};
        return function (newVal, source) {
            var args = canReflect.toArray(arguments);
            if (newVal instanceof SetIdentifier) {
                return typeof getterSetter.set === 'function' ? getterSetter.set.apply(this, [newVal.value].concat(args.slice(1))) : source(newVal.value);
            } else {
                return typeof getterSetter.get === 'function' ? getterSetter.get.apply(this, args) : args[0];
            }
        };
    }
    module.exports = makeConverter;
});
/*can-stache@4.17.19#helpers/-for-of*/
define('can-stache@4.17.19#helpers/-for-of', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-observation',
    'can-view-live',
    'can-view-nodelist',
    '../src/expression',
    '../src/key-observable'
], function (require, exports, module) {
    var canReflect = require('can-reflect');
    var Observation = require('can-observation');
    var live = require('can-view-live');
    var nodeLists = require('can-view-nodelist');
    var expression = require('../src/expression');
    var KeyObservable = require('../src/key-observable');
    var bindAndRead = function (value) {
        if (value && canReflect.isValueLike(value)) {
            Observation.temporarilyBind(value);
            return canReflect.getValue(value);
        } else {
            return value;
        }
    };
    function forOfObject(object, variableName, options) {
        var result = [];
        canReflect.each(object, function (val, key) {
            var value = new KeyObservable(object, key.replace(/\./g, '\\.'));
            var variableScope = {};
            if (variableName !== undefined) {
                variableScope[variableName] = value;
            }
            result.push(options.fn(options.scope.add({ key: key }, { special: true }).addLetContext(variableScope)));
        });
        return options.stringOnly ? result.join('') : result;
    }
    var forHelper = function (helperOptions) {
        if (helperOptions.exprData.argExprs.length !== 1) {
            throw new Error('for(of) broken syntax');
        }
        var helperExpr = helperOptions.exprData.argExprs[0].expr;
        var variableName, valueLookup, valueObservable;
        if (helperExpr instanceof expression.Lookup) {
            valueObservable = helperExpr.value(helperOptions.scope);
        } else if (helperExpr instanceof expression.Helper) {
            var inLookup = helperExpr.argExprs[0];
            if (inLookup.key !== 'of') {
                throw new Error('for(of) broken syntax');
            }
            variableName = helperExpr.methodExpr.key;
            valueLookup = helperExpr.argExprs[1];
            valueObservable = valueLookup.value(helperOptions.scope);
        }
        var items = valueObservable;
        var args = [].slice.call(arguments), options = args.pop(), resolved = bindAndRead(items);
        if (resolved && !canReflect.isListLike(resolved)) {
            return forOfObject(resolved, variableName, helperOptions);
        }
        if (options.stringOnly) {
            var parts = [];
            canReflect.eachIndex(resolved, function (value, index) {
                var variableScope = {};
                if (variableName !== undefined) {
                    variableScope[variableName] = value;
                }
                parts.push(helperOptions.fn(options.scope.add({ index: index }, { special: true }).addLetContext(variableScope)));
            });
            return parts.join('');
        } else {
            options.metadata.rendered = true;
            return function (el) {
                var nodeList = [el];
                nodeList.expression = 'live.list';
                nodeLists.register(nodeList, null, options.nodeList, true);
                nodeLists.update(options.nodeList, [el]);
                var cb = function (item, index, parentNodeList) {
                    var variableScope = {};
                    if (variableName !== undefined) {
                        variableScope[variableName] = item;
                    }
                    return options.fn(options.scope.add({ index: index }, { special: true }).addLetContext(variableScope), options.options, parentNodeList);
                };
                live.list(el, items, cb, options.context, el.parentNode, nodeList, function (list, parentNodeList) {
                    return options.inverse(options.scope, options.options, parentNodeList);
                });
            };
        }
    };
    forHelper.isLiveBound = true;
    forHelper.requiresOptionsArgument = true;
    forHelper.ignoreArgLookup = function ignoreArgLookup(index) {
        return index === 0;
    };
    module.exports = forHelper;
});
/*can-stache@4.17.19#helpers/-let*/
define('can-stache@4.17.19#helpers/-let', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-observation-recorder'
], function (require, exports, module) {
    var canReflect = require('can-reflect');
    var ObservationRecorder = require('can-observation-recorder');
    function isVariable(scope) {
        return scope._meta.variable === true;
    }
    var letHelper = ObservationRecorder.ignore(function (options) {
        if (options.isSection) {
            return options.fn(options.scope.addLetContext(options.hash));
        }
        var variableScope = options.scope.getScope(isVariable);
        if (!variableScope) {
            throw new Error('There is no variable scope!');
        }
        canReflect.assignMap(variableScope._context, options.hash);
        return document.createTextNode('');
    });
    module.exports = letHelper;
});
/*can-stache@4.17.19#helpers/-portal*/
define('can-stache@4.17.19#helpers/-portal', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-view-live',
    'can-view-nodelist',
    'can-observation',
    'can-globals/document/document',
    'can-dom-mutate',
    'can-dom-mutate/node',
    'can-symbol'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        var canReflect = require('can-reflect');
        var live = require('can-view-live');
        var nodeLists = require('can-view-nodelist');
        var Observation = require('can-observation');
        var getDocument = require('can-globals/document/document');
        var domMutate = require('can-dom-mutate');
        var domMutateNode = require('can-dom-mutate/node');
        var canSymbol = require('can-symbol');
        var keepNodeSymbol = canSymbol.for('done.keepNode');
        function portalHelper(elementObservable, options) {
            function evaluator() {
                var frag = options.fn(options.scope.addLetContext({}), options.options);
                var child = frag.firstChild;
                while (child) {
                    child[keepNodeSymbol] = true;
                    child = child.nextSibling;
                }
                return frag;
            }
            var el, nodeList, removeNodeRemovalListener;
            function teardown() {
                var root = el;
                if (removeNodeRemovalListener) {
                    removeNodeRemovalListener();
                    removeNodeRemovalListener = null;
                }
                if (el) {
                    canReflect.offValue(elementObservable, getElementAndRender);
                    el = null;
                }
                if (nodeList) {
                    canReflect.eachListLike(nodeList, function (node) {
                        if (root === node.parentNode) {
                            domMutateNode.removeChild.call(root, node);
                        }
                    });
                    nodeList = null;
                }
            }
            function getElementAndRender() {
                teardown();
                el = canReflect.getValue(elementObservable);
                if (el) {
                    var node = getDocument().createTextNode('');
                    domMutateNode.appendChild.call(el, node);
                    nodeList = [node];
                    nodeList.expression = 'live.html';
                    nodeLists.register(nodeList, null, null, true);
                    var observable = new Observation(evaluator, null, { isObservable: false });
                    live.html(node, observable, el, nodeList);
                    removeNodeRemovalListener = domMutate.onNodeRemoval(el, teardown);
                } else {
                    options.metadata.rendered = true;
                }
                canReflect.onValue(elementObservable, getElementAndRender);
            }
            getElementAndRender();
            return function (el) {
                var doc = getDocument();
                var comment = doc.createComment('portal(' + canReflect.getName(elementObservable) + ')');
                var frag = doc.createDocumentFragment();
                domMutateNode.appendChild.call(frag, comment);
                nodeLists.replace([el], frag);
                var nodeList = [comment];
                nodeList.expression = 'portal';
                nodeLists.register(nodeList, teardown, options.nodeList, true);
                nodeLists.update(options.nodeList, [comment]);
            };
        }
        portalHelper.isLiveBound = true;
        portalHelper.requiresOptionsArgument = true;
        module.exports = portalHelper;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-stache@4.17.19#helpers/core*/
define('can-stache@4.17.19#helpers/core', [
    'require',
    'exports',
    'module',
    'can-view-live',
    'can-view-nodelist',
    '../src/utils',
    'can-globals/base-url/base-url',
    'can-join-uris',
    'can-assign',
    'can-log/dev/dev',
    'can-reflect',
    './-debugger',
    '../src/key-observable',
    'can-observation',
    '../src/truthy-observable',
    'can-stache-helpers',
    './converter',
    'can-dom-data',
    './-for-of',
    './-let',
    './-portal'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var live = require('can-view-live');
        var nodeLists = require('can-view-nodelist');
        var utils = require('../src/utils');
        var getBaseURL = require('can-globals/base-url/base-url');
        var joinURIs = require('can-join-uris');
        var assign = require('can-assign');
        var dev = require('can-log/dev/dev');
        var canReflect = require('can-reflect');
        var debuggerHelper = require('./-debugger').helper;
        var KeyObservable = require('../src/key-observable');
        var Observation = require('can-observation');
        var TruthyObservable = require('../src/truthy-observable');
        var helpers = require('can-stache-helpers');
        var makeConverter = require('./converter');
        var domData = require('can-dom-data');
        var forHelper = require('./-for-of');
        var letHelper = require('./-let');
        var portalHelper = require('./-portal');
        var builtInHelpers = {};
        var builtInConverters = {};
        var converterPackages = new WeakMap();
        var helpersCore = {
            looksLikeOptions: function (options) {
                return options && typeof options.fn === 'function' && typeof options.inverse === 'function';
            },
            resolve: function (value) {
                if (value && canReflect.isValueLike(value)) {
                    return canReflect.getValue(value);
                } else {
                    return value;
                }
            },
            resolveHash: function (hash) {
                var params = {};
                for (var prop in hash) {
                    params[prop] = helpersCore.resolve(hash[prop]);
                }
                return params;
            },
            bindAndRead: function (value) {
                if (value && canReflect.isValueLike(value)) {
                    Observation.temporarilyBind(value);
                    return canReflect.getValue(value);
                } else {
                    return value;
                }
            },
            registerHelper: function (name, callback) {
                if (process.env.NODE_ENV !== 'production') {
                    if (helpers[name]) {
                        dev.warn('The helper ' + name + ' has already been registered.');
                    }
                }
                callback.requiresOptionsArgument = true;
                helpers[name] = callback;
            },
            registerHelpers: function (helpers) {
                var name, callback;
                for (name in helpers) {
                    callback = helpers[name];
                    helpersCore.registerHelper(name, helpersCore.makeSimpleHelper(callback));
                }
            },
            registerConverter: function (name, getterSetter) {
                helpersCore.registerHelper(name, makeConverter(getterSetter));
            },
            makeSimpleHelper: function (fn) {
                return function () {
                    var realArgs = [];
                    canReflect.eachIndex(arguments, function (val) {
                        realArgs.push(helpersCore.resolve(val));
                    });
                    return fn.apply(this, realArgs);
                };
            },
            addHelper: function (name, callback) {
                if (typeof name === 'object') {
                    return helpersCore.registerHelpers(name);
                }
                return helpersCore.registerHelper(name, helpersCore.makeSimpleHelper(callback));
            },
            addConverter: function (name, getterSetter) {
                if (typeof name === 'object') {
                    if (!converterPackages.has(name)) {
                        converterPackages.set(name, true);
                        canReflect.eachKey(name, function (getterSetter, name) {
                            helpersCore.addConverter(name, getterSetter);
                        });
                    }
                    return;
                }
                var helper = makeConverter(getterSetter);
                helper.isLiveBound = true;
                helpersCore.registerHelper(name, helper);
            },
            addLiveHelper: function (name, callback) {
                callback.isLiveBound = true;
                return helpersCore.registerHelper(name, callback);
            },
            getHelper: function (name, scope) {
                var helper = scope && scope.getHelper(name);
                if (!helper) {
                    helper = helpers[name];
                }
                return helper;
            },
            __resetHelpers: function () {
                for (var helper in helpers) {
                    delete helpers[helper];
                }
                converterPackages.delete(builtInConverters);
                helpersCore.addBuiltInHelpers();
                helpersCore.addBuiltInConverters();
            },
            addBuiltInHelpers: function () {
                canReflect.each(builtInHelpers, function (helper, helperName) {
                    helpers[helperName] = helper;
                });
            },
            addBuiltInConverters: function () {
                helpersCore.addConverter(builtInConverters);
            },
            _makeLogicHelper: function (name, logic) {
                var logicHelper = assign(function () {
                    var args = Array.prototype.slice.call(arguments, 0), options;
                    if (helpersCore.looksLikeOptions(args[args.length - 1])) {
                        options = args.pop();
                    }
                    function callLogic() {
                        if (options) {
                            return logic(args) ? true : false;
                        } else {
                            return logic(args);
                        }
                    }
                    if (process.env.NODE_ENV !== 'production') {
                        Object.defineProperty(callLogic, 'name', {
                            value: name + '(' + args.map(function (arg) {
                                return canReflect.getName(arg);
                            }).join(',') + ')',
                            configurable: true
                        });
                    }
                    var callFn = new Observation(callLogic);
                    if (options) {
                        return callFn.get() ? options.fn() : options.inverse();
                    } else {
                        return callFn.get();
                    }
                }, {
                    requiresOptionsArgument: true,
                    isLiveBound: true
                });
                if (process.env.NODE_ENV !== 'production') {
                    Object.defineProperty(logicHelper, 'name', {
                        value: name,
                        configurable: true
                    });
                }
                return logicHelper;
            }
        };
        var ifHelper = assign(function ifHelper(expr, options) {
            var value;
            if (expr && canReflect.isValueLike(expr)) {
                value = canReflect.getValue(new TruthyObservable(expr));
            } else {
                value = !!helpersCore.resolve(expr);
            }
            if (options) {
                return value ? options.fn(options.scope || this) : options.inverse(options.scope || this);
            }
            return !!value;
        }, {
            requiresOptionsArgument: true,
            isLiveBound: true
        });
        var isHelper = helpersCore._makeLogicHelper('eq', function eqHelper(args) {
            var curValue, lastValue;
            for (var i = 0; i < args.length; i++) {
                curValue = helpersCore.resolve(args[i]);
                curValue = typeof curValue === 'function' ? curValue() : curValue;
                if (i > 0) {
                    if (curValue !== lastValue) {
                        return false;
                    }
                }
                lastValue = curValue;
            }
            return true;
        });
        var andHelper = helpersCore._makeLogicHelper('and', function andHelper(args) {
            if (args.length === 0) {
                return false;
            }
            var last;
            for (var i = 0, len = args.length; i < len; i++) {
                last = helpersCore.resolve(args[i]);
                if (!last) {
                    return last;
                }
            }
            return last;
        });
        var orHelper = helpersCore._makeLogicHelper('or', function orHelper(args) {
            if (args.length === 0) {
                return false;
            }
            var last;
            for (var i = 0, len = args.length; i < len; i++) {
                last = helpersCore.resolve(args[i]);
                if (last) {
                    return last;
                }
            }
            return last;
        });
        var switchHelper = function (expression, options) {
            helpersCore.resolve(expression);
            var found = false;
            var caseHelper = function (value, options) {
                if (!found && helpersCore.resolve(expression) === helpersCore.resolve(value)) {
                    found = true;
                    return options.fn(options.scope);
                }
            };
            caseHelper.requiresOptionsArgument = true;
            var defaultHelper = function (options) {
                if (!found) {
                    return options ? options.scope.peek('this') : true;
                }
            };
            defaultHelper.requiresOptionsArgument = true;
            canReflect.assignSymbols(defaultHelper, {
                'can.isValueLike': true,
                'can.isFunctionLike': false,
                'can.getValue': function () {
                    return this(options);
                }
            });
            var newScope = options.scope.add({
                case: caseHelper,
                default: defaultHelper
            }, { notContext: true });
            return options.fn(newScope, options);
        };
        switchHelper.requiresOptionsArgument = true;
        var domDataHelper = function (attr, value) {
            var data = (helpersCore.looksLikeOptions(value) ? value.context : value) || this;
            return function setDomData(el) {
                domData.set(el, attr, data);
            };
        };
        var joinBaseHelper = function (firstExpr) {
            var args = [].slice.call(arguments);
            var options = args.pop();
            var moduleReference = args.map(function (expr) {
                var value = helpersCore.resolve(expr);
                return typeof value === 'function' ? value() : value;
            }).join('');
            var templateModule = canReflect.getKeyValue(options.scope.templateContext.helpers, 'module');
            var parentAddress = templateModule ? templateModule.uri : undefined;
            var isRelative = moduleReference[0] === '.';
            if (isRelative && parentAddress) {
                return joinURIs(parentAddress, moduleReference);
            } else {
                var baseURL = typeof System !== 'undefined' && (System.renderingBaseURL || System.baseURL) || getBaseURL();
                if (moduleReference[0] !== '/' && baseURL[baseURL.length - 1] !== '/') {
                    baseURL += '/';
                }
                return joinURIs(baseURL, moduleReference);
            }
        };
        joinBaseHelper.requiresOptionsArgument = true;
        var eachHelper = function (items) {
            var args = [].slice.call(arguments), options = args.pop(), hashExprs = options.exprData.hashExprs, resolved = helpersCore.bindAndRead(items), hashOptions, aliases;
            if (canReflect.size(hashExprs) > 0) {
                hashOptions = {};
                canReflect.eachKey(hashExprs, function (exprs, key) {
                    hashOptions[exprs.key] = key;
                });
            }
            if ((canReflect.isObservableLike(resolved) && canReflect.isListLike(resolved) || canReflect.isListLike(resolved) && canReflect.isValueLike(items)) && !options.stringOnly) {
                options.metadata.rendered = true;
                return function (el) {
                    var nodeList = [el];
                    nodeList.expression = 'live.list';
                    nodeLists.register(nodeList, null, options.nodeList, true);
                    nodeLists.update(options.nodeList, [el]);
                    var cb = function (item, index, parentNodeList) {
                        var aliases = {};
                        if (canReflect.size(hashOptions) > 0) {
                            if (hashOptions.value) {
                                aliases[hashOptions.value] = item;
                            }
                            if (hashOptions.index) {
                                aliases[hashOptions.index] = index;
                            }
                        }
                        return options.fn(options.scope.add(aliases, { notContext: true }).add({ index: index }, { special: true }).add(item), options.options, parentNodeList);
                    };
                    live.list(el, items, cb, options.context, el.parentNode, nodeList, function (list, parentNodeList) {
                        return options.inverse(options.scope.add(list), options.options, parentNodeList);
                    });
                };
            }
            var expr = helpersCore.resolve(items), result;
            if (!!expr && canReflect.isListLike(expr)) {
                result = utils.getItemsFragContent(expr, options, options.scope);
                return options.stringOnly ? result.join('') : result;
            } else if (canReflect.isObservableLike(expr) && canReflect.isMapLike(expr) || expr instanceof Object) {
                result = [];
                canReflect.each(expr, function (val, key) {
                    var value = new KeyObservable(expr, key);
                    aliases = {};
                    if (canReflect.size(hashOptions) > 0) {
                        if (hashOptions.value) {
                            aliases[hashOptions.value] = value;
                        }
                        if (hashOptions.key) {
                            aliases[hashOptions.key] = key;
                        }
                    }
                    result.push(options.fn(options.scope.add(aliases, { notContext: true }).add({ key: key }, { special: true }).add(value)));
                });
                return options.stringOnly ? result.join('') : result;
            }
        };
        eachHelper.isLiveBound = true;
        eachHelper.requiresOptionsArgument = true;
        eachHelper.ignoreArgLookup = function ignoreArgLookup(index) {
            return index === 1;
        };
        var indexHelper = assign(function indexHelper(offset, options) {
            if (!options) {
                options = offset;
                offset = 0;
            }
            var index = options.scope.peek('scope.index');
            return '' + ((typeof index === 'function' ? index() : index) + offset);
        }, { requiresOptionsArgument: true });
        var withHelper = function (expr, options) {
            var ctx = expr;
            if (!options) {
                options = expr;
                expr = true;
                ctx = options.hash;
            } else {
                expr = helpersCore.resolve(expr);
                if (options.hash && canReflect.size(options.hash) > 0) {
                    ctx = options.scope.add(options.hash, { notContext: true }).add(ctx);
                }
            }
            return options.fn(ctx || {});
        };
        withHelper.requiresOptionsArgument = true;
        var dataHelper = function (attr, value) {
            var data = (helpersCore.looksLikeOptions(value) ? value.context : value) || this;
            return function setData(el) {
                if (process.env.NODE_ENV !== 'production') {
                    dev.warn('The {{data}} helper has been deprecated; use {{domData}} instead: https://canjs.com/doc/can-stache.helpers.domData.html');
                }
                domData.set(el, attr, data);
            };
        };
        var unlessHelper = function (expr, options) {
            if (!options) {
                return !ifHelper.apply(this, [expr]);
            }
            return ifHelper.apply(this, [
                expr,
                assign(assign({}, options), {
                    fn: options.inverse,
                    inverse: options.fn
                })
            ]);
        };
        unlessHelper.requiresOptionsArgument = true;
        unlessHelper.isLiveBound = true;
        var notConverter = {
            get: function (obs, options) {
                if (helpersCore.looksLikeOptions(options)) {
                    return canReflect.getValue(obs) ? options.inverse() : options.fn();
                } else {
                    return !canReflect.getValue(obs);
                }
            },
            set: function (newVal, obs) {
                canReflect.setValue(obs, !newVal);
            }
        };
        assign(builtInHelpers, {
            'debugger': debuggerHelper,
            each: eachHelper,
            eachOf: eachHelper,
            index: indexHelper,
            'if': ifHelper,
            is: isHelper,
            eq: isHelper,
            unless: unlessHelper,
            'with': withHelper,
            console: console,
            data: dataHelper,
            domData: domDataHelper,
            'switch': switchHelper,
            joinBase: joinBaseHelper,
            and: andHelper,
            or: orHelper,
            'let': letHelper,
            'for': forHelper,
            portal: portalHelper
        });
        assign(builtInConverters, { 'not': notConverter });
        helpersCore.addBuiltInHelpers();
        helpersCore.addBuiltInConverters();
        module.exports = helpersCore;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-stache-ast@1.1.0#controls*/
define('can-stache-ast@1.1.0#controls', function (require, exports, module) {
    'use strict';
    var mustacheLineBreakRegExp = /(?:(^|\r?\n)(\s*)(\{\{([\s\S]*)\}\}\}?)([^\S\n\r]*)($|\r?\n))|(\{\{([\s\S]*)\}\}\}?)/g, mustacheWhitespaceRegExp = /(\s*)(\{\{\{?)(-?)([\s\S]*?)(-?)(\}\}\}?)(\s*)/g;
    function splitModeFromExpression(expression, state) {
        expression = expression.trim();
        var mode = expression.charAt(0);
        if ('#/{&^>!<'.indexOf(mode) >= 0) {
            expression = expression.substr(1).trim();
        } else {
            mode = null;
        }
        if (mode === '{' && state.node) {
            mode = null;
        }
        return {
            mode: mode,
            expression: expression
        };
    }
    function cleanLineEndings(template) {
        return template.replace(mustacheLineBreakRegExp, function (whole, returnBefore, spaceBefore, special, expression, spaceAfter, returnAfter, spaceLessSpecial, spaceLessExpression, matchIndex) {
            spaceAfter = spaceAfter || '';
            returnBefore = returnBefore || '';
            spaceBefore = spaceBefore || '';
            var modeAndExpression = splitModeFromExpression(expression || spaceLessExpression, {});
            if (spaceLessSpecial || '>{'.indexOf(modeAndExpression.mode) >= 0) {
                return whole;
            } else if ('^#!/'.indexOf(modeAndExpression.mode) >= 0) {
                spaceBefore = returnBefore + spaceBefore && ' ';
                return spaceBefore + special + (matchIndex !== 0 && returnAfter.length ? returnBefore + '\n' : '');
            } else {
                return spaceBefore + special + spaceAfter + (spaceBefore.length || matchIndex !== 0 ? returnBefore + '\n' : '');
            }
        });
    }
    function whiteSpaceReplacement(whole, spaceBefore, bracketBefore, controlBefore, expression, controlAfter, bracketAfter, spaceAfter) {
        if (controlBefore === '-') {
            spaceBefore = '';
        }
        if (controlAfter === '-') {
            spaceAfter = '';
        }
        return spaceBefore + bracketBefore + expression + bracketAfter + spaceAfter;
    }
    function cleanWhitespaceControl(template) {
        return template.replace(mustacheWhitespaceRegExp, whiteSpaceReplacement);
    }
    exports.cleanLineEndings = cleanLineEndings;
    exports.cleanWhitespaceControl = cleanWhitespaceControl;
});
/*can-stache-ast@1.1.0#can-stache-ast*/
define('can-stache-ast@1.1.0#can-stache-ast', [
    'require',
    'exports',
    'module',
    './controls',
    'can-view-parser'
], function (require, exports, module) {
    'use strict';
    var controls = require('./controls');
    var parser = require('can-view-parser');
    exports.parse = function (filename, source) {
        if (arguments.length === 1) {
            source = arguments[0];
            filename = undefined;
        }
        var template = source;
        template = controls.cleanWhitespaceControl(template);
        template = controls.cleanLineEndings(template);
        var imports = [], dynamicImports = [], importDeclarations = [], ases = {}, attributes = new Map(), inImport = false, inFrom = false, inAs = false, isUnary = false, importIsDynamic = false, currentAs = '', currentFrom = '', currentAttrName = null;
        function processImport(line) {
            if (currentAs) {
                ases[currentAs] = currentFrom;
                currentAs = '';
            }
            if (importIsDynamic) {
                dynamicImports.push(currentFrom);
            } else {
                imports.push(currentFrom);
            }
            importDeclarations.push({
                specifier: currentFrom,
                loc: { line: line },
                attributes: attributes
            });
            attributes = new Map();
        }
        var program = parser(template, {
            filename: filename,
            start: function (tagName, unary) {
                if (tagName === 'can-import') {
                    isUnary = unary;
                    importIsDynamic = false;
                    inImport = true;
                } else if (tagName === 'can-dynamic-import') {
                    isUnary = unary;
                    importIsDynamic = true;
                    inImport = true;
                } else if (inImport) {
                    importIsDynamic = true;
                    inImport = false;
                }
            },
            attrStart: function (attrName) {
                currentAttrName = attrName;
                attributes.set(currentAttrName, true);
                if (attrName === 'from') {
                    inFrom = true;
                } else if (attrName === 'as' || attrName === 'export-as') {
                    inAs = true;
                }
            },
            attrEnd: function (attrName) {
                if (attrName === 'from') {
                    inFrom = false;
                } else if (attrName === 'as' || attrName === 'export-as') {
                    inAs = false;
                }
            },
            attrValue: function (value) {
                if (inImport) {
                    attributes.set(currentAttrName, value);
                }
                if (inFrom && inImport) {
                    currentFrom = value;
                } else if (inAs && inImport) {
                    currentAs = value;
                }
            },
            end: function (tagName, unary, line) {
                if ((tagName === 'can-import' || tagName === 'can-dynamic-import') && isUnary) {
                    processImport(line);
                }
            },
            close: function (tagName, unary, line) {
                if (tagName === 'can-import' || tagName === 'can-dynamic-import') {
                    processImport(line);
                }
            },
            chars: function (text) {
                if (text.trim().length > 0) {
                    importIsDynamic = true;
                }
            },
            special: function () {
                importIsDynamic = true;
            }
        }, true);
        return {
            intermediate: program,
            program: program,
            imports: imports,
            dynamicImports: dynamicImports,
            importDeclarations: importDeclarations,
            ases: ases,
            exports: ases
        };
    };
});
/*can-import-module@1.2.0#can-import-module*/
define('can-import-module@1.2.0#can-import-module', [
    'require',
    'exports',
    'module',
    'can-globals/global/global',
    'can-namespace'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getGlobal = require('can-globals/global/global');
        var namespace = require('can-namespace');
        module.exports = namespace.import = function (moduleName, parentName) {
            return new Promise(function (resolve, reject) {
                try {
                    var global = getGlobal();
                    if (typeof global.System === 'object' && isFunction(global.System['import'])) {
                        global.System['import'](moduleName, { name: parentName }).then(resolve, reject);
                    } else if (global.define && global.define.amd) {
                        global.require([moduleName], function (value) {
                            resolve(value);
                        });
                    } else if (global.require) {
                        resolve(global.require(moduleName));
                    } else {
                        if (typeof stealRequire !== 'undefined') {
                            steal.import(moduleName, { name: parentName }).then(resolve, reject);
                        } else {
                            resolve();
                        }
                    }
                } catch (err) {
                    reject(err);
                }
            });
        };
        function isFunction(fn) {
            return typeof fn === 'function';
        }
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-stache@4.17.19#can-stache*/
define('can-stache@4.17.19#can-stache', [
    'require',
    'exports',
    'module',
    'can-view-parser',
    'can-view-callbacks',
    './src/html_section',
    './src/text_section',
    './src/mustache_core',
    './helpers/core',
    'can-stache-ast',
    './src/utils',
    'can-attribute-encoder',
    'can-log/dev/dev',
    'can-namespace',
    'can-globals/document/document',
    'can-assign',
    'can-import-module',
    'can-reflect',
    'can-view-scope',
    'can-view-scope/template-context',
    'can-observation-recorder',
    'can-symbol',
    'can-view-target',
    'can-view-nodelist'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var parser = require('can-view-parser');
        var viewCallbacks = require('can-view-callbacks');
        var HTMLSectionBuilder = require('./src/html_section');
        var TextSectionBuilder = require('./src/text_section');
        var mustacheCore = require('./src/mustache_core');
        var mustacheHelpers = require('./helpers/core');
        var getIntermediateAndImports = require('can-stache-ast').parse;
        var utils = require('./src/utils');
        var makeRendererConvertScopes = utils.makeRendererConvertScopes;
        var last = utils.last;
        var attributeEncoder = require('can-attribute-encoder');
        var dev = require('can-log/dev/dev');
        var namespace = require('can-namespace');
        var DOCUMENT = require('can-globals/document/document');
        var assign = require('can-assign');
        var importer = require('can-import-module');
        var canReflect = require('can-reflect');
        var Scope = require('can-view-scope');
        var TemplateContext = require('can-view-scope/template-context');
        var ObservationRecorder = require('can-observation-recorder');
        var canSymbol = require('can-symbol');
        require('can-view-target');
        require('can-view-nodelist');
        if (!viewCallbacks.tag('content')) {
            viewCallbacks.tag('content', function (el, tagData) {
                return tagData.scope;
            });
        }
        var isViewSymbol = canSymbol.for('can.isView');
        var wrappedAttrPattern = /[{(].*[)}]/;
        var colonWrappedAttrPattern = /^on:|(:to|:from|:bind)$|.*:to:on:.*/;
        var svgNamespace = 'http://www.w3.org/2000/svg', xmlnsAttrNamespaceURI = 'http://www.w3.org/2000/xmlns/', xlinkHrefAttrNamespaceURI = 'http://www.w3.org/1999/xlink';
        var namespaces = {
                'svg': svgNamespace,
                'g': svgNamespace,
                'defs': svgNamespace,
                'path': svgNamespace,
                'filter': svgNamespace,
                'feMorphology': svgNamespace,
                'feGaussianBlur': svgNamespace,
                'feOffset': svgNamespace,
                'feComposite': svgNamespace,
                'feColorMatrix': svgNamespace,
                'use': svgNamespace
            }, attrsNamespacesURI = {
                'xmlns': xmlnsAttrNamespaceURI,
                'xlink:href': xlinkHrefAttrNamespaceURI
            }, textContentOnlyTag = {
                style: true,
                script: true
            };
        function stache(filename, template) {
            if (arguments.length === 1) {
                template = arguments[0];
                filename = undefined;
            }
            var inlinePartials = {};
            if (typeof template === 'string') {
                template = mustacheCore.cleanWhitespaceControl(template);
                template = mustacheCore.cleanLineEndings(template);
            }
            var section = new HTMLSectionBuilder(filename), state = {
                    node: null,
                    attr: null,
                    sectionElementStack: [],
                    text: false,
                    namespaceStack: [],
                    textContentOnly: null
                }, makeRendererAndUpdateSection = function (section, mode, stache, lineNo) {
                    if (mode === '>') {
                        section.add(mustacheCore.makeLiveBindingPartialRenderer(stache, copyState({
                            filename: section.filename,
                            lineNo: lineNo
                        })));
                    } else if (mode === '/') {
                        var createdSection = section.last();
                        if (createdSection.startedWith === '<') {
                            inlinePartials[stache] = section.endSubSectionAndReturnRenderer();
                            section.removeCurrentNode();
                        } else {
                            section.endSection();
                        }
                        if (process.env.NODE_ENV !== 'production') {
                            if (section instanceof HTMLSectionBuilder) {
                                var last = state.sectionElementStack[state.sectionElementStack.length - 1];
                                if (last.tag && last.type === 'section' && stache !== '' && stache !== last.tag) {
                                    if (filename) {
                                        dev.warn(filename + ':' + lineNo + ': unexpected closing tag {{/' + stache + '}} expected {{/' + last.tag + '}}');
                                    } else {
                                        dev.warn(lineNo + ': unexpected closing tag {{/' + stache + '}} expected {{/' + last.tag + '}}');
                                    }
                                }
                            }
                        }
                        if (section instanceof HTMLSectionBuilder) {
                            state.sectionElementStack.pop();
                        }
                    } else if (mode === 'else') {
                        section.inverse();
                    } else {
                        var makeRenderer = section instanceof HTMLSectionBuilder ? mustacheCore.makeLiveBindingBranchRenderer : mustacheCore.makeStringBranchRenderer;
                        if (mode === '{' || mode === '&') {
                            section.add(makeRenderer(null, stache, copyState({
                                filename: section.filename,
                                lineNo: lineNo
                            })));
                        } else if (mode === '#' || mode === '^' || mode === '<') {
                            var renderer = makeRenderer(mode, stache, copyState({
                                filename: section.filename,
                                lineNo: lineNo
                            }));
                            var sectionItem = { type: 'section' };
                            section.startSection(renderer);
                            section.last().startedWith = mode;
                            if (section instanceof HTMLSectionBuilder) {
                                if (process.env.NODE_ENV !== 'production') {
                                    var tag = typeof renderer.exprData.closingTag === 'function' ? renderer.exprData.closingTag() : stache;
                                    sectionItem.tag = tag;
                                }
                                state.sectionElementStack.push(sectionItem);
                            }
                        } else {
                            section.add(makeRenderer(null, stache, copyState({
                                text: true,
                                filename: section.filename,
                                lineNo: lineNo
                            })));
                        }
                    }
                }, isDirectlyNested = function () {
                    var lastElement = state.sectionElementStack[state.sectionElementStack.length - 1];
                    return state.sectionElementStack.length ? lastElement.type === 'section' || lastElement.type === 'custom' : true;
                }, copyState = function (overwrites) {
                    var cur = {
                        tag: state.node && state.node.tag,
                        attr: state.attr && state.attr.name,
                        directlyNested: isDirectlyNested(),
                        textContentOnly: !!state.textContentOnly
                    };
                    return overwrites ? assign(cur, overwrites) : cur;
                }, addAttributesCallback = function (node, callback) {
                    if (!node.attributes) {
                        node.attributes = [];
                    }
                    node.attributes.unshift(callback);
                };
            parser(template, {
                filename: filename,
                start: function (tagName, unary, lineNo) {
                    var matchedNamespace = namespaces[tagName];
                    if (matchedNamespace && !unary) {
                        state.namespaceStack.push(matchedNamespace);
                    }
                    state.node = {
                        tag: tagName,
                        children: [],
                        namespace: matchedNamespace || last(state.namespaceStack)
                    };
                },
                end: function (tagName, unary, lineNo) {
                    var isCustomTag = viewCallbacks.tag(tagName);
                    var directlyNested = isDirectlyNested();
                    if (unary) {
                        section.add(state.node);
                        if (isCustomTag) {
                            addAttributesCallback(state.node, function (scope, parentNodeList) {
                                if (process.env.NODE_ENV !== 'production') {
                                    scope.set('scope.lineNumber', lineNo);
                                }
                                viewCallbacks.tagHandler(this, tagName, {
                                    scope: scope,
                                    subtemplate: null,
                                    templateType: 'stache',
                                    parentNodeList: parentNodeList,
                                    directlyNested: directlyNested
                                });
                            });
                        }
                    } else {
                        section.push(state.node);
                        state.sectionElementStack.push({
                            type: isCustomTag ? 'custom' : null,
                            tag: isCustomTag ? null : tagName,
                            templates: {},
                            directlyNested: directlyNested
                        });
                        if (isCustomTag) {
                            section.startSubSection();
                        } else if (textContentOnlyTag[tagName]) {
                            state.textContentOnly = new TextSectionBuilder(filename);
                        }
                    }
                    state.node = null;
                },
                close: function (tagName, lineNo) {
                    var matchedNamespace = namespaces[tagName];
                    if (matchedNamespace) {
                        state.namespaceStack.pop();
                    }
                    var isCustomTag = viewCallbacks.tag(tagName), renderer;
                    if (isCustomTag) {
                        renderer = section.endSubSectionAndReturnRenderer();
                    }
                    if (textContentOnlyTag[tagName]) {
                        section.last().add(state.textContentOnly.compile(copyState()));
                        state.textContentOnly = null;
                    }
                    var oldNode = section.pop();
                    if (isCustomTag) {
                        if (tagName === 'can-template') {
                            var parent = state.sectionElementStack[state.sectionElementStack.length - 2];
                            if (renderer) {
                                parent.templates[oldNode.attrs.name] = makeRendererConvertScopes(renderer);
                            }
                            section.removeCurrentNode();
                        } else {
                            var current = state.sectionElementStack[state.sectionElementStack.length - 1];
                            addAttributesCallback(oldNode, function (scope, parentNodeList) {
                                if (process.env.NODE_ENV !== 'production') {
                                    scope.set('scope.lineNumber', lineNo);
                                }
                                viewCallbacks.tagHandler(this, tagName, {
                                    scope: scope,
                                    subtemplate: renderer ? makeRendererConvertScopes(renderer) : renderer,
                                    templateType: 'stache',
                                    parentNodeList: parentNodeList,
                                    templates: current.templates,
                                    directlyNested: current.directlyNested
                                });
                            });
                        }
                    }
                    state.sectionElementStack.pop();
                },
                attrStart: function (attrName, lineNo) {
                    if (state.node.section) {
                        state.node.section.add(attrName + '="');
                    } else {
                        state.attr = {
                            name: attrName,
                            value: ''
                        };
                    }
                },
                attrEnd: function (attrName, lineNo) {
                    var matchedAttrNamespacesURI = attrsNamespacesURI[attrName];
                    if (state.node.section) {
                        state.node.section.add('" ');
                    } else {
                        if (!state.node.attrs) {
                            state.node.attrs = {};
                        }
                        if (state.attr.section) {
                            state.node.attrs[state.attr.name] = state.attr.section.compile(copyState());
                        } else if (matchedAttrNamespacesURI) {
                            state.node.attrs[state.attr.name] = {
                                value: state.attr.value,
                                namespaceURI: attrsNamespacesURI[attrName]
                            };
                        } else {
                            state.node.attrs[state.attr.name] = state.attr.value;
                        }
                        var attrCallback = viewCallbacks.attr(attrName);
                        if (process.env.NODE_ENV !== 'production') {
                            var decodedAttrName = attributeEncoder.decode(attrName);
                            var weirdAttribute = !!wrappedAttrPattern.test(decodedAttrName) || !!colonWrappedAttrPattern.test(decodedAttrName);
                            if (weirdAttribute && !attrCallback) {
                                dev.warn('unknown attribute binding ' + decodedAttrName + '. Is can-stache-bindings imported?');
                            }
                        }
                        if (attrCallback) {
                            if (!state.node.attributes) {
                                state.node.attributes = [];
                            }
                            state.node.attributes.push(function (scope, nodeList) {
                                if (process.env.NODE_ENV !== 'production') {
                                    scope.set('scope.lineNumber', lineNo);
                                }
                                attrCallback(this, {
                                    attributeName: attrName,
                                    scope: scope,
                                    nodeList: nodeList
                                });
                            });
                        }
                        state.attr = null;
                    }
                },
                attrValue: function (value, lineNo) {
                    var section = state.node.section || state.attr.section;
                    if (section) {
                        section.add(value);
                    } else {
                        state.attr.value += value;
                    }
                },
                chars: function (text, lineNo) {
                    (state.textContentOnly || section).add(text);
                },
                special: function (text, lineNo) {
                    var firstAndText = mustacheCore.splitModeFromExpression(text, state), mode = firstAndText.mode, expression = firstAndText.expression;
                    if (expression === 'else') {
                        var inverseSection;
                        if (state.attr && state.attr.section) {
                            inverseSection = state.attr.section;
                        } else if (state.node && state.node.section) {
                            inverseSection = state.node.section;
                        } else {
                            inverseSection = state.textContentOnly || section;
                        }
                        inverseSection.inverse();
                        return;
                    }
                    if (mode === '!') {
                        return;
                    }
                    if (state.node && state.node.section) {
                        makeRendererAndUpdateSection(state.node.section, mode, expression, lineNo);
                        if (state.node.section.subSectionDepth() === 0) {
                            state.node.attributes.push(state.node.section.compile(copyState()));
                            delete state.node.section;
                        }
                    } else if (state.attr) {
                        if (!state.attr.section) {
                            state.attr.section = new TextSectionBuilder(filename);
                            if (state.attr.value) {
                                state.attr.section.add(state.attr.value);
                            }
                        }
                        makeRendererAndUpdateSection(state.attr.section, mode, expression, lineNo);
                    } else if (state.node) {
                        if (!state.node.attributes) {
                            state.node.attributes = [];
                        }
                        if (!mode) {
                            state.node.attributes.push(mustacheCore.makeLiveBindingBranchRenderer(null, expression, copyState({
                                filename: section.filename,
                                lineNo: lineNo
                            })));
                        } else if (mode === '#' || mode === '^') {
                            if (!state.node.section) {
                                state.node.section = new TextSectionBuilder(filename);
                            }
                            makeRendererAndUpdateSection(state.node.section, mode, expression, lineNo);
                        } else {
                            throw new Error(mode + ' is currently not supported within a tag.');
                        }
                    } else {
                        makeRendererAndUpdateSection(state.textContentOnly || section, mode, expression, lineNo);
                    }
                },
                comment: function (text) {
                    section.add({ comment: text });
                },
                done: function (lineNo) {
                    if (process.env.NODE_ENV !== 'production') {
                        var last = state.sectionElementStack[state.sectionElementStack.length - 1];
                        if (last && last.tag && last.type === 'section') {
                            if (filename) {
                                dev.warn(filename + ':' + lineNo + ': closing tag {{/' + last.tag + '}} was expected');
                            } else {
                                dev.warn(lineNo + ': closing tag {{/' + last.tag + '}} was expected');
                            }
                        }
                    }
                }
            });
            var renderer = section.compile();
            var scopifiedRenderer = ObservationRecorder.ignore(function (scope, options, nodeList) {
                if (nodeList === undefined && canReflect.isListLike(options)) {
                    nodeList = options;
                    options = undefined;
                }
                if (options && !options.helpers && !options.partials && !options.tags) {
                    options = { helpers: options };
                }
                canReflect.eachKey(options && options.helpers, function (helperValue) {
                    helperValue.requiresOptionsArgument = true;
                });
                var templateContext = new TemplateContext(options);
                canReflect.eachKey(inlinePartials, function (partial, partialName) {
                    canReflect.setKeyValue(templateContext.partials, partialName, partial);
                });
                canReflect.setKeyValue(templateContext, 'view', scopifiedRenderer);
                if (process.env.NODE_ENV !== 'production') {
                    canReflect.setKeyValue(templateContext, 'filename', section.filename);
                }
                if (!(scope instanceof Scope)) {
                    scope = new Scope(templateContext).add(scope);
                } else {
                    var templateContextScope = new Scope(templateContext);
                    templateContextScope._parent = scope._parent;
                    scope._parent = templateContextScope;
                }
                return renderer(scope.addLetContext(), nodeList);
            });
            scopifiedRenderer[isViewSymbol] = true;
            return scopifiedRenderer;
        }
        assign(stache, mustacheHelpers);
        stache.safeString = function (text) {
            return canReflect.assignSymbols({}, {
                'can.toDOM': function () {
                    return text;
                }
            });
        };
        stache.async = function (source) {
            var iAi = getIntermediateAndImports(source);
            var importPromises = iAi.imports.map(function (moduleName) {
                return importer(moduleName);
            });
            return Promise.all(importPromises).then(function () {
                return stache(iAi.intermediate);
            });
        };
        var templates = {};
        stache.from = mustacheCore.getTemplateById = function (id) {
            if (!templates[id]) {
                var el = DOCUMENT().getElementById(id);
                if (el) {
                    templates[id] = stache('#' + id, el.innerHTML);
                }
            }
            return templates[id];
        };
        stache.registerPartial = function (id, partial) {
            templates[id] = typeof partial === 'string' ? stache(partial) : partial;
        };
        stache.addBindings = viewCallbacks.attrs;
        module.exports = namespace.stache = stache;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-view-model@4.0.3#can-view-model*/
define('can-view-model@4.0.3#can-view-model', [
    'require',
    'exports',
    'module',
    'can-simple-map',
    'can-namespace',
    'can-globals/document/document',
    'can-reflect',
    'can-symbol'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var SimpleMap = require('can-simple-map');
        var ns = require('can-namespace');
        var getDocument = require('can-globals/document/document');
        var canReflect = require('can-reflect');
        var canSymbol = require('can-symbol');
        var viewModelSymbol = canSymbol.for('can.viewModel');
        module.exports = ns.viewModel = function (el, attr, val) {
            if (typeof el === 'string') {
                el = getDocument().querySelector(el);
            } else if (canReflect.isListLike(el) && !el.nodeType) {
                el = el[0];
            }
            if (canReflect.isObservableLike(attr) && canReflect.isMapLike(attr)) {
                el[viewModelSymbol] = attr;
                return;
            }
            var scope = el[viewModelSymbol];
            if (!scope) {
                scope = new SimpleMap();
                el[viewModelSymbol] = scope;
            }
            switch (arguments.length) {
            case 0:
            case 1:
                return scope;
            case 2:
                return canReflect.getKeyValue(scope, attr);
            default:
                canReflect.setKeyValue(scope, attr, val);
                return el;
            }
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-attribute-observable@1.2.6#event*/
define('can-attribute-observable@1.2.6#event', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-dom-events',
    'can-dom-events/helpers/util'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var domEvents = require('can-dom-events');
    var isDomEventTarget = require('can-dom-events/helpers/util').isDomEventTarget;
    var canEvent = {
        on: function on(eventName, handler, queue) {
            if (isDomEventTarget(this)) {
                domEvents.addEventListener(this, eventName, handler, queue);
            } else {
                canReflect.onKeyValue(this, eventName, handler, queue);
            }
        },
        off: function off(eventName, handler, queue) {
            if (isDomEventTarget(this)) {
                domEvents.removeEventListener(this, eventName, handler, queue);
            } else {
                canReflect.offKeyValue(this, eventName, handler, queue);
            }
        },
        one: function one(event, handler, queue) {
            var one = function () {
                canEvent.off.call(this, event, one, queue);
                return handler.apply(this, arguments);
            };
            canEvent.on.call(this, event, one, queue);
            return this;
        }
    };
    module.exports = canEvent;
});
/*can-attribute-observable@1.2.6#get-event-name*/
define('can-attribute-observable@1.2.6#get-event-name', [
    'require',
    'exports',
    'module',
    './behaviors'
], function (require, exports, module) {
    'use strict';
    var attr = require('./behaviors');
    var isRadioInput = function isRadioInput(el) {
        return el.nodeName.toLowerCase() === 'input' && el.type === 'radio';
    };
    module.exports = function getEventName(el, prop) {
        var event = 'change';
        if (isRadioInput(el) && prop === 'checked') {
            event = 'can-attribute-observable-radiochange';
        }
        if (attr.findSpecialListener(prop)) {
            event = prop;
        }
        return event;
    };
});
/*can-event-dom-radiochange@2.2.1#can-event-dom-radiochange*/
define('can-event-dom-radiochange@2.2.1#can-event-dom-radiochange', [
    'require',
    'exports',
    'module',
    'can-globals/document/document',
    'can-namespace'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getDocument = require('can-globals/document/document');
        var namespace = require('can-namespace');
        function getRoot() {
            return getDocument().documentElement;
        }
        function findParentForm(el) {
            while (el) {
                if (el.nodeName === 'FORM') {
                    break;
                }
                el = el.parentNode;
            }
            return el;
        }
        function shouldReceiveEventFromRadio(source, dest) {
            var name = source.getAttribute('name');
            return name && name === dest.getAttribute('name') && findParentForm(source) === findParentForm(dest);
        }
        function isRadioInput(el) {
            return el.nodeName === 'INPUT' && el.type === 'radio';
        }
        function attachRootListener(domEvents, eventTypeTargets) {
            var root = getRoot();
            var newListener = function (event) {
                var target = event.target;
                if (!isRadioInput(target)) {
                    return;
                }
                for (var eventType in eventTypeTargets) {
                    var newEvent = { type: eventType };
                    var listeningNodes = eventTypeTargets[eventType];
                    listeningNodes.forEach(function (el) {
                        if (shouldReceiveEventFromRadio(target, el)) {
                            domEvents.dispatch(el, newEvent, false);
                        }
                    });
                }
            };
            domEvents.addEventListener(root, 'change', newListener);
            return newListener;
        }
        function detachRootListener(domEvents, listener) {
            var root = getRoot();
            domEvents.removeEventListener(root, 'change', listener);
        }
        var radioChangeEvent = {
            defaultEventType: 'radiochange',
            addEventListener: function (target, eventType, handler) {
                if (!isRadioInput(target)) {
                    throw new Error('Listeners for ' + eventType + ' must be radio inputs');
                }
                var eventTypeTrackedRadios = radioChangeEvent._eventTypeTrackedRadios;
                if (!eventTypeTrackedRadios) {
                    eventTypeTrackedRadios = radioChangeEvent._eventTypeTrackedRadios = {};
                    if (!radioChangeEvent._rootListener) {
                        radioChangeEvent._rootListener = attachRootListener(this, eventTypeTrackedRadios);
                    }
                }
                var trackedRadios = radioChangeEvent._eventTypeTrackedRadios[eventType];
                if (!trackedRadios) {
                    trackedRadios = radioChangeEvent._eventTypeTrackedRadios[eventType] = new Set();
                }
                trackedRadios.add(target);
                target.addEventListener(eventType, handler);
            },
            removeEventListener: function (target, eventType, handler) {
                target.removeEventListener(eventType, handler);
                var eventTypeTrackedRadios = radioChangeEvent._eventTypeTrackedRadios;
                if (!eventTypeTrackedRadios) {
                    return;
                }
                var trackedRadios = eventTypeTrackedRadios[eventType];
                if (!trackedRadios) {
                    return;
                }
                trackedRadios.delete(target);
                if (trackedRadios.size === 0) {
                    delete eventTypeTrackedRadios[eventType];
                    for (var key in eventTypeTrackedRadios) {
                        if (eventTypeTrackedRadios.hasOwnProperty(key)) {
                            return;
                        }
                    }
                    delete radioChangeEvent._eventTypeTrackedRadios;
                    detachRootListener(this, radioChangeEvent._rootListener);
                    delete radioChangeEvent._rootListener;
                }
            }
        };
        module.exports = namespace.domEventRadioChange = radioChangeEvent;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-attribute-observable@1.2.6#can-attribute-observable*/
define('can-attribute-observable@1.2.6#can-attribute-observable', [
    'require',
    'exports',
    'module',
    'can-queues',
    './event',
    'can-reflect',
    'can-observation',
    './behaviors',
    './get-event-name',
    'can-reflect-dependencies',
    'can-observation-recorder',
    'can-simple-observable/settable/settable',
    'can-assign',
    'can-symbol',
    'can-dom-events',
    'can-event-dom-radiochange'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var queues = require('can-queues');
        var canEvent = require('./event');
        var canReflect = require('can-reflect');
        var Observation = require('can-observation');
        var attr = require('./behaviors');
        var getEventName = require('./get-event-name');
        var canReflectDeps = require('can-reflect-dependencies');
        var ObservationRecorder = require('can-observation-recorder');
        var SettableObservable = require('can-simple-observable/settable/settable');
        var canAssign = require('can-assign');
        var canSymbol = require('can-symbol');
        var onValueSymbol = canSymbol.for('can.onValue');
        var offValueSymbol = canSymbol.for('can.offValue');
        var onEmitSymbol = canSymbol.for('can.onEmit');
        var offEmitSymbol = canSymbol.for('can.offEmit');
        var domEvents = require('can-dom-events');
        var radioChangeEvent = require('can-event-dom-radiochange');
        var internalRadioChangeEventType = 'can-attribute-observable-radiochange';
        domEvents.addEvent(radioChangeEvent, internalRadioChangeEventType);
        var isSelect = function isSelect(el) {
            return el.nodeName.toLowerCase() === 'select';
        };
        var isMultipleSelect = function isMultipleSelect(el, prop) {
            return isSelect(el) && prop === 'value' && el.multiple;
        };
        var slice = Array.prototype.slice;
        function canUtilAEL() {
            var args = slice.call(arguments, 0);
            args.unshift(this);
            return domEvents.addEventListener.apply(null, args);
        }
        function canUtilREL() {
            var args = slice.call(arguments, 0);
            args.unshift(this);
            return domEvents.removeEventListener.apply(null, args);
        }
        function AttributeObservable(el, prop, bindingData, event) {
            if (typeof bindingData === 'string') {
                event = bindingData;
                bindingData = undefined;
            }
            this.el = el;
            this.bound = false;
            this.prop = isMultipleSelect(el, prop) ? 'values' : prop;
            this.event = event || getEventName(el, prop);
            this.handler = this.handler.bind(this);
            if (event !== undefined) {
                this[onValueSymbol] = null;
                this[offValueSymbol] = null;
                this[onEmitSymbol] = AttributeObservable.prototype.on;
                this[offEmitSymbol] = AttributeObservable.prototype.off;
            }
            if (process.env.NODE_ENV !== 'production') {
                canReflectDeps.addMutatedBy(this.el, this.prop, this);
                canReflect.assignSymbols(this, {
                    'can.getName': function getName() {
                        return 'AttributeObservable<' + el.nodeName.toLowerCase() + '.' + this.prop + '>';
                    }
                });
            }
        }
        AttributeObservable.prototype = Object.create(SettableObservable.prototype);
        canAssign(AttributeObservable.prototype, {
            constructor: AttributeObservable,
            get: function get() {
                if (ObservationRecorder.isRecording()) {
                    ObservationRecorder.add(this);
                    if (!this.bound) {
                        Observation.temporarilyBind(this);
                    }
                }
                var value = attr.get(this.el, this.prop);
                if (typeof value === 'function') {
                    value = value.bind(this.el);
                }
                return value;
            },
            set: function set(newVal) {
                var setterDispatchedEvents = attr.setAttrOrProp(this.el, this.prop, newVal);
                if (!setterDispatchedEvents) {
                    this._value = newVal;
                }
                return newVal;
            },
            handler: function handler(newVal, event) {
                var old = this._value;
                var queuesArgs = [];
                this._value = attr.get(this.el, this.prop);
                if (event !== undefined || this._value !== old) {
                    if (process.env.NODE_ENV !== 'production') {
                        if (typeof this._log === 'function') {
                            this._log(old, newVal);
                        }
                    }
                    queuesArgs = [
                        this.handlers.getNode([]),
                        this,
                        [
                            newVal,
                            old
                        ]
                    ];
                    if (process.env.NODE_ENV !== 'production') {
                        queuesArgs = [
                            this.handlers.getNode([]),
                            this,
                            [
                                newVal,
                                old
                            ],
                            null,
                            [
                                this.el,
                                this.prop,
                                'changed to',
                                newVal,
                                'from',
                                old,
                                'by',
                                event
                            ]
                        ];
                    }
                    queues.enqueueByQueue.apply(queues, queuesArgs);
                }
            },
            onBound: function onBound() {
                var observable = this;
                observable.bound = true;
                observable._handler = function (event) {
                    observable.handler(attr.get(observable.el, observable.prop), event);
                };
                if (observable.event === internalRadioChangeEventType) {
                    canEvent.on.call(observable.el, 'change', observable._handler);
                }
                var specialBinding = attr.findSpecialListener(observable.prop);
                if (specialBinding) {
                    observable._specialDisposal = specialBinding.call(observable.el, observable.prop, observable._handler, canUtilAEL);
                }
                canEvent.on.call(observable.el, observable.event, observable._handler);
                this._value = attr.get(this.el, this.prop);
            },
            onUnbound: function onUnbound() {
                var observable = this;
                observable.bound = false;
                if (observable.event === internalRadioChangeEventType) {
                    canEvent.off.call(observable.el, 'change', observable._handler);
                }
                if (observable._specialDisposal) {
                    observable._specialDisposal.call(observable.el, canUtilREL);
                    observable._specialDisposal = null;
                }
                canEvent.off.call(observable.el, observable.event, observable._handler);
            },
            valueHasDependencies: function valueHasDependencies() {
                return true;
            },
            getValueDependencies: function getValueDependencies() {
                var m = new Map();
                var s = new Set();
                s.add(this.prop);
                m.set(this.el, s);
                return { keyDependencies: m };
            }
        });
        canReflect.assignSymbols(AttributeObservable.prototype, {
            'can.isMapLike': false,
            'can.getValue': AttributeObservable.prototype.get,
            'can.setValue': AttributeObservable.prototype.set,
            'can.onValue': AttributeObservable.prototype.on,
            'can.offValue': AttributeObservable.prototype.off,
            'can.valueHasDependencies': AttributeObservable.prototype.hasDependencies,
            'can.getValueDependencies': AttributeObservable.prototype.getValueDependencies
        });
        module.exports = AttributeObservable;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-stache-bindings@4.10.9#can-stache-bindings*/
define('can-stache-bindings@4.10.9#can-stache-bindings', [
    'require',
    'exports',
    'module',
    'can-bind',
    'can-stache/src/expression',
    'can-view-callbacks',
    'can-view-model',
    'can-stache-key',
    'can-observation-recorder',
    'can-simple-observable',
    'can-view-scope',
    'can-assign',
    'can-log/dev/dev',
    'can-dom-mutate',
    'can-dom-data',
    'can-symbol',
    'can-reflect',
    'can-reflect-dependencies',
    'can-attribute-encoder',
    'can-queues',
    'can-simple-observable/setter/setter',
    'can-attribute-observable',
    'can-view-scope/make-compute-like',
    'can-view-nodelist',
    'can-event-queue/map/map'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var Bind = require('can-bind');
        var expression = require('can-stache/src/expression');
        var viewCallbacks = require('can-view-callbacks');
        var canViewModel = require('can-view-model');
        var stacheKey = require('can-stache-key');
        var ObservationRecorder = require('can-observation-recorder');
        var SimpleObservable = require('can-simple-observable');
        var Scope = require('can-view-scope');
        var assign = require('can-assign');
        var dev = require('can-log/dev/dev');
        var domMutate = require('can-dom-mutate');
        var domData = require('can-dom-data');
        var canSymbol = require('can-symbol');
        var canReflect = require('can-reflect');
        var canReflectDeps = require('can-reflect-dependencies');
        var encoder = require('can-attribute-encoder');
        var queues = require('can-queues');
        var SettableObservable = require('can-simple-observable/setter/setter');
        var AttributeObservable = require('can-attribute-observable');
        var makeCompute = require('can-view-scope/make-compute-like');
        var ViewNodeList = require('can-view-nodelist');
        var canEventQueue = require('can-event-queue/map/map');
        var bindings = new Map();
        var onMatchStr = 'on:', vmMatchStr = 'vm:', elMatchStr = 'el:', byMatchStr = ':by:', toMatchStr = ':to', fromMatchStr = ':from', bindMatchStr = ':bind', viewModelBindingStr = 'viewModel', attributeBindingStr = 'attribute', scopeBindingStr = 'scope', viewModelOrAttributeBindingStr = 'viewModelOrAttribute', viewModelSymbol = canSymbol.for('can.viewModel');
        var throwOnlyOneTypeOfBindingError = function () {
            throw new Error('can-stache-bindings - you can not have contextual bindings ( this:from=\'value\' ) and key bindings ( prop:from=\'value\' ) on one element.');
        };
        var checkBindingState = function (bindingState, siblingBindingData) {
            var isSettingOnViewModel = siblingBindingData.parent.exports && siblingBindingData.child.source === viewModelBindingStr;
            if (isSettingOnViewModel) {
                var bindingName = siblingBindingData.child.name;
                var isSettingViewModel = isSettingOnViewModel && (bindingName === 'this' || bindingName === '.');
                if (isSettingViewModel) {
                    if (bindingState.isSettingViewModel || bindingState.isSettingOnViewModel) {
                        throwOnlyOneTypeOfBindingError();
                    } else {
                        return {
                            isSettingViewModel: true,
                            initialViewModelData: undefined
                        };
                    }
                } else {
                    if (bindingState.isSettingViewModel) {
                        throwOnlyOneTypeOfBindingError();
                    } else {
                        return {
                            isSettingOnViewModel: true,
                            initialViewModelData: bindingState.initialViewModelData
                        };
                    }
                }
            } else {
                return bindingState;
            }
        };
        var getEventBindingData = function (attributeName, el, scope) {
            var bindingCode = attributeName.substr(onMatchStr.length);
            var viewModel = el && el[viewModelSymbol];
            var elUsed = startsWith.call(bindingCode, elMatchStr);
            var vmUsed = startsWith.call(bindingCode, vmMatchStr);
            var byUsed = bindingCode.indexOf(byMatchStr) > -1;
            var scopeUsed;
            var bindingContext;
            var eventName;
            var bindingContextObservable;
            var shortBindingCode = '';
            if (vmUsed) {
                shortBindingCode = 'vm';
                bindingCode = bindingCode.substr(vmMatchStr.length);
            } else if (elUsed) {
                shortBindingCode = 'el';
                bindingCode = bindingCode.substr(elMatchStr.length);
            } else if (!vmUsed && !elUsed) {
                if (byUsed) {
                    scopeUsed = true;
                } else if (viewModel) {
                    vmUsed = true;
                } else {
                    elUsed = true;
                }
            }
            var bindingContextKey;
            if (byUsed) {
                var byIndex = bindingCode.indexOf(byMatchStr);
                bindingContextKey = bindingCode.substr(byIndex + byMatchStr.length);
                bindingCode = bindingCode.substr(0, byIndex);
            }
            eventName = bindingCode;
            if (elUsed) {
                if (byUsed) {
                    throw new Error('binding with :by in element scope is not currently supported');
                } else {
                    bindingContext = el;
                }
            } else if (vmUsed) {
                bindingContext = viewModel;
                if (byUsed) {
                    bindingContext = viewModel.get(bindingContextKey);
                    bindingContextObservable = new Scope(viewModel).computeData(bindingContextKey);
                }
            } else if (scopeUsed) {
                bindingContext = scope;
                if (byUsed) {
                    bindingContext = bindingContext.get(bindingContextKey);
                    bindingContextObservable = scope.computeData(bindingContextKey);
                }
            }
            return {
                bindingContext: bindingContext,
                bindingContextObservable: bindingContextObservable,
                eventName: eventName,
                bindingCode: shortBindingCode
            };
        };
        var onKeyValueSymbol = canSymbol.for('can.onKeyValue');
        var makeScopeFromEvent = function (element, event, viewModel, args, data, bindingContext) {
            var shiftArgumentsForLegacyArguments = bindingContext && bindingContext[onKeyValueSymbol] !== undefined;
            var specialValues = {
                element: element,
                event: event,
                viewModel: viewModel,
                arguments: shiftArgumentsForLegacyArguments ? Array.prototype.slice.call(args, 1) : args,
                args: args
            };
            return data.scope.add(specialValues, { special: true });
        };
        var runEventCallback = function (el, ev, data, scope, expr, attributeName, attrVal) {
            var updateFn = function () {
                var value = expr.value(scope, { doNotWrapInObservation: true });
                value = canReflect.isValueLike(value) ? canReflect.getValue(value) : value;
                return typeof value === 'function' ? value(el) : value;
            };
            if (process.env.NODE_ENV !== 'production') {
                Object.defineProperty(updateFn, 'name', { value: attributeName + '="' + attrVal + '"' });
            }
            queues.batch.start();
            var mutateQueueArgs = [];
            mutateQueueArgs = [
                updateFn,
                null,
                null,
                {}
            ];
            if (process.env.NODE_ENV !== 'production') {
                mutateQueueArgs = [
                    updateFn,
                    null,
                    null,
                    {
                        reasonLog: [
                            el,
                            ev,
                            attributeName + '=' + attrVal
                        ]
                    }
                ];
            }
            queues.mutateQueue.enqueue.apply(queues.mutateQueue, mutateQueueArgs);
            queues.batch.stop();
        };
        var behaviors = {
            initializeViewModel: function (bindings, initialViewModelData, makeViewModel, bindingContext) {
                var onCompleteBindings = [], onTeardowns = {};
                var bindingsState = {
                    isSettingOnViewModel: false,
                    isSettingViewModel: false,
                    initialViewModelData: initialViewModelData || {}
                };
                bindings.forEach(function (dataBinding) {
                    dataBinding.binding.startParent();
                    var siblingBindingData = dataBinding.siblingBindingData;
                    bindingsState = checkBindingState(bindingsState, siblingBindingData);
                    if (siblingBindingData.parent.exports) {
                        var parentValue = siblingBindingData.child.setCompute ? makeCompute(dataBinding.binding.parent) : dataBinding.binding.parentValue;
                        if (parentValue !== undefined) {
                            if (bindingsState.isSettingViewModel) {
                                bindingsState.initialViewModelData = parentValue;
                            } else {
                                bindingsState.initialViewModelData[cleanVMName(siblingBindingData.child.name, bindingContext.scope)] = parentValue;
                            }
                        }
                    }
                    onCompleteBindings.push(dataBinding.binding.start.bind(dataBinding.binding));
                    onTeardowns[siblingBindingData.bindingAttributeName] = dataBinding.binding.stop.bind(dataBinding.binding);
                });
                var viewModel = makeViewModel(bindingsState.initialViewModelData, bindings.length > 0, bindingsState);
                for (var i = 0, len = onCompleteBindings.length; i < len; i++) {
                    onCompleteBindings[i]();
                }
                return {
                    viewModel: viewModel,
                    onTeardowns: onTeardowns,
                    bindingsState: bindingsState
                };
            },
            viewModel: function (el, tagData, makeViewModel, initialViewModelData, staticDataBindingsOnly) {
                var attributeViewModelBindings = assign({}, initialViewModelData), bindingContext = assign({
                        element: el,
                        viewModel: undefined
                    }, tagData), bindingSettings = {
                        attributeViewModelBindings: attributeViewModelBindings,
                        alreadyUpdatedChild: true,
                        favorViewModel: true
                    }, dataBindings = [];
                canReflect.eachListLike(el.attributes || [], function (node) {
                    var dataBinding = makeDataBinding(node, bindingContext, bindingSettings);
                    if (dataBinding) {
                        dataBindings.push(dataBinding);
                    }
                });
                if (staticDataBindingsOnly && dataBindings.length === 0) {
                    return;
                }
                var completedData = behaviors.initializeViewModel(dataBindings, initialViewModelData, function () {
                        bindingContext.viewModel = makeViewModel.apply(this, arguments);
                    }, bindingContext), onTeardowns = completedData.onTeardowns, bindingsState = completedData.bindingsState, siblingBindingDatas = {};
                var attributeDisposal;
                if (!bindingsState.isSettingViewModel) {
                    bindingSettings.alreadyUpdatedChild = false;
                    attributeDisposal = domMutate.onNodeAttributeChange(el, function (ev) {
                        var attrName = ev.attributeName, value = el.getAttribute(attrName);
                        if (onTeardowns[attrName]) {
                            onTeardowns[attrName]();
                        }
                        var parentBindingWasAttribute = siblingBindingDatas[attrName] && siblingBindingDatas[attrName].parent.source === attributeBindingStr;
                        if (value !== null || parentBindingWasAttribute) {
                            var dataBinding = makeDataBinding({
                                name: attrName,
                                value: value
                            }, bindingContext, bindingSettings);
                            if (dataBinding) {
                                dataBinding.binding.start();
                                siblingBindingDatas[attrName] = dataBinding.siblingBindingData;
                                onTeardowns[attrName] = dataBinding.binding.stop.bind(dataBinding.binding);
                            }
                        }
                    });
                }
                return function () {
                    if (attributeDisposal) {
                        attributeDisposal();
                        attributeDisposal = undefined;
                    }
                    for (var attrName in onTeardowns) {
                        onTeardowns[attrName]();
                    }
                };
            },
            data: function (el, attrData) {
                if (domData.get(el, 'preventDataBindings')) {
                    return;
                }
                var viewModel, getViewModel = ObservationRecorder.ignore(function () {
                        return viewModel || (viewModel = canViewModel(el));
                    }), teardown, attributeDisposal, removedDisposal, bindingContext = {
                        element: el,
                        templateType: attrData.templateType,
                        scope: attrData.scope,
                        parentNodeList: attrData.nodeList,
                        get viewModel() {
                            return getViewModel();
                        }
                    };
                var dataBinding = makeDataBinding({
                    name: attrData.attributeName,
                    value: el.getAttribute(attrData.attributeName)
                }, bindingContext, { syncChildWithParent: false });
                if (process.env.NODE_ENV !== 'production') {
                    if (dataBinding.siblingBindingData.child.source === 'viewModel' && !domData.get(el, 'viewModel')) {
                        dev.warn('This element does not have a viewModel. (Attempting to bind `' + dataBinding.siblingBindingData.bindingAttributeName + '="' + dataBinding.siblingBindingData.parent.name + '"`)');
                    }
                }
                dataBinding.binding.start();
                var attributeListener = function (ev) {
                    var attrName = ev.attributeName, value = el.getAttribute(attrName);
                    if (attrName === attrData.attributeName) {
                        if (teardown) {
                            teardown();
                        }
                        if (value !== null) {
                            var dataBinding = makeDataBinding({
                                name: attrName,
                                value: value
                            }, bindingContext, { syncChildWithParent: false });
                            if (dataBinding) {
                                dataBinding.binding.start();
                                teardown = dataBinding.binding.stop.bind(dataBinding.binding);
                            }
                            teardown = dataBinding.onTeardown;
                        }
                    }
                };
                var tearItAllDown = function () {
                    if (teardown) {
                        teardown();
                        teardown = undefined;
                    }
                    if (removedDisposal) {
                        removedDisposal();
                        removedDisposal = undefined;
                    }
                    if (attributeDisposal) {
                        attributeDisposal();
                        attributeDisposal = undefined;
                    }
                };
                if (attrData.nodeList) {
                    ViewNodeList.register([], tearItAllDown, attrData.nodeList, false);
                }
                teardown = dataBinding.binding.stop.bind(dataBinding.binding);
                attributeDisposal = domMutate.onNodeAttributeChange(el, attributeListener);
                removedDisposal = domMutate.onNodeRemoval(el, function () {
                    var doc = el.ownerDocument;
                    var ownerNode = doc.contains ? doc : doc.documentElement;
                    if (!ownerNode || ownerNode.contains(el) === false) {
                        tearItAllDown();
                    }
                });
            },
            event: function (el, data) {
                var eventBindingData;
                var attributeName = encoder.decode(data.attributeName), event, bindingContext, bindingContextObservable;
                if (attributeName.indexOf(toMatchStr + ':') !== -1 || attributeName.indexOf(fromMatchStr + ':') !== -1 || attributeName.indexOf(bindMatchStr + ':') !== -1) {
                    return this.data(el, data);
                }
                if (startsWith.call(attributeName, onMatchStr)) {
                    eventBindingData = getEventBindingData(attributeName, el, data.scope);
                    event = eventBindingData.eventName;
                    bindingContext = eventBindingData.bindingContext;
                    bindingContextObservable = eventBindingData.bindingContextObservable;
                    if (process.env.NODE_ENV !== 'production') {
                        if (!eventBindingData.bindingCode && el[viewModelSymbol] && 'on' + event in el) {
                            dev.warn('The ' + event + ' event is bound the view model for <' + el.tagName.toLowerCase() + '>. Use ' + attributeName.replace(onMatchStr, 'on:el:') + ' to bind to the element instead.');
                        }
                    }
                } else {
                    throw new Error('can-stache-bindings - unsupported event bindings ' + attributeName);
                }
                var handler = function (ev) {
                    var attrVal = el.getAttribute(encoder.encode(attributeName));
                    if (!attrVal) {
                        return;
                    }
                    var viewModel = el[viewModelSymbol];
                    var expr = expression.parse(attrVal, {
                        lookupRule: function () {
                            return expression.Lookup;
                        },
                        methodRule: 'call'
                    });
                    var runScope = makeScopeFromEvent(el, ev, viewModel, arguments, data, bindingContext);
                    if (expr instanceof expression.Hashes) {
                        var hashExprs = expr.hashExprs;
                        var key = Object.keys(hashExprs)[0];
                        var value = expr.hashExprs[key].value(runScope);
                        var isObservableValue = canReflect.isObservableLike(value) && canReflect.isValueLike(value);
                        runScope.set(key, isObservableValue ? canReflect.getValue(value) : value);
                    } else if (expr instanceof expression.Call) {
                        runEventCallback(el, ev, data, runScope, expr, attributeName, attrVal);
                    } else {
                        throw new Error('can-stache-bindings: Event bindings must be a call expression. Make sure you have a () in ' + data.attributeName + '=' + JSON.stringify(attrVal));
                    }
                };
                var attributesDisposal, removalDisposal, removeObservation, currentContext;
                var attributesHandler = function (ev) {
                    var isEventAttribute = ev.attributeName === attributeName;
                    var isRemoved = !el.getAttribute(attributeName);
                    var isEventAttributeRemoved = isEventAttribute && isRemoved;
                    if (isEventAttributeRemoved) {
                        unbindEvent();
                    }
                };
                var removalHandler = function () {
                    var doc = el.ownerDocument;
                    var ownerNode = doc.contains ? doc : doc.documentElement;
                    if (!ownerNode || !ownerNode.contains(el)) {
                        unbindEvent();
                    }
                };
                var unbindEvent = function () {
                    if (bindingContext) {
                        canEventQueue.off.call(bindingContext, event, handler);
                    }
                    if (attributesDisposal) {
                        attributesDisposal();
                        attributesDisposal = undefined;
                    }
                    if (removalDisposal) {
                        removalDisposal();
                        removalDisposal = undefined;
                    }
                    if (removeObservation) {
                        removeObservation();
                        removeObservation = undefined;
                    }
                };
                function updateListener(newVal, oldVal) {
                    if (oldVal) {
                        canEventQueue.off.call(oldVal, event, handler);
                    }
                    if (newVal) {
                        canEventQueue.on.call(newVal, event, handler);
                        currentContext = newVal;
                    }
                }
                attributesDisposal = domMutate.onNodeAttributeChange(el, attributesHandler);
                removalDisposal = domMutate.onNodeRemoval(el, removalHandler);
                if (!bindingContext && bindingContextObservable) {
                    removeObservation = function () {
                        if (currentContext) {
                            canEventQueue.off.call(currentContext, event, handler);
                        }
                        canReflect.offValue(bindingContextObservable, updateListener);
                    };
                    canReflect.onValue(bindingContextObservable, updateListener);
                } else {
                    canEventQueue.on.call(bindingContext, event, handler);
                }
            }
        };
        bindings.set(/[\w\.:]+:to$/, behaviors.data);
        bindings.set(/[\w\.:]+:from$/, behaviors.data);
        bindings.set(/[\w\.:]+:bind$/, behaviors.data);
        bindings.set(/[\w\.:]+:raw$/, behaviors.data);
        bindings.set(/[\w\.:]+:to:on:[\w\.:]+/, behaviors.data);
        bindings.set(/[\w\.:]+:from:on:[\w\.:]+/, behaviors.data);
        bindings.set(/[\w\.:]+:bind:on:[\w\.:]+/, behaviors.data);
        bindings.set(/on:[\w\.:]+/, behaviors.event);
        var getObservableFrom = {
            viewModelOrAttribute: function (bindingData, bindingContext) {
                var viewModel = bindingContext.element[viewModelSymbol];
                if (viewModel) {
                    return this.viewModel.apply(this, arguments);
                } else {
                    return this.attribute.apply(this, arguments);
                }
            },
            scope: function (bindingData, bindingContext) {
                var scope = bindingContext.scope, scopeProp = bindingData.name, mustBeGettable = bindingData.exports;
                if (!scopeProp) {
                    return new SimpleObservable();
                } else {
                    if (mustBeGettable || scopeProp.indexOf('(') >= 0 || scopeProp.indexOf('=') >= 0) {
                        var parentExpression = expression.parse(scopeProp, { baseMethodType: 'Call' });
                        if (parentExpression instanceof expression.Hashes) {
                            return new SimpleObservable(function () {
                                var hashExprs = parentExpression.hashExprs;
                                var key = Object.keys(hashExprs)[0];
                                var value = parentExpression.hashExprs[key].value(scope);
                                var isObservableValue = canReflect.isObservableLike(value) && canReflect.isValueLike(value);
                                scope.set(key, isObservableValue ? canReflect.getValue(value) : value);
                            });
                        } else {
                            return parentExpression.value(scope);
                        }
                    } else {
                        var observation = {};
                        canReflect.assignSymbols(observation, {
                            'can.getValue': function getValue() {
                            },
                            'can.valueHasDependencies': function hasValueDependencies() {
                                return false;
                            },
                            'can.setValue': function setValue(newVal) {
                                var expr = expression.parse(cleanVMName(scopeProp, scope), { baseMethodType: 'Call' });
                                var value = expr.value(scope);
                                canReflect.setValue(value, newVal);
                            },
                            'can.getWhatIChange': function getWhatIChange() {
                                var data = scope.getDataForScopeSet(cleanVMName(scopeProp, scope));
                                var m = new Map();
                                var s = new Set();
                                s.add(data.key);
                                m.set(data.parent, s);
                                return { mutate: { keyDependencies: m } };
                            },
                            'can.getName': function getName() {
                                if (process.env.NODE_ENV !== 'production') {
                                    var result = 'ObservableFromScope<>';
                                    var data = scope.getDataForScopeSet(cleanVMName(scopeProp, scope));
                                    if (data.parent && data.key) {
                                        result = 'ObservableFromScope<' + canReflect.getName(data.parent) + '.' + data.key + '>';
                                    }
                                    return result;
                                }
                            }
                        });
                        var data = scope.getDataForScopeSet(cleanVMName(scopeProp, scope));
                        if (data.parent && data.key) {
                            canReflectDeps.addMutatedBy(data.parent, data.key, observation);
                        }
                        return observation;
                    }
                }
            },
            viewModel: function (bindingData, bindingContext) {
                var scope = bindingContext.scope, vmName = bindingData.name, setCompute = bindingData.setCompute;
                var setName = cleanVMName(vmName, scope);
                var isBoundToContext = vmName === '.' || vmName === 'this';
                var keysToRead = isBoundToContext ? [] : stacheKey.reads(vmName);
                function getViewModelProperty() {
                    var viewModel = bindingContext.viewModel;
                    return stacheKey.read(viewModel, keysToRead, {}).value;
                }
                if (process.env.NODE_ENV !== 'production') {
                    Object.defineProperty(getViewModelProperty, 'name', { value: '<' + bindingContext.element.tagName.toLowerCase() + '>.' + vmName });
                }
                var observation = new SettableObservable(getViewModelProperty, function setViewModelProperty(newVal) {
                    var viewModel = bindingContext.viewModel;
                    if (setCompute) {
                        var oldValue = canReflect.getKeyValue(viewModel, setName);
                        if (canReflect.isObservableLike(oldValue)) {
                            canReflect.setValue(oldValue, newVal);
                        } else {
                            canReflect.setKeyValue(viewModel, setName, new SimpleObservable(canReflect.getValue(newVal)));
                        }
                    } else {
                        if (isBoundToContext) {
                            canReflect.setValue(viewModel, newVal);
                        } else {
                            stacheKey.write(viewModel, keysToRead, newVal);
                        }
                    }
                });
                if (process.env.NODE_ENV !== 'production') {
                    var viewModel = bindingContext.viewModel;
                    if (viewModel && setName) {
                        canReflectDeps.addMutatedBy(viewModel, setName, observation);
                    }
                }
                return observation;
            },
            attribute: function (bindingData, bindingContext) {
                if (bindingData.name === 'this') {
                    return canReflect.assignSymbols({}, {
                        'can.getValue': function () {
                            return bindingContext.element;
                        },
                        'can.valueHasDependencies': function () {
                            return false;
                        },
                        'can.getName': function getName() {
                            return '<' + bindingContext.element.nodeName + '>';
                        }
                    });
                } else {
                    return new AttributeObservable(bindingContext.element, bindingData.name, {}, bindingData.event);
                }
            }
        };
        var startsWith = String.prototype.startsWith || function (text) {
            return this.indexOf(text) === 0;
        };
        function getEventName(result) {
            if (result.special.on !== undefined) {
                return result.tokens[result.special.on + 1];
            }
        }
        var siblingBindingRules = {
            to: {
                child: {
                    exports: true,
                    syncSibling: false
                },
                parent: {
                    exports: false,
                    syncSibling: false
                }
            },
            from: {
                child: {
                    exports: false,
                    syncSibling: false
                },
                parent: {
                    exports: true,
                    syncSibling: false
                }
            },
            bind: {
                child: {
                    exports: true,
                    syncSibling: false
                },
                parent: {
                    exports: true,
                    syncSibling: true
                }
            },
            raw: {
                child: {
                    exports: false,
                    syncSibling: false
                },
                parent: {
                    exports: true,
                    syncSibling: false
                }
            }
        };
        var bindingNames = [];
        var special = {
            vm: true,
            on: true
        };
        canReflect.eachKey(siblingBindingRules, function (value, key) {
            bindingNames.push(key);
            special[key] = true;
        });
        function tokenize(source) {
            var splitByColon = source.split(':');
            var result = {
                tokens: [],
                special: {}
            };
            splitByColon.forEach(function (token) {
                if (special[token]) {
                    result.special[token] = result.tokens.push(token) - 1;
                } else {
                    result.tokens.push(token);
                }
            });
            return result;
        }
        var getChildBindingStr = function (tokens, favorViewModel) {
            if (tokens.indexOf('vm') >= 0) {
                return viewModelBindingStr;
            } else if (tokens.indexOf('el') >= 0) {
                return attributeBindingStr;
            } else {
                return favorViewModel ? viewModelBindingStr : viewModelOrAttributeBindingStr;
            }
        };
        function getSiblingBindingData(node, bindingSettings) {
            var siblingBindingData, attributeName = encoder.decode(node.name), attributeValue = node.value || '';
            var result = tokenize(attributeName), dataBindingName, specialIndex;
            bindingNames.forEach(function (name) {
                if (result.special[name] !== undefined && result.special[name] > 0) {
                    dataBindingName = name;
                    specialIndex = result.special[name];
                    return false;
                }
            });
            if (dataBindingName) {
                var childEventName = getEventName(result);
                var initializeValues = childEventName && dataBindingName !== 'bind' ? false : true;
                siblingBindingData = {
                    parent: assign({
                        source: scopeBindingStr,
                        name: result.special.raw ? '"' + attributeValue + '"' : attributeValue
                    }, siblingBindingRules[dataBindingName].parent),
                    child: assign({
                        source: getChildBindingStr(result.tokens, bindingSettings && bindingSettings.favorViewModel),
                        name: result.tokens[specialIndex - 1],
                        event: childEventName
                    }, siblingBindingRules[dataBindingName].child),
                    bindingAttributeName: attributeName,
                    initializeValues: initializeValues
                };
                if (attributeValue.trim().charAt(0) === '~') {
                    siblingBindingData.child.setCompute = true;
                }
                return siblingBindingData;
            }
        }
        var makeDataBinding = function (node, bindingContext, bindingSettings) {
            var siblingBindingData = getSiblingBindingData(node, bindingSettings);
            if (!siblingBindingData) {
                return;
            }
            var parentObservable = getObservableFrom[siblingBindingData.parent.source](siblingBindingData.parent, bindingContext, bindingSettings), childObservable = getObservableFrom[siblingBindingData.child.source](siblingBindingData.child, bindingContext, bindingSettings, parentObservable);
            var childToParent = !!siblingBindingData.child.exports;
            var parentToChild = !!siblingBindingData.parent.exports;
            if (process.env.NODE_ENV !== 'production') {
                if (siblingBindingData.child.setCompute && childToParent && parentToChild) {
                    dev.warn('Two-way binding computes is not supported.');
                }
            }
            var bindingOptions = {
                child: childObservable,
                childToParent: childToParent,
                cycles: childToParent === true && parentToChild === true ? 0 : 100,
                onInitDoNotUpdateChild: bindingSettings.alreadyUpdatedChild || siblingBindingData.initializeValues === false,
                onInitDoNotUpdateParent: siblingBindingData.initializeValues === false,
                onInitSetUndefinedParentIfChildIsDefined: true,
                parent: parentObservable,
                parentToChild: parentToChild,
                priority: bindingContext.parentNodeList ? bindingContext.parentNodeList.nesting + 1 : undefined,
                queue: 'domUI',
                sticky: siblingBindingData.parent.syncSibling ? 'childSticksToParent' : undefined
            };
            if (process.env.NODE_ENV !== 'production') {
                var nodeHTML = encoder.decode(node.name) + '=' + JSON.stringify(node.value);
                var tagStart = '<' + bindingContext.element.nodeName.toLowerCase(), tag = tagStart + '>';
                var makeUpdateName = function (child, childName) {
                    if (child === 'viewModel') {
                        return tag + '.' + childName;
                    } else if (child === 'scope') {
                        return '{{' + childName + '}}';
                    } else {
                        return '' + child + '.' + childName;
                    }
                };
                bindingOptions.debugName = tagStart + ' ' + nodeHTML + '>';
                bindingOptions.updateChildName = bindingOptions.debugName + ' updates ' + makeUpdateName(siblingBindingData.child.source, siblingBindingData.child.name) + ' from ' + makeUpdateName(siblingBindingData.parent.source, siblingBindingData.parent.name);
                bindingOptions.updateParentName = bindingOptions.debugName + ' updates ' + makeUpdateName(siblingBindingData.parent.source, siblingBindingData.parent.name) + ' from ' + makeUpdateName(siblingBindingData.child.source, siblingBindingData.child.name);
            }
            var canBinding = new Bind(bindingOptions);
            return {
                siblingBindingData: siblingBindingData,
                binding: canBinding
            };
        };
        var cleanVMName = function (name, scope) {
            if (process.env.NODE_ENV !== 'production') {
                if (name.indexOf('@') >= 0 && scope) {
                    var filename = scope.peek('scope.filename');
                    var lineNumber = scope.peek('scope.lineNumber');
                    dev.warn((filename ? filename + ':' : '') + (lineNumber ? lineNumber + ': ' : '') + 'functions are no longer called by default so @ is unnecessary in \'' + name + '\'.');
                }
            }
            return name.replace(/@/g, '');
        };
        var canStacheBindings = {
            behaviors: behaviors,
            getSiblingBindingData: getSiblingBindingData,
            bindings: bindings,
            getObservableFrom: getObservableFrom,
            makeDataBinding: makeDataBinding
        };
        canStacheBindings[canSymbol.for('can.callbackMap')] = bindings;
        viewCallbacks.attrs(canStacheBindings);
        module.exports = canStacheBindings;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-control@4.4.2#can-control*/
define('can-control@4.4.2#can-control', [
    'require',
    'exports',
    'module',
    'can-construct',
    'can-namespace',
    'can-assign',
    'can-stache-key',
    'can-reflect',
    'can-observation',
    'can-event-queue/map/map',
    'can-log/dev/dev',
    'can-string',
    'can-key/get/get',
    'can-dom-mutate',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var Construct = require('can-construct');
    var namespace = require('can-namespace');
    var assign = require('can-assign');
    var observeReader = require('can-stache-key');
    var canReflect = require('can-reflect');
    var Observation = require('can-observation');
    var canEvent = require('can-event-queue/map/map');
    var dev = require('can-log/dev/dev');
    var string = require('can-string');
    var get = require('can-key/get/get');
    var domMutate = require('can-dom-mutate');
    var canSymbol = require('can-symbol');
    var controlsSymbol = canSymbol.for('can.controls');
    var processors;
    var bind = function (el, ev, callback, queue) {
            canEvent.on.call(el, ev, callback, queue);
            return function () {
                canEvent.off.call(el, ev, callback, queue);
            };
        }, slice = [].slice, paramReplacer = /\{([^\}]+)\}/g, delegate = function (el, selector, ev, callback) {
            canEvent.on.call(el, ev, selector, callback);
            return function () {
                canEvent.off.call(el, ev, selector, callback);
            };
        }, binder = function (el, ev, callback, selector) {
            return selector ? delegate(el, selector.trim(), ev, callback) : bind(el, ev, callback);
        }, basicProcessor;
    var Control = Construct.extend('Control', {
        setup: function () {
            Construct.setup.apply(this, arguments);
            if (Control) {
                var control = this, funcName;
                control.actions = {};
                for (funcName in control.prototype) {
                    if (control._isAction(funcName)) {
                        control.actions[funcName] = control._action(funcName);
                    }
                }
            }
        },
        _shifter: function (context, name) {
            var method = typeof name === 'string' ? context[name] : name;
            if (typeof method !== 'function') {
                method = context[method];
            }
            var Control = this;
            function controlMethod() {
                var wrapped = Control.wrapElement(this);
                context.called = name;
                return method.apply(context, [wrapped].concat(slice.call(arguments, 0)));
            }
            if (process.env.NODE_ENV !== 'production') {
                Object.defineProperty(controlMethod, 'name', { value: canReflect.getName(this) + '[' + name + ']' });
            }
            return controlMethod;
        },
        _isAction: function (methodName) {
            var val = this.prototype[methodName], type = typeof val;
            return methodName !== 'constructor' && (type === 'function' || type === 'string' && typeof this.prototype[val] === 'function') && !!(Control.isSpecial(methodName) || processors[methodName] || /[^\w]/.test(methodName));
        },
        _action: function (methodName, options, controlInstance) {
            var readyCompute, unableToBind;
            paramReplacer.lastIndex = 0;
            if (options || !paramReplacer.test(methodName)) {
                var controlActionData = function () {
                    var delegate;
                    var name = methodName.replace(paramReplacer, function (matched, key) {
                        var value, parent;
                        if (this._isDelegate(options, key)) {
                            delegate = this._getDelegate(options, key);
                            return '';
                        }
                        key = this._removeDelegateFromKey(key);
                        parent = this._lookup(options)[0];
                        value = observeReader.read(parent, observeReader.reads(key), { readCompute: false }).value;
                        if (value === undefined && typeof window !== 'undefined') {
                            value = get(window, key);
                        }
                        if (!parent || !(canReflect.isObservableLike(parent) && canReflect.isMapLike(parent)) && !value) {
                            unableToBind = true;
                            return null;
                        }
                        if (typeof value === 'string') {
                            return value;
                        } else {
                            delegate = value;
                            return '';
                        }
                    }.bind(this));
                    name = name.trim();
                    var parts = name.split(/\s+/g), event = parts.pop();
                    return {
                        processor: this.processors[event] || basicProcessor,
                        parts: [
                            name,
                            parts.join(' '),
                            event
                        ],
                        delegate: delegate || undefined
                    };
                };
                if (process.env.NODE_ENV !== 'production') {
                    Object.defineProperty(controlActionData, 'name', { value: canReflect.getName(controlInstance || this.prototype) + '[' + methodName + '].actionData' });
                }
                readyCompute = new Observation(controlActionData, this);
                if (controlInstance) {
                    var handler = function (actionData) {
                        controlInstance._bindings.control[methodName](controlInstance.element);
                        controlInstance._bindings.control[methodName] = actionData.processor(actionData.delegate || controlInstance.element, actionData.parts[2], actionData.parts[1], methodName, controlInstance);
                    };
                    if (process.env.NODE_ENV !== 'production') {
                        Object.defineProperty(handler, 'name', { value: canReflect.getName(controlInstance) + '[' + methodName + '].handler' });
                    }
                    canReflect.onValue(readyCompute, handler, 'mutate');
                    if (process.env.NODE_ENV !== 'production') {
                        if (unableToBind) {
                            dev.log('can-control: No property found for handling ' + methodName);
                        }
                    }
                    controlInstance._bindings.readyComputes[methodName] = {
                        compute: readyCompute,
                        handler: handler
                    };
                }
                return readyCompute.get();
            }
        },
        _lookup: function (options) {
            return [
                options,
                window
            ];
        },
        _removeDelegateFromKey: function (key) {
            return key;
        },
        _isDelegate: function (options, key) {
            return key === 'element';
        },
        _getDelegate: function (options, key) {
            return undefined;
        },
        processors: {},
        defaults: {},
        convertElement: function (element) {
            element = typeof element === 'string' ? document.querySelector(element) : element;
            return this.wrapElement(element);
        },
        wrapElement: function (el) {
            return el;
        },
        unwrapElement: function (el) {
            return el;
        },
        isSpecial: function (eventName) {
            return eventName === 'inserted' || eventName === 'removed';
        }
    }, {
        setup: function (element, options) {
            var cls = this.constructor, pluginname = cls.pluginName || cls.shortName, arr;
            if (!element) {
                throw new Error('Creating an instance of a named control without passing an element');
            }
            this.element = cls.convertElement(element);
            if (pluginname && pluginname !== 'Control' && this.element.classList) {
                this.element.classList.add(pluginname);
            }
            arr = this.element[controlsSymbol];
            if (!arr) {
                arr = [];
                this.element[controlsSymbol] = arr;
            }
            arr.push(this);
            if (canReflect.isObservableLike(options) && canReflect.isMapLike(options)) {
                for (var prop in cls.defaults) {
                    if (!options.hasOwnProperty(prop)) {
                        observeReader.set(options, prop, cls.defaults[prop]);
                    }
                }
                this.options = options;
            } else {
                this.options = assign(assign({}, cls.defaults), options);
            }
            this.on();
            return [
                this.element,
                this.options
            ];
        },
        on: function (el, selector, eventName, func) {
            if (!el) {
                this.off();
                var cls = this.constructor, bindings = this._bindings, actions = cls.actions, element = this.constructor.unwrapElement(this.element), destroyCB = Control._shifter(this, 'destroy'), funcName, ready;
                for (funcName in actions) {
                    if (actions.hasOwnProperty(funcName)) {
                        ready = actions[funcName] || cls._action(funcName, this.options, this);
                        if (ready) {
                            bindings.control[funcName] = ready.processor(ready.delegate || element, ready.parts[2], ready.parts[1], funcName, this);
                        }
                    }
                }
                var removalDisposal = domMutate.onNodeRemoval(element, function () {
                    var doc = element.ownerDocument;
                    var ownerNode = doc.contains ? doc : doc.documentElement;
                    if (!ownerNode || ownerNode.contains(element) === false) {
                        destroyCB();
                    }
                });
                bindings.user.push(function () {
                    if (removalDisposal) {
                        removalDisposal();
                        removalDisposal = undefined;
                    }
                });
                return bindings.user.length;
            }
            if (typeof el === 'string') {
                func = eventName;
                eventName = selector;
                selector = el;
                el = this.element;
            }
            if (func === undefined) {
                func = eventName;
                eventName = selector;
                selector = null;
            }
            if (typeof func === 'string') {
                func = Control._shifter(this, func);
            }
            this._bindings.user.push(binder(el, eventName, func, selector));
            return this._bindings.user.length;
        },
        off: function () {
            var el = this.constructor.unwrapElement(this.element), bindings = this._bindings;
            if (bindings) {
                (bindings.user || []).forEach(function (value) {
                    value(el);
                });
                canReflect.eachKey(bindings.control || {}, function (value) {
                    value(el);
                });
                canReflect.eachKey(bindings.readyComputes || {}, function (value) {
                    canReflect.offValue(value.compute, value.handler, 'mutate');
                });
            }
            this._bindings = {
                user: [],
                control: {},
                readyComputes: {}
            };
        },
        destroy: function () {
            if (this.element === null) {
                if (process.env.NODE_ENV !== 'production') {
                    dev.warn('can-control: Control already destroyed');
                }
                return;
            }
            var Class = this.constructor, pluginName = Class.pluginName || Class.shortName && string.underscore(Class.shortName), controls;
            this.off();
            if (pluginName && pluginName !== 'can_control' && this.element.classList) {
                this.element.classList.remove(pluginName);
            }
            controls = this.element[controlsSymbol];
            if (controls) {
                controls.splice(controls.indexOf(this), 1);
            }
            this.element = null;
        }
    });
    processors = Control.processors;
    basicProcessor = function (el, event, selector, methodName, control) {
        return binder(el, event, Control._shifter(control, methodName), selector);
    };
    [
        'beforeremove',
        'change',
        'click',
        'contextmenu',
        'dblclick',
        'keydown',
        'keyup',
        'keypress',
        'mousedown',
        'mousemove',
        'mouseout',
        'mouseover',
        'mouseup',
        'reset',
        'resize',
        'scroll',
        'select',
        'submit',
        'focusin',
        'focusout',
        'mouseenter',
        'mouseleave',
        'touchstart',
        'touchmove',
        'touchcancel',
        'touchend',
        'touchleave',
        'inserted',
        'removed',
        'dragstart',
        'dragenter',
        'dragover',
        'dragleave',
        'drag',
        'drop',
        'dragend'
    ].forEach(function (v) {
        processors[v] = basicProcessor;
    });
    module.exports = namespace.Control = Control;
});
/*can-component@4.6.2#control/control*/
define('can-component@4.6.2#control/control', [
    'require',
    'exports',
    'module',
    'can-control',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var Control = require('can-control');
    var canReflect = require('can-reflect');
    var paramReplacer = /\{([^\}]+)\}/g;
    var ComponentControl = Control.extend({
        _lookup: function (options) {
            return [
                options.scope,
                options,
                window
            ];
        },
        _removeDelegateFromKey: function (key) {
            return key.replace(/^(scope|^viewModel)\./, '');
        },
        _isDelegate: function (options, key) {
            return key === 'scope' || key === 'viewModel';
        },
        _getDelegate: function (options, key) {
            return options[key];
        },
        _action: function (methodName, options, controlInstance) {
            var hasObjectLookup;
            paramReplacer.lastIndex = 0;
            hasObjectLookup = paramReplacer.test(methodName);
            if (!controlInstance && hasObjectLookup) {
                return;
            } else {
                return Control._action.apply(this, arguments);
            }
        }
    }, {
        setup: function (el, options) {
            this.scope = options.scope;
            this.viewModel = options.viewModel;
            return Control.prototype.setup.call(this, el, options);
        },
        off: function () {
            if (this._bindings) {
                canReflect.eachKey(this._bindings.readyComputes || {}, function (value) {
                    canReflect.offValue(value.compute, value.handler);
                });
            }
            Control.prototype.off.apply(this, arguments);
            this._bindings.readyComputes = {};
        },
        destroy: function () {
            Control.prototype.destroy.apply(this, arguments);
            if (typeof this.options.destroy === 'function') {
                this.options.destroy.apply(this, arguments);
            }
        }
    });
    module.exports = ComponentControl;
});
/*can-component@4.6.2#can-component*/
define('can-component@4.6.2#can-component', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-bind',
    'can-construct',
    'can-stache',
    'can-stache-bindings',
    'can-view-scope',
    'can-view-callbacks',
    'can-view-nodelist',
    'can-reflect',
    'can-simple-observable',
    'can-simple-map',
    'can-define/map/map',
    'can-log',
    'can-log/dev/dev',
    'can-assign',
    'can-observation-recorder',
    'can-queues',
    'can-dom-data',
    'can-child-nodes',
    'can-string',
    'can-dom-events',
    'can-dom-mutate',
    'can-dom-mutate/node',
    'can-symbol',
    'can-globals/document/document',
    './control/control',
    'can-view-model',
    'can-define/list/list'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var namespace = require('can-namespace');
        var Bind = require('can-bind');
        var Construct = require('can-construct');
        var stache = require('can-stache');
        var stacheBindings = require('can-stache-bindings');
        var Scope = require('can-view-scope');
        var viewCallbacks = require('can-view-callbacks');
        var nodeLists = require('can-view-nodelist');
        var canReflect = require('can-reflect');
        var SimpleObservable = require('can-simple-observable');
        var SimpleMap = require('can-simple-map');
        var DefineMap = require('can-define/map/map');
        var canLog = require('can-log');
        var canDev = require('can-log/dev/dev');
        var assign = require('can-assign');
        var ObservationRecorder = require('can-observation-recorder');
        var queues = require('can-queues');
        var domData = require('can-dom-data');
        var getChildNodes = require('can-child-nodes');
        var string = require('can-string');
        var domEvents = require('can-dom-events');
        var domMutate = require('can-dom-mutate');
        var domMutateNode = require('can-dom-mutate/node');
        var canSymbol = require('can-symbol');
        var DOCUMENT = require('can-globals/document/document');
        var ComponentControl = require('./control/control');
        require('can-view-model');
        require('can-define/list/list');
        stache.addBindings(stacheBindings);
        var createdByCanComponentSymbol = canSymbol('can.createdByCanComponent');
        var getValueSymbol = canSymbol.for('can.getValue');
        var setValueSymbol = canSymbol.for('can.setValue');
        var viewInsertSymbol = canSymbol.for('can.viewInsert');
        var viewModelSymbol = canSymbol.for('can.viewModel');
        var noop = function () {
        };
        function addContext(el, tagData, insertionElementTagData) {
            var vm, newScope;
            domData.set(el, 'preventDataBindings', true);
            var teardown = stacheBindings.behaviors.viewModel(el, insertionElementTagData, function createViewModel(initialData, hasDataBinding, bindingState) {
                if (bindingState && bindingState.isSettingOnViewModel === true) {
                    newScope = tagData.scope.addLetContext(initialData);
                    return newScope._context;
                } else {
                    return vm = new SimpleObservable(initialData);
                }
            }, undefined, true);
            if (!teardown) {
                return tagData;
            } else {
                return assign(assign({}, tagData), {
                    teardown: teardown,
                    scope: newScope || tagData.scope.add(vm)
                });
            }
        }
        function makeReplacementTagCallback(tagName, componentTagData, shadowTagData, leakScope, getPrimaryTemplate) {
            var options = shadowTagData.options;
            return function replacementTag(el, insertionElementTagData) {
                var template = getPrimaryTemplate(el) || insertionElementTagData.subtemplate, renderingLightContent = template !== insertionElementTagData.subtemplate;
                if (template) {
                    delete options.tags[tagName];
                    var tagData;
                    if (renderingLightContent) {
                        if (leakScope.toLightContent) {
                            tagData = addContext(el, {
                                scope: insertionElementTagData.scope.cloneFromRef(),
                                options: insertionElementTagData.options
                            }, insertionElementTagData);
                        } else {
                            tagData = addContext(el, componentTagData, insertionElementTagData);
                        }
                    } else {
                        tagData = addContext(el, insertionElementTagData, insertionElementTagData);
                    }
                    var nodeList = nodeLists.register([el], tagData.teardown || noop, insertionElementTagData.parentNodeList || true, insertionElementTagData.directlyNested);
                    nodeList.expression = '<can-slot name=\'' + el.getAttribute('name') + '\'/>';
                    var frag = template(tagData.scope, tagData.options, nodeList);
                    var newNodes = canReflect.toArray(getChildNodes(frag));
                    var oldNodes = nodeLists.update(nodeList, newNodes);
                    nodeLists.replace(oldNodes, frag);
                    options.tags[tagName] = replacementTag;
                }
            };
        }
        function getSetupFunctionForComponentVM(componentInitVM) {
            return ObservationRecorder.ignore(function (el, componentTagData, makeViewModel, initialVMData) {
                var bindingContext = {
                    element: el,
                    scope: componentTagData.scope,
                    parentNodeList: componentTagData.parentNodeList,
                    viewModel: undefined
                };
                var bindingSettings = {};
                var bindings = [];
                canReflect.eachKey(componentInitVM, function (parent, propName) {
                    var canGetParentValue = parent != null && !!parent[getValueSymbol];
                    var canSetParentValue = parent != null && !!parent[setValueSymbol];
                    if (canGetParentValue === true || canSetParentValue) {
                        var child = stacheBindings.getObservableFrom.viewModel({ name: propName }, bindingContext, bindingSettings);
                        var canBinding = new Bind({
                            child: child,
                            parent: parent,
                            queue: 'domUI',
                            updateChildName: 'update viewModel.' + propName + ' of <' + el.nodeName.toLowerCase() + '>',
                            updateParentName: 'update ' + canReflect.getName(parent) + ' of <' + el.nodeName.toLowerCase() + '>'
                        });
                        bindings.push({
                            binding: canBinding,
                            siblingBindingData: {
                                parent: {
                                    source: 'scope',
                                    exports: canGetParentValue
                                },
                                child: {
                                    source: 'viewModel',
                                    exports: canSetParentValue,
                                    name: propName
                                }
                            }
                        });
                    } else {
                        initialVMData[propName] = parent;
                    }
                });
                var initializeData = stacheBindings.behaviors.initializeViewModel(bindings, initialVMData, function (properties) {
                    return bindingContext.viewModel = makeViewModel(properties);
                }, bindingContext);
                return function () {
                    for (var attrName in initializeData.onTeardowns) {
                        initializeData.onTeardowns[attrName]();
                    }
                };
            });
        }
        var Component = Construct.extend({
            setup: function () {
                Construct.setup.apply(this, arguments);
                if (Component) {
                    var self = this;
                    if (this.prototype.events !== undefined && canReflect.size(this.prototype.events) !== 0) {
                        this.Control = ComponentControl.extend(this.prototype.events);
                    }
                    if (process.env.NODE_ENV !== 'production') {
                        if (this.prototype.viewModel && canReflect.isConstructorLike(this.prototype.viewModel)) {
                            canDev.warn('can-component: Assigning a DefineMap or constructor type to the viewModel property may not be what you intended. Did you mean ViewModel instead? More info: https://canjs.com/doc/can-component.prototype.ViewModel.html');
                        }
                    }
                    var protoViewModel = this.prototype.viewModel || this.prototype.scope;
                    if (protoViewModel && this.prototype.ViewModel) {
                        throw new Error('Cannot provide both a ViewModel and a viewModel property');
                    }
                    var vmName = string.capitalize(string.camelize(this.prototype.tag)) + 'VM';
                    if (this.prototype.ViewModel) {
                        if (typeof this.prototype.ViewModel === 'function') {
                            this.ViewModel = this.prototype.ViewModel;
                        } else {
                            this.ViewModel = DefineMap.extend(vmName, {}, this.prototype.ViewModel);
                        }
                    } else {
                        if (protoViewModel) {
                            if (typeof protoViewModel === 'function') {
                                if (canReflect.isObservableLike(protoViewModel.prototype) && canReflect.isMapLike(protoViewModel.prototype)) {
                                    this.ViewModel = protoViewModel;
                                } else {
                                    this.viewModelHandler = protoViewModel;
                                }
                            } else {
                                if (canReflect.isObservableLike(protoViewModel) && canReflect.isMapLike(protoViewModel)) {
                                    if (process.env.NODE_ENV !== 'production') {
                                        canLog.warn('can-component: ' + this.prototype.tag + ' is sharing a single map across all component instances');
                                    }
                                    this.viewModelInstance = protoViewModel;
                                } else {
                                    canLog.warn('can-component: ' + this.prototype.tag + ' is extending the viewModel into a can-simple-map');
                                    this.ViewModel = SimpleMap.extend(vmName, {}, protoViewModel);
                                }
                            }
                        } else {
                            this.ViewModel = SimpleMap.extend(vmName, {}, {});
                        }
                    }
                    if (this.prototype.template) {
                        if (process.env.NODE_ENV !== 'production') {
                            canLog.warn('can-component.prototype.template: is deprecated and will be removed in a future release. Use can-component.prototype.view');
                        }
                        this.view = this.prototype.template;
                    }
                    if (this.prototype.view) {
                        this.view = this.prototype.view;
                    }
                    if (typeof this.view === 'string') {
                        var viewName = string.capitalize(string.camelize(this.prototype.tag)) + 'View';
                        this.view = stache(viewName, this.view);
                    }
                    this.renderer = this.view;
                    var renderComponent = function (el, tagData) {
                        if (el[createdByCanComponentSymbol] === undefined) {
                            new self(el, tagData);
                        }
                    };
                    if (process.env.NODE_ENV !== 'production') {
                        Object.defineProperty(renderComponent, 'name', {
                            value: 'render <' + this.prototype.tag + '>',
                            configurable: true
                        });
                        renderComponent = queues.runAsTask(renderComponent, function (el, tagData) {
                            return [
                                'Rendering',
                                el,
                                'with',
                                tagData.scope
                            ];
                        });
                    }
                    viewCallbacks.tag(this.prototype.tag, renderComponent);
                }
            }
        }, {
            setup: function (el, componentTagData) {
                this._initialArgs = [
                    el,
                    componentTagData
                ];
                var component = this;
                var options = {
                    helpers: {},
                    tags: {}
                };
                if (componentTagData === undefined) {
                    if (el === undefined) {
                        componentTagData = {};
                    } else {
                        componentTagData = el;
                        el = undefined;
                    }
                }
                if (el === undefined) {
                    el = DOCUMENT().createElement(this.tag);
                    el[createdByCanComponentSymbol] = true;
                }
                this.element = el;
                if (componentTagData.initializeBindings === false && !this._skippedSetup) {
                    this._skippedSetup = this._torndown = true;
                    this.viewModel = Object.create(null);
                    return;
                }
                var componentContent = componentTagData.content;
                if (componentContent !== undefined) {
                    if (typeof componentContent === 'function') {
                        componentTagData.subtemplate = componentContent;
                    } else if (typeof componentContent === 'string') {
                        componentTagData.subtemplate = stache(componentContent);
                    }
                }
                var componentScope = componentTagData.scope;
                if (componentScope !== undefined && componentScope instanceof Scope === false) {
                    componentTagData.scope = new Scope(componentScope);
                }
                var componentTemplates = componentTagData.templates;
                if (componentTemplates !== undefined) {
                    canReflect.eachKey(componentTemplates, function (template, name) {
                        if (typeof template === 'string') {
                            var debugName = name + ' template';
                            componentTemplates[name] = stache(debugName, template);
                        }
                    });
                }
                var viewModel;
                var initialViewModelData = {};
                var preventDataBindings = domData.get(el, 'preventDataBindings');
                var teardownBindings;
                if (preventDataBindings) {
                    viewModel = el[viewModelSymbol];
                } else {
                    var setupFn;
                    if (componentTagData.setupBindings) {
                        setupFn = function (el, componentTagData, callback, initialViewModelData) {
                            return componentTagData.setupBindings(el, callback, initialViewModelData);
                        };
                    } else if (componentTagData.viewModel) {
                        setupFn = getSetupFunctionForComponentVM(componentTagData.viewModel);
                    } else {
                        setupFn = stacheBindings.behaviors.viewModel;
                    }
                    teardownBindings = setupFn(el, componentTagData, function (initialViewModelData) {
                        var ViewModel = component.constructor.ViewModel, viewModelHandler = component.constructor.viewModelHandler, viewModelInstance = component.constructor.viewModelInstance;
                        if (viewModelHandler) {
                            var scopeResult = viewModelHandler.call(component, initialViewModelData, componentTagData.scope, el);
                            if (canReflect.isObservableLike(scopeResult) && canReflect.isMapLike(scopeResult)) {
                                viewModelInstance = scopeResult;
                            } else if (canReflect.isObservableLike(scopeResult.prototype) && canReflect.isMapLike(scopeResult.prototype)) {
                                ViewModel = scopeResult;
                            } else {
                                ViewModel = SimpleMap.extend(scopeResult);
                            }
                        }
                        if (ViewModel) {
                            viewModelInstance = new ViewModel(initialViewModelData);
                        }
                        viewModel = viewModelInstance;
                        return viewModelInstance;
                    }, initialViewModelData);
                }
                this.viewModel = viewModel;
                el[viewModelSymbol] = viewModel;
                el.viewModel = viewModel;
                domData.set(el, 'preventDataBindings', true);
                var teardownFunctions = [];
                var callTeardownFunctions = function () {
                    for (var i = 0, len = teardownFunctions.length; i < len; i++) {
                        teardownFunctions[i]();
                    }
                };
                if (this.helpers !== undefined) {
                    canReflect.eachKey(this.helpers, function (val, prop) {
                        if (typeof val === 'function') {
                            options.helpers[prop] = val.bind(viewModel);
                        }
                    });
                }
                if (this.constructor.Control) {
                    this._control = new this.constructor.Control(el, {
                        scope: this.viewModel,
                        viewModel: this.viewModel,
                        destroy: callTeardownFunctions
                    });
                } else {
                    var removalDisposal = domMutate.onNodeRemoval(el, function () {
                        var doc = el.ownerDocument;
                        var rootNode = doc.contains ? doc : doc.documentElement;
                        if (!rootNode || !rootNode.contains(el)) {
                            if (removalDisposal) {
                                nodeRemoved = true;
                                removalDisposal();
                                callTeardownFunctions();
                                removalDisposal = null;
                                callTeardownFunctions = null;
                            }
                        }
                    });
                }
                var leakScope = {
                    toLightContent: this.leakScope === true,
                    intoShadowContent: this.leakScope === true
                };
                var hasShadowView = !!this.constructor.view;
                var shadowFragment;
                var betweenTagsView;
                var betweenTagsTagData;
                if (hasShadowView) {
                    var shadowTagData;
                    if (leakScope.intoShadowContent) {
                        shadowTagData = {
                            scope: componentTagData.scope.add(this.viewModel, { viewModel: true }),
                            options: options
                        };
                    } else {
                        shadowTagData = {
                            scope: new Scope(this.viewModel, null, { viewModel: true }),
                            options: options
                        };
                    }
                    options.tags['can-slot'] = makeReplacementTagCallback('can-slot', componentTagData, shadowTagData, leakScope, function (el) {
                        var templates = componentTagData.templates;
                        if (templates) {
                            return templates[el.getAttribute('name')];
                        }
                    });
                    options.tags.content = makeReplacementTagCallback('content', componentTagData, shadowTagData, leakScope, function () {
                        return componentTagData.subtemplate;
                    });
                    betweenTagsView = this.constructor.view;
                    betweenTagsTagData = shadowTagData;
                } else {
                    var lightTemplateTagData = {
                        scope: componentTagData.scope.add(this.viewModel, { viewModel: true }),
                        options: options
                    };
                    betweenTagsTagData = lightTemplateTagData;
                    betweenTagsView = componentTagData.subtemplate || el.ownerDocument.createDocumentFragment.bind(el.ownerDocument);
                }
                var viewModelDisconnectedCallback, insertionDisposal, componentInPage, nodeRemoved;
                var nodeList = nodeLists.register([], function () {
                    if (removalDisposal && !nodeRemoved) {
                        removalDisposal();
                        callTeardownFunctions();
                        removalDisposal = null;
                        callTeardownFunctions = null;
                    }
                    component._torndown = true;
                    domEvents.dispatch(el, 'beforeremove', false);
                    if (teardownBindings) {
                        teardownBindings();
                    }
                    if (viewModelDisconnectedCallback) {
                        viewModelDisconnectedCallback(el);
                    } else if (typeof viewModel.stopListening === 'function') {
                        viewModel.stopListening();
                    }
                    if (insertionDisposal) {
                        insertionDisposal();
                        insertionDisposal = null;
                    }
                }, componentTagData.parentNodeList || true, false);
                nodeList.expression = '<' + this.tag + '>';
                teardownFunctions.push(function () {
                    nodeLists.unregister(nodeList);
                });
                this.nodeList = nodeList;
                shadowFragment = betweenTagsView(betweenTagsTagData.scope, betweenTagsTagData.options, nodeList);
                domMutateNode.appendChild.call(el, shadowFragment);
                nodeLists.update(nodeList, getChildNodes(el));
                if (viewModel && viewModel.connectedCallback) {
                    var body = DOCUMENT().body;
                    componentInPage = body && body.contains(el);
                    if (componentInPage) {
                        viewModelDisconnectedCallback = viewModel.connectedCallback(el);
                    } else {
                        insertionDisposal = domMutate.onNodeInsertion(el, function () {
                            insertionDisposal();
                            insertionDisposal = null;
                            viewModelDisconnectedCallback = viewModel.connectedCallback(el);
                        });
                    }
                }
                component._torndown = false;
            }
        });
        Component.prototype[viewInsertSymbol] = function (viewData) {
            if (this._torndown) {
                this.setup.apply(this, this._initialArgs);
            }
            viewData.nodeList.newDeepChildren.push(this.nodeList);
            return this.element;
        };
        module.exports = namespace.Component = Component;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can@5.31.0#es/can-component*/
define('can@5.31.0#es/can-component', [
    'exports',
    'can-component'
], function (exports, _canComponent) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canComponent).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-stache*/
define('can@5.31.0#es/can-stache', [
    'exports',
    'can-stache'
], function (exports, _canStache) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canStache).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-stache-bindings*/
define('can@5.31.0#es/can-stache-bindings', [
    'exports',
    'can-stache-bindings'
], function (exports, _canStacheBindings) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canStacheBindings).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-simple-observable@2.4.2#make-compute/make-compute*/
define('can-simple-observable@2.4.2#make-compute/make-compute', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var Compute = function (newVal) {
        if (arguments.length) {
            return canReflect.setValue(this, newVal);
        } else {
            return canReflect.getValue(this);
        }
    };
    var translationHelpers = new WeakMap();
    module.exports = function (observable) {
        var compute = Compute.bind(observable);
        compute.on = compute.bind = compute.addEventListener = function (event, handler) {
            var translationHandler = translationHelpers.get(handler);
            if (!translationHandler) {
                translationHandler = function (newVal, oldVal) {
                    handler.call(compute, { type: 'change' }, newVal, oldVal);
                };
                if (process.env.NODE_ENV !== 'production') {
                    Object.defineProperty(translationHandler, 'name', { value: 'translationHandler(' + event + ')::' + canReflect.getName(observable) + '.onValue(' + canReflect.getName(handler) + ')' });
                }
                translationHelpers.set(handler, translationHandler);
            }
            canReflect.onValue(observable, translationHandler);
        };
        compute.off = compute.unbind = compute.removeEventListener = function (event, handler) {
            canReflect.offValue(observable, translationHelpers.get(handler));
        };
        canReflect.assignSymbols(compute, {
            'can.getValue': function () {
                return canReflect.getValue(observable);
            },
            'can.setValue': function (newVal) {
                return canReflect.setValue(observable, newVal);
            },
            'can.onValue': function (handler, queue) {
                return canReflect.onValue(observable, handler, queue);
            },
            'can.offValue': function (handler, queue) {
                return canReflect.offValue(observable, handler, queue);
            },
            'can.valueHasDependencies': function () {
                return canReflect.valueHasDependencies(observable);
            },
            'can.getPriority': function () {
                return canReflect.getPriority(observable);
            },
            'can.setPriority': function (newPriority) {
                canReflect.setPriority(observable, newPriority);
            },
            'can.isValueLike': true,
            'can.isFunctionLike': false
        });
        compute.isComputed = true;
        return compute;
    };
});
/*can-route@4.4.9#src/string-coercion*/
define('can-route@4.4.9#src/string-coercion', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-symbol'
], function (require, exports, module) {
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    function stringify(obj) {
        if (obj && typeof obj === 'object') {
            if ('serialize' in obj) {
                obj = obj.serialize();
            } else if (typeof obj.slice === 'function') {
                obj = obj.slice();
            } else {
                canReflect.assign({}, obj);
            }
            canReflect.eachKey(obj, function (val, prop) {
                obj[prop] = stringify(val);
            });
        } else if (obj !== undefined && obj !== null && typeof obj.toString === 'function') {
            obj = obj.toString();
        }
        return obj;
    }
    function stringCoercingMapDecorator(map) {
        var decoratorSymbol = canSymbol.for('can.route.stringCoercingMapDecorator');
        if (!map.attr[decoratorSymbol]) {
            var attrUndecoratedFunction = map.attr;
            map.attr = function (key) {
                var serializable = typeof key === 'string' && (this.define === undefined || this.define[key] === undefined || !!this.define[key].serialize), args;
                if (serializable) {
                    args = stringify(Array.apply(null, arguments));
                } else {
                    args = arguments;
                }
                return attrUndecoratedFunction.apply(this, args);
            };
            canReflect.setKeyValue(map.attr, decoratorSymbol, true);
        }
        return map;
    }
    exports.stringCoercingMapDecorator = stringCoercingMapDecorator;
    exports.stringify = stringify;
});
/*can-route@4.4.9#src/routedata*/
define('can-route@4.4.9#src/routedata', [
    'require',
    'exports',
    'module',
    'can-define/map/map',
    './string-coercion'
], function (require, exports, module) {
    var DefineMap = require('can-define/map/map');
    var stringify = require('./string-coercion').stringify;
    module.exports = DefineMap.extend('RouteData', { seal: false }, { '*': { type: stringify } });
});
/*can-route@4.4.9#src/binding-proxy*/
define('can-route@4.4.9#src/binding-proxy', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-symbol',
    'can-simple-observable'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var SimpleObservable = require('can-simple-observable');
    var urlDataObservable = new SimpleObservable(null);
    canReflect.setName(urlDataObservable, 'route.urlData');
    var bindingProxy = {
        defaultBinding: null,
        urlDataObservable: urlDataObservable,
        bindings: {},
        call: function () {
            var args = canReflect.toArray(arguments), prop = args.shift(), binding = urlDataObservable.value;
            if (binding === null) {
                throw new Error('there is no current binding!!!');
            }
            var method = binding[prop.indexOf('can.') === 0 ? canSymbol.for(prop) : prop];
            if (method.apply) {
                return method.apply(binding, args);
            } else {
                return method;
            }
        }
    };
    module.exports = bindingProxy;
});
/*can-route@4.4.9#src/regexps*/
define('can-route@4.4.9#src/regexps', function (require, exports, module) {
    'use strict';
    module.exports = {
        curlies: /\{\s*([\w.]+)\s*\}/g,
        colon: /\:([\w.]+)/g
    };
});
/*can-diff@1.4.5#map/map*/
define('can-diff@1.4.5#map/map', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    function defaultIdentity(a, b) {
        return a === b;
    }
    module.exports = function (oldObject, newObject) {
        var oldObjectClone, patches = [];
        oldObjectClone = canReflect.assignMap({}, oldObject);
        canReflect.eachKey(newObject, function (value, newProp) {
            if (!oldObject || !oldObject.hasOwnProperty(newProp)) {
                patches.push({
                    key: newProp,
                    type: 'add',
                    value: value
                });
            } else if (newObject[newProp] !== oldObject[newProp]) {
                patches.push({
                    key: newProp,
                    type: 'set',
                    value: value
                });
            }
            delete oldObjectClone[newProp];
        });
        for (var oldProp in oldObjectClone) {
            patches.push({
                key: oldProp,
                type: 'delete'
            });
        }
        return patches;
    };
});
/*can-route@4.4.9#src/register*/
define('can-route@4.4.9#src/register', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-log/dev/dev',
    './binding-proxy',
    './regexps',
    'can-diff/list/list',
    'can-diff/map/map',
    './routedata'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var dev = require('can-log/dev/dev');
    var bindingProxy = require('./binding-proxy');
    var regexps = require('./regexps');
    var diff = require('can-diff/list/list');
    var diffObject = require('can-diff/map/map');
    var RouteData = require('./routedata');
    function removeBackslash(string) {
        return string.replace(/\\/g, '');
    }
    function wrapQuote(string) {
        return (string + '').replace(/([.?*+\^$\[\]\\(){}|\-])/g, '\\$1');
    }
    var RouteRegistry = {
        routes: {},
        register: function (url, defaults) {
            var root = bindingProxy.call('root');
            if (root.lastIndexOf('/') === root.length - 1 && url.indexOf('/') === 0) {
                url = url.substr(1);
            }
            var matcher;
            if (regexps.colon.test(url)) {
                if (process.env.NODE_ENV !== 'production') {
                    dev.warn('update route "' + url + '" to "' + url.replace(regexps.colon, function (name, key) {
                        return '{' + key + '}';
                    }) + '"');
                }
                matcher = regexps.colon;
            } else {
                matcher = regexps.curlies;
            }
            defaults = defaults || {};
            var lastIndex = matcher.lastIndex = 0, names = [], res, test = '', next, querySeparator = bindingProxy.call('querySeparator'), matchSlashes = bindingProxy.call('matchSlashes');
            while (res = matcher.exec(url)) {
                names.push(res[1]);
                test += removeBackslash(url.substring(lastIndex, matcher.lastIndex - res[0].length));
                next = '\\' + (removeBackslash(url.substr(matcher.lastIndex, 1)) || querySeparator + (matchSlashes ? '' : '|/'));
                test += '([^' + next + ']' + (defaults[res[1]] ? '*' : '+') + ')';
                lastIndex = matcher.lastIndex;
            }
            test += removeBackslash(url.substr(lastIndex));
            if (process.env.NODE_ENV !== 'production') {
                canReflect.eachKey(RouteRegistry.routes, function (r) {
                    var existingKeys = r.names.concat(Object.keys(r.defaults)).sort(), keys = names.concat(Object.keys(defaults)).sort(), sameMapKeys = !diff(existingKeys, keys).length, sameDefaultValues = !diffObject(r.defaults, defaults).length, matchingRoutesWithoutTrailingSlash = r.route.replace(/\/$/, '') === url.replace(/\/$/, '');
                    if (sameMapKeys && sameDefaultValues && !matchingRoutesWithoutTrailingSlash) {
                        dev.warn('two routes were registered with matching keys:\n' + '\t(1) route.register("' + r.route + '", ' + JSON.stringify(r.defaults) + ')\n' + '\t(2) route.register("' + url + '", ' + JSON.stringify(defaults) + ')\n' + '(1) will always be chosen since it was registered first');
                    }
                });
            }
            if (this.data instanceof RouteData) {
                var routeData = this.data;
                var definePropertyWithDefault = function (name) {
                    var type = 'string', defaultValue = defaults[name], typeOf = typeof defaultValue;
                    if (defaultValue != null) {
                        type = typeOf;
                    }
                    canReflect.defineInstanceKey(routeData.constructor, name, { type: type });
                };
                canReflect.eachIndex(names, definePropertyWithDefault);
                canReflect.eachKey(defaults, function (value, key) {
                    definePropertyWithDefault(key);
                });
            }
            return RouteRegistry.routes[url] = {
                test: new RegExp('^' + test + '($|' + wrapQuote(querySeparator) + ')'),
                route: url,
                names: names,
                defaults: defaults,
                length: url.split('/').length
            };
        }
    };
    module.exports = RouteRegistry;
});
/*can-deparam@1.2.1#can-deparam*/
define('can-deparam@1.2.1#can-deparam', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var digitTest = /^\d+$/, keyBreaker = /([^\[\]]+)|(\[\])/g, paramTest = /([^?#]*)(#.*)?$/, entityRegex = /%([^0-9a-f][0-9a-f]|[0-9a-f][^0-9a-f]|[^0-9a-f][^0-9a-f])/i, prep = function (str) {
            str = str.replace(/\+/g, ' ');
            try {
                return decodeURIComponent(str);
            } catch (e) {
                return decodeURIComponent(str.replace(entityRegex, function (match, hex) {
                    return '%25' + hex;
                }));
            }
        };
    function isArrayLikeName(name) {
        return digitTest.test(name) || name === '[]';
    }
    function idenity(value) {
        return value;
    }
    module.exports = namespace.deparam = function (params, valueDeserializer) {
        valueDeserializer = valueDeserializer || idenity;
        var data = {}, pairs, lastPart;
        if (params && paramTest.test(params)) {
            pairs = params.split('&');
            pairs.forEach(function (pair) {
                var parts = pair.split('='), key = prep(parts.shift()), value = prep(parts.join('=')), current = data;
                if (key) {
                    parts = key.match(keyBreaker);
                    for (var j = 0, l = parts.length - 1; j < l; j++) {
                        var currentName = parts[j], nextName = parts[j + 1], currentIsArray = isArrayLikeName(currentName) && current instanceof Array;
                        if (!current[currentName]) {
                            if (currentIsArray) {
                                current.push(isArrayLikeName(nextName) ? [] : {});
                            } else {
                                current[currentName] = isArrayLikeName(nextName) ? [] : {};
                            }
                        }
                        if (currentIsArray) {
                            current = current[current.length - 1];
                        } else {
                            current = current[currentName];
                        }
                    }
                    lastPart = parts.pop();
                    if (isArrayLikeName(lastPart)) {
                        current.push(valueDeserializer(value));
                    } else {
                        current[lastPart] = valueDeserializer(value);
                    }
                }
            });
        }
        return data;
    };
});
/*can-route@4.4.9#src/deparam*/
define('can-route@4.4.9#src/deparam', [
    'require',
    'exports',
    'module',
    'can-deparam',
    'can-reflect',
    './binding-proxy',
    './register'
], function (require, exports, module) {
    'use strict';
    var deparam = require('can-deparam');
    var canReflect = require('can-reflect');
    var bindingProxy = require('./binding-proxy');
    var register = require('./register');
    function decode(str) {
        try {
            return decodeURIComponent(str);
        } catch (ex) {
            return unescape(str);
        }
    }
    function toURLFragment(url) {
        var root = bindingProxy.call('root');
        if (root.lastIndexOf('/') === root.length - 1 && url.indexOf('/') === 0) {
            url = url.substr(1);
        }
        return url;
    }
    function canRoute_getRule(url) {
        url = toURLFragment(url);
        var route = { length: -1 };
        canReflect.eachKey(register.routes, function (temp, name) {
            if (temp.test.test(url) && temp.length > route.length) {
                route = temp;
            }
        });
        if (route.length > -1) {
            return route;
        }
    }
    function canRoute_deparam(url) {
        var route = canRoute_getRule(url), querySeparator = bindingProxy.call('querySeparator'), paramsMatcher = bindingProxy.call('paramsMatcher');
        url = toURLFragment(url);
        if (route) {
            var parts = url.match(route.test), start = parts.shift(), remainder = url.substr(start.length - (parts[parts.length - 1] === querySeparator ? 1 : 0)), obj = remainder && paramsMatcher.test(remainder) ? deparam(remainder.slice(1)) : {};
            obj = canReflect.assignDeep(canReflect.assignDeep({}, route.defaults), obj);
            parts.forEach(function (part, i) {
                if (part && part !== querySeparator) {
                    obj[route.names[i]] = decode(part);
                }
            });
            return obj;
        }
        if (url.charAt(0) !== querySeparator) {
            url = querySeparator + url;
        }
        return paramsMatcher.test(url) ? deparam(url.slice(1)) : {};
    }
    canRoute_deparam.getRule = canRoute_getRule;
    module.exports = canRoute_deparam;
});
/*can-param@1.1.2#can-param*/
define('can-param@1.1.2#can-param', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    function buildParam(prefix, obj, add) {
        if (Array.isArray(obj)) {
            for (var i = 0, l = obj.length; i < l; ++i) {
                var inner = obj[i];
                var shouldIncludeIndex = typeof inner === 'object';
                var arrayIndex = shouldIncludeIndex ? '[' + i + ']' : '[]';
                buildParam(prefix + arrayIndex, inner, add);
            }
        } else if (obj && typeof obj === 'object') {
            for (var name in obj) {
                buildParam(prefix + '[' + name + ']', obj[name], add);
            }
        } else {
            add(prefix, obj);
        }
    }
    module.exports = namespace.param = function param(object) {
        var pairs = [], add = function (key, value) {
                pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
            };
        for (var name in object) {
            buildParam(name, object[name], add);
        }
        return pairs.join('&').replace(/%20/g, '+');
    };
});
/*can-route@4.4.9#src/param*/
define('can-route@4.4.9#src/param', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-param',
    './register',
    './regexps',
    './binding-proxy'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var param = require('can-param');
    var register = require('./register');
    var regexps = require('./regexps');
    var bindingProxy = require('./binding-proxy');
    function matchesData(route, data) {
        var count = 0, defaults = {};
        for (var name in route.defaults) {
            if (route.defaults[name] === data[name]) {
                defaults[name] = 1;
                count++;
            }
        }
        for (var i = 0; i < route.names.length; i++) {
            if (!data.hasOwnProperty(route.names[i])) {
                return -1;
            }
            if (!defaults[route.names[i]]) {
                count++;
            }
        }
        return count;
    }
    function getMatchedRoute(data, routeName) {
        var route, matches = 0, matchCount, propCount = 0;
        delete data.route;
        canReflect.eachKey(data, function () {
            propCount++;
        });
        canReflect.eachKey(register.routes, function (temp, name) {
            matchCount = matchesData(temp, data);
            if (matchCount > matches) {
                route = temp;
                matches = matchCount;
            }
            if (matchCount >= propCount) {
                return false;
            }
        });
        if (register.routes[routeName] && matchesData(register.routes[routeName], data) === matches) {
            route = register.routes[routeName];
        }
        return route;
    }
    function paramFromRoute(route, data) {
        var cpy, res, after, matcher;
        if (route) {
            cpy = canReflect.assignMap({}, data);
            matcher = regexps.colon.test(route.route) ? regexps.colon : regexps.curlies;
            res = route.route.replace(matcher, function (whole, name) {
                delete cpy[name];
                return data[name] === route.defaults[name] ? '' : encodeURIComponent(data[name]);
            }).replace('\\', '');
            canReflect.eachKey(route.defaults, function (val, name) {
                if (cpy[name] === val) {
                    delete cpy[name];
                }
            });
            after = param(cpy);
            return res + (after ? bindingProxy.call('querySeparator') + after : '');
        }
        return canReflect.size(data) === 0 ? '' : bindingProxy.call('querySeparator') + param(data);
    }
    function canRoute_param(data, currentRouteName) {
        return paramFromRoute(getMatchedRoute(data, currentRouteName), data);
    }
    module.exports = canRoute_param;
    canRoute_param.paramFromRoute = paramFromRoute;
    canRoute_param.getMatchedRoute = getMatchedRoute;
});
/*can-route@4.4.9#src/url-helpers*/
define('can-route@4.4.9#src/url-helpers', [
    'require',
    'exports',
    'module',
    './binding-proxy',
    './deparam',
    './param',
    'can-reflect',
    'can-string'
], function (require, exports, module) {
    'use strict';
    var bindingProxy = require('./binding-proxy');
    var routeDeparam = require('./deparam');
    var routeParam = require('./param');
    var canReflect = require('can-reflect');
    var string = require('can-string');
    function formatAttributes(props) {
        var tags = [];
        canReflect.eachKey(props, function (value, name) {
            var attributeName = name === 'className' ? 'class' : name, attributeValue = name === 'href' ? value : string.esc(value);
            tags.push(attributeName + '="' + attributeValue + '"');
        });
        return tags.join(' ');
    }
    function matchCheck(source, matcher) {
        for (var property in source) {
            var sourceProperty = source[property], matcherProperty = matcher[property];
            if (sourceProperty && matcherProperty && typeof sourceProperty === 'object' && typeof matcher === 'object') {
                return matchCheck(sourceProperty, matcherProperty);
            }
            if (sourceProperty != matcherProperty) {
                return false;
            }
        }
        return true;
    }
    function canRoute_url(options, merge) {
        if (merge) {
            var baseOptions = routeDeparam(bindingProxy.call('can.getValue'));
            options = canReflect.assignMap(canReflect.assignMap({}, baseOptions), options);
        }
        return bindingProxy.call('root') + routeParam(options);
    }
    module.exports = {
        url: canRoute_url,
        link: function canRoute_link(name, options, props, merge) {
            return '<a ' + formatAttributes(canReflect.assignMap({ href: canRoute_url(options, merge) }, props)) + '>' + name + '</a>';
        },
        isCurrent: function canRoute_isCurrent(options, subsetMatch) {
            var getValueSymbol = bindingProxy.call('can.getValue');
            if (subsetMatch) {
                var baseOptions = routeDeparam(getValueSymbol);
                return matchCheck(options, baseOptions);
            } else {
                return getValueSymbol === routeParam(options);
            }
        }
    };
});
/*can-route-hash@1.0.2#can-route-hash*/
define('can-route-hash@1.0.2#can-route-hash', [
    'require',
    'exports',
    'module',
    'can-globals/location/location',
    'can-reflect',
    'can-observation-recorder',
    'can-queues',
    'can-key-tree',
    'can-simple-observable',
    'can-dom-events'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        var paramsMatcher = /^(?:&[^=]+=[^&]*)+/;
        var LOCATION = require('can-globals/location/location');
        var canReflect = require('can-reflect');
        var ObservationRecorder = require('can-observation-recorder');
        var queues = require('can-queues');
        var KeyTree = require('can-key-tree');
        var SimpleObservable = require('can-simple-observable');
        var domEvents = require('can-dom-events');
        function getHash() {
            var loc = LOCATION();
            return loc.href.split(/#!?/)[1] || '';
        }
        function HashchangeObservable() {
            var dispatchHandlers = this.dispatchHandlers.bind(this);
            var self = this;
            this._value = '';
            this.handlers = new KeyTree([
                Object,
                Array
            ], {
                onFirst: function () {
                    self._value = getHash();
                    domEvents.addEventListener(window, 'hashchange', dispatchHandlers);
                },
                onEmpty: function () {
                    domEvents.removeEventListener(window, 'hashchange', dispatchHandlers);
                }
            });
        }
        HashchangeObservable.prototype = Object.create(SimpleObservable.prototype);
        HashchangeObservable.constructor = HashchangeObservable;
        canReflect.assign(HashchangeObservable.prototype, {
            paramsMatcher: paramsMatcher,
            querySeparator: '&',
            matchSlashes: false,
            root: '#!',
            dispatchHandlers: function () {
                var old = this._value;
                this._value = getHash();
                if (old !== this._value) {
                    queues.enqueueByQueue(this.handlers.getNode([]), this, [
                        this._value,
                        old
                    ], null, [
                        canReflect.getName(this),
                        'changed to',
                        this._value,
                        'from',
                        old
                    ]);
                }
            },
            get: function () {
                ObservationRecorder.add(this);
                return getHash();
            },
            set: function (path) {
                var loc = LOCATION();
                if (!path && !loc.hash) {
                } else if (loc.hash !== '#' + path) {
                    loc.hash = '!' + path;
                }
                return path;
            }
        });
        Object.defineProperty(HashchangeObservable.prototype, 'value', {
            get: function () {
                return canReflect.getValue(this);
            },
            set: function (value) {
                canReflect.setValue(this, value);
            }
        });
        canReflect.assignSymbols(HashchangeObservable.prototype, {
            'can.getValue': HashchangeObservable.prototype.get,
            'can.setValue': HashchangeObservable.prototype.set,
            'can.onValue': HashchangeObservable.prototype.on,
            'can.offValue': HashchangeObservable.prototype.off,
            'can.isMapLike': false,
            'can.valueHasDependencies': function () {
                return true;
            },
            'can.getName': function () {
                return 'HashchangeObservable<' + this._value + '>';
            }
        });
        module.exports = HashchangeObservable;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.2#is-web-worker/is-web-worker*/
define('can-globals@1.2.2#is-web-worker/is-web-worker', [
    'require',
    'exports',
    'module',
    'can-globals/can-globals-instance'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('can-globals/can-globals-instance');
        var funcConstructor = Function;
        globals.define('isWebWorker', function () {
            var global = funcConstructor('return this')();
            return typeof WorkerGlobalScope !== 'undefined' && global instanceof WorkerGlobalScope;
        });
        module.exports = globals.makeExport('isWebWorker');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-route@4.4.9#can-route*/
define('can-route@4.4.9#can-route', [
    'require',
    'exports',
    'module',
    'can-bind',
    'can-queues',
    'can-observation',
    'can-namespace',
    'can-log/dev/dev',
    'can-reflect',
    'can-symbol',
    'can-simple-observable/make-compute/make-compute',
    './src/routedata',
    './src/string-coercion',
    './src/register',
    './src/url-helpers',
    './src/param',
    './src/deparam',
    './src/binding-proxy',
    'can-route-hash',
    'can-globals/is-web-worker/is-web-worker',
    'can-globals/is-browser-window/is-browser-window'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var Bind = require('can-bind');
        var queues = require('can-queues');
        var Observation = require('can-observation');
        var namespace = require('can-namespace');
        var devLog = require('can-log/dev/dev');
        var canReflect = require('can-reflect');
        var canSymbol = require('can-symbol');
        var makeCompute = require('can-simple-observable/make-compute/make-compute');
        var RouteData = require('./src/routedata');
        var stringCoercingMapDecorator = require('./src/string-coercion').stringCoercingMapDecorator;
        var registerRoute = require('./src/register');
        var urlHelpers = require('./src/url-helpers');
        var routeParam = require('./src/param');
        var routeDeparam = require('./src/deparam');
        var bindingProxy = require('./src/binding-proxy');
        var Hashchange = require('can-route-hash');
        var isWebWorker = require('can-globals/is-web-worker/is-web-worker');
        var isBrowserWindow = require('can-globals/is-browser-window/is-browser-window');
        var hashchangeObservable = new Hashchange();
        bindingProxy.bindings.hashchange = hashchangeObservable;
        bindingProxy.defaultBinding = 'hashchange';
        bindingProxy.urlDataObservable.value = hashchangeObservable;
        function canRoute(url, defaults) {
            if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {
                devLog.warn('Call route.register(url,defaults) instead of calling route(url, defaults)');
            }
            registerRoute.register(url, defaults);
            return canRoute;
        }
        var timer;
        var currentRuleObservable = new Observation(function canRoute_matchedRoute() {
            var url = bindingProxy.call('can.getValue');
            return canRoute.rule(url);
        });
        function updateUrl(serializedData) {
            clearTimeout(timer);
            timer = setTimeout(function () {
                var serialized = canReflect.serialize(canRoute.data), currentRouteName = currentRuleObservable.get(), route = routeParam.getMatchedRoute(serialized, currentRouteName), path = routeParam.paramFromRoute(route, serialized);
                bindingProxy.call('can.setValue', path);
                var onStartComplete = canRoute._onStartComplete;
                if (onStartComplete) {
                    canRoute._onStartComplete = undefined;
                    onStartComplete();
                }
            }, 10);
        }
        function updateRouteData() {
            var hash = bindingProxy.call('can.getValue');
            queues.batch.start();
            var state = canRoute.deparam(hash);
            delete state.route;
            canReflect.update(canRoute.data, state);
            queues.batch.stop();
        }
        Object.defineProperty(canRoute, 'routes', {
            get: function () {
                return registerRoute.routes;
            },
            set: function (newVal) {
                return registerRoute.routes = newVal;
            }
        });
        Object.defineProperty(canRoute, 'defaultBinding', {
            get: function () {
                return bindingProxy.defaultBinding;
            },
            set: function (newVal) {
                bindingProxy.defaultBinding = newVal;
                var observable = bindingProxy.bindings[bindingProxy.defaultBinding];
                if (observable) {
                    bindingProxy.urlDataObservable.value = observable;
                }
            }
        });
        Object.defineProperty(canRoute, 'urlData', {
            get: function () {
                return bindingProxy.urlDataObservable.value;
            },
            set: function (newVal) {
                canRoute._teardown();
                bindingProxy.urlDataObservable.value = newVal;
            }
        });
        canReflect.assignMap(canRoute, {
            param: routeParam,
            deparam: routeDeparam,
            map: function (data) {
                if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {
                    devLog.warn('Set route.data directly instead of calling route.map');
                }
                canRoute.data = data;
            },
            start: function (val) {
                if (val !== true) {
                    canRoute._setup();
                    if (isBrowserWindow() || isWebWorker()) {
                        var hash = bindingProxy.call('can.getValue');
                        queues.batch.start();
                        var state = canRoute.deparam(hash);
                        delete state.route;
                        canReflect.assign(canRoute.data, state);
                        queues.batch.stop();
                        updateUrl();
                    }
                }
                return canRoute;
            },
            url: urlHelpers.url,
            link: urlHelpers.link,
            isCurrent: urlHelpers.isCurrent,
            bindings: bindingProxy.bindings,
            _setup: function () {
                if (!canRoute._canBinding) {
                    var bindingOptions = {
                        parent: bindingProxy.urlDataObservable.value,
                        setParent: updateUrl,
                        child: canRoute.serializedObservation,
                        setChild: updateRouteData,
                        onInitDoNotUpdateChild: true,
                        cycles: 1,
                        queue: 'notify'
                    };
                    if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {
                        bindingOptions.updateChildName = 'can-route.updateRouteData';
                        bindingOptions.updateParentName = 'can-route.updateUrl';
                    }
                    canRoute._canBinding = new Bind(bindingOptions);
                    canRoute._canBinding.start();
                }
            },
            _teardown: function () {
                if (canRoute._canBinding) {
                    canRoute._canBinding.stop();
                    canRoute._canBinding = null;
                }
                clearTimeout(timer);
            },
            stop: function () {
                this._teardown();
                return canRoute;
            },
            currentRule: makeCompute(currentRuleObservable),
            register: registerRoute.register,
            rule: function (url) {
                var rule = routeDeparam.getRule(url);
                if (rule) {
                    return rule.route;
                }
            }
        });
        var bindToCanRouteData = function (name, args) {
            if (!canRoute.data[name]) {
                return canRoute.data.addEventListener.apply(canRoute.data, args);
            }
            return canRoute.data[name].apply(canRoute.data, args);
        };
        [
            'addEventListener',
            'removeEventListener',
            'bind',
            'unbind',
            'on',
            'off'
        ].forEach(function (name) {
            canRoute[name] = function (eventName, handler) {
                if (eventName === '__url') {
                    return bindingProxy.call('can.onValue', handler);
                }
                return bindToCanRouteData(name, arguments);
            };
        });
        [
            'delegate',
            'undelegate',
            'removeAttr',
            'compute',
            '_get',
            '___get',
            'each'
        ].forEach(function (name) {
            canRoute[name] = function () {
                return bindToCanRouteData(name, arguments);
            };
        });
        var routeData, serializedObservation, serializedCompute;
        function setRouteData(data) {
            routeData = data;
            return routeData;
        }
        Object.defineProperty(canRoute, 'serializedObservation', {
            get: function () {
                if (!serializedObservation) {
                    serializedObservation = new Observation(function canRoute_data_serialized() {
                        return canReflect.serialize(canRoute.data);
                    });
                }
                return serializedObservation;
            }
        });
        Object.defineProperty(canRoute, 'serializedCompute', {
            get: function () {
                if (!serializedCompute) {
                    serializedCompute = makeCompute(canRoute.serializedObservation);
                }
                return serializedCompute;
            }
        });
        var viewModelSymbol = canSymbol.for('can.viewModel');
        Object.defineProperty(canRoute, 'data', {
            get: function () {
                if (routeData) {
                    return routeData;
                } else {
                    return setRouteData(new RouteData());
                }
            },
            set: function (data) {
                if (canReflect.isConstructorLike(data)) {
                    data = new data();
                }
                if (data && data[viewModelSymbol] !== undefined) {
                    data = data[viewModelSymbol];
                }
                if ('attr' in data) {
                    setRouteData(stringCoercingMapDecorator(data));
                } else {
                    setRouteData(data);
                }
            }
        });
        canRoute.attr = function (prop, value) {
            console.warn('can-route: can-route.attr is deprecated. Use methods on can-route.data instead.');
            if ('attr' in canRoute.data) {
                return canRoute.data.attr.apply(canRoute.data, arguments);
            } else {
                if (arguments.length > 1) {
                    canReflect.setKeyValue(canRoute.data, prop, value);
                    return canRoute.data;
                } else if (typeof prop === 'object') {
                    canReflect.assignDeep(canRoute.data, prop);
                    return canRoute.data;
                } else if (arguments.length === 1) {
                    return canReflect.getKeyValue(canRoute.data, prop);
                } else {
                    return canReflect.unwrap(canRoute.data);
                }
            }
        };
        canReflect.setKeyValue(canRoute, canSymbol.for('can.isFunctionLike'), false);
        canRoute.matched = canRoute.currentRule;
        canRoute.current = canRoute.isCurrent;
        module.exports = namespace.route = canRoute;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-stache-route-helpers@1.2.1#can-stache-route-helpers*/
define('can-stache-route-helpers@1.2.1#can-stache-route-helpers', [
    'require',
    'exports',
    'module',
    'can-stache/helpers/core',
    'can-route',
    'can-stache/src/expression',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var helpers = require('can-stache/helpers/core');
    var route = require('can-route');
    var stacheExpression = require('can-stache/src/expression');
    var canReflect = require('can-reflect');
    var looksLikeOptions = helpers.looksLikeOptions;
    var calculateArgs = function () {
        var finalParams, finalMerge, optionsArg;
        canReflect.eachIndex(arguments, function (arg) {
            if (typeof arg === 'boolean') {
                finalMerge = arg;
            } else if (arg && typeof arg === 'object') {
                if (!looksLikeOptions(arg)) {
                    finalParams = helpers.resolveHash(arg);
                } else {
                    optionsArg = arg;
                }
            }
        });
        if (!finalParams && optionsArg) {
            finalParams = helpers.resolveHash(optionsArg.hash);
        }
        return {
            finalParams: finalParams || {},
            finalMerge: finalMerge,
            optionsArg: optionsArg
        };
    };
    var routeUrl = function () {
        var args = calculateArgs.apply(this, arguments);
        return route.url(args.finalParams, typeof args.finalMerge === 'boolean' ? args.finalMerge : undefined);
    };
    helpers.registerHelper('routeUrl', routeUrl);
    var routeCurrent = function () {
        var args = calculateArgs.apply(this, arguments);
        var result = route.isCurrent(args.finalParams, typeof args.finalMerge === 'boolean' ? args.finalMerge : undefined);
        if (args.optionsArg && !(args.optionsArg instanceof stacheExpression.Call)) {
            if (result) {
                return args.optionsArg.fn();
            } else {
                return args.optionsArg.inverse();
            }
        } else {
            return result;
        }
    };
    routeCurrent.callAsMethod = true;
    helpers.registerHelper('routeCurrent', routeCurrent);
    module.exports = {
        routeUrl: routeUrl,
        routeCurrent: routeCurrent
    };
});
/*can@5.31.0#es/can-stache-route-helpers*/
define('can@5.31.0#es/can-stache-route-helpers', [
    'exports',
    'can-stache-route-helpers'
], function (exports, _canStacheRouteHelpers) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canStacheRouteHelpers).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-view-callbacks*/
define('can@5.31.0#es/can-view-callbacks', [
    'exports',
    'can-view-callbacks'
], function (exports, _canViewCallbacks) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canViewCallbacks).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-view-live*/
define('can@5.31.0#es/can-view-live', [
    'exports',
    'can-view-live'
], function (exports, _canViewLive) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canViewLive).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-view-model*/
define('can@5.31.0#es/can-view-model', [
    'exports',
    'can-view-model'
], function (exports, _canViewModel) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canViewModel).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-view-nodelist*/
define('can@5.31.0#es/can-view-nodelist', [
    'exports',
    'can-view-nodelist'
], function (exports, _canViewNodelist) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canViewNodelist).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-view-parser*/
define('can@5.31.0#es/can-view-parser', [
    'exports',
    'can-view-parser'
], function (exports, _canViewParser) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canViewParser).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-view-scope*/
define('can@5.31.0#es/can-view-scope', [
    'exports',
    'can-view-scope'
], function (exports, _canViewScope) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canViewScope).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-view-target*/
define('can@5.31.0#es/can-view-target', [
    'exports',
    'can-view-target'
], function (exports, _canViewTarget) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canViewTarget).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-key@1.2.1#sub/sub*/
define('can-key@1.2.1#sub/sub', [
    'require',
    'exports',
    'module',
    '../utils',
    '../get/get',
    'can-reflect',
    '../delete/delete'
], function (require, exports, module) {
    'use strict';
    var utils = require('../utils');
    var get = require('../get/get');
    var canReflect = require('can-reflect');
    var deleteKey = require('../delete/delete');
    module.exports = function sub(str, data, remove) {
        var obs = [];
        str = str || '';
        obs.push(str.replace(utils.strReplacer, function (whole, inside) {
            var ob = get(data, inside);
            if (remove === true) {
                deleteKey(data, inside);
            }
            if (ob === undefined || ob === null) {
                obs = null;
                return '';
            }
            if (!canReflect.isPrimitive(ob) && obs) {
                obs.push(ob);
                return '';
            }
            return '' + ob;
        }));
        return obs === null ? obs : obs.length <= 1 ? obs[0] : obs;
    };
});
/*can-query-logic@1.2.1#src/set*/
define('can-query-logic@1.2.1#src/set', [
    'require',
    'exports',
    'module',
    'can-symbol',
    'can-reflect'
], function (require, exports, module) {
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    var set;
    var addSerializeToThis = function (obj) {
        return canReflect.assignSymbols(obj, {
            'can.serialize': function () {
                return this;
            }
        });
    };
    function reverseArgs(fn) {
        return function (first, second) {
            return fn.call(this, second, first);
        };
    }
    var setComparisonsSymbol = canSymbol.for('can.setComparisons');
    function addComparators(type1, type2, comparators) {
        var comparisons = type1[setComparisonsSymbol];
        if (!type1[setComparisonsSymbol]) {
            comparisons = type1[setComparisonsSymbol] = new Map();
        }
        var subMap = comparisons.get(type1);
        if (!subMap) {
            subMap = new Map();
            comparisons.set(type1, subMap);
        }
        var existingComparators = subMap.get(type2);
        if (existingComparators) {
            for (var prop in comparators) {
                if (existingComparators.hasOwnProperty(prop)) {
                    console.warn('Overwriting ' + type1.name + ' ' + prop + ' ' + type2.name + ' comparitor');
                }
                existingComparators[prop] = comparators[prop];
            }
        } else {
            subMap.set(type2, comparators);
        }
    }
    function Identity() {
    }
    var typeMap = {
        'number': Identity,
        'string': Identity,
        'undefined': Identity,
        'boolean': Identity
    };
    var get = {};
    [
        'intersection',
        'difference',
        'union'
    ].forEach(function (prop) {
        get[prop] = function (forwardComparators, value1, value2) {
            if (value2 === set.UNIVERSAL) {
                if (prop === 'intersection') {
                    return value1;
                }
                if (prop === 'union') {
                    return set.UNIVERSAL;
                }
                if (prop === 'difference') {
                    return set.EMPTY;
                }
            }
            if (value1 === set.UNIVERSAL) {
                if (prop === 'intersection') {
                    return value1;
                }
                if (prop === 'union') {
                    return set.UNIVERSAL;
                }
            }
            if (forwardComparators && forwardComparators[prop]) {
                var result = forwardComparators[prop](value1, value2);
                if (result === undefined && forwardComparators.undefinedIsEmptySet === true) {
                    return set.EMPTY;
                } else {
                    return result;
                }
            } else {
                throw new Error('Unable to perform ' + prop + ' between ' + set.getType(value1).name + ' and ' + set.getType(value2).name);
            }
        };
    });
    set = {
        UNIVERSAL: canReflect.assignSymbols({ name: 'UNIVERSAL' }, {
            'can.serialize': function () {
                return this;
            },
            'can.isMember': function () {
                return true;
            }
        }),
        EMPTY: canReflect.assignSymbols({ name: 'EMPTY' }, {
            'can.serialize': function () {
                return this;
            },
            'can.isMember': function () {
                return false;
            }
        }),
        UNDEFINABLE: addSerializeToThis({ name: 'UNDEFINABLE' }),
        UNKNOWABLE: addSerializeToThis({ name: 'UNKNOWABLE' }),
        Identity: Identity,
        isSpecial: function (setA) {
            return setA === set.UNIVERSAL || setA === set.EMPTY || setA === set.UNDEFINABLE || setA === set.UNKNOWABLE;
        },
        isDefinedAndHasMembers: function (setA) {
            if (setA !== set.EMPTY && setA !== set.UNDEFINABLE && setA !== set.UNKNOWABLE) {
                return !!setA;
            } else {
                return false;
            }
        },
        getType: function (value) {
            if (value === set.UNIVERSAL) {
                return set.UNIVERSAL;
            }
            if (value === set.EMPTY) {
                return set.EMPTY;
            }
            if (value === set.UNKNOWABLE) {
                return set.UNKNOWABLE;
            }
            if (value === null) {
                return Identity;
            }
            if (typeMap.hasOwnProperty(typeof value)) {
                return typeMap[typeof value];
            }
            return value.constructor;
        },
        ownAndMemberValue: function (startOwnValue, startMemberValue) {
            if (startOwnValue != null || startMemberValue != null) {
                var ownValue = startOwnValue != null ? startOwnValue.valueOf() : startOwnValue, memberValue = startMemberValue != null ? startMemberValue.valueOf() : startMemberValue;
                if (startOwnValue == null || startMemberValue == null) {
                    return {
                        own: ownValue,
                        member: memberValue
                    };
                }
                if (ownValue == null || ownValue.constructor !== memberValue.constructor) {
                    memberValue = new startOwnValue.constructor(memberValue).valueOf();
                }
                return {
                    own: ownValue,
                    member: memberValue
                };
            }
            return {
                own: startMemberValue,
                member: startOwnValue
            };
        },
        getComparisons: function (Type1, Type2) {
            var comparisons = Type1[setComparisonsSymbol];
            if (comparisons) {
                var subMap = comparisons.get(Type1);
                if (subMap) {
                    return subMap.get(Type2);
                }
            }
        },
        hasComparisons: function (Type) {
            return !!Type[setComparisonsSymbol];
        },
        defineComparison: function (type1, type2, comparators) {
            addComparators(type1, type2, comparators);
            if (type1 !== type2) {
                var reverse = {};
                for (var prop in comparators) {
                    if (prop !== 'difference') {
                        reverse[prop] = reverseArgs(comparators[prop]);
                    }
                }
                addComparators(type2, type1, reverse);
            }
        },
        isSubset: function (value1, value2) {
            if (value1 === value2) {
                return true;
            }
            var Type1 = set.getType(value1), Type2 = set.getType(value2);
            var forwardComparators = set.getComparisons(Type1, Type2);
            if (forwardComparators) {
                var intersection = get.intersection(forwardComparators, value1, value2);
                var difference = get.difference(forwardComparators, value1, value2);
                if (intersection === set.UNKNOWABLE || difference === set.UNKNOWABLE) {
                    return undefined;
                } else if (intersection !== set.EMPTY && difference === set.EMPTY) {
                    return true;
                } else {
                    return false;
                }
            } else {
                throw new Error('Unable to perform subset comparison between ' + Type1.name + ' and ' + Type2.name);
            }
        },
        isProperSubset: function (setA, setB) {
            return set.isSubset(setA, setB) && !set.isEqual(setA, setB);
        },
        isEqual: function (value1, value2) {
            if (value1 === set.UNKNOWABLE || value2 === set.UNKNOWABLE) {
                return set.UNKNOWABLE;
            }
            var isSpecial1 = set.isSpecial(value1), isSpecial2 = set.isSpecial(value2);
            if (isSpecial1 && isSpecial2) {
                return isSpecial1 === isSpecial2;
            }
            var Type1 = set.getType(value1), Type2 = set.getType(value2);
            if (value1 === value2) {
                return true;
            }
            var forwardComparators = set.getComparisons(Type1, Type2);
            var reverseComparators = set.getComparisons(Type2, Type1);
            if (forwardComparators && reverseComparators) {
                var intersection = get.intersection(forwardComparators, value1, value2);
                var difference = get.difference(forwardComparators, value1, value2);
                if (intersection !== set.EMPTY && difference === set.EMPTY) {
                    var reverseIntersection = get.intersection(reverseComparators, value2, value1);
                    var reverseDifference = get.difference(reverseComparators, value2, value1);
                    return reverseIntersection !== set.EMPTY && reverseDifference === set.EMPTY;
                } else {
                    return false;
                }
            } else {
                var values = set.ownAndMemberValue(value1, value2);
                if (canReflect.isPrimitive(values.own) && canReflect.isPrimitive(values.member)) {
                    return values.own === values.member;
                } else {
                    throw new Error('Unable to perform equal comparison between ' + Type1.name + ' and ' + Type2.name);
                }
            }
        },
        union: function (value1, value2) {
            if (value1 === set.UNIVERSAL || value2 === set.UNIVERSAL) {
                return set.UNIVERSAL;
            }
            if (value1 === set.EMPTY) {
                return value2;
            } else if (value2 === set.EMPTY) {
                return value1;
            }
            if (value1 === set.UNKNOWABLE || value2 === set.UNKNOWABLE) {
                return set.UNKNOWABLE;
            }
            var Type1 = set.getType(value1), Type2 = set.getType(value2);
            var forwardComparators = set.getComparisons(Type1, Type2);
            return get.union(forwardComparators, value1, value2);
        },
        intersection: function (value1, value2) {
            if (value1 === set.UNIVERSAL) {
                return value2;
            }
            if (value2 === set.UNIVERSAL) {
                return value1;
            }
            if (value1 === set.EMPTY || value2 === set.EMPTY) {
                return set.EMPTY;
            }
            if (value1 === set.UNKNOWABLE || value2 === set.UNKNOWABLE) {
                return set.UNKNOWABLE;
            }
            var Type1 = set.getType(value1), Type2 = set.getType(value2);
            var forwardComparators = set.getComparisons(Type1, Type2);
            if (forwardComparators) {
                return get.intersection(forwardComparators, value1, value2);
            } else {
                throw new Error('Unable to perform intersection comparison between ' + Type1.name + ' and ' + Type2.name);
            }
        },
        difference: function (value1, value2) {
            if (value1 === set.EMPTY) {
                return set.EMPTY;
            }
            if (value2 === set.EMPTY) {
                return value1;
            }
            if (value1 === set.UNKNOWABLE || value2 === set.UNKNOWABLE) {
                return set.UNKNOWABLE;
            }
            var Type1 = set.getType(value1), Type2 = set.getType(value2);
            var forwardComparators = set.getComparisons(Type1, Type2);
            if (forwardComparators) {
                return get.difference(forwardComparators, value1, value2);
            } else {
                throw new Error('Unable to perform difference comparison between ' + Type1.name + ' and ' + Type2.name);
            }
        },
        indexWithEqual: function (arr, value) {
            for (var i = 0, len = arr.length; i < len; i++) {
                if (set.isEqual(arr[i], value)) {
                    return i;
                }
            }
            return -1;
        }
    };
    function identityIntersection(v1, v2) {
        return v1 === v2 ? v1 : set.EMPTY;
    }
    function identityDifference(v1, v2) {
        return v1 === v2 ? set.EMPTY : v1;
    }
    function identityUnion(v1, v2) {
        return v1 === v2 ? v1 : set.UNDEFINABLE;
    }
    var identityComparitor = {
        intersection: identityIntersection,
        difference: identityDifference,
        union: identityUnion
    };
    set.defineComparison(Identity, Identity, identityComparitor);
    set.defineComparison(set.UNIVERSAL, set.UNIVERSAL, identityComparitor);
    module.exports = set;
});
/*can-fixture@3.1.7#data-from-url*/
define('can-fixture@3.1.7#data-from-url', function (require, exports, module) {
    var replacer = /\{([^\}]+)\}/g;
    module.exports = function dataFromUrl(fixtureUrl, url) {
        if (!fixtureUrl) {
            return {};
        }
        var order = [], fixtureUrlAdjusted = fixtureUrl.replace('.', '\\.').replace('?', '\\?'), res = new RegExp(fixtureUrlAdjusted.replace(replacer, function (whole, part) {
                order.push(part);
                return '([^/]+)';
            }) + '$').exec(url), data = {};
        if (!res) {
            return null;
        }
        res.shift();
        order.forEach(function (name) {
            data[name] = res.shift();
        });
        return data;
    };
});
/*can-query-logic@1.2.1#src/array-union-intersection-difference*/
define('can-query-logic@1.2.1#src/array-union-intersection-difference', [
    'require',
    'exports',
    'module',
    './set'
], function (require, exports, module) {
    var SET = require('./set');
    function getValue(value) {
        return value == null ? value : value.valueOf();
    }
    module.exports = function arrayUnionIntersectionDifference(arr1, arr2) {
        var set = new Set();
        var intersection = [];
        var union = [];
        var difference = arr1.slice(0);
        arr1.forEach(function (value) {
            set.add(getValue(value));
            union.push(value);
        });
        arr2.forEach(function (value) {
            if (set.has(getValue(value))) {
                intersection.push(value);
                var index = SET.indexWithEqual(difference, value);
                if (index !== -1) {
                    difference.splice(index, 1);
                }
            } else {
                union.push(value);
            }
        });
        return {
            intersection: intersection,
            union: union,
            difference: difference
        };
    };
});
/*can-query-logic@1.2.1#src/types/comparisons-common*/
define('can-query-logic@1.2.1#src/types/comparisons-common', [
    'require',
    'exports',
    'module',
    '../set'
], function (require, exports, module) {
    var set = require('../set');
    function isMemberThatUsesTestOnValues(value) {
        return this.constructor.test(this.values, value);
    }
    exports.isMemberThatUsesTestOnValues = isMemberThatUsesTestOnValues;
});
/*can-query-logic@1.2.1#src/types/types*/
define('can-query-logic@1.2.1#src/types/types', function (require, exports, module) {
    module.exports = {};
});
/*can-query-logic@1.2.1#src/types/values-not*/
define('can-query-logic@1.2.1#src/types/values-not', [
    'require',
    'exports',
    'module',
    '../set',
    './types'
], function (require, exports, module) {
    var set = require('../set');
    var keysLogic = require('./types');
    function NotIdentity(value) {
        this.value = value;
    }
    var Identity = set.Identity;
    set.defineComparison(set.UNIVERSAL, Identity, {
        difference: function (universe, value) {
            return new NotIdentity(value);
        }
    });
    set.defineComparison(set.UNIVERSAL, NotIdentity, {
        difference: function (universe, not) {
            return not.value;
        }
    });
    set.defineComparison(NotIdentity, NotIdentity, {});
    set.defineComparison(NotIdentity, Identity, {
        union: function (not, primitive) {
            if (set.isEqual(not.value, primitive)) {
                return set.UNIVERSAL;
            } else {
                throw new Error('Not,Identity Union is not filled out');
            }
        },
        intersection: function (not, primitive) {
            return set.isEqual(!not.value, primitive) ? primitive : set.EMPTY;
        },
        difference: function difference(not, primitive) {
            if (set.isEqual(not.value, primitive)) {
                return not;
            } else {
                return set.UNDEFINABLE;
            }
        }
    });
    set.defineComparison(Identity, NotIdentity, {
        difference: function (primitive, not) {
            if (set.isEqual(primitive, not.value)) {
                return primitive;
            } else {
                return set.UNDEFINABLE;
            }
        }
    });
    NotIdentity.prototype.isMember = function (value) {
        if (this.value && typeof this.value.isMember === 'function') {
            return !this.value.isMember(value);
        } else {
            var values = set.ownAndMemberValue(this.value, value);
            return values.own !== values.member;
        }
    };
    module.exports = keysLogic.Not = NotIdentity;
});
/*can-query-logic@1.2.1#src/types/array-comparisons*/
define('can-query-logic@1.2.1#src/types/array-comparisons', [
    'require',
    'exports',
    'module',
    './comparisons-common',
    '../set',
    './values-not'
], function (require, exports, module) {
    var common = require('./comparisons-common');
    var set = require('../set');
    var ValuesNot = require('./values-not');
    var comparisons = {
        All: function (values) {
            this.values = values;
        }
    };
    comparisons.All.prototype.isMember = common.isMemberThatUsesTestOnValues;
    var is = comparisons;
    comparisons.All.test = function (allValues, recordValues) {
        return allValues.every(function (allValue) {
            return recordValues.some(function (recordValue) {
                var values = set.ownAndMemberValue(allValue, recordValue);
                return values.own === values.member;
            });
        });
    };
    function makeThrowCannotCompare(type, left, right) {
        return function () {
            throw new Error('can-query-logic: Cannot perform ' + type + ' between ' + left + ' and ' + right);
        };
    }
    function throwComparatorAllTypes(type1, type2) {
        return {
            union: makeThrowCannotCompare('union', type1, type2),
            difference: makeThrowCannotCompare('difference', type1, type2),
            intersection: makeThrowCannotCompare('intersection', type1, type2)
        };
    }
    function throwComparatorDifference(type1, type2) {
        return { difference: makeThrowCannotCompare('difference', type1, type2) };
    }
    var comparators = {
        UNIVERSAL_All: {
            difference: function (universe, all) {
                return new ValuesNot(all);
            }
        },
        All_UNIVERSAL: {
            difference: function () {
                return set.EMPTY;
            }
        },
        All_All: {
            union: function (a, b) {
                return new is.Or([
                    a,
                    b
                ]);
            }
        },
        In_All: throwComparatorDifference('In', 'All'),
        All_In: throwComparatorAllTypes('All', 'In'),
        NotIn_All: throwComparatorDifference('NotIn', 'All'),
        All_NotIn: throwComparatorAllTypes('All', 'NotIn'),
        GreaterThan_All: throwComparatorDifference('GreaterThan', 'All'),
        All_GreaterThan: throwComparatorAllTypes('All', 'GreaterThan'),
        GreaterThanEqual_All: throwComparatorDifference('GreaterThanEqual', 'All'),
        All_GreaterThanEqual: throwComparatorAllTypes('All', 'GreaterThanEqual'),
        LessThan_All: throwComparatorDifference('LessThan', 'All'),
        All_LessThan: throwComparatorAllTypes('All', 'LessThan'),
        LessThanEqual_All: throwComparatorDifference('LessThanEqual', 'All'),
        All_LessThanEqual: throwComparatorAllTypes('All', 'LessThanEqual'),
        All_And: throwComparatorDifference('All', 'And'),
        And_All: throwComparatorAllTypes('And', 'All'),
        All_Or: throwComparatorDifference('All', 'Or'),
        Or_All: throwComparatorAllTypes('Or', 'All')
    };
    exports.comparisons = comparisons;
    exports.comparators = comparators;
});
/*can-query-logic@1.2.1#src/types/comparisons*/
define('can-query-logic@1.2.1#src/types/comparisons', [
    'require',
    'exports',
    'module',
    '../set',
    '../array-union-intersection-difference',
    './comparisons-common',
    './array-comparisons',
    'can-reflect',
    'can-symbol'
], function (require, exports, module) {
    var set = require('../set');
    var arrayUnionIntersectionDifference = require('../array-union-intersection-difference');
    var common = require('./comparisons-common');
    var arrayComparisons = require('./array-comparisons');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var isMemberSymbol = canSymbol.for('can.isMember');
    var comparisons = canReflect.assign(arrayComparisons.comparisons, {
        In: function In(values) {
            this.values = values;
        },
        NotIn: function NotIn(values) {
            this.values = values;
        },
        GreaterThan: function GreaterThan(value) {
            this.value = value;
        },
        GreaterThanEqual: function GreaterThanEqual(value) {
            this.value = value;
        },
        LessThan: function LessThan(value) {
            this.value = value;
        },
        LessThanEqual: function LessThanEqual(value) {
            this.value = value;
        },
        And: function ValueAnd(ands) {
            this.values = ands;
        },
        Or: function ValueOr(ors) {
            this.values = ors;
        }
    });
    comparisons.Or.prototype.orValues = function () {
        return this.values;
    };
    comparisons.In.test = function (values, b) {
        return values.some(function (value) {
            var values = set.ownAndMemberValue(value, b);
            return values.own === values.member;
        });
    };
    comparisons.NotIn.test = function (values, b) {
        return !comparisons.In.test(values, b);
    };
    comparisons.NotIn.testValue = function (value, b) {
        return !comparisons.In.testValue(value, b);
    };
    function nullIsFalse(test) {
        return function (arg1, arg2) {
            if (arg1 == null || arg2 == null) {
                return false;
            } else {
                return test(arg1, arg2);
            }
        };
    }
    function nullIsFalseTwoIsOk(test) {
        return function (arg1, arg2) {
            if (arg1 === arg2) {
                return true;
            } else if (arg1 == null || arg2 == null) {
                return false;
            } else {
                return test(arg1, arg2);
            }
        };
    }
    comparisons.GreaterThan.test = nullIsFalse(function (a, b) {
        return a > b;
    });
    comparisons.GreaterThanEqual.test = nullIsFalseTwoIsOk(function (a, b) {
        return a >= b;
    });
    comparisons.LessThan.test = nullIsFalse(function (a, b) {
        return a < b;
    });
    comparisons.LessThanEqual.test = nullIsFalseTwoIsOk(function (a, b) {
        return a <= b;
    });
    function isMemberThatUsesTest(value) {
        var values = set.ownAndMemberValue(this.value, value);
        return this.constructor.test(values.member, values.own);
    }
    [
        comparisons.GreaterThan,
        comparisons.GreaterThanEqual,
        comparisons.LessThan,
        comparisons.LessThanEqual,
        comparisons.LessThan
    ].forEach(function (Type) {
        Type.prototype.isMember = isMemberThatUsesTest;
    });
    [
        comparisons.In,
        comparisons.NotIn
    ].forEach(function (Type) {
        Type.prototype.isMember = common.isMemberThatUsesTestOnValues;
    });
    comparisons.And.prototype.isMember = function (value) {
        return this.values.every(function (and) {
            return and.isMember(value);
        });
    };
    comparisons.Or.prototype.isMember = function (value) {
        return this.values.some(function (and) {
            return and.isMember(value);
        });
    };
    Object.keys(comparisons).forEach(function (name) {
        comparisons[name].prototype[isMemberSymbol] = comparisons[name].prototype.isMember;
    });
    function makeNot(Type) {
        return {
            test: function (vA, vB) {
                return !Type.test(vA, vB);
            }
        };
    }
    function makeEnum(type, Type, emptyResult) {
        return function (a, b) {
            var result = arrayUnionIntersectionDifference(a.values, b.values);
            if (result[type].length) {
                return new Type(result[type]);
            } else {
                return emptyResult || set.EMPTY;
            }
        };
    }
    function isUniversal(aSet) {
        return set.isEqual(set.UNIVERSAL, aSet);
    }
    function swapArgs(fn) {
        return function (a, b) {
            return fn(b, a);
        };
    }
    function makeSecondValue(Type, prop) {
        return function (universe, value) {
            return new Type(value[prop || 'value']);
        };
    }
    function returnBiggerValue(gtA, gtB) {
        if (gtA.value < gtB.value) {
            return gtB;
        } else {
            return gtA;
        }
    }
    function returnSmallerValue(gtA, gtB) {
        if (gtA.value > gtB.value) {
            return gtB;
        } else {
            return gtA;
        }
    }
    function makeAndIf(Comparison, Type) {
        return function (ltA, ltB) {
            if (Comparison.test(ltA.value, ltB.value)) {
                return makeAnd([
                    ltA,
                    new Type(ltB.value)
                ]);
            } else {
                return set.EMPTY;
            }
        };
    }
    function make_InIfEqual_else_andIf(Comparison, Type) {
        var elseCase = makeAndIf(Comparison, Type);
        return function (a, b) {
            if (a.value === b.value) {
                return new is.In([a.value]);
            } else {
                return elseCase(a, b);
            }
        };
    }
    function make_filterFirstValueAgainstSecond(Comparison, Type, defaultReturn) {
        return function (inSet, gt) {
            var values = inSet.values.filter(function (value) {
                return Comparison.test(gt, value);
            });
            return values.length ? new Type(values) : defaultReturn || set.EMPTY;
        };
    }
    function make_filterFirstValues(Comparison, Type, defaultReturn) {
        return function (inSet, gt) {
            var values = inSet.values.filter(function (value) {
                return Comparison.test(value, gt.value);
            });
            return values.length ? new Type(values) : defaultReturn || set.EMPTY;
        };
    }
    var isMemberTest = {
        test: function isMemberTest(set, value) {
            return set.isMember(value);
        }
    };
    var returnTrue = {
        test: function returnTrue() {
            return true;
        }
    };
    var returnFalse = {
        test: function returnFalse() {
            return false;
        }
    };
    function isOr(value) {
        return value instanceof is.Or;
    }
    function isAnd(value) {
        return value instanceof is.And;
    }
    function isAndOrOr(value) {
        return isAnd(value) || isOr(value);
    }
    function combineFilterFirstValues(options) {
        return function (inSet, gt) {
            var values = inSet.values.filter(function (value) {
                return options.values.test(value, gt.value);
            });
            var range = options.with ? new options.with(gt.value) : gt;
            return values.length ? options.combinedUsing([
                new options.arePut(values),
                range
            ]) : range;
        };
    }
    function combineFilterFirstValuesAgainstSecond(options) {
        return function (inSet, gt) {
            var values = inSet.values.filter(function (value) {
                return options.values.test(gt, value);
            });
            var range;
            if (options.complement) {
                range = set.difference(set.UNIVERSAL, gt);
            } else if (options.with) {
                range = new options.with(gt.value);
            } else {
                range = gt;
            }
            return values.length ? options.combinedUsing([
                new options.arePut(values),
                range
            ]) : range;
        };
    }
    function makeOrUnless(Comparison, result) {
        return function (setA, setB) {
            if (Comparison.test(setA.value, setB.value)) {
                return result || set.UNIVERSAL;
            } else {
                return makeOr([
                    setA,
                    setB
                ]);
            }
        };
    }
    function makeAndUnless(Comparison, result) {
        return function (setA, setB) {
            if (Comparison.test(setA.value, setB.value)) {
                return result || set.EMPTY;
            } else {
                return makeAnd([
                    setA,
                    setB
                ]);
            }
        };
    }
    function makeComplementSecondArgIf(Comparison) {
        return function (setA, setB) {
            if (Comparison.test(setA.value, setB.value)) {
                return set.difference(set.UNIVERSAL, setB);
            } else {
                return setA;
            }
        };
    }
    function makeAnd(ands) {
        return comparisons.And ? new comparisons.And(ands) : set.UNDEFINABLE;
    }
    function makeOr(ors) {
        return comparisons.Or ? new comparisons.Or(ors) : set.UNDEFINABLE;
    }
    var is = comparisons;
    function combineValueWithRangeCheck(inSet, rangeSet, RangeOrEqType) {
        var gte = new RangeOrEqType(rangeSet.value);
        var leftValues = inSet.values.filter(function (value) {
            return !gte.isMember(value);
        });
        if (!leftValues.length) {
            return gte;
        }
        if (leftValues.length < inSet.values.length) {
            return makeOr([
                new is.In(leftValues),
                gte
            ]);
        } else {
            return makeOr([
                inSet,
                rangeSet
            ]);
        }
    }
    function makeOrWithInAndRange(inSet, rangeSet) {
        if (rangeSet instanceof is.Or) {
            var firstResult = makeOrWithInAndRange(inSet, rangeSet.values[0]);
            if (!(firstResult instanceof is.Or)) {
                return set.union(firstResult, rangeSet.values[1]);
            }
            var secondResult = makeOrWithInAndRange(inSet, rangeSet.values[1]);
            if (!(secondResult instanceof is.Or)) {
                return set.union(secondResult, rangeSet.values[0]);
            }
            return makeOr([
                inSet,
                rangeSet
            ]);
        } else {
            if (rangeSet instanceof is.GreaterThan) {
                return combineValueWithRangeCheck(inSet, rangeSet, is.GreaterThanEqual);
            }
            if (rangeSet instanceof is.LessThan) {
                return combineValueWithRangeCheck(inSet, rangeSet, is.LessThanEqual);
            }
            return makeOr([
                inSet,
                rangeSet
            ]);
        }
    }
    var In_RANGE = {
        union: combineFilterFirstValuesAgainstSecond({
            values: makeNot(isMemberTest),
            arePut: is.In,
            combinedUsing: function (ors) {
                return makeOrWithInAndRange(ors[0], ors[1]);
            }
        }),
        intersection: make_filterFirstValueAgainstSecond(isMemberTest, is.In, set.EMPTY),
        difference: make_filterFirstValueAgainstSecond(makeNot(isMemberTest), is.In, set.EMPTY)
    };
    var RANGE_IN = {
        difference: swapArgs(combineFilterFirstValuesAgainstSecond({
            values: isMemberTest,
            arePut: is.NotIn,
            combinedUsing: makeAnd
        }))
    };
    var NotIn_RANGE = function () {
        return {
            union: make_filterFirstValueAgainstSecond(makeNot(isMemberTest), is.NotIn, set.UNIVERSAL),
            intersection: combineFilterFirstValuesAgainstSecond({
                values: isMemberTest,
                arePut: is.NotIn,
                combinedUsing: makeAnd
            }),
            difference: combineFilterFirstValuesAgainstSecond({
                values: makeNot(isMemberTest),
                arePut: is.NotIn,
                combinedUsing: makeAnd,
                complement: true
            })
        };
    };
    var RANGE_NotIn = { difference: swapArgs(make_filterFirstValueAgainstSecond(isMemberTest, is.In, set.EMPTY)) };
    var RANGE_And_Union = function (gt, and) {
        var union1 = set.union(gt, and.values[0]);
        var union2 = set.union(gt, and.values[1]);
        if (!isAndOrOr(union1) && !isAndOrOr(union2)) {
            return set.intersection(union1, union2);
        } else {
            return new is.Or([
                gt,
                and
            ]);
        }
    };
    var RANGE_And_Intersection = function (gt, and) {
        var and1 = and.values[0], and2 = and.values[1];
        var intersection1 = set.intersection(gt, and1);
        var intersection2 = set.intersection(gt, and2);
        if (intersection1 === set.EMPTY || intersection2 === set.EMPTY) {
            return set.EMPTY;
        }
        if (!isAndOrOr(intersection1)) {
            return new set.intersection(intersection1, and2);
        }
        if (!isAndOrOr(intersection2)) {
            return new set.intersection(intersection2, and1);
        } else {
            return new is.And([
                gt,
                and
            ]);
        }
    };
    var RANGE_And_Difference = function (gt, and) {
        var and1 = and.values[0], and2 = and.values[1];
        var difference1 = set.difference(gt, and1);
        var difference2 = set.difference(gt, and2);
        if (difference1 === set.EMPTY) {
            return difference2;
        }
        if (difference2 === set.EMPTY) {
            return difference1;
        }
        return new is.Or([
            difference1,
            difference2
        ]);
    };
    var And_RANGE_Difference = function (and, gt) {
        var and1 = and.values[0], and2 = and.values[1];
        var difference1 = set.difference(and1, gt);
        var difference2 = set.difference(and2, gt);
        return set.intersection(difference1, difference2);
    };
    var RANGE_Or = {
        union: function (gt, or) {
            var or1 = or.values[0], or2 = or.values[1];
            var union1 = set.union(gt, or1);
            if (!isAndOrOr(union1)) {
                return set.union(union1, or2);
            }
            var union2 = set.union(gt, or2);
            if (!isAndOrOr(union2)) {
                return set.union(or1, union2);
            } else {
                return new is.Or([
                    gt,
                    or
                ]);
            }
        },
        intersection: function (gt, or) {
            var or1 = or.values[0], or2 = or.values[1];
            var intersection1 = set.intersection(gt, or1);
            var intersection2 = set.intersection(gt, or2);
            if (intersection1 === set.EMPTY) {
                return intersection2;
            }
            if (intersection2 === set.EMPTY) {
                return intersection1;
            }
            return set.union(intersection1, intersection2);
        },
        difference: function (gt, or) {
            var or1 = or.values[0], or2 = or.values[1];
            var difference1 = set.difference(gt, or1);
            var difference2 = set.difference(gt, or2);
            return set.intersection(difference1, difference2);
        }
    };
    var Or_RANGE = {
        difference: function (or, gt) {
            var or1 = or.values[0], or2 = or.values[1];
            var difference1 = set.difference(or1, gt);
            var difference2 = set.difference(or2, gt);
            return set.union(difference1, difference2);
        }
    };
    function unknowable() {
        return set.UNKNOWABLE;
    }
    var noNothing = {
        union: unknowable,
        difference: unknowable,
        intersection: unknowable
    };
    var comparators = canReflect.assign(arrayComparisons.comparators, {
        In_In: {
            union: makeEnum('union', is.In),
            intersection: makeEnum('intersection', is.In),
            difference: makeEnum('difference', is.In)
        },
        UNIVERSAL_In: { difference: makeSecondValue(is.NotIn, 'values') },
        In_NotIn: {
            union: swapArgs(makeEnum('difference', is.NotIn, set.UNIVERSAL)),
            intersection: makeEnum('difference', is.In),
            difference: makeEnum('intersection', is.In)
        },
        NotIn_In: { difference: makeEnum('union', is.NotIn) },
        In_GreaterThan: In_RANGE,
        GreaterThan_In: RANGE_IN,
        In_GreaterThanEqual: In_RANGE,
        GreaterThanEqual_In: RANGE_IN,
        In_LessThan: In_RANGE,
        LessThan_In: RANGE_IN,
        In_LessThanEqual: In_RANGE,
        LessThanEqual_In: RANGE_IN,
        In_And: In_RANGE,
        And_In: RANGE_IN,
        In_Or: In_RANGE,
        Or_In: RANGE_IN,
        NotIn_NotIn: {
            union: makeEnum('intersection', is.NotIn, set.UNIVERSAL),
            intersection: makeEnum('union', is.NotIn),
            difference: makeEnum('difference', is.In)
        },
        UNIVERSAL_NotIn: { difference: makeSecondValue(is.In, 'values') },
        NotIn_GreaterThan: NotIn_RANGE(),
        GreaterThan_NotIn: RANGE_NotIn,
        NotIn_GreaterThanEqual: NotIn_RANGE(),
        GreaterThanEqual_NotIn: RANGE_NotIn,
        NotIn_LessThan: NotIn_RANGE(),
        LessThan_NotIn: RANGE_NotIn,
        NotIn_LessThanEqual: NotIn_RANGE(),
        LessThanEqual_NotIn: RANGE_NotIn,
        NotIn_And: NotIn_RANGE(),
        And_NotIn: RANGE_NotIn,
        NotIn_Or: NotIn_RANGE(),
        Or_NotIn: RANGE_NotIn,
        GreaterThan_GreaterThan: {
            union: returnSmallerValue,
            intersection: returnBiggerValue,
            difference: makeAndIf(is.LessThan, is.LessThanEqual)
        },
        UNIVERSAL_GreaterThan: { difference: makeSecondValue(is.LessThanEqual) },
        GreaterThan_GreaterThanEqual: {
            union: returnSmallerValue,
            intersection: returnBiggerValue,
            difference: makeAndIf(is.LessThan, is.LessThan)
        },
        GreaterThanEqual_GreaterThan: { difference: make_InIfEqual_else_andIf(is.LessThan, is.LessThanEqual) },
        GreaterThan_LessThan: {
            union: function () {
                var makeOrUnlessLessThan = makeOrUnless(is.LessThan);
                return function greaterThan_lessThan_union(a, b) {
                    if (comparisons.In.test([a.value], b.value)) {
                        return new is.NotIn([a.value]);
                    } else {
                        return makeOrUnlessLessThan(a, b);
                    }
                };
            }(),
            intersection: makeAndUnless(is.GreaterThan),
            difference: makeComplementSecondArgIf(is.LessThan)
        },
        LessThan_GreaterThan: { difference: makeComplementSecondArgIf(is.GreaterThan) },
        GreaterThan_LessThanEqual: {
            union: makeOrUnless(is.LessThanEqual),
            intersection: makeAndUnless(is.GreaterThanEqual),
            difference: makeComplementSecondArgIf(is.LessThanEqual)
        },
        LessThanEqual_GreaterThan: { difference: makeComplementSecondArgIf(is.GreaterThanEqual) },
        GreaterThan_And: {
            union: RANGE_And_Union,
            intersection: RANGE_And_Intersection,
            difference: RANGE_And_Difference
        },
        And_GreaterThan: { difference: And_RANGE_Difference },
        GreaterThan_Or: RANGE_Or,
        Or_GreaterThan: Or_RANGE,
        GreaterThanEqual_GreaterThanEqual: {
            union: returnSmallerValue,
            intersection: returnBiggerValue,
            difference: makeAndIf(is.LessThan, is.LessThan)
        },
        UNIVERSAL_GreaterThanEqual: { difference: makeSecondValue(is.LessThan) },
        GreaterThanEqual_LessThan: {
            union: makeOrUnless(is.LessThanEqual),
            intersection: makeAndUnless(is.GreaterThanEqual),
            difference: makeComplementSecondArgIf(is.LessThanEqual)
        },
        LessThan_GreaterThanEqual: { difference: makeComplementSecondArgIf(is.GreaterThanEqual) },
        GreaterThanEqual_LessThanEqual: {
            union: makeOrUnless(is.LessThanEqual),
            intersection: function () {
                var makeAnd = makeAndUnless(is.GreaterThan);
                return function gte_lte_intersection(gte, lte) {
                    var inSet = new is.In([gte.value]);
                    if (inSet.isMember(lte.value)) {
                        return inSet;
                    } else {
                        return makeAnd(gte, lte);
                    }
                };
            }(),
            difference: makeComplementSecondArgIf(is.LessThanEqual)
        },
        LessThanEqual_GreaterThanEqual: { difference: makeComplementSecondArgIf(is.GreaterThanEqual) },
        GreaterThanEqual_And: {
            union: RANGE_And_Union,
            intersection: RANGE_And_Intersection,
            difference: RANGE_And_Difference
        },
        And_GreaterThanEqual: { difference: And_RANGE_Difference },
        GreaterThanEqual_Or: RANGE_Or,
        Or_GreaterThanEqual: Or_RANGE,
        LessThan_LessThan: {
            union: returnBiggerValue,
            intersection: returnSmallerValue,
            difference: makeAndIf(is.GreaterThan, is.GreaterThanEqual)
        },
        UNIVERSAL_LessThan: { difference: makeSecondValue(is.GreaterThanEqual) },
        LessThan_LessThanEqual: {
            union: returnBiggerValue,
            intersection: returnSmallerValue,
            difference: makeAndIf(is.GreaterThan, is.GreaterThan)
        },
        LessThanEqual_LessThan: { difference: make_InIfEqual_else_andIf(is.GreaterThanEqual, is.GreaterThanEqual) },
        LessThan_And: {
            union: RANGE_And_Union,
            intersection: RANGE_And_Intersection,
            difference: RANGE_And_Difference
        },
        And_LessThan: { difference: And_RANGE_Difference },
        LessThan_Or: RANGE_Or,
        Or_LessThan: Or_RANGE,
        LessThanEqual_LessThanEqual: {
            union: returnBiggerValue,
            intersection: returnSmallerValue,
            difference: function (lteA, lteB) {
                if (lteA.value >= lteB.value) {
                    return makeAnd([
                        lteA,
                        new is.GreaterThan(lteB.value)
                    ]);
                } else {
                    return set.EMPTY;
                }
            }
        },
        UNIVERSAL_LessThanEqual: { difference: makeSecondValue(is.GreaterThan) },
        LessThanEqual_And: {
            union: RANGE_And_Union,
            intersection: RANGE_And_Intersection,
            difference: RANGE_And_Difference
        },
        And_LessThanEqual: { difference: And_RANGE_Difference },
        LessThanEqual_Or: RANGE_Or,
        Or_LessThanEqual: Or_RANGE,
        And_And: {
            union: function (and1, and2) {
                var union1 = set.union(and1, and2.values[0]);
                var union2 = set.union(and1, and2.values[1]);
                if (isAndOrOr(union1) || isAndOrOr(union2)) {
                    union1 = set.union(and2, and1.values[0]);
                    union2 = set.union(and2, and1.values[1]);
                }
                if (isAndOrOr(union1) || isAndOrOr(union2)) {
                    return new is.Or([
                        and1,
                        and2
                    ]);
                } else {
                    return set.intersection(union1, union2);
                }
            },
            intersection: function (and1, and2) {
                var intersection1 = set.intersection(and1.values[0], and2.values[0]);
                var intersection2 = set.intersection(and1.values[1], and2.values[1]);
                if (!isAndOrOr(intersection1) || !isAndOrOr(intersection2)) {
                    return set.intersection(intersection1, intersection2);
                }
                intersection1 = set.intersection(and1.values[0], and2.values[1]);
                intersection2 = set.intersection(and1.values[1], and2.values[0]);
                if (!isAndOrOr(intersection1) || !isAndOrOr(intersection2)) {
                    return set.intersection(intersection1, intersection2);
                } else {
                    return new is.And([
                        and1,
                        and2
                    ]);
                }
            },
            difference: function () {
                return function (and1, and2) {
                    var d1 = set.difference(and1, and2.values[0]);
                    var d2 = set.difference(and1, and2.values[1]);
                    return set.union(d1, d2);
                };
            }()
        },
        And_Or: {
            union: function (and, or) {
                var aUnion = set.union(and.values[0], or);
                var bUnion = set.union(and.values[1], or);
                if (!isAndOrOr(aUnion) || !isAndOrOr(bUnion)) {
                    return set.intersection(aUnion, bUnion);
                }
                return new is.Or([
                    and,
                    or
                ]);
            },
            intersection: function (and, or) {
                var aIntersection = set.intersection(and, or.values[0]);
                var bIntersection = set.intersection(and, or.values[1]);
                if (!isOr(aIntersection) && !isOr(bIntersection)) {
                    return set.union(aIntersection, bIntersection);
                }
                return new is.And([
                    and,
                    or
                ]);
            },
            difference: function (and, or) {
                var aDiff = set.difference(and, or.values[0]);
                var bDiff = set.difference(and, or.values[1]);
                return set.intersection(aDiff, bDiff);
            }
        },
        Or_And: {
            difference: function (or, and) {
                var aDiff = set.difference(or, and.values[0]);
                var bDiff = set.difference(or, and.values[1]);
                return set.union(aDiff, bDiff);
            }
        },
        UNIVERSAL_And: {
            difference: function (universe, and) {
                var inverseFirst = set.difference(universe, and.values[0]), inverseSecond = set.difference(universe, and.values[1]);
                return set.union(inverseFirst, inverseSecond);
            }
        },
        Or_Or: {
            union: function (or1, or2) {
                var union1 = set.union(or1.values[0], or2.values[0]);
                var union2 = set.union(or1.values[1], or2.values[1]);
                if (!isAndOrOr(union1) || !isAndOrOr(union2)) {
                    return set.union(union1, union2);
                }
                union1 = set.union(or1.values[0], or2.values[1]);
                union2 = set.union(or1.values[1], or2.values[0]);
                if (!isAndOrOr(union1) || !isAndOrOr(union2)) {
                    return set.union(union1, union2);
                } else {
                    return new is.Or([
                        or1,
                        or2
                    ]);
                }
            },
            intersection: function (or1, or2) {
                var c = or2.values[0], d = or2.values[1];
                var intersection1 = set.intersection(or1, c);
                var intersection2 = set.intersection(or1, d);
                if (!isOr(intersection1) || !isOr(intersection2)) {
                    return set.union(intersection1, intersection2);
                }
                intersection1 = set.union(or2, or1.values[0]);
                intersection2 = set.union(or2, or1.values[1]);
                if (!isOr(intersection1) || !isOr(intersection2)) {
                    return set.union(intersection1, intersection2);
                } else {
                    return new is.Or([
                        or1,
                        or2
                    ]);
                }
            },
            difference: function (or1, or2) {
                var d1 = set.difference(or1, or2.values[0]);
                var d2 = set.difference(or1, or2.values[1]);
                return set.intersection(d1, d2);
            }
        },
        UNIVERSAL_Or: {
            difference: function (universe, or) {
                var inverseFirst = set.difference(universe, or.values[0]), inverseSecond = set.difference(universe, or.values[1]);
                return set.intersection(inverseFirst, inverseSecond);
            }
        }
    });
    var names = Object.keys(comparisons);
    names.forEach(function (name1, i) {
        if (!comparators[name1 + '_' + name1]) {
            console.warn('no ' + name1 + '_' + name1);
        } else {
            set.defineComparison(comparisons[name1], comparisons[name1], comparators[name1 + '_' + name1]);
        }
        if (!comparators['UNIVERSAL_' + name1]) {
            console.warn('no UNIVERSAL_' + name1);
        } else {
            set.defineComparison(set.UNIVERSAL, comparisons[name1], comparators['UNIVERSAL_' + name1]);
        }
        for (var j = i + 1; j < names.length; j++) {
            var name2 = names[j];
            if (!comparators[name1 + '_' + name2]) {
                console.warn('no ' + name1 + '_' + name2);
            } else {
                set.defineComparison(comparisons[name1], comparisons[name2], comparators[name1 + '_' + name2]);
            }
            if (!comparators[name2 + '_' + name1]) {
                console.warn('no ' + name2 + '_' + name1);
            } else {
                set.defineComparison(comparisons[name2], comparisons[name1], comparators[name2 + '_' + name1]);
            }
        }
    });
    module.exports = comparisons;
});
/*can-query-logic@1.2.1#src/types/make-real-number-range-inclusive*/
define('can-query-logic@1.2.1#src/types/make-real-number-range-inclusive', [
    'require',
    'exports',
    'module',
    '../set',
    './comparisons'
], function (require, exports, module) {
    var set = require('../set');
    var is = require('./comparisons');
    module.exports = function (min, max) {
        function RealNumberRangeInclusive(start, end) {
            this.start = arguments.length > 0 ? +start : min;
            this.end = arguments.length > 1 ? +end : max;
            this.range = new is.And([
                new is.GreaterThanEqual(this.start),
                new is.LessThanEqual(this.end)
            ]);
        }
        var universeRange = new RealNumberRangeInclusive(min, max);
        function isUniversal(range) {
            return set.isSubset(universeRange.range, range.range);
        }
        function rangeFromAnd(aSet) {
            var values = {};
            aSet.values.forEach(function (value) {
                if (value instanceof is.GreaterThanEqual) {
                    values.start = value.value;
                }
                if (value instanceof is.GreaterThan) {
                    values.start = value.value + 1;
                }
                if (value instanceof is.LessThanEqual) {
                    values.end = value.value;
                }
                if (value instanceof is.LessThan) {
                    values.end = value.value - 1;
                }
            });
            if ('start' in values && 'end' in values) {
                return new RealNumberRangeInclusive(values.start, values.end);
            }
        }
        function toRange(aSet) {
            var range;
            if (aSet instanceof is.And) {
                range = rangeFromAnd(aSet);
            }
            if (aSet instanceof is.Or) {
                var first = rangeFromAnd(aSet.values[0]), second = rangeFromAnd(aSet.values[1]);
                if (first && second) {
                    var firstValues = first.range.values, secondValues = second.range.values;
                    if (firstValues[1].value + 1 === secondValues[0].value) {
                        range = new RealNumberRangeInclusive(firstValues[0].value, secondValues[1].value);
                    } else if (secondValues[1].value + 1 === firstValues[0].value) {
                        range = new RealNumberRangeInclusive(secondValues[0].value, firstValues[1].value);
                    } else {
                        return set.UNDEFINABLE;
                    }
                } else {
                    return set.UNDEFINABLE;
                }
            }
            if (range && isUniversal(range)) {
                return set.UNIVERSAL;
            } else {
                return range;
            }
        }
        function intersection(range1, range2) {
            var intersection = toRange(set.intersection(range1.range, range2.range));
            if (intersection) {
                return intersection;
            } else {
                return set.EMPTY;
            }
        }
        function difference(range1, range2) {
            var difference = toRange(set.difference(range1.range, range2.range));
            if (difference) {
                return difference;
            } else {
                return set.EMPTY;
            }
        }
        set.defineComparison(RealNumberRangeInclusive, RealNumberRangeInclusive, {
            union: function (range1, range2) {
                var union = toRange(set.union(range1.range, range2.range));
                if (union) {
                    return union;
                } else {
                    return set.EMPTY;
                }
            },
            intersection: intersection,
            difference: difference
        });
        set.defineComparison(set.UNIVERSAL, RealNumberRangeInclusive, {
            difference: function (universe, range) {
                if (isUniversal(range)) {
                    return set.EMPTY;
                } else {
                    return difference(universeRange, range);
                }
            }
        });
        return RealNumberRangeInclusive;
    };
});
/*can-query-logic@1.2.1#src/types/values-or*/
define('can-query-logic@1.2.1#src/types/values-or', [
    'require',
    'exports',
    'module',
    '../set',
    './types'
], function (require, exports, module) {
    var set = require('../set');
    var types = require('./types');
    function ValuesOr(values) {
        this.values = values;
    }
    ValuesOr.prototype.isMember = function (props) {
        return this.values.some(function (value) {
            return value && value.isMember ? value.isMember(props) : value === props;
        });
    };
    set.defineComparison(set.UNIVERSAL, ValuesOr, {
        difference: function () {
            return set.UNDEFINABLE;
        }
    });
    module.exports = types.ValuesOr = ValuesOr;
});
/*can-query-logic@1.2.1#src/types/values-and*/
define('can-query-logic@1.2.1#src/types/values-and', [
    'require',
    'exports',
    'module',
    './types',
    '../set'
], function (require, exports, module) {
    var keysLogic = require('./types');
    var set = require('../set');
    function ValuesAnd(values) {
        this.values = values;
    }
    ValuesAnd.prototype.isMember = function (props) {
        return this.values.every(function (value) {
            return value && value.isMember ? value.isMember(props) : value === props;
        });
    };
    set.defineComparison(set.UNIVERSAL, ValuesAnd, {
        difference: function () {
            return set.UNDEFINABLE;
        }
    });
    module.exports = keysLogic.ValuesAnd = ValuesAnd;
});
/*can-query-logic@1.2.1#src/types/keys-and*/
define('can-query-logic@1.2.1#src/types/keys-and', [
    'require',
    'exports',
    'module',
    '../set',
    'can-assign',
    '../array-union-intersection-difference',
    'can-reflect',
    'can-key/get/get',
    'can-symbol',
    'can-reflect',
    './types'
], function (require, exports, module) {
    var set = require('../set');
    var assign = require('can-assign');
    var arrayUnionIntersectionDifference = require('../array-union-intersection-difference');
    var canReflect = require('can-reflect');
    var canGet = require('can-key/get/get');
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    var keysLogic = require('./types');
    function KeysAnd(values) {
        var vals = this.values = {};
        canReflect.eachKey(values, function (value, key) {
            if (canReflect.isPlainObject(value) && !set.isSpecial(value)) {
                vals[key] = new KeysAnd(value);
            } else {
                vals[key] = value;
            }
        });
    }
    var isMemberSymbol = canSymbol.for('can.isMember');
    KeysAnd.prototype.isMember = function (props, root, rootKey) {
        var equal = true;
        var preKey = rootKey ? rootKey + '.' : '';
        canReflect.eachKey(this.values, function (value, key) {
            var isMember = value && (value[isMemberSymbol] || value.isMember);
            if (isMember) {
                if (!isMember.call(value, canGet(props, key), root || props, preKey + key)) {
                    equal = false;
                }
            } else {
                if (value !== canGet(props, key)) {
                    equal = false;
                }
            }
        });
        return equal;
    };
    function checkIfUniversalAndReturnUniversal(setA) {
        return set.isEqual(setA, set.UNIVERSAL) ? set.UNIVERSAL : setA;
    }
    var MISSING = {};
    function eachInUnique(a, acb, b, bcb, defaultReturn) {
        var bCopy = assign({}, b), res;
        for (var prop in a) {
            res = acb(prop, a[prop], prop in b ? b[prop] : MISSING, a, b);
            if (res !== undefined) {
                return res;
            }
            delete bCopy[prop];
        }
        for (prop in bCopy) {
            res = bcb(prop, MISSING, b[prop], a, b);
            if (res !== undefined) {
                return res;
            }
        }
        return defaultReturn;
    }
    function keyDiff(valuesA, valuesB) {
        var keyResults = arrayUnionIntersectionDifference(Object.keys(valuesA), Object.keys(valuesB));
        return {
            aOnlyKeys: keyResults.difference,
            aAndBKeys: keyResults.intersection,
            bOnlyKeys: arrayUnionIntersectionDifference(Object.keys(valuesB), Object.keys(valuesA)).difference
        };
    }
    function notEmpty(value) {
        return value !== set.EMPTY;
    }
    function difference(objA, objB) {
        var valuesA = objA.values, valuesB = objB.values, diff = keyDiff(valuesA, valuesB), aOnlyKeys = diff.aOnlyKeys, aAndBKeys = diff.aAndBKeys, bOnlyKeys = diff.bOnlyKeys;
        var sharedKeysAndValues = {}, productAbleKeysAndData = {}, disjointKeysAndValues = {};
        aAndBKeys.forEach(function (key) {
            var difference = set.difference(valuesA[key], valuesB[key]);
            if (difference === set.EMPTY) {
                sharedKeysAndValues[key] = valuesA[key];
            } else {
                var intersection = set.intersection(valuesA[key], valuesB[key]);
                var isProductable = intersection !== set.EMPTY;
                if (isProductable) {
                    productAbleKeysAndData[key] = {
                        difference: difference,
                        intersection: intersection
                    };
                } else {
                    disjointKeysAndValues[key] = valuesA[key];
                }
            }
        });
        var productAbleKeys = Object.keys(productAbleKeysAndData);
        var singleProductKeyAndValue;
        if (productAbleKeys.length === 1) {
            singleProductKeyAndValue = {};
            singleProductKeyAndValue[productAbleKeys[0]] = productAbleKeysAndData[productAbleKeys[0]].difference;
        }
        if (Object.keys(disjointKeysAndValues).length) {
            return objA;
        }
        if (aOnlyKeys.length === 0 && bOnlyKeys.length === 0) {
            if (productAbleKeys.length > 1) {
                return set.UNDEFINABLE;
            } else if (productAbleKeys.length === 1) {
                assign(sharedKeysAndValues, singleProductKeyAndValue);
                return new KeysAnd(sharedKeysAndValues);
            } else {
                return set.EMPTY;
            }
        }
        if (aOnlyKeys.length > 0 && bOnlyKeys.length === 0) {
            if (productAbleKeys.length > 1) {
                return set.UNDEFINABLE;
            } else if (productAbleKeys.length === 1) {
                assign(sharedKeysAndValues, singleProductKeyAndValue);
                aOnlyKeys.forEach(function (key) {
                    sharedKeysAndValues[key] = valuesA[key];
                });
                return new KeysAnd(sharedKeysAndValues);
            } else {
                return set.EMPTY;
            }
        }
        if (aOnlyKeys.length === 0 && bOnlyKeys.length > 0) {
            if (productAbleKeys.length > 1) {
                return set.UNDEFINABLE;
            }
            var productAbleOr;
            if (productAbleKeys.length === 1) {
                var productableKey = productAbleKeys[0];
                productAbleOr = assign({}, sharedKeysAndValues);
                productAbleOr[productableKey] = productAbleKeysAndData[productableKey].difference;
                sharedKeysAndValues[productableKey] = productAbleKeysAndData[productableKey].intersection;
            }
            var ands = bOnlyKeys.map(function (key) {
                var shared = assign({}, sharedKeysAndValues);
                var result = shared[key] = set.difference(set.UNIVERSAL, valuesB[key]);
                return result === set.EMPTY ? result : new KeysAnd(shared);
            }).filter(notEmpty);
            if (productAbleOr) {
                ands.push(new KeysAnd(productAbleOr));
            }
            if (ands.length > 1) {
                return new keysLogic.ValuesOr(ands);
            } else if (ands.length === 1) {
                return ands[0];
            } else {
                return set.EMPTY;
            }
        }
        if (aOnlyKeys.length > 0 && bOnlyKeys.length > 0) {
            if (productAbleKeys.length) {
                throw new Error('Can\'t handle any productable keys right now');
            }
            aOnlyKeys.forEach(function (key) {
                sharedKeysAndValues[key] = valuesA[key];
            });
            if (bOnlyKeys.length === 1) {
                var key = bOnlyKeys[0];
                var shared = assign({}, sharedKeysAndValues);
                shared[key] = set.difference(set.UNIVERSAL, valuesB[key]);
                return new KeysAnd(shared);
            } else {
                return set.UNDEFINABLE;
            }
        }
    }
    set.defineComparison(KeysAnd, KeysAnd, {
        union: function (objA, objB) {
            var diff = keyDiff(objA.values, objB.values);
            var aAndBKeysThatAreNotEqual = [], sameKeys = {};
            diff.aAndBKeys.forEach(function (key) {
                if (!set.isEqual(objA.values[key], objB.values[key])) {
                    aAndBKeysThatAreNotEqual.push(key);
                } else {
                    sameKeys[key] = objA.values[key];
                }
            });
            var aUnequal = {}, bUnequal = {};
            aAndBKeysThatAreNotEqual.forEach(function (key) {
                aUnequal[key] = objA.values[key];
                bUnequal[key] = objB.values[key];
            });
            if (!diff.aOnlyKeys.length && !diff.bOnlyKeys.length) {
                if (aAndBKeysThatAreNotEqual.length === 1) {
                    var keyValue = aAndBKeysThatAreNotEqual[0];
                    var result = sameKeys[keyValue] = set.union(objA.values[keyValue], objB.values[keyValue]);
                    return canReflect.size(sameKeys) === 1 && set.isEqual(result, set.UNIVERSAL) ? set.UNIVERSAL : new KeysAnd(sameKeys);
                } else if (aAndBKeysThatAreNotEqual.length === 0) {
                    return objA;
                }
            }
            if (aAndBKeysThatAreNotEqual.length === 0) {
                if (diff.aOnlyKeys.length > 0 && diff.bOnlyKeys.length === 0) {
                    return checkIfUniversalAndReturnUniversal(objB);
                } else if (diff.aOnlyKeys.length === 0 && diff.bOnlyKeys.length > 0) {
                    return checkIfUniversalAndReturnUniversal(objA);
                }
            }
            if (diff.aOnlyKeys.length > 0 && diff.bOnlyKeys.length === 0) {
                if (set.isSubset(new KeysAnd(aUnequal), new KeysAnd(bUnequal))) {
                    return objB;
                }
            }
            if (diff.bOnlyKeys.length > 0 && diff.aOnlyKeys.length === 0) {
                if (set.isSubset(new KeysAnd(bUnequal), new KeysAnd(aUnequal))) {
                    return objA;
                }
            }
            return new keysLogic.ValuesOr([
                objA,
                objB
            ]);
        },
        intersection: function (objA, objB) {
            var valuesA = objA.values, valuesB = objB.values, foundEmpty = false;
            var resultValues = {};
            eachInUnique(valuesA, function (prop, aVal, bVal) {
                resultValues[prop] = bVal === MISSING ? aVal : set.intersection(aVal, bVal);
                if (resultValues[prop] === set.EMPTY) {
                    foundEmpty = true;
                }
            }, valuesB, function (prop, aVal, bVal) {
                resultValues[prop] = bVal;
                if (resultValues[prop] === set.EMPTY) {
                    foundEmpty = true;
                }
            });
            if (foundEmpty) {
                return set.EMPTY;
            } else {
                return new KeysAnd(resultValues);
            }
        },
        difference: difference
    });
    set.defineComparison(set.UNIVERSAL, KeysAnd, {
        difference: function (universe, and) {
            return difference({ values: {} }, and);
        }
    });
    module.exports = keysLogic.KeysAnd = KeysAnd;
});
/*can-query-logic@1.2.1#src/types/and-or-not*/
define('can-query-logic@1.2.1#src/types/and-or-not', [
    'require',
    'exports',
    'module',
    './values-or',
    './values-not',
    './values-and',
    './keys-and'
], function (require, exports, module) {
    var ValuesOr = require('./values-or');
    var ValuesNot = require('./values-not');
    var ValuesAnd = require('./values-and');
    var KeysAnd = require('./keys-and');
    module.exports = {
        KeysAnd: KeysAnd,
        ValuesOr: ValuesOr,
        ValuesNot: ValuesNot,
        ValuesAnd: ValuesAnd
    };
});
/*can-query-logic@1.2.1#src/helpers*/
define('can-query-logic@1.2.1#src/helpers', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    var canReflect = require('can-reflect');
    var typeNumber = {
        'undefined': 0,
        'null': 1,
        'number': 3,
        'string': 4,
        'object': 5,
        'boolean': 6
    };
    var getTypeNumber = function (obj) {
        var type = typeof obj;
        if (obj === null) {
            type = 'null';
        }
        return typeNumber[type];
    };
    var typeCompare = {
        $gt: function (valueA, valueB) {
            return getTypeNumber(valueA) > getTypeNumber(valueB);
        },
        $lt: function (valueA, valueB) {
            return getTypeNumber(valueA) < getTypeNumber(valueB);
        }
    };
    var defaultCompare = {
        $gt: function (valueA, valueB) {
            if (valueA == null || valueB == null) {
                return typeCompare.$gt(valueA, valueB);
            }
            return valueA > valueB;
        },
        $lt: function (valueA, valueB) {
            if (valueA == null || valueB == null) {
                return typeCompare.$gt(valueA, valueB);
            }
            return valueA < valueB;
        }
    };
    var helpers = {
        uniqueConcat: function (itemsA, itemsB, getId) {
            var ids = new Set();
            return itemsA.concat(itemsB).filter(function (item) {
                var id = getId(item);
                if (!ids.has(id)) {
                    ids.add(id);
                    return true;
                } else {
                    return false;
                }
            });
        },
        getIdentityIndex: function (compare, items, props, startIndex, schema) {
            var identity = canReflect.getIdentity(props, schema), starterItem = items[startIndex];
            if (compare(props, starterItem) === 0) {
                if (identity === canReflect.getIdentity(starterItem, schema)) {
                    return startIndex;
                }
            }
            var rightResult = this.getIdentityIndexByDirection(compare, items, props, startIndex + 1, 1, schema), leftResult;
            if (rightResult.index) {
                return rightResult.index;
            } else {
                leftResult = this.getIdentityIndexByDirection(compare, items, props, startIndex - 1, -1, schema);
            }
            if (leftResult.index !== undefined) {
                return leftResult.index;
            }
            return rightResult.lastIndex;
        },
        getIdentityIndexByDirection: function (compare, items, props, startIndex, direction, schema) {
            var currentIndex = startIndex;
            var identity = canReflect.getIdentity(props, schema);
            while (currentIndex >= 0 && currentIndex < items.length) {
                var currentItem = items[currentIndex];
                var computed = compare(props, currentItem);
                if (computed === 0) {
                    if (identity === canReflect.getIdentity(currentItem, schema)) {
                        return { index: currentIndex };
                    }
                } else {
                    return { lastIndex: currentIndex - direction };
                }
                currentIndex = currentIndex + direction;
            }
            return { lastIndex: currentIndex - direction };
        },
        getIndex: function (compare, items, props, schema) {
            if (!items || !items.length) {
                return undefined;
            }
            if (compare(props, items[0]) === -1) {
                return 0;
            } else if (compare(props, items[items.length - 1]) === 1) {
                return items.length;
            }
            var low = 0, high = items.length;
            while (low < high) {
                var mid = low + high >>> 1, item = items[mid], computed = compare(props, item);
                if (computed === 0) {
                    return this.getIdentityIndex(compare, items, props, mid, schema);
                } else if (computed === -1) {
                    high = mid;
                } else {
                    low = mid + 1;
                }
            }
            return high;
        },
        sortData: function (sortPropValue) {
            if (sortPropValue[0] === '-') {
                return {
                    prop: sortPropValue.slice(1),
                    desc: true
                };
            } else {
                return {
                    prop: sortPropValue,
                    desc: false
                };
            }
        },
        defaultCompare: defaultCompare,
        typeCompare: typeCompare,
        sorter: function (sortPropValue, sorters) {
            var data = helpers.sortData(sortPropValue);
            var compare;
            if (sorters && sorters[data.prop]) {
                compare = sorters[data.prop];
            } else {
                compare = defaultCompare;
            }
            return function (item1, item2) {
                var item1Value = canReflect.getKeyValue(item1, data.prop);
                var item2Value = canReflect.getKeyValue(item2, data.prop);
                var temp;
                if (data.desc) {
                    temp = item1Value;
                    item1Value = item2Value;
                    item2Value = temp;
                }
                if (compare.$lt(item1Value, item2Value)) {
                    return -1;
                }
                if (compare.$gt(item1Value, item2Value)) {
                    return 1;
                }
                return 0;
            };
        },
        valueHydrator: function (value) {
            if (canReflect.isBuiltIn(value)) {
                return value;
            } else {
                throw new Error('can-query-logic doesn\'t support comparison operator: ' + JSON.stringify(value));
            }
        }
    };
    module.exports = helpers;
});
/*can-query-logic@1.2.1#src/types/basic-query*/
define('can-query-logic@1.2.1#src/types/basic-query', [
    'require',
    'exports',
    'module',
    '../set',
    './make-real-number-range-inclusive',
    'can-assign',
    'can-reflect',
    './and-or-not',
    '../helpers',
    'can-define-lazy-value',
    'can-symbol'
], function (require, exports, module) {
    var set = require('../set');
    var makeRealNumberRangeInclusive = require('./make-real-number-range-inclusive');
    var assign = require('can-assign');
    var canReflect = require('can-reflect');
    var andOrNot = require('./and-or-not');
    var helpers = require('../helpers');
    var defineLazyValue = require('can-define-lazy-value');
    var canSymbol = require('can-symbol');
    var isMemberSymbol = canSymbol.for('can.isMember');
    var KeysAnd = andOrNot.KeysAnd, Or = andOrNot.ValuesOr, Not = andOrNot.ValuesNot, And = andOrNot.ValuesAnd;
    var RecordRange = makeRealNumberRangeInclusive(0, Infinity);
    function makeSort(schema, hydrateAndValue) {
        var schemaKeys = schema.keys;
        var sorters = {};
        canReflect.eachKey(schemaKeys, function (schemaProp, key) {
            sorters[key] = {
                $gt: function (valueA, valueB) {
                    if (valueA == null || valueB == null) {
                        return helpers.typeCompare.$gt(valueA, valueB);
                    }
                    var $gt = hydrateAndValue({ $gt: valueB }, key, schemaProp, helpers.valueHydrator);
                    var $eq = hydrateAndValue({ $eq: valueA }, key, schemaProp, helpers.valueHydrator);
                    return set.isEqual(set.union($gt, $eq), $gt);
                },
                $lt: function (valueA, valueB) {
                    if (valueA == null || valueB == null) {
                        return helpers.typeCompare.$lt(valueA, valueB);
                    }
                    var $lt = hydrateAndValue({ $lt: valueB }, key, schemaProp, helpers.valueHydrator);
                    var $eq = hydrateAndValue({ $eq: valueA }, key, schemaProp, helpers.valueHydrator);
                    return set.isEqual(set.union($lt, $eq), $lt);
                }
            };
        });
        function Sort(key) {
            this.key = key;
            this.schema = schema;
            this.compare = helpers.sorter(key, sorters);
        }
        function identityIntersection(v1, v2) {
            return v1.key === v2.key ? v1 : set.EMPTY;
        }
        function identityDifference(v1, v2) {
            return v1.key === v2.key ? set.EMPTY : v1;
        }
        function identityUnion(v1, v2) {
            return v1.key === v2.key ? v1 : set.UNDEFINABLE;
        }
        set.defineComparison(Sort, Sort, {
            intersection: identityIntersection,
            difference: identityDifference,
            union: identityUnion
        });
        return Sort;
    }
    var DefaultSort = makeSort({
        keys: {},
        identity: ['id']
    });
    function BasicQuery(query) {
        assign(this, query);
        if (!this.filter) {
            this.filter = set.UNIVERSAL;
        }
        if (!this.page) {
            this.page = new RecordRange();
        }
        if (!this.sort) {
            this.sort = 'id';
        }
        if (typeof this.sort === 'string') {
            this.sort = new DefaultSort(this.sort);
        }
    }
    BasicQuery.KeysAnd = KeysAnd;
    BasicQuery.Or = Or;
    BasicQuery.Not = Not;
    BasicQuery.And = And;
    BasicQuery.RecordRange = RecordRange;
    BasicQuery.makeSort = makeSort;
    canReflect.assignMap(BasicQuery.prototype, {
        count: function () {
            return this.page.end - this.page.start + 1;
        },
        sortData: function (data) {
            return data.slice(0).sort(this.sort.compare);
        },
        filterMembersAndGetCount: function (bData, parentQuery) {
            var parentIsUniversal;
            if (parentQuery) {
                parentIsUniversal = set.isEqual(parentQuery.page, set.UNIVERSAL);
                if (parentIsUniversal && !set.isEqual(parentQuery.filter, set.UNIVERSAL) && !set.isSubset(this, parentQuery)) {
                    throw new Error('can-query-logic: Unable to get members from a set that is not a superset of the current set.');
                }
            } else {
                parentQuery = new BasicQuery();
            }
            var aData = bData.filter(function (data) {
                return this.filter.isMember(data);
            }, this);
            var count = aData.length;
            if (count && this.sort.key !== parentQuery.sort.key) {
                aData = this.sortData(aData);
            }
            var thisIsUniversal = set.isEqual(this.page, set.UNIVERSAL);
            if (parentIsUniversal == null) {
                parentIsUniversal = set.isEqual(parentQuery.page, set.UNIVERSAL);
            }
            if (parentIsUniversal) {
                if (thisIsUniversal) {
                    return {
                        data: aData,
                        count: count
                    };
                } else {
                    return {
                        data: aData.slice(this.page.start, this.page.end + 1),
                        count: count
                    };
                }
            } else if (this.sort.key === parentQuery.sort.key && set.isEqual(parentQuery.filter, this.filter)) {
                return {
                    data: aData.slice(this.page.start - parentQuery.page.start, this.page.end - parentQuery.page.start + 1),
                    count: count
                };
            } else {
                throw new Error('can-query-logic: Unable to get members from the parent set for this subset.');
            }
        },
        filterFrom: function (bData, parentQuery) {
            return this.filterMembersAndGetCount(bData, parentQuery).data;
        },
        merge: function (b, aItems, bItems, getId) {
            var union = set.union(this, b);
            if (union === set.UNDEFINABLE) {
                return undefined;
            } else {
                var combined = helpers.uniqueConcat(aItems, bItems, getId);
                return union.sortData(combined);
            }
        },
        index: function (props, items) {
            var data = helpers.sortData(this.sort.key);
            if (!canReflect.hasOwnKey(props, data.prop)) {
                return undefined;
            }
            return helpers.getIndex(this.sort.compare, items, props, this.sort.schema);
        },
        isMember: function (props) {
            return this.filter.isMember(props);
        },
        removePagination: function () {
            this.page = new RecordRange();
        }
    });
    var CLAUSE_TYPES = [
        'filter',
        'page',
        'sort'
    ];
    function getDifferentClauseTypes(queryA, queryB) {
        var differentTypes = [];
        CLAUSE_TYPES.forEach(function (clause) {
            if (!set.isEqual(queryA[clause], queryB[clause])) {
                differentTypes.push(clause);
            }
        });
        return differentTypes;
    }
    function isSubset(subLetter, superLetter, meta) {
        if (meta[subLetter + 'FilterIsSubset']) {
            if (meta[superLetter + 'PageIsUniversal']) {
                return true;
            } else {
                return meta[subLetter + 'PageIsSubset'] && meta.sortIsEqual;
            }
        } else {
            return false;
        }
    }
    function MetaInformation(queryA, queryB) {
        this.queryA = queryA;
        this.queryB = queryB;
    }
    canReflect.eachKey({
        'pageIsEqual': function () {
            return set.isEqual(this.queryA.page, this.queryB.page);
        },
        'aPageIsUniversal': function () {
            return set.isEqual(this.queryA.page, set.UNIVERSAL);
        },
        'bPageIsUniversal': function () {
            return set.isEqual(this.queryB.page, set.UNIVERSAL);
        },
        'pagesAreUniversal': function () {
            return this.pageIsEqual && this.aPageIsUniversal;
        },
        'sortIsEqual': function () {
            return this.queryA.sort.key === this.queryB.sort.key;
        },
        'aFilterIsSubset': function () {
            return set.isSubset(this.queryA.filter, this.queryB.filter);
        },
        'bFilterIsSubset': function () {
            return set.isSubset(this.queryB.filter, this.queryA.filter);
        },
        'aPageIsSubset': function () {
            return set.isSubset(this.queryA.page, this.queryB.page);
        },
        'bPageIsSubset': function () {
            return set.isSubset(this.queryB.page, this.queryA.page);
        },
        'filterIsEqual': function () {
            return set.isEqual(this.queryA.filter, this.queryB.filter);
        },
        'aIsSubset': function () {
            return isSubset('a', 'b', this);
        },
        'bIsSubset': function () {
            return isSubset('b', 'a', this);
        }
    }, function (def, prop) {
        defineLazyValue(MetaInformation.prototype, prop, def);
    });
    function metaInformation(queryA, queryB) {
        var meta = new MetaInformation(queryA, queryB);
        return meta;
    }
    set.defineComparison(BasicQuery, BasicQuery, {
        union: function (queryA, queryB) {
            var meta = metaInformation(queryA, queryB);
            var filterUnion = set.union(queryA.filter, queryB.filter);
            if (meta.pagesAreUniversal) {
                return new BasicQuery({
                    filter: filterUnion,
                    sort: meta.sortIsEqual ? queryA.sort.key : undefined
                });
            }
            if (meta.filterIsEqual) {
                if (meta.sortIsEqual) {
                    return new BasicQuery({
                        filter: queryA.filter,
                        sort: queryA.sort.key,
                        page: set.union(queryA.page, queryB.page)
                    });
                } else {
                    if (meta.aIsSubset) {
                        return queryB;
                    } else if (meta.bIsSubset) {
                        return queryA;
                    }
                    return set.UNDEFINABLE;
                }
            } else {
                throw new Error('different filters, non-universal pages');
            }
        },
        intersection: function (queryA, queryB) {
            var meta = metaInformation(queryA, queryB);
            if (meta.pagesAreUniversal) {
                var filterResult = set.intersection(queryA.filter, queryB.filter);
                if (set.isDefinedAndHasMembers(filterResult)) {
                    return new BasicQuery({
                        filter: filterResult,
                        sort: meta.sortIsEqual ? queryA.sort.key : undefined
                    });
                } else {
                    return filterResult;
                }
            }
            if (set.intersection(queryA.filter, queryB.filter) === set.EMPTY) {
                return set.EMPTY;
            }
            if (meta.filterIsEqual) {
                if (meta.sortIsEqual) {
                    return new BasicQuery({
                        filter: queryA.filter,
                        sort: queryA.sort.key,
                        page: set.intersection(queryA.page, queryB.page)
                    });
                } else {
                    if (meta.aIsSubset) {
                        return queryA;
                    } else if (meta.bIsSubset) {
                        return queryB;
                    }
                    return set.UNKNOWABLE;
                }
            } else {
                if (meta.aIsSubset) {
                    return queryA;
                } else if (meta.bIsSubset) {
                    return queryB;
                } else {
                    return set.UNDEFINABLE;
                }
            }
        },
        difference: function (queryA, queryB) {
            var differentClauses = getDifferentClauseTypes(queryA, queryB);
            var meta = metaInformation(queryA, queryB);
            var clause;
            if (differentClauses.length > 1) {
                if (meta.aIsSubset) {
                    return set.EMPTY;
                }
                if (meta.pagesAreUniversal) {
                    return new BasicQuery({
                        filter: set.difference(queryA.filter, queryB.filter),
                        sort: queryA.sort.key
                    });
                }
                return set.UNDEFINABLE;
            } else {
                switch (clause = differentClauses[0]) {
                case undefined: {
                        return set.EMPTY;
                    }
                case 'sort': {
                        if (meta.pagesAreUniversal) {
                            return set.EMPTY;
                        } else {
                            return set.UNKNOWABLE;
                        }
                    }
                case 'page':
                case 'filter': {
                        var result = set.difference(queryA[clause], queryB[clause]);
                        if (set.isSpecial(result)) {
                            return result;
                        } else {
                            var query = {
                                filter: queryA.filter,
                                page: queryA.page,
                                sort: queryA.sort.key
                            };
                            query[clause] = result;
                            return new BasicQuery(query);
                        }
                    }
                }
            }
        }
    });
    module.exports = BasicQuery;
});
/*can-query-logic@1.2.1#src/serializer*/
define('can-query-logic@1.2.1#src/serializer', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    var canReflect = require('can-reflect');
    var Serializer = function (entries) {
        var serializers = this.serializers = new Map();
        if (entries) {
            entries.forEach(function (entry) {
                var key = entry[0], value = entry[1];
                serializers.set(key, value);
            });
        }
        this.serialize = this.serialize.bind(this);
    };
    Serializer.prototype.add = function (serializers) {
        canReflect.assign(this.serializers, serializers instanceof Serializer ? serializers.serializers : serializers);
    };
    Serializer.prototype.serialize = function (item) {
        if (!item) {
            return item;
        }
        var Type = item.constructor;
        var serializer = this.serializers.get(Type);
        if (!serializer) {
            return canReflect.serialize(item);
        } else {
            return serializer(item, this.serialize);
        }
    };
    module.exports = Serializer;
});
/*can-query-logic@1.2.1#src/serializers/comparisons*/
define('can-query-logic@1.2.1#src/serializers/comparisons', [
    'require',
    'exports',
    'module',
    '../types/comparisons',
    '../serializer',
    'can-reflect',
    '../types/values-not',
    '../types/values-and'
], function (require, exports, module) {
    var is = require('../types/comparisons');
    var Serializer = require('../serializer');
    var canReflect = require('can-reflect');
    var ValuesNot = require('../types/values-not');
    var ValuesAnd = require('../types/values-and');
    function makeNew(Constructor) {
        return function (value) {
            return new Constructor(value);
        };
    }
    var hydrateMap = {};
    function addHydrateFrom(key, hydrate) {
        hydrateMap[key] = function (value, unknownHydrator) {
            return hydrate(unknownHydrator ? unknownHydrator(value[key]) : value[key]);
        };
        Object.defineProperty(hydrateMap[key], 'name', {
            value: 'hydrate ' + key,
            writable: true
        });
    }
    function addHydrateFromValues(key, hydrate) {
        hydrateMap[key] = function (value, unknownHydrator) {
            var clones = value[key];
            if (unknownHydrator) {
                clones = clones.map(function (value) {
                    return unknownHydrator(value);
                });
            }
            return hydrate(clones);
        };
        Object.defineProperty(hydrateMap[key], 'name', {
            value: 'hydrate ' + key,
            writable: true
        });
    }
    addHydrateFrom('$eq', function (value) {
        return new is.In([value]);
    });
    addHydrateFrom('$ne', function (value) {
        return new is.NotIn([value]);
    });
    addHydrateFrom('$gt', makeNew(is.GreaterThan));
    addHydrateFrom('$gte', makeNew(is.GreaterThanEqual));
    addHydrateFromValues('$in', makeNew(is.In));
    addHydrateFrom('$lt', makeNew(is.LessThan));
    addHydrateFrom('$lte', makeNew(is.LessThanEqual));
    addHydrateFromValues('$all', makeNew(is.All));
    var oppositeTypeMap = {
        LessThan: {
            Type: is.GreaterThanEqual,
            prop: 'value'
        },
        LessThanEqual: {
            Type: is.GreaterThan,
            prop: 'value'
        },
        GreaterThan: {
            Type: is.LessThanEqual,
            prop: 'value'
        },
        GreaterThanEqual: {
            Type: is.LessThan,
            prop: 'value'
        },
        In: {
            Type: is.NotIn,
            prop: 'values'
        },
        NotIn: {
            Type: is.In,
            prop: 'values'
        }
    };
    hydrateMap['$not'] = function (value, unknownHydrator) {
        var hydratedValue = hydrateValue(value['$not'], unknownHydrator);
        var typeName = hydratedValue.constructor.name;
        if (oppositeTypeMap[typeName]) {
            var options = oppositeTypeMap[typeName];
            var OppositeConstructor = options.Type;
            var prop = options.prop;
            return new OppositeConstructor(hydratedValue[prop]);
        }
        return new ValuesNot(hydratedValue);
    };
    addHydrateFromValues('$nin', makeNew(is.NotIn));
    var serializer = new Serializer([
        [
            is.In,
            function (isIn, serialize) {
                return isIn.values.length === 1 ? serialize(isIn.values[0]) : { $in: isIn.values.map(serialize) };
            }
        ],
        [
            is.NotIn,
            function (notIn, serialize) {
                return notIn.values.length === 1 ? { $ne: serialize(notIn.values[0]) } : { $nin: notIn.values.map(serialize) };
            }
        ],
        [
            is.GreaterThan,
            function (gt, serialize) {
                return { $gt: serialize(gt.value) };
            }
        ],
        [
            is.GreaterThanEqual,
            function (gte, serialize) {
                return { $gte: serialize(gte.value) };
            }
        ],
        [
            is.LessThan,
            function (lt, serialize) {
                return { $lt: serialize(lt.value) };
            }
        ],
        [
            is.LessThanEqual,
            function (lt, serialize) {
                return { $lte: serialize(lt.value) };
            }
        ],
        [
            is.And,
            function (and, serialize) {
                var obj = {};
                and.values.forEach(function (clause) {
                    canReflect.assignMap(obj, serialize(clause));
                });
                return obj;
            }
        ],
        [
            is.All,
            function (all, serialize) {
                return { $all: serialize(all.values) };
            }
        ]
    ]);
    function hydrateValue(value, hydrateUnknown) {
        if (!hydrateUnknown) {
            hydrateUnknown = function () {
                throw new Error('can-query-logic doesn\'t recognize operator: ' + JSON.stringify(value));
            };
        }
        if (Array.isArray(value)) {
            return new is.In(value.map(function (value) {
                return hydrateUnknown(value);
            }));
        } else if (value && typeof value === 'object') {
            var keys = Object.keys(value);
            var allKeysAreComparisons = keys.every(function (key) {
                return hydrateMap[key];
            });
            if (allKeysAreComparisons) {
                var andClauses = keys.map(function (key) {
                    var part = {};
                    part[key] = value[key];
                    var hydrator = hydrateMap[key];
                    return hydrator(part, hydrateUnknown);
                });
                if (andClauses.length > 1) {
                    return new is.And(andClauses);
                } else {
                    return andClauses[0];
                }
            } else {
                return hydrateUnknown(value);
            }
        } else {
            return new is.In([hydrateUnknown(value)]);
        }
    }
    module.exports = {
        hydrate: hydrateValue,
        serializer: serializer
    };
});
/*can-query-logic@1.2.1#src/schema-helpers*/
define('can-query-logic@1.2.1#src/schema-helpers', [
    'require',
    'exports',
    'module',
    'can-reflect',
    './set',
    'can-symbol'
], function (require, exports, module) {
    var canReflect = require('can-reflect');
    var set = require('./set');
    var canSymbol = require('can-symbol');
    var schemaHelpers;
    module.exports = schemaHelpers = {
        isRangedType: function (Type) {
            return Type && canReflect.isConstructorLike(Type) && !set.hasComparisons(Type) && !Type[canSymbol.for('can.SetType')] && Type.prototype.valueOf && Type.prototype.valueOf !== Object.prototype.valueOf;
        },
        categorizeOrValues: function categorizeOrValues(values) {
            var categories = {
                primitives: [],
                valueOfTypes: [],
                others: []
            };
            values.forEach(function (value) {
                if (canReflect.isPrimitive(value)) {
                    categories.primitives.push(value);
                } else if (schemaHelpers.isRangedType(value)) {
                    categories.valueOfTypes.push(value);
                } else {
                    categories.others.push(value);
                }
            });
            return categories;
        }
    };
});
/*can-query-logic@1.2.1#src/types/make-maybe*/
define('can-query-logic@1.2.1#src/types/make-maybe', [
    'require',
    'exports',
    'module',
    '../set',
    './comparisons',
    'can-reflect',
    '../schema-helpers',
    'can-symbol'
], function (require, exports, module) {
    var set = require('../set');
    var is = require('./comparisons');
    var canReflect = require('can-reflect');
    var schemaHelpers = require('../schema-helpers');
    var canSymbol = require('can-symbol');
    var comparisonSetTypeSymbol = canSymbol.for('can.ComparisonSetType');
    var isMemberSymbol = canSymbol.for('can.isMember');
    function splitByRangeAndEnum(maybeUniverse, rangeToBeSplit) {
        var enumSet;
        if (rangeToBeSplit instanceof is.And) {
            var sets = rangeToBeSplit.values.map(function (setInAnd) {
                return splitByRangeAndEnum(maybeUniverse, setInAnd);
            });
            return sets.reduce(function (last, maybe) {
                return {
                    range: set.intersection(last.range, maybe.range),
                    enum: set.intersection(last.enum, maybe.enum)
                };
            }, {
                range: set.UNIVERSAL,
                enum: maybeUniverse
            });
        } else if (rangeToBeSplit instanceof is.In) {
            var shouldBeInValues = rangeToBeSplit.values.filter(function (value) {
                return maybeUniverse.isMember(value);
            });
            if (shouldBeInValues.length) {
                var valuesCopy = rangeToBeSplit.values.slice(0);
                canReflect.removeValues(valuesCopy, shouldBeInValues);
                return {
                    enum: new is.In(shouldBeInValues),
                    range: valuesCopy.length ? new is.In(valuesCopy) : set.EMPTY
                };
            } else {
                return {
                    enum: set.EMPTY,
                    range: rangeToBeSplit
                };
            }
        } else if (rangeToBeSplit instanceof is.NotIn) {
            enumSet = set.intersection(maybeUniverse, rangeToBeSplit);
            var rangeValues = rangeToBeSplit.values.filter(function (value) {
                return !maybeUniverse.isMember(value);
            });
            return {
                range: rangeValues.length ? new is.NotIn(rangeValues) : set.UNIVERSAL,
                enum: enumSet
            };
        } else {
            return {
                enum: set.EMPTY,
                range: rangeToBeSplit
            };
        }
    }
    function makeMaybe(inValues, makeChildType) {
        var maybeUniverse = new is.In(inValues);
        function Maybe(values) {
            var result = splitByRangeAndEnum(maybeUniverse, values.range);
            this.range = result.range || set.EMPTY;
            if (values.enum) {
                if (result.enum !== set.EMPTY) {
                    this.enum = set.union(result.enum, values.enum);
                } else {
                    this.enum = values.enum;
                }
            } else {
                this.enum = result.enum;
            }
            if (this.enum === set.EMPTY && this.range === set.EMPTY) {
                return set.EMPTY;
            }
        }
        Maybe.prototype.orValues = function () {
            var values = [];
            if (this.range !== set.EMPTY) {
                values.push(this.range);
            }
            if (this.enum !== set.EMPTY) {
                values.push(this.enum);
            }
            return values;
        };
        Maybe.prototype[isMemberSymbol] = function isMember() {
            var rangeIsMember = this.range[isMemberSymbol] || this.range.isMember, enumIsMember = this.enum[isMemberSymbol] || this.enum.isMember;
            return rangeIsMember.apply(this.range, arguments) || enumIsMember.apply(this.enum, arguments);
        };
        set.defineComparison(Maybe, Maybe, {
            union: function (maybeA, maybeB) {
                var enumSet = set.union(maybeA.enum, maybeB.enum);
                var range = set.union(maybeA.range, maybeB.range);
                return new Maybe({
                    enum: enumSet,
                    range: range
                });
            },
            difference: function (maybeA, maybeB) {
                var enumSet = set.difference(maybeA.enum, maybeB.enum);
                var range = set.difference(maybeA.range, maybeB.range);
                return new Maybe({
                    enum: enumSet,
                    range: range
                });
            },
            intersection: function (maybeA, maybeB) {
                var enumSet = set.intersection(maybeA.enum, maybeB.enum);
                var range = set.intersection(maybeA.range, maybeB.range);
                return new Maybe({
                    enum: enumSet,
                    range: range
                });
            }
        });
        Maybe.inValues = inValues;
        set.defineComparison(set.UNIVERSAL, Maybe, {
            difference: function (universe, maybe) {
                var primary, secondary;
                if (maybe.range === set.UNIVERSAL) {
                    return new Maybe({
                        range: maybe.range,
                        enum: set.difference(maybeUniverse, maybe.enum)
                    });
                }
                if (maybe.enum === set.EMPTY) {
                    var rangeSet = set.difference(set.UNIVERSAL, maybe.range);
                    var notPresent = set.difference(maybeUniverse, maybe.range);
                    var enumSet = set.difference(notPresent, rangeSet);
                    return new Maybe({
                        range: rangeSet,
                        enum: enumSet
                    });
                } else {
                    primary = set.difference(universe, maybe.range);
                    secondary = set.difference(maybeUniverse, maybe.enum);
                }
                return new Maybe({
                    enum: secondary,
                    range: primary
                });
            }
        });
        makeChildType = makeChildType || function (v) {
            return v;
        };
        Maybe.hydrate = function (value, childHydrate) {
            return new Maybe({ range: childHydrate(value, makeChildType) });
        };
        return Maybe;
    }
    makeMaybe.canMakeMaybeSetType = function (Type) {
        var schema = canReflect.getSchema(Type);
        if (schema && schema.type === 'Or') {
            var categories = schemaHelpers.categorizeOrValues(schema.values);
            return categories.valueOfTypes.length === 1 && categories.valueOfTypes.length + categories.primitives.length === schema.values.length;
        }
        return false;
    };
    makeMaybe.makeMaybeSetTypes = function (Type) {
        var schema = canReflect.getSchema(Type);
        var categories = schemaHelpers.categorizeOrValues(schema.values);
        var ComparisonSetType;
        if (Type[comparisonSetTypeSymbol]) {
            ComparisonSetType = Type[comparisonSetTypeSymbol];
        } else {
            ComparisonSetType = function (value) {
                this.value = canReflect.new(Type, value);
            };
            ComparisonSetType.prototype.valueOf = function () {
                return this.value;
            };
            canReflect.assignSymbols(ComparisonSetType.prototype, {
                'can.serialize': function () {
                    return this.value;
                }
            });
            if (process.env.NODE_ENV !== 'production') {
                Object.defineProperty(ComparisonSetType, 'name', { value: 'Or[' + categories.valueOfTypes[0].name + ',' + categories.primitives.map(String).join(' ') + ']' });
            }
        }
        return {
            Maybe: makeMaybe(categories.primitives, function hydrateMaybesValueType(value) {
                return new ComparisonSetType(value);
            }),
            ComparisonSetType: ComparisonSetType
        };
    };
    module.exports = makeMaybe;
});
/*can-query-logic@1.2.1#src/types/make-enum*/
define('can-query-logic@1.2.1#src/types/make-enum', [
    'require',
    'exports',
    'module',
    '../set',
    '../array-union-intersection-difference',
    '../schema-helpers',
    'can-reflect',
    'can-symbol'
], function (require, exports, module) {
    var set = require('../set');
    var arrayUnionIntersectionDifference = require('../array-union-intersection-difference');
    var schemaHelpers = require('../schema-helpers');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var setTypeSymbol = canSymbol.for('can.SetType'), isMemberSymbol = canSymbol.for('can.isMember'), newSymbol = canSymbol.for('can.new');
    function makeEnumSetType(allValues, hydrate) {
        function Enum(values) {
            var arr = Array.isArray(values) ? values : [values];
            this.values = hydrate ? arr.map(hydrate) : arr;
        }
        canReflect.assignSymbols(Enum.prototype, {
            'can.serialize': function () {
                return this.values.length === 1 ? this.values[0] : this.values;
            }
        });
        Enum.prototype[isMemberSymbol] = function (value) {
            return this.values.some(function (val) {
                return set.isEqual(val, value);
            });
        };
        Enum.UNIVERSAL = new Enum(allValues);
        var difference = function (enum1, enum2) {
            var result = arrayUnionIntersectionDifference(enum1.values, enum2.values);
            if (result.difference.length) {
                return new Enum(result.difference);
            } else {
                return set.EMPTY;
            }
        };
        set.defineComparison(Enum, Enum, {
            union: function (enum1, enum2) {
                var result = arrayUnionIntersectionDifference(enum1.values, enum2.values);
                if (result.union.length) {
                    return new Enum(result.union);
                } else {
                    return set.EMPTY;
                }
            },
            intersection: function (enum1, enum2) {
                var result = arrayUnionIntersectionDifference(enum1.values, enum2.values);
                if (result.intersection.length) {
                    return new Enum(result.intersection);
                } else {
                    return set.EMPTY;
                }
            },
            difference: difference
        });
        set.defineComparison(Enum, set.UNIVERSAL, {
            difference: function (enumA) {
                return difference(enumA, { values: allValues.slice(0) });
            }
        });
        set.defineComparison(set.UNIVERSAL, Enum, {
            difference: function (universe, enumB) {
                return difference({ values: allValues.slice(0) }, enumB);
            }
        });
        return Enum;
    }
    function makeEnum(Type, allValues, hydrate) {
        var Enum = makeEnumSetType(allValues, hydrate);
        Type[setTypeSymbol] = Enum;
        Type[isMemberSymbol] = function (value) {
            return allValues.some(function (val) {
                return set.isEqual(val, value);
            });
        };
        return Enum;
    }
    makeEnum.canMakeEnumSetType = function (Type) {
        var schema = canReflect.getSchema(Type);
        if (schema && schema.type === 'Or') {
            var categories = schemaHelpers.categorizeOrValues(schema.values);
            return categories.primitives.length === schema.values.length;
        }
        return false;
    };
    makeEnum.makeEnumSetType = function (Type) {
        var schema = canReflect.getSchema(Type);
        var categories = schemaHelpers.categorizeOrValues(schema.values);
        var hydrate = Type[newSymbol] ? Type[newSymbol].bind(Type) : undefined;
        return makeEnumSetType(categories.primitives, hydrate);
    };
    module.exports = makeEnum;
});
/*can-query-logic@1.2.1#src/serializers/basic-query*/
define('can-query-logic@1.2.1#src/serializers/basic-query', [
    'require',
    'exports',
    'module',
    'can-symbol',
    'can-reflect',
    '../types/basic-query',
    '../set',
    '../serializers/comparisons',
    '../serializer',
    '../types/comparisons',
    '../types/make-maybe',
    '../types/make-enum',
    'can-log/dev/dev',
    '../helpers'
], function (require, exports, module) {
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    var BasicQuery = require('../types/basic-query');
    var set = require('../set');
    var comparisonsConverter = require('../serializers/comparisons');
    var Serializer = require('../serializer');
    var is = require('../types/comparisons');
    var makeMaybe = require('../types/make-maybe');
    var makeEnum = require('../types/make-enum');
    var logDev = require('can-log/dev/dev');
    var helpers = require('../helpers');
    var setTypeSymbol = canSymbol.for('can.SetType');
    var schemaSymbol = canSymbol.for('can.getSchema');
    var defaultQuery = new BasicQuery({});
    function getSchemaProperties(value) {
        var constructor = value.constructor;
        if (constructor && constructor[schemaSymbol]) {
            var schema = constructor[schemaSymbol]();
            return schema.keys || {};
        } else {
            return {};
        }
    }
    function hydrateFilter(values, schemaProperties, hydrateUnknown) {
        var valuesIsObject = values && typeof values === 'object';
        if (valuesIsObject && '$or' in values) {
            return hydrateOrs(values.$or, schemaProperties, hydrateUnknown);
        } else if (valuesIsObject && '$and' in values) {
            return hydrateAnds(values.$and, schemaProperties, hydrateUnknown);
        } else {
            return hydrateAndValues(values, schemaProperties, hydrateUnknown);
        }
    }
    var setTypeMap = new WeakMap();
    function hydrateAndValue(value, prop, SchemaType, hydrateChild) {
        if (SchemaType) {
            var SetType = SchemaType[setTypeSymbol];
            if (SetType) {
                if (SetType.hydrate) {
                    return SetType.hydrate(value, comparisonsConverter.hydrate);
                } else if (set.hasComparisons(SetType)) {
                    return new SetType(value);
                } else {
                    return comparisonsConverter.hydrate(value, function (value) {
                        return new SetType(value);
                    });
                }
            } else {
                if (makeEnum.canMakeEnumSetType(SchemaType)) {
                    if (!setTypeMap.has(SchemaType)) {
                        setTypeMap.set(SchemaType, makeEnum.makeEnumSetType(SchemaType));
                    }
                    SetType = setTypeMap.get(SchemaType);
                    return new SetType(value);
                } else if (makeMaybe.canMakeMaybeSetType(SchemaType)) {
                    if (!setTypeMap.has(SchemaType)) {
                        setTypeMap.set(SchemaType, makeMaybe.makeMaybeSetTypes(SchemaType));
                    }
                    SetType = setTypeMap.get(SchemaType).Maybe;
                    return SetType.hydrate(value, comparisonsConverter.hydrate);
                } else {
                    return comparisonsConverter.hydrate(value, hydrateChild);
                }
            }
        } else {
            return comparisonsConverter.hydrate(value, hydrateChild);
        }
    }
    function hydrateAndValues(values, schemaProperties, hydrateUnknown) {
        schemaProperties = schemaProperties || {};
        function hydrateChild(value) {
            if (value) {
                if (Array.isArray(value)) {
                    return value.map(hydrateUnknown);
                } else if (canReflect.isPlainObject(value)) {
                    return hydrateAndValues(value, getSchemaProperties(value));
                }
            }
            if (hydrateUnknown) {
                return hydrateUnknown(value);
            } else {
                return value;
            }
        }
        var clone = {};
        canReflect.eachKey(values, function (value, prop) {
            clone[prop] = hydrateAndValue(value, prop, schemaProperties[prop], hydrateChild);
        });
        return new BasicQuery.KeysAnd(clone);
    }
    function combineAnds(ands) {
        var firstKeys = Object.keys(ands[0].values);
        var keys = {};
        var keysCompare = new is.In(firstKeys);
        firstKeys.map(function (key) {
            keys[key] = [];
        });
        var sameKeys = ands.every(function (and) {
            if (!set.isEqual(keysCompare, new is.In(Object.keys(and.values)))) {
                return false;
            }
            canReflect.eachKey(and.values, function (value, key) {
                keys[key].push(value);
            });
            return true;
        });
        if (!sameKeys) {
            return;
        }
        var unequalKeys = [];
        firstKeys.forEach(function (key) {
            var isEqual = keys[key].reduce(function (newSet, lastSetOrFalse) {
                if (lastSetOrFalse === false) {
                    return false;
                }
                if (lastSetOrFalse === undefined) {
                    return newSet;
                }
                var res = set.isEqual(newSet, lastSetOrFalse);
                return res ? newSet : false;
            });
            if (!isEqual) {
                unequalKeys.push(key);
            }
        });
        if (unequalKeys.length !== 1) {
            return;
        }
        var unionKey = unequalKeys[0];
        var unioned = keys[unionKey].reduce(function (cur, last) {
            return set.union(cur, last);
        }, set.EMPTY);
        var result = {};
        firstKeys.map(function (key) {
            result[key] = keys[key][0];
        });
        result[unionKey] = unioned;
        return new BasicQuery.KeysAnd(result);
    }
    function hydrateOrs(values, schemaProperties, hydrateUnknown) {
        var comparisons = values.map(function (value) {
            return hydrateAndValues(value, schemaProperties, hydrateUnknown);
        });
        var combined = combineAnds(comparisons);
        if (combined) {
            return combined;
        }
        return new BasicQuery.Or(comparisons);
    }
    function hydrateAnds(values, schemaProperties, hydrateUnknown) {
        var comparisons = values.map(function (value) {
            return hydrateAndValues(value, schemaProperties, hydrateUnknown);
        });
        return new BasicQuery.And(comparisons);
    }
    function recursivelyAddOrs(ors, value, serializer, key) {
        value.orValues().forEach(function (orValue) {
            if (typeof orValue.orValues === 'function') {
                recursivelyAddOrs(ors, orValue, serializer, key);
            } else {
                var result = {};
                result[key] = serializer(orValue);
                ors.push(result);
            }
        });
    }
    module.exports = function (schema) {
        var id = schema.identity && schema.identity[0];
        var keys = schema.keys;
        var serializeMap = [
            [
                BasicQuery.Or,
                function (or, serializer) {
                    return or.values.map(function (value) {
                        return serializer(value);
                    });
                }
            ],
            [
                BasicQuery.And,
                function (and, serializer) {
                    return {
                        $and: and.values.map(function (value) {
                            return serializer(value);
                        })
                    };
                }
            ],
            [
                BasicQuery.Not,
                function (nots, serializer) {
                    return { $not: serializer(nots.value) };
                }
            ],
            [
                BasicQuery.KeysAnd,
                function (and, serializer) {
                    var ors = [];
                    var result = {};
                    canReflect.eachKey(and.values, function (value, key) {
                        if (typeof value.orValues === 'function') {
                            recursivelyAddOrs(ors, value, serializer, key);
                        } else {
                            result[key] = serializer(value);
                        }
                    });
                    if (ors.length) {
                        if (ors.length === 1) {
                            return ors[0];
                        } else {
                            return {
                                $or: ors.map(function (orPart) {
                                    return canReflect.assign(canReflect.serialize(result), orPart);
                                })
                            };
                        }
                    } else {
                        return result;
                    }
                }
            ],
            [
                BasicQuery.RecordRange,
                function (range) {
                    return {
                        start: range.start,
                        end: range.end
                    };
                }
            ],
            [
                BasicQuery,
                function (basicQuery, childSerializer) {
                    var filter = set.isEqual(basicQuery.filter, set.UNIVERSAL) ? {} : childSerializer(basicQuery.filter);
                    var res = {};
                    if (canReflect.size(filter) !== 0) {
                        res.filter = filter;
                    }
                    if (!set.isEqual(basicQuery.page, defaultQuery.page)) {
                        res.page = { start: basicQuery.page.start };
                        if (basicQuery.page.end !== defaultQuery.page.end) {
                            res.page.end = basicQuery.page.end;
                        }
                    }
                    if (basicQuery.sort.key !== id) {
                        res.sort = basicQuery.sort.key;
                    }
                    return res;
                }
            ]
        ];
        var Sort = BasicQuery.makeSort(schema, hydrateAndValue);
        var serializer = new Serializer(serializeMap);
        serializer.add(comparisonsConverter.serializer);
        return {
            hydrate: function (data) {
                if (process.env.NODE_ENV !== 'production') {
                    var AcceptedFields = makeEnum(function () {
                    }, [
                        'filter',
                        'sort',
                        'page'
                    ]);
                    var diff = set.difference(new AcceptedFields(Object.keys(data)), AcceptedFields.UNIVERSAL);
                    if (diff.values && diff.values.length) {
                        logDev.warn('can-query-logic: Ignoring keys: ' + diff.values.join(', ') + '.');
                    }
                }
                var filter = canReflect.serialize(data.filter);
                var filterAnd = hydrateFilter(filter, keys, helpers.valueHydrator);
                var query = { filter: filterAnd };
                if (data.page) {
                    query.page = new BasicQuery.RecordRange(data.page.start, data.page.end);
                }
                if (data.sort) {
                    query.sort = new Sort(data.sort);
                } else {
                    query.sort = new Sort(id);
                }
                return new BasicQuery(query);
            },
            serializer: serializer
        };
    };
});
/*can-query-logic@1.2.1#can-query-logic*/
define('can-query-logic@1.2.1#can-query-logic', [
    'require',
    'exports',
    'module',
    './src/set',
    'can-symbol',
    'can-reflect',
    './src/serializers/basic-query',
    './src/types/basic-query',
    './src/types/comparisons',
    './src/types/make-enum'
], function (require, exports, module) {
    var set = require('./src/set');
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    var makeBasicQueryConvert = require('./src/serializers/basic-query');
    var BasicQuery = require('./src/types/basic-query');
    var valueComparisons = require('./src/types/comparisons');
    var schemaSymbol = canSymbol.for('can.getSchema');
    var newSymbol = canSymbol.for('can.new');
    var makeEnum = require('./src/types/make-enum');
    function QueryLogic(Type, options) {
        Type = Type || {};
        var passedHydrator = options && options.toQuery;
        var passedSerializer = options && options.toParams;
        var schema;
        if (Type[schemaSymbol]) {
            schema = Type[schemaSymbol]();
        } else {
            schema = Type;
        }
        var id = schema.identity && schema.identity[0];
        if (!id) {
            schema.identity = ['id'];
        }
        var converter = makeBasicQueryConvert(schema), hydrate, serialize;
        if (passedHydrator) {
            hydrate = function (query) {
                return converter.hydrate(passedHydrator(query));
            };
        } else {
            hydrate = converter.hydrate;
        }
        if (passedSerializer) {
            serialize = function (query) {
                return passedSerializer(converter.serializer.serialize(query));
            };
        } else {
            serialize = converter.serializer.serialize;
        }
        this.hydrate = hydrate;
        this.serialize = serialize;
        this.schema = schema;
    }
    function makeNewSet(prop) {
        return function (qA, qB) {
            var queryA = this.hydrate(qA), queryB = this.hydrate(qB);
            var unionQuery = set[prop](queryA, queryB);
            return this.serialize(unionQuery);
        };
    }
    function makeReturnValue(prop) {
        return function (qA, qB) {
            var queryA = this.hydrate(qA), queryB = this.hydrate(qB);
            return set[prop](queryA, queryB);
        };
    }
    canReflect.assignSymbols(QueryLogic.prototype, {
        'can.getSchema': function () {
            return this.schema;
        }
    });
    canReflect.assign(QueryLogic.prototype, {
        union: makeNewSet('union'),
        difference: makeNewSet('difference'),
        intersection: makeNewSet('intersection'),
        isEqual: makeReturnValue('isEqual'),
        isProperSubset: makeReturnValue('isProperSubset'),
        isSubset: makeReturnValue('isSubset'),
        isSpecial: set.isSpecial,
        isDefinedAndHasMembers: set.isDefinedAndHasMembers,
        count: function (a) {
            var queryA = this.hydrate(a);
            return queryA.page.end - queryA.page.start + 1;
        },
        identityKeys: function () {
            return this.schema.identity;
        },
        filterMembers: function (a, b, bData) {
            var queryA = this.hydrate(a);
            if (arguments.length >= 3) {
                var queryB = this.hydrate(b);
                return queryA.filterFrom(bData, queryB);
            } else {
                return queryA.filterFrom(b);
            }
        },
        filterMembersAndGetCount: function (a, b, bData) {
            var queryA = this.hydrate(a), queryB = this.hydrate(b);
            return queryA.filterMembersAndGetCount(bData, queryB);
        },
        unionMembers: function (a, b, aData, bData) {
            var queryA = this.hydrate(a), queryB = this.hydrate(b);
            var schema = this.schema;
            return queryA.merge(queryB, aData, bData, function (obj) {
                return canReflect.getIdentity(obj, schema);
            });
        },
        isMember: function (query, props) {
            return this.hydrate(query).isMember(props);
        },
        memberIdentity: function (props) {
            return canReflect.getIdentity(props, this.schema);
        },
        index: function (query, items, props) {
            return this.hydrate(query).index(props, items);
        },
        insert: function (query, items, item) {
            var index = this.index(query, items, item);
            if (index === undefined) {
                index = items.length;
            }
            var copy = items.slice(0);
            copy.splice(index, 0, item);
            return copy;
        },
        isPaginated: function (query) {
            var basicQuery = this.hydrate(query);
            return !set.isEqual(basicQuery.page, set.UNIVERSAL);
        },
        removePagination: function (query) {
            var basicQuery = this.hydrate(query);
            basicQuery.removePagination();
            return this.serialize(basicQuery);
        }
    });
    for (var prop in set) {
        if (QueryLogic[prop] === undefined) {
            QueryLogic[prop] = set[prop];
        }
    }
    QueryLogic.makeEnum = function (values) {
        var Type = function () {
        };
        Type[newSymbol] = function (val) {
            return val;
        };
        makeEnum(Type, values);
        return Type;
    };
    QueryLogic.KeysAnd = BasicQuery.KeysAnd;
    QueryLogic.ValuesOr = BasicQuery.Or;
    QueryLogic.In = valueComparisons.In;
    QueryLogic.NotIn = valueComparisons.NotIn;
    QueryLogic.GreaterThan = valueComparisons.GreaterThan;
    QueryLogic.GreaterThanEqual = valueComparisons.GreaterThanEqual;
    QueryLogic.LessThan = valueComparisons.LessThan;
    QueryLogic.LessThanEqual = valueComparisons.LessThanEqual;
    QueryLogic.ValueAnd = valueComparisons.And;
    QueryLogic.ValueOr = valueComparisons.Or;
    module.exports = QueryLogic;
});
/*can-fixture@3.1.7#matches*/
define('can-fixture@3.1.7#matches', [
    'require',
    'exports',
    'module',
    'can-query-logic/src/set',
    'can-reflect',
    './data-from-url',
    'can-query-logic'
], function (require, exports, module) {
    var set = require('can-query-logic/src/set');
    var canReflect = require('can-reflect');
    var dataFromUrl = require('./data-from-url');
    var QueryLogic = require('can-query-logic');
    function deepEqual(a, b) {
        if (a === b) {
            return true;
        } else if (Array.isArray(a) && Array.isArray(b)) {
            if (a.length !== b.length) {
                return false;
            } else {
                return a.every(function (aVal, i) {
                    return deepEqual(aVal, b[i]);
                });
            }
        } else if (a && b && canReflect.isPlainObject(a) && canReflect.isPlainObject(b)) {
            var aKeys = Object.keys(a), bKeys = Object.keys(b);
            if (aKeys.length === bKeys.length) {
                for (var prop in a) {
                    if (!b.hasOwnProperty(prop)) {
                        return false;
                    }
                    if (!deepEqual(a[prop], b[prop])) {
                        return false;
                    }
                }
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }
    function deepMatches(a, b) {
        if (a === b) {
            return true;
        } else if (Array.isArray(a) && Array.isArray(b)) {
            return a.every(function (aVal, i) {
                return deepMatches(aVal, b[i]);
            });
        } else if (a && b && canReflect.isPlainObject(a) && canReflect.isPlainObject(b)) {
            for (var prop in a) {
                if (!b.hasOwnProperty(prop)) {
                    return false;
                }
                if (!deepMatches(a[prop], b[prop])) {
                    return false;
                }
            }
            return true;
        } else {
            return false;
        }
    }
    function removeFixtureAndXHR(query) {
        if (query.fixture || query.xhr || query.data) {
            var clone = canReflect.serialize(query);
            delete clone.fixture;
            delete clone.xhr;
            delete clone.data;
            return clone;
        } else {
            return query;
        }
    }
    function identityIntersection(v1, v2) {
        return v1.value === v2.value ? v1 : set.EMPTY;
    }
    function identityDifference(v1, v2) {
        return v1.value === v2.value ? set.EMPTY : v1;
    }
    function identityUnion(v1, v2) {
        return v1.value === v2.value ? v1 : set.UNDEFINABLE;
    }
    var identityComparitor = {
        intersection: identityIntersection,
        difference: identityDifference,
        union: identityUnion
    };
    function makeComparatorType(compare) {
        var Type = function () {
        };
        var SetType = function (value) {
            this.value = value;
        };
        SetType.prototype.isMember = function (value, root, keys) {
            return compare(this.value, value, root, keys);
        };
        canReflect.assignSymbols(Type, { 'can.SetType': SetType });
        set.defineComparison(SetType, SetType, identityComparitor);
        set.defineComparison(set.UNIVERSAL, SetType, {
            difference: function () {
                return set.UNDEFINABLE;
            }
        });
        return Type;
    }
    function quickEqual(queryA, queryB) {
        var dataA = queryA.data, dataB = queryB.data;
        if (dataA && dataB) {
            if (!deepMatches(dataA, dataB)) {
                return false;
            }
        }
        var q1 = new QueryLogic.KeysAnd(removeFixtureAndXHR(queryA)), q2 = new QueryLogic.KeysAnd(removeFixtureAndXHR(queryB));
        return set.isEqual(q1, q2);
    }
    function quickSubset(queryA, queryB) {
        return set.isSubset(new QueryLogic.KeysAnd(queryA), new QueryLogic.KeysAnd(queryB));
    }
    var types = {};
    canReflect.eachKey({
        IsEmptyOrNull: function (a, b) {
            if (a == null && canReflect.size(b) === 0) {
                return true;
            } else if (b == null && canReflect.size(a) === 0) {
                return true;
            } else {
                return quickEqual(a, b);
            }
        },
        isEmptyOrSubset: function (a, b) {
            if (a == null && canReflect.size(b) === 0) {
                return true;
            } else if (b == null && canReflect.size(a) === 0) {
                return true;
            } else {
                return quickSubset(a, b);
            }
        },
        TemplateUrl: function (a, b) {
            return !!dataFromUrl(a, b);
        },
        StringIgnoreCase: function (a, b) {
            return b && a ? a.toLowerCase() === b.toLowerCase() : b === a;
        },
        Ignore: function () {
            return true;
        }
    }, function (compare, name) {
        types[name] = makeComparatorType(compare);
    });
    var schema = {
        identity: ['id'],
        keys: {
            url: types.TemplateUrl,
            fixture: types.Ignore,
            xhr: types.Ignore,
            type: types.StringIgnoreCase,
            method: types.StringIgnoreCase,
            helpers: types.Ignore,
            headers: types.IsEmptyOrNull,
            data: types.IsEmptyOrSubset
        }
    };
    var query = new QueryLogic(schema);
    module.exports = {
        fixture: quickEqual,
        request: function (requestData, fixtureData) {
            return query.isMember({ filter: fixtureData }, requestData);
        },
        matches: function (settings, fixture, exact) {
            if (exact) {
                return this.fixture(settings, fixture);
            } else {
                return this.request(settings, fixture);
            }
        },
        makeComparatorType: makeComparatorType
    };
});
/*can-memory-store@1.0.2#make-simple-store*/
define('can-memory-store@1.0.2#make-simple-store', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    var canReflect = require('can-reflect');
    function getItems(data) {
        if (Array.isArray(data)) {
            return data;
        } else {
            return data.data;
        }
    }
    function indexOf(records, identity, queryLogic) {
        var schema = canReflect.getSchema(queryLogic);
        for (var i = 0; i < records.length; i++) {
            if (identity === canReflect.getIdentity(records[i], schema)) {
                return i;
            }
        }
        return -1;
    }
    function makeSimpleStore(baseConnection) {
        baseConnection.constructor = makeSimpleStore;
        var behavior = Object.create(baseConnection);
        return canReflect.assignMap(behavior, {
            getRecordFromParams: function (record) {
                var id = canReflect.getIdentity(record, this.queryLogic.schema);
                return this.getRecord(id);
            },
            log: function () {
                this._log = true;
            },
            getSets: function () {
                return this.getQueries();
            },
            getQueries: function () {
                return Promise.resolve(this.getQueriesSync());
            },
            getQueriesSync: function () {
                return this.getQueryDataSync().map(function (queryData) {
                    return queryData.query;
                });
            },
            getListData: function (query) {
                query = query || {};
                var listData = this.getListDataSync(query);
                if (listData) {
                    return Promise.resolve(listData);
                }
                return Promise.reject({
                    title: 'no data',
                    status: '404',
                    detail: 'No data available for this query.\nAvailable queries: ' + JSON.stringify(this.getQueriesSync())
                });
            },
            getPaginatedListDataSync: function (superSetQueryData) {
                var records = this.getAllRecords();
                var queryWithoutPagination = this.queryLogic.removePagination(superSetQueryData.query);
                var matchingSuperRecordsNoPagination = this.queryLogic.filterMembersAndGetCount(queryWithoutPagination, {}, records);
                var startIndex = indexOf(matchingSuperRecordsNoPagination.data, superSetQueryData.startIdentity, this.queryLogic);
                var matchingSuperRecords = matchingSuperRecordsNoPagination.data.slice(startIndex, startIndex + this.queryLogic.count(superSetQueryData.query));
                return {
                    count: matchingSuperRecordsNoPagination.data.length,
                    data: matchingSuperRecords
                };
            },
            getListDataSync: function (query) {
                var queryData = this.getQueryDataSync(), superSetQueryData, isPaginated = this.queryLogic.isPaginated(query);
                for (var i = 0; i < queryData.length; i++) {
                    var checkSet = queryData[i].query;
                    if (this.queryLogic.isSubset(query, checkSet)) {
                        superSetQueryData = queryData[i];
                    }
                }
                var records = this.getAllRecords();
                if (isPaginated && this.queryLogic.isPaginated(superSetQueryData.query)) {
                    var result = this.getPaginatedListDataSync(superSetQueryData);
                    return this.queryLogic.filterMembersAndGetCount(query, superSetQueryData.query, result.data);
                }
                var matching = this.queryLogic.filterMembersAndGetCount(query, {}, records);
                if (matching && matching.count) {
                    return matching;
                }
                if (superSetQueryData) {
                    return {
                        count: 0,
                        data: []
                    };
                }
            },
            updateListData: function (data, query) {
                var queryData = this.getQueryDataSync();
                query = query || {};
                var clonedData = canReflect.serialize(data);
                var records = getItems(clonedData);
                this.updateRecordsSync(records);
                var isPaginated = this.queryLogic.isPaginated(query);
                var identity = records.length ? canReflect.getIdentity(records[0], this.queryLogic.schema) : undefined;
                if (isPaginated) {
                    for (var i = 0; i < queryData.length; i++) {
                        var checkSet = queryData[i].query;
                        var union = this.queryLogic.union(checkSet, query);
                        if (this.queryLogic.isDefinedAndHasMembers(union)) {
                            var siblingRecords = this.getPaginatedListDataSync(queryData[i]);
                            var res = this.queryLogic.unionMembers(checkSet, query, siblingRecords.data, records);
                            identity = canReflect.getIdentity(res[0], this.queryLogic.schema);
                            queryData[i] = {
                                query: union,
                                startIdentity: identity
                            };
                            this.updateQueryDataSync(queryData);
                            return Promise.resolve();
                        }
                    }
                    queryData.push({
                        query: query,
                        startIdentity: identity
                    });
                    this.updateQueryDataSync(queryData);
                    return Promise.resolve();
                }
                var allRecords = this.getAllRecords();
                var curretMatching = this.queryLogic.filterMembers(query, allRecords);
                if (curretMatching.length) {
                    var toBeDeleted = new Map();
                    curretMatching.forEach(function (record) {
                        toBeDeleted.set(canReflect.getIdentity(record, this.queryLogic.schema), record);
                    }, this);
                    records.forEach(function (record) {
                        toBeDeleted.delete(canReflect.getIdentity(record, this.queryLogic.schema));
                    }, this);
                    this.destroyRecords(canReflect.toArray(toBeDeleted));
                }
                var allQueries = this.getQueryDataSync();
                var notSubsets = allQueries.filter(function (existingQueryData) {
                        return !this.queryLogic.isSubset(existingQueryData.query, query);
                    }, this), superSets = notSubsets.filter(function (existingQueryData) {
                        return this.queryLogic.isSubset(query, existingQueryData.query);
                    }, this);
                if (superSets.length) {
                    this.updateQueryDataSync(notSubsets);
                } else {
                    this.updateQueryDataSync(notSubsets.concat([{
                            query: query,
                            startIdentity: identity
                        }]));
                }
                return Promise.resolve();
            },
            getData: function (params) {
                var id = canReflect.getIdentity(params, canReflect.getSchema(this.queryLogic));
                var res = this.getRecord(id);
                if (res) {
                    return Promise.resolve(res);
                } else {
                    return Promise.reject({
                        title: 'no data',
                        status: '404',
                        detail: 'No record with matching identity (' + id + ').'
                    });
                }
            },
            createData: function (record) {
                this.updateRecordsSync([record]);
                return Promise.resolve(canReflect.assignMap({}, this.getRecordFromParams(record)));
            },
            updateData: function (record) {
                if (this.errorOnMissingRecord && !this.getRecordFromParams(record)) {
                    var id = canReflect.getIdentity(record, this.queryLogic.schema);
                    return Promise.reject({
                        title: 'no data',
                        status: '404',
                        detail: 'No record with matching identity (' + id + ').'
                    });
                }
                this.updateRecordsSync([record]);
                return Promise.resolve(canReflect.assignMap({}, this.getRecordFromParams(record)));
            },
            destroyData: function (record) {
                var id = canReflect.getIdentity(record, this.queryLogic.schema), savedRecord = this.getRecordFromParams(record);
                if (this.errorOnMissingRecord && !savedRecord) {
                    return Promise.reject({
                        title: 'no data',
                        status: '404',
                        detail: 'No record with matching identity (' + id + ').'
                    });
                }
                this.destroyRecords([record]);
                return Promise.resolve(canReflect.assignMap({}, savedRecord || record));
            }
        });
    }
    module.exports = makeSimpleStore;
});
/*can-memory-store@1.0.2#can-memory-store*/
define('can-memory-store@1.0.2#can-memory-store', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-namespace',
    './make-simple-store'
], function (require, exports, module) {
    var canReflect = require('can-reflect');
    var namespace = require('can-namespace');
    var makeSimpleStore = require('./make-simple-store');
    module.exports = namespace.memoryStore = function memoryStore(baseConnection) {
        baseConnection.constructor = memoryStore;
        var behavior = Object.create(makeSimpleStore(baseConnection));
        canReflect.assignMap(behavior, {
            clear: function () {
                this._instances = {};
                this._queries = [];
            },
            _queryData: [],
            updateQueryDataSync: function (queries) {
                this._queryData = queries;
            },
            getQueryDataSync: function () {
                return this._queryData;
            },
            _instances: {},
            getRecord: function (id) {
                return this._instances[id];
            },
            getAllRecords: function () {
                var records = [];
                for (var id in this._instances) {
                    records.push(this._instances[id]);
                }
                return records;
            },
            destroyRecords: function (records) {
                canReflect.eachIndex(records, function (record) {
                    var id = canReflect.getIdentity(record, this.queryLogic.schema);
                    delete this._instances[id];
                }, this);
            },
            updateRecordsSync: function (records) {
                records.forEach(function (record) {
                    var id = canReflect.getIdentity(record, this.queryLogic.schema);
                    this._instances[id] = record;
                }, this);
            }
        });
        return behavior;
    };
});
/*can-fixture@3.1.7#store*/
define('can-fixture@3.1.7#store', [
    'require',
    'exports',
    'module',
    'can-query-logic',
    'can-reflect',
    'can-memory-store'
], function (require, exports, module) {
    var QueryLogic = require('can-query-logic');
    var canReflect = require('can-reflect');
    var memoryStore = require('can-memory-store');
    var connectToConnection = function (method, convert) {
        return function (req, res) {
            this.connection[method](convert.call(this, req.data)).then(function (data) {
                res(data);
            }, function (err) {
                res(parseInt(err.status, 10), err);
            });
        };
    };
    var makeMakeItems = function (baseItems, idProp) {
        return function () {
            var items = [], maxId = 0, idType = 'number';
            baseItems.forEach(function (item) {
                items.push(canReflect.serialize(item));
                var type = typeof item[idProp];
                if (type === 'number') {
                    maxId = Math.max(item[idProp], maxId);
                } else {
                    idType = type;
                }
            });
            return {
                maxId: maxId,
                items: items,
                idType: idType
            };
        };
    };
    var stringToAny = function (str) {
        switch (str) {
        case 'NaN':
        case 'Infinity':
            return +str;
        case 'null':
            return null;
        case 'undefined':
            return undefined;
        case 'true':
        case 'false':
            return str === 'true';
        default:
            var val = +str;
            if (!isNaN(val)) {
                return val;
            } else {
                return str;
            }
        }
    };
    var Store = function (connection, makeItems, idProp) {
        var schema = connection.queryLogic.schema;
        var identityKey = schema.identity[0], keys = schema.keys;
        if (!keys || !keys[identityKey]) {
            console.warn('No type specified for identity key. Going to convert strings to reasonable type.');
        }
        this.connection = connection;
        this.makeItems = makeItems;
        this.idProp = idProp;
        this.reset();
        for (var method in Store.prototype) {
            this[method] = this[method].bind(this);
        }
    };
    var doNotConvert = function (v) {
        return v;
    };
    function typeConvert(data) {
        var schema = this.connection.queryLogic.schema;
        var idType = this.idType;
        var identityKey = schema.identity[0], keys = schema.keys;
        if (!keys || !keys[identityKey]) {
            keys = {};
            keys[identityKey] = function (value) {
                if (idType === 'string') {
                    return '' + value;
                } else {
                    return typeof value === 'string' ? stringToAny(value) : value;
                }
            };
        }
        var copy = {};
        canReflect.eachKey(data, function (value, key) {
            if (keys[key]) {
                copy[key] = canReflect.serialize(canReflect.convert(value, keys[key]));
            } else {
                copy[key] = value;
            }
        });
        return copy;
    }
    canReflect.assignMap(Store.prototype, {
        getListData: connectToConnection('getListData', doNotConvert),
        getData: connectToConnection('getData', typeConvert),
        createData: function (req, res) {
            var idProp = this.idProp;
            req.data[idProp] = ++this.maxId;
            this.connection.createData(typeConvert.call(this, req.data)).then(function (data) {
                res(data);
            }, function (err) {
                res(403, err);
            });
        },
        createInstance: function (record) {
            var idProp = this.idProp;
            if (!(idProp in record)) {
                record[idProp] = ++this.maxId;
            }
            return this.connection.createData(record);
        },
        updateData: connectToConnection('updateData', typeConvert),
        updateInstance: function (record) {
            return this.connection.updateData(record);
        },
        destroyInstance: function (record) {
            return this.connection.destroyData(record);
        },
        destroyData: connectToConnection('destroyData', typeConvert),
        reset: function (newItems) {
            if (newItems) {
                this.makeItems = makeMakeItems(newItems, this.idProp);
            }
            var itemData = this.makeItems();
            this.maxId = itemData.maxId;
            this.idType = itemData.idType;
            this.connection.updateListData(itemData.items, {});
        },
        get: function (params) {
            var id = this.connection.queryLogic.memberIdentity(params);
            return this.connection.getRecord(id);
        },
        getList: function (set) {
            return this.connection.getListDataSync(set);
        }
    });
    function looksLikeAQueryLogic(obj) {
        return obj && 'identityKeys' in obj;
    }
    Store.make = function (count, make, queryLogic) {
        var makeItems, idProp;
        if (typeof count === 'number') {
            if (!queryLogic) {
                queryLogic = new QueryLogic({});
            } else if (!looksLikeAQueryLogic(queryLogic)) {
                queryLogic = new QueryLogic(queryLogic);
            }
            idProp = queryLogic.identityKeys()[0] || 'id';
            makeItems = function () {
                var items = [];
                var maxId = 0;
                for (var i = 0; i < count; i++) {
                    var item = make(i, items);
                    if (!item[idProp]) {
                        item[idProp] = i;
                    }
                    maxId = Math.max(item[idProp], maxId);
                    items.push(item);
                }
                return {
                    maxId: maxId,
                    items: items
                };
            };
        } else if (Array.isArray(count)) {
            queryLogic = make;
            if (!queryLogic) {
                queryLogic = new QueryLogic({});
            } else if (!looksLikeAQueryLogic(queryLogic)) {
                queryLogic = new QueryLogic(queryLogic);
            }
            idProp = queryLogic.identityKeys()[0] || 'id';
            makeItems = makeMakeItems(count, idProp);
        }
        var connection = memoryStore({
            queryLogic: queryLogic,
            errorOnMissingRecord: true
        });
        return new Store(connection, makeItems, idProp);
    };
    module.exports = Store;
});
/*can-fixture@3.1.7#core*/
define('can-fixture@3.1.7#core', [
    'require',
    'exports',
    'module',
    'can-key/sub/sub',
    'can-reflect',
    './matches',
    'can-log',
    'can-log/dev/dev',
    './data-from-url',
    './store'
], function (require, exports, module) {
    'use strict';
    var sub = require('can-key/sub/sub');
    var canReflect = require('can-reflect');
    var matches = require('./matches');
    var canLog = require('can-log');
    var canDev = require('can-log/dev/dev');
    var dataFromUrl = require('./data-from-url');
    require('./store');
    var fixtures = [];
    exports.fixtures = fixtures;
    function isStoreLike(fixture) {
        return fixture && (fixture.getData || fixture.getListData);
    }
    var methodMapping = {
        item: {
            'GET': 'getData',
            'PUT': 'updateData',
            'DELETE': 'destroyData'
        },
        list: {
            'GET': 'getListData',
            'POST': 'createData'
        }
    };
    function getMethodAndPath(route) {
        var matches = route.match(/(GET|POST|PUT|DELETE|PATCH) (.+)/i);
        if (!matches) {
            return [
                undefined,
                route
            ];
        }
        var method = matches[1];
        var path = matches[2];
        return [
            method,
            path
        ];
    }
    function inferIdProp(url) {
        var wrappedInBraces = /\{(.*)\}/;
        var matches = url.match(wrappedInBraces);
        var isUniqueMatch = matches && matches.length === 2;
        if (isUniqueMatch) {
            return matches[1];
        }
    }
    function getItemAndListUrls(url, idProp) {
        idProp = idProp || inferIdProp(url);
        if (!idProp) {
            return [
                undefined,
                url
            ];
        }
        var itemRegex = new RegExp('\\/\\{' + idProp + '\\}.*');
        var rootIsItemUrl = itemRegex.test(url);
        var listUrl = rootIsItemUrl ? url.replace(itemRegex, '') : url;
        var itemUrl = rootIsItemUrl ? url : url.trim() + '/{' + idProp + '}';
        return [
            itemUrl,
            listUrl
        ];
    }
    function addStoreFixture(root, store) {
        var settings = {};
        var typeAndUrl = getMethodAndPath(root);
        var type = typeAndUrl[0];
        var url = typeAndUrl[1];
        var itemAndListUrls = getItemAndListUrls(url, store.idProp);
        var itemUrl = itemAndListUrls[0];
        var listUrl = itemAndListUrls[1];
        if (type) {
            var warning = ['fixture("' + root + '", fixture) must use a store method, not a store directly.'];
            if (itemUrl) {
                var itemAction = methodMapping.item[type];
                if (itemAction) {
                    settings[type + ' ' + itemUrl] = store[itemAction];
                    var itemWarning = 'Replace with fixture("' + type + ' ' + itemUrl + '", fixture.' + itemAction + ') for items.';
                    warning.push(itemWarning);
                }
            }
            var listAction = methodMapping.list[type];
            if (listAction) {
                settings[type + ' ' + listUrl] = store[listAction];
                var listWarning = 'Replace with fixture("' + type + ' ' + listUrl + '", fixture.' + listAction + ') for lists.';
                warning.push(listWarning);
            }
            var message = warning.join(' ');
            canDev.warn(message);
        } else {
            var itemMapping = methodMapping.item;
            for (var itemMethod in itemMapping) {
                var storeItemMethod = itemMapping[itemMethod];
                settings[itemMethod + ' ' + itemUrl] = store[storeItemMethod];
            }
            var listMapping = methodMapping.list;
            for (var listMethod in listMapping) {
                var storeListMethod = listMapping[listMethod];
                settings[listMethod + ' ' + listUrl] = store[storeListMethod];
            }
        }
        return settings;
    }
    function getSettingsFromString(route) {
        var typeAndUrl = getMethodAndPath(route);
        var type = typeAndUrl[0];
        var url = typeAndUrl[1];
        if (type) {
            return {
                type: type,
                url: url
            };
        }
        return { url: url };
    }
    function upsertFixture(fixtureList, settings, fixture) {
        var index = exports.index(settings, true);
        var oldFixture;
        if (index > -1) {
            oldFixture = fixtures.splice(index, 1);
        }
        if (fixture == null) {
            return oldFixture;
        }
        if (typeof fixture === 'object') {
            var data = fixture;
            fixture = function () {
                return data;
            };
        }
        settings.fixture = fixture;
        fixtures.unshift(settings);
        return oldFixture;
    }
    exports.add = function (settings, fixture) {
        if (fixture === undefined) {
            var oldFixtures = [];
            if (Array.isArray(settings)) {
                canReflect.eachIndex(settings, function (ajaxSettings) {
                    var fixture = ajaxSettings.fixture;
                    ajaxSettings = canReflect.assignMap({}, ajaxSettings);
                    delete ajaxSettings.fixture;
                    return exports.add(ajaxSettings, fixture);
                });
            } else {
                canReflect.eachKey(settings, function (fixture, url) {
                    oldFixtures = oldFixtures.concat(exports.add(url, fixture));
                });
                return oldFixtures;
            }
        }
        if (isStoreLike(fixture)) {
            settings = addStoreFixture(settings, fixture);
            return exports.add(settings);
        }
        if (typeof settings === 'string') {
            settings = getSettingsFromString(settings);
        }
        return upsertFixture(fixtures, settings, fixture);
    };
    var $fixture = exports.add;
    $fixture.on = true;
    $fixture.delay = 10;
    function FixtureResponse(fixture, response) {
        this.statusCode = response[0];
        this.responseBody = response[1];
        this.headers = response[2];
        this.statusText = response[3];
        this.fixture = fixture;
    }
    exports.callDynamicFixture = function (xhrSettings, fixtureSettings, cb) {
        xhrSettings.data = fixtureSettings.data;
        if (process.env.NODE_ENV !== 'production') {
            var json = JSON.stringify(xhrSettings.data);
            canLog.log('' + xhrSettings.type.toUpperCase() + ' ' + xhrSettings.url + ' ' + json.substr(0, 50) + ' -> handler(req,res)');
        }
        var response = function () {
            var res = exports.extractResponse.apply(xhrSettings, arguments);
            canLog.log('can-fixture: ' + xhrSettings.type.toUpperCase() + ' ' + xhrSettings.url + ' ', xhrSettings.data, ' => ', new FixtureResponse(fixtureSettings.fixture, res));
            return cb.apply(this, res);
        };
        var callFixture = function () {
            var result = fixtureSettings.fixture(xhrSettings, response, xhrSettings.headers, fixtureSettings);
            if (canReflect.isPromise(result)) {
                result.then(function (result) {
                    if (result !== undefined) {
                        response(200, result);
                    }
                });
            } else {
                if (result !== undefined) {
                    response(200, result);
                }
            }
        };
        if (!xhrSettings.async) {
            callFixture();
            return null;
        } else {
            return setTimeout(callFixture, $fixture.delay);
        }
    };
    exports.index = function (settings, exact) {
        for (var i = 0; i < fixtures.length; i++) {
            if (matches.matches(settings, fixtures[i], exact)) {
                return i;
            }
        }
        return -1;
    };
    exports.get = function (xhrSettings) {
        if (!$fixture.on) {
            return;
        }
        var index = exports.index(xhrSettings, true);
        if (index === -1) {
            index = exports.index(xhrSettings, false);
        }
        var fixtureSettings = index >= 0 ? canReflect.assignMap({}, fixtures[index]) : undefined;
        if (fixtureSettings) {
            var url = fixtureSettings.fixture, data = dataFromUrl(fixtureSettings.url, xhrSettings.url);
            if (typeof fixtureSettings.fixture === 'string') {
                if (data) {
                    url = sub(url, data);
                }
                fixtureSettings.url = url;
                fixtureSettings.data = null;
                fixtureSettings.type = 'GET';
                if (!fixtureSettings.error) {
                    fixtureSettings.error = function (xhr, error, message) {
                        throw 'fixtures.js Error ' + error + ' ' + message;
                    };
                }
            } else if (canReflect.isPlainObject(xhrSettings.data) || xhrSettings.data == null) {
                var xhrData = canReflect.assignMap({}, xhrSettings.data || {});
                fixtureSettings.data = canReflect.assignMap(xhrData, data);
            } else {
                fixtureSettings.data = xhrSettings.data;
            }
        }
        return fixtureSettings;
    };
    exports.matches = matches;
    exports.extractResponse = function (status, response, headers, statusText) {
        if (typeof status !== 'number') {
            headers = response;
            response = status;
            status = 200;
        }
        if (typeof headers === 'string') {
            statusText = headers;
            headers = {};
        }
        return [
            status,
            response,
            headers,
            statusText
        ];
    };
});
/*can-fixture@3.1.7#xhr*/
define('can-fixture@3.1.7#xhr', [
    'require',
    'exports',
    'module',
    './core',
    'can-deparam',
    'can-reflect',
    'can-log'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var fixtureCore = require('./core');
        var deparam = require('can-deparam');
        var canReflect = require('can-reflect');
        var canLog = require('can-log');
        var XHR = XMLHttpRequest, GLOBAL = typeof global !== 'undefined' ? global : window;
        var props = [
            'type',
            'url',
            'async',
            'response',
            'responseText',
            'responseType',
            'responseXML',
            'responseURL',
            'status',
            'statusText',
            'readyState'
        ];
        var events = [
            'abort',
            'error',
            'load',
            'loadend',
            'loadstart',
            'progress',
            'readystatechange'
        ];
        (function () {
            var x = new XHR();
            for (var prop in x) {
                if (prop.indexOf('on') === 0) {
                    if (events.indexOf(prop.substr(2)) === -1) {
                        events.push(prop.substr(2));
                    }
                } else if (props.indexOf(prop) === -1 && typeof x[prop] !== 'function') {
                    props.push(prop);
                }
            }
        }());
        function callEvents(xhr, ev) {
            var evs = xhr.__events[ev] || [], fn;
            for (var i = 0, len = evs.length; i < len; i++) {
                fn = evs[i];
                fn.call(xhr);
            }
        }
        function defineNonEnumerable(obj, prop, value) {
            Object.defineProperty(obj, prop, {
                enumerable: false,
                configurable: true,
                writable: true,
                value: value
            });
        }
        GLOBAL.XMLHttpRequest = function () {
            var mockXHR = this;
            var realXHR = new XHR();
            defineNonEnumerable(this, '_xhr', realXHR);
            defineNonEnumerable(this, '_requestHeaders', {});
            defineNonEnumerable(this, '__events', {});
            events.forEach(function (eventName) {
                realXHR['on' + eventName] = function () {
                    callEvents(mockXHR, eventName);
                    if (mockXHR['on' + eventName]) {
                        return mockXHR['on' + eventName].apply(mockXHR, arguments);
                    }
                };
            });
            this.onload = null;
        };
        GLOBAL.XMLHttpRequest._XHR = XHR;
        canReflect.assignMap(XMLHttpRequest.prototype, {
            setRequestHeader: function (name, value) {
                this._requestHeaders[name] = value;
            },
            open: function (type, url, async) {
                this.type = type;
                this.url = url;
                this.async = async === false ? false : true;
            },
            getAllResponseHeaders: function () {
                return this._xhr.getAllResponseHeaders.apply(this._xhr, arguments);
            },
            addEventListener: function (ev, fn) {
                var evs = this.__events[ev] = this.__events[ev] || [];
                evs.push(fn);
            },
            removeEventListener: function (ev, fn) {
                var evs = this.__events[ev] = this.__events[ev] || [];
                var idx = evs.indexOf(fn);
                if (idx >= 0) {
                    evs.splice(idx, 1);
                }
            },
            setDisableHeaderCheck: function (val) {
                this._disableHeaderCheck = !!val;
            },
            getResponseHeader: function (key) {
                return this._xhr.getResponseHeader(key);
            },
            abort: function () {
                var xhr = this._xhr;
                if (this.timeoutId !== undefined) {
                    clearTimeout(this.timeoutId);
                    xhr.open(this.type, this.url, this.async === false ? false : true);
                    xhr.send();
                }
                return xhr.abort();
            },
            send: function (data) {
                var type = this.type.toLowerCase() || 'get';
                var xhrSettings = {
                    url: this.url,
                    data: data,
                    headers: this._requestHeaders,
                    type: type,
                    method: type,
                    async: this.async,
                    xhr: this
                };
                if (!xhrSettings.data && xhrSettings.type === 'get' || xhrSettings.type === 'delete') {
                    xhrSettings.data = deparam(xhrSettings.url.split('?')[1]);
                    xhrSettings.url = xhrSettings.url.split('?')[0];
                }
                if (typeof xhrSettings.data === 'string') {
                    try {
                        xhrSettings.data = JSON.parse(xhrSettings.data);
                    } catch (e) {
                        xhrSettings.data = deparam(xhrSettings.data);
                    }
                }
                var fixtureSettings = fixtureCore.get(xhrSettings);
                var mockXHR = this;
                if (fixtureSettings && typeof fixtureSettings.fixture === 'function') {
                    this.timeoutId = fixtureCore.callDynamicFixture(xhrSettings, fixtureSettings, function (status, body, headers, statusText) {
                        body = typeof body === 'string' ? body : JSON.stringify(body);
                        mockXHR._xhr = {
                            open: function () {
                            },
                            send: function () {
                            },
                            abort: function () {
                            },
                            getResponseHeader: function () {
                            }
                        };
                        canReflect.assignMap(mockXHR, {
                            readyState: 4,
                            status: status
                        });
                        var success = status >= 200 && status < 300 || status === 304;
                        if (success) {
                            canReflect.assignMap(mockXHR, {
                                statusText: statusText || 'OK',
                                responseText: body
                            });
                        } else {
                            canReflect.assignMap(mockXHR, {
                                statusText: statusText || 'error',
                                responseText: body
                            });
                        }
                        mockXHR.getAllResponseHeaders = function () {
                            var ret = [];
                            canReflect.eachKey(headers || {}, function (value, name) {
                                Array.prototype.push.apply(ret, [
                                    name,
                                    ': ',
                                    value,
                                    '\r\n'
                                ]);
                            });
                            return ret.join('');
                        };
                        if (mockXHR.onreadystatechange) {
                            mockXHR.onreadystatechange({ target: mockXHR });
                        }
                        callEvents(mockXHR, 'progress');
                        if (mockXHR.onprogress) {
                            mockXHR.onprogress();
                        }
                        callEvents(mockXHR, 'load');
                        if (mockXHR.onload) {
                            mockXHR.onload();
                        }
                        callEvents(mockXHR, 'loadend');
                        if (mockXHR.onloadend) {
                            mockXHR.onloadend();
                        }
                    });
                    return;
                }
                var makeRequest = function () {
                    mockXHR._xhr.open(mockXHR._xhr.type, mockXHR._xhr.url, mockXHR._xhr.async);
                    if (mockXHR._requestHeaders) {
                        Object.keys(mockXHR._requestHeaders).forEach(function (key) {
                            mockXHR._xhr.setRequestHeader(key, mockXHR._requestHeaders[key]);
                        });
                    }
                    return mockXHR._xhr.send(data);
                };
                if (fixtureSettings && typeof fixtureSettings.fixture === 'number') {
                    canLog.log('can-fixture: ' + xhrSettings.url + ' => delay ' + fixtureSettings.fixture + 'ms');
                    this.timeoutId = setTimeout(makeRequest, fixtureSettings.fixture);
                    return;
                }
                if (fixtureSettings) {
                    canLog.log('can-fixture: ' + xhrSettings.url + ' => ' + fixtureSettings.url);
                    canReflect.assignMap(mockXHR, fixtureSettings);
                }
                return makeRequest();
            }
        });
        props.forEach(function (prop) {
            Object.defineProperty(XMLHttpRequest.prototype, prop, {
                get: function () {
                    return this._xhr[prop];
                },
                set: function (newVal) {
                    try {
                        this._xhr[prop] = newVal;
                    } catch (e) {
                    }
                }
            });
        });
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-fixture@3.1.7#fixture*/
define('can-fixture@3.1.7#fixture', [
    'require',
    'exports',
    'module',
    './core',
    './store',
    './xhr',
    'can-reflect',
    'can-log/dev/dev',
    'can-namespace'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var core = require('./core');
        var fixture = core.add;
        var Store = require('./store');
        require('./xhr');
        var canReflect = require('can-reflect');
        var canDev = require('can-log/dev/dev');
        var ns = require('can-namespace');
        var noop = function () {
        };
        canReflect.assignMap(fixture, {
            rand: function randomize(arr, min, max) {
                if (typeof arr === 'number') {
                    if (typeof min === 'number') {
                        return arr + Math.floor(Math.random() * (min - arr + 1));
                    } else {
                        return Math.floor(Math.random() * (arr + 1));
                    }
                }
                var choices = arr.slice(0);
                if (min === undefined) {
                    min = 1;
                    max = choices.length;
                } else if (max === undefined) {
                    max = min;
                }
                var result = [];
                var selectedCount = min + Math.round(randomize(max - min));
                for (var i = 0; i < selectedCount; i++) {
                    var selectedIndex = randomize(choices.length - 1), selected = choices.splice(selectedIndex, 1)[0];
                    result.push(selected);
                }
                return result;
            },
            xhr: function (xhr) {
                return canReflect.assignMap({}, {
                    abort: noop,
                    getAllResponseHeaders: function () {
                        return '';
                    },
                    getResponseHeader: function () {
                        return '';
                    },
                    open: noop,
                    overrideMimeType: noop,
                    readyState: 4,
                    responseText: '',
                    responseXML: null,
                    send: noop,
                    setRequestHeader: noop,
                    status: 200,
                    statusText: 'OK'
                }, xhr);
            },
            store: Store.make,
            fixtures: core.fixtures
        });
        if (typeof window !== 'undefined' && typeof require.resolve !== 'function') {
            window.fixture = function () {
                canDev.warn('You are using the global fixture. Make sure you import can-fixture.');
                return fixture.apply(this, arguments);
            };
        }
        module.exports = ns.fixture = fixture;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can@5.31.0#es/can-fixture*/
define('can@5.31.0#es/can-fixture', [
    'exports',
    'can-fixture'
], function (exports, _canFixture) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canFixture).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-query-logic*/
define('can@5.31.0#es/can-query-logic', [
    'exports',
    'can-query-logic'
], function (exports, _canQueryLogic) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canQueryLogic).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-connect@3.2.1#behavior*/
define('can-connect@3.2.1#behavior', function (require, exports, module) {
    'use strict';
    var behaviorsMap = {};
    function behavior(name, behavior) {
        if (typeof name !== 'string') {
            behavior = name;
            name = undefined;
        }
        var behaviorMixin = function (base) {
            var Behavior = function () {
            };
            Object.defineProperty(Behavior, 'name', {
                value: name,
                configurable: true
            });
            Behavior.prototype = base;
            var newBehavior = new Behavior();
            var res = typeof behavior === 'function' ? behavior.apply(newBehavior, arguments) : behavior;
            for (var prop in res) {
                if (res.hasOwnProperty(prop)) {
                    Object.defineProperty(newBehavior, prop, Object.getOwnPropertyDescriptor(res, prop));
                } else {
                    newBehavior[prop] = res[prop];
                }
            }
            newBehavior.__behaviorName = name;
            return newBehavior;
        };
        if (name) {
            behaviorMixin.behaviorName = name;
            behaviorsMap[name] = behaviorMixin;
        }
        behaviorMixin.isBehavior = true;
        return behaviorMixin;
    }
    behavior.map = behaviorsMap;
    module.exports = behavior;
});
/*can-connect@3.2.1#connect*/
define('can-connect@3.2.1#connect', [
    'require',
    'exports',
    'module',
    'can-reflect',
    './behavior'
], function (require, exports, module) {
    var assign = require('can-reflect').assignMap;
    var behavior = require('./behavior');
    var connect = function (behaviors, options) {
        behaviors = behaviors.map(function (behavior, index) {
            var sortedIndex = -1;
            if (typeof behavior === 'string') {
                sortedIndex = connect.order.indexOf(behavior);
                behavior = behavior.map[behavior];
            } else if (behavior.isBehavior) {
                sortedIndex = connect.order.indexOf(behavior.behaviorName);
            } else {
                behavior = connect.behavior(behavior);
            }
            return {
                originalIndex: index,
                sortedIndex: sortedIndex,
                behavior: behavior
            };
        });
        behaviors.sort(function (b1, b2) {
            if (~b1.sortedIndex && ~b2.sortedIndex) {
                return b1.sortedIndex - b2.sortedIndex;
            }
            return b1.originalIndex - b2.originalIndex;
        });
        behaviors = behaviors.map(function (b) {
            return b.behavior;
        });
        var behavior = connect.base(connect.behavior('options', function () {
            return options;
        })());
        behaviors.forEach(function (behave) {
            behavior = behave(behavior);
        });
        if (behavior.init) {
            behavior.init();
        }
        return behavior;
    };
    connect.order = [
        'data/localstorage-cache',
        'data/url',
        'data/parse',
        'cache-requests',
        'data/combine-requests',
        'constructor',
        'constructor/store',
        'can/map',
        'can/ref',
        'fall-through-cache',
        'data/worker',
        'real-time',
        'data/callbacks-cache',
        'data/callbacks',
        'constructor/callbacks-once'
    ];
    connect.behavior = behavior;
    module.exports = connect;
});
/*can-connect@3.2.1#base/base*/
define('can-connect@3.2.1#base/base', [
    'require',
    'exports',
    'module',
    '../behavior',
    'can-reflect',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var behavior = require('../behavior');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    module.exports = behavior('base', function (baseConnection) {
        var setQueryLogic;
        return {
            id: function (instance) {
                if (this.queryLogic) {
                    return canReflect.getIdentity(instance, this.queryLogic.schema);
                } else if (this.idProp) {
                    return instance[this.idProp];
                } else {
                    throw new Error('can-connect/base/base - Please add a queryLogic option.');
                }
            },
            listQuery: function (list) {
                return list[this.listQueryProp];
            },
            listQueryProp: canSymbol.for('can.listQuery'),
            init: function () {
            },
            get queryLogic() {
                if (setQueryLogic) {
                    return setQueryLogic;
                } else if (baseConnection.queryLogic) {
                    return baseConnection.queryLogic;
                } else if (baseConnection.algebra) {
                    return baseConnection.algebra;
                }
            },
            set queryLogic(newVal) {
                setQueryLogic = newVal;
            }
        };
    });
});
/*can-connect@3.2.1#can-connect*/
define('can-connect@3.2.1#can-connect', [
    'require',
    'exports',
    'module',
    './connect',
    './base/base',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var connect = require('./connect');
    var base = require('./base/base');
    var ns = require('can-namespace');
    connect.base = base;
    module.exports = ns.connect = connect;
});
/*can-connect@3.2.1#helpers/weak-reference-map*/
define('can-connect@3.2.1#helpers/weak-reference-map', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var assign = require('can-reflect').assignMap;
    var WeakReferenceMap = function () {
        this.set = {};
    };
    assign(WeakReferenceMap.prototype, {
        has: function (key) {
            return !!this.set[key];
        },
        addReference: function (key, item, referenceCount) {
            if (typeof key === 'undefined') {
                throw new Error('can-connect: You must provide a key to store a value in a WeakReferenceMap');
            }
            var data = this.set[key];
            if (!data) {
                data = this.set[key] = {
                    item: item,
                    referenceCount: 0,
                    key: key
                };
            }
            data.referenceCount += referenceCount || 1;
        },
        referenceCount: function (key) {
            var data = this.set[key];
            if (data) {
                return data.referenceCount;
            }
        },
        deleteReference: function (key) {
            var data = this.set[key];
            if (data) {
                data.referenceCount--;
                if (data.referenceCount === 0) {
                    delete this.set[key];
                }
            }
        },
        get: function (key) {
            var data = this.set[key];
            if (data) {
                return data.item;
            }
        },
        forEach: function (cb) {
            for (var id in this.set) {
                cb(this.set[id].item, id);
            }
        }
    });
    module.exports = WeakReferenceMap;
});
/*can-diff@1.4.5#update-deep-except-identity/update-deep-except-identity*/
define('can-diff@1.4.5#update-deep-except-identity/update-deep-except-identity', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    module.exports = function updateExceptIdentity(obj, data, schema) {
        if (!schema) {
            schema = canReflect.getSchema(obj);
        }
        if (!schema) {
            throw new Error('can-diff/update-except-id is unable to update without a schema.');
        }
        schema.identity.forEach(function (key) {
            var id = canReflect.getKeyValue(obj, key);
            if (id !== undefined) {
                canReflect.setKeyValue(data, key, id);
            }
        });
        canReflect.updateDeep(obj, data);
    };
});
/*can-connect@3.2.1#helpers/id-merge*/
define('can-connect@3.2.1#helpers/id-merge', [
    'require',
    'exports',
    'module',
    'can-diff/list/list',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var map = [].map;
    var diffList = require('can-diff/list/list');
    var canReflect = require('can-reflect');
    module.exports = function (list, update, id, make) {
        var patches = diffList(list, update, function (a, b) {
            return id(a) === id(b);
        });
        patches.forEach(function (patch) {
            canReflect.splice(list, patch.index, patch.deleteCount, patch.insert.map(make));
        });
    };
});
/*can-connect@3.2.1#constructor/constructor*/
define('can-connect@3.2.1#constructor/constructor', [
    'require',
    'exports',
    'module',
    'can-reflect',
    '../helpers/weak-reference-map',
    'can-diff/update-deep-except-identity/update-deep-except-identity',
    '../helpers/id-merge',
    '../behavior'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var makeArray = canReflect.toArray;
    var assign = canReflect.assignMap;
    var WeakReferenceMap = require('../helpers/weak-reference-map');
    var updateDeepExceptIdentity = require('can-diff/update-deep-except-identity/update-deep-except-identity');
    var idMerge = require('../helpers/id-merge');
    var behavior = require('../behavior');
    module.exports = behavior('constructor', function (baseConnection) {
        var behavior = {
            cidStore: new WeakReferenceMap(),
            _cid: 0,
            get: function (params) {
                var self = this;
                return this.getData(params).then(function (data) {
                    return self.hydrateInstance(data);
                });
            },
            getList: function (set) {
                set = set || {};
                var self = this;
                return this.getListData(set).then(function (data) {
                    return self.hydrateList(data, set);
                });
            },
            hydrateList: function (listData, set) {
                if (Array.isArray(listData)) {
                    listData = { data: listData };
                }
                var arr = [];
                for (var i = 0; i < listData.data.length; i++) {
                    arr.push(this.hydrateInstance(listData.data[i]));
                }
                listData.data = arr;
                if (this.list) {
                    return this.list(listData, set);
                } else {
                    var list = listData.data.slice(0);
                    list[this.listQueryProp || '__listQuery'] = set;
                    copyMetadata(listData, list);
                    return list;
                }
            },
            hydrateInstance: function (props) {
                if (this.instance) {
                    return this.instance(props);
                } else {
                    return assign({}, props);
                }
            },
            save: function (instance) {
                var serialized = this.serializeInstance(instance);
                var id = this.id(instance);
                var self = this;
                if (id === undefined) {
                    var cid = this._cid++;
                    this.cidStore.addReference(cid, instance);
                    return this.createData(serialized, cid).then(function (data) {
                        if (data !== undefined) {
                            self.createdInstance(instance, data);
                        }
                        self.cidStore.deleteReference(cid, instance);
                        return instance;
                    });
                } else {
                    return this.updateData(serialized).then(function (data) {
                        if (data !== undefined) {
                            self.updatedInstance(instance, data);
                        }
                        return instance;
                    });
                }
            },
            destroy: function (instance) {
                var serialized = this.serializeInstance(instance), self = this, id = this.id(instance);
                if (id !== undefined) {
                    return this.destroyData(serialized).then(function (data) {
                        if (data !== undefined) {
                            self.destroyedInstance(instance, data);
                        }
                        return instance;
                    });
                } else {
                    this.destroyedInstance(instance, {});
                    return Promise.resolve(instance);
                }
            },
            createdInstance: function (instance, props) {
                assign(instance, props);
            },
            updatedInstance: function (instance, data) {
                updateDeepExceptIdentity(instance, data, this.queryLogic.schema);
            },
            updatedList: function (list, listData, set) {
                var instanceList = [];
                for (var i = 0; i < listData.data.length; i++) {
                    instanceList.push(this.hydrateInstance(listData.data[i]));
                }
                idMerge(list, instanceList, this.id.bind(this), this.hydrateInstance.bind(this));
                copyMetadata(listData, list);
            },
            destroyedInstance: function (instance, data) {
                updateDeepExceptIdentity(instance, data, this.queryLogic.schema);
            },
            serializeInstance: function (instance) {
                return assign({}, instance);
            },
            serializeList: function (list) {
                var self = this;
                return makeArray(list).map(function (instance) {
                    return self.serializeInstance(instance);
                });
            },
            isNew: function (instance) {
                var id = this.id(instance);
                return !(id || id === 0);
            }
        };
        return behavior;
    });
    function copyMetadata(listData, list) {
        for (var prop in listData) {
            if (prop !== 'data') {
                if (typeof list.set === 'function') {
                    list.set(prop, listData[prop]);
                } else if (typeof list.attr === 'function') {
                    list.attr(prop, listData[prop]);
                } else {
                    list[prop] = listData[prop];
                }
            }
        }
    }
});
/*can-diff@1.4.5#assign-deep-except-identity/assign-deep-except-identity*/
define('can-diff@1.4.5#assign-deep-except-identity/assign-deep-except-identity', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    module.exports = function assignExceptIdentity(obj, data, schema) {
        if (!schema) {
            schema = canReflect.getSchema(obj);
        }
        if (!schema) {
            throw new Error('can-diff/update-except-id is unable to update without a schema.');
        }
        schema.identity.forEach(function (key) {
            var id = canReflect.getKeyValue(obj, key);
            if (id !== undefined) {
                canReflect.setKeyValue(data, key, id);
            }
        });
        canReflect.assignDeep(obj, data);
    };
});
/*can-validate-interface@1.0.3#index*/
define('can-validate-interface@1.0.3#index', function (require, exports, module) {
    'use strict';
    function flatten(arrays) {
        return arrays.reduce(function (ret, val) {
            return ret.concat(val);
        }, []);
    }
    function makeInterfaceValidator(interfacePropArrays) {
        var props = flatten(interfacePropArrays);
        return function (base) {
            var missingProps = props.reduce(function (missing, prop) {
                return prop in base ? missing : missing.concat(prop);
            }, []);
            return missingProps.length ? {
                message: 'missing expected properties',
                related: missingProps
            } : undefined;
        };
    }
    module.exports = makeInterfaceValidator;
});
/*can-connect@3.2.1#helpers/validate*/
define('can-connect@3.2.1#helpers/validate', [
    'require',
    'exports',
    'module',
    'can-validate-interface'
], function (require, exports, module) {
    'use strict';
    var makeInterfaceValidator = require('can-validate-interface');
    module.exports = function (extendingBehavior, interfaces) {
        var validatedBehaviour = validateArgumentInterface(extendingBehavior, 0, interfaces, function (errors, baseBehavior) {
            throw new BehaviorInterfaceError(baseBehavior, extendingBehavior, errors);
        });
        Object.keys(extendingBehavior).forEach(function (k) {
            validatedBehaviour[k] = extendingBehavior[k];
        });
        validatedBehaviour.__interfaces = interfaces;
        return validatedBehaviour;
    };
    function validateArgumentInterface(func, argIndex, interfaces, errorHandler) {
        return function () {
            var errors = makeInterfaceValidator(interfaces)(arguments[argIndex]);
            if (errors && errorHandler) {
                errorHandler(errors, arguments[argIndex]);
            }
            return func.apply(this, arguments);
        };
    }
    function BehaviorInterfaceError(baseBehavior, extendingBehavior, missingProps) {
        var extendingName = extendingBehavior.behaviorName || 'anonymous behavior', baseName = baseBehavior.__behaviorName || 'anonymous behavior', message = 'can-connect: Extending behavior "' + extendingName + '" found base behavior "' + baseName + '" was missing required properties: ' + JSON.stringify(missingProps.related), instance = new Error(message);
        if (Object.setPrototypeOf) {
            Object.setPrototypeOf(instance, Object.getPrototypeOf(this));
        }
        return instance;
    }
    BehaviorInterfaceError.prototype = Object.create(Error.prototype, { constructor: { value: Error } });
    if (Object.setPrototypeOf) {
        Object.setPrototypeOf(BehaviorInterfaceError, Error);
    } else {
        BehaviorInterfaceError.__proto__ = Error;
    }
});
/*can-connect@3.2.1#can/map/map*/
define('can-connect@3.2.1#can/map/map', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-queues',
    'can-event-queue/map/map',
    'can-observation-recorder',
    'can-symbol',
    'can-query-logic',
    'can-log/dev/dev',
    '../../behavior',
    'can-diff/update-deep-except-identity/update-deep-except-identity',
    'can-diff/assign-deep-except-identity/assign-deep-except-identity',
    'can-diff/merge-deep/merge-deep',
    'can-symbol',
    '../../helpers/validate'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var each = canReflect.each;
    var isPlainObject = canReflect.isPlainObject;
    var queues = require('can-queues');
    var eventQueue = require('can-event-queue/map/map');
    var ObservationRecorder = require('can-observation-recorder');
    var canSymbol = require('can-symbol');
    var QueryLogic = require('can-query-logic');
    var dev = require('can-log/dev/dev');
    var behavior = require('../../behavior');
    var updateDeepExceptIdentity = require('can-diff/update-deep-except-identity/update-deep-except-identity');
    var assignDeepExceptIdentity = require('can-diff/assign-deep-except-identity/assign-deep-except-identity');
    var smartMerge = require('can-diff/merge-deep/merge-deep');
    var canSymbol = require('can-symbol');
    var getNameSymbol = canSymbol.for('can.getName');
    function smartMergeExceptIdentity(dest, source, schema) {
        if (!schema) {
            schema = canReflect.getSchema(dest);
        }
        if (!schema) {
            throw new Error('can-connect/can/map/ is unable to update without a schema.');
        }
        schema.identity.forEach(function (key) {
            var id = canReflect.getKeyValue(dest, key);
            if (id !== undefined) {
                canReflect.setKeyValue(source, key, id);
            }
        });
        smartMerge(dest, source);
    }
    var canMapBehavior = behavior('can/map', function (baseConnection) {
        var behavior = {
            init: function () {
                if (!this.Map) {
                    throw new Error('can-connect/can/map/map must be configured with a Map type');
                }
                if (!this[getNameSymbol]) {
                    this[getNameSymbol] = function () {
                        if (this.name) {
                            return 'Connection{' + this.name + '}';
                        } else if (this.Map) {
                            return 'Connection{' + canReflect.getName(this.Map) + '}';
                        } else if (typeof this.url === 'string') {
                            return 'Connection{' + this.url + '}';
                        } else {
                            return 'Connection{}';
                        }
                    };
                }
                this.List = this.List || this.Map.List;
                var hasList = Boolean(this.List);
                if (!hasList) {
                    Object.defineProperty(this, 'List', {
                        get: function () {
                            throw new Error('can-connect/can/map/map - ' + canReflect.getName(this) + ' should be configured with a List type.');
                        }
                    });
                }
                overwrite(this, this.Map, mapOverwrites);
                if (hasList) {
                    overwrite(this, this.List, listOverwrites);
                }
                if (!this.queryLogic) {
                    this.queryLogic = new QueryLogic(this.Map);
                }
                var connection = this;
                if (this.Map[canSymbol.for('can.onInstanceBoundChange')]) {
                    var canConnectMap_onMapBoundChange = function (instance, isBound) {
                        var method = isBound ? 'addInstanceReference' : 'deleteInstanceReference';
                        if (connection[method]) {
                            connection[method](instance);
                        }
                    };
                    Object.defineProperty(canConnectMap_onMapBoundChange, 'name', {
                        value: canReflect.getName(this.Map) + ' boundChange',
                        configurable: true
                    });
                    this.Map[canSymbol.for('can.onInstanceBoundChange')](canConnectMap_onMapBoundChange);
                } else {
                    console.warn('can-connect/can/map is unable to listen to onInstanceBoundChange on the Map type');
                }
                if (hasList) {
                    if (this.List[canSymbol.for('can.onInstanceBoundChange')]) {
                        var canConnectMap_onListBoundChange = function (list, isBound) {
                            var method = isBound ? 'addListReference' : 'deleteListReference';
                            if (connection[method]) {
                                connection[method](list);
                            }
                        };
                        Object.defineProperty(canConnectMap_onListBoundChange, 'name', {
                            value: canReflect.getName(this.List) + ' boundChange',
                            configurable: true
                        });
                        this.List[canSymbol.for('can.onInstanceBoundChange')](canConnectMap_onListBoundChange);
                    } else {
                        console.warn('can-connect/can/map is unable to listen to onInstanceBoundChange on the List type');
                    }
                }
                if (this.Map[canSymbol.for('can.onInstancePatches')]) {
                    this.Map[canSymbol.for('can.onInstancePatches')](function canConnectMap_onInstancePatches(instance, patches) {
                        patches.forEach(function (patch) {
                            if ((patch.type === 'add' || patch.type === 'set') && patch.key === connection.idProp && instance[canSymbol.for('can.isBound')]()) {
                                connection.addInstanceReference(instance);
                            }
                        });
                    });
                } else {
                    console.warn('can-connect/can/map is unable to listen to onInstancePatches on the Map type');
                }
                baseConnection.init.apply(this, arguments);
            },
            serializeInstance: function (instance) {
                return canReflect.serialize(instance);
            },
            serializeList: function (list) {
                return canReflect.serialize(list);
            },
            instance: function (props) {
                var _Map = this.Map;
                return new _Map(props);
            },
            list: function (listData, set) {
                var _List = this.List || this.Map && this.Map.List;
                var list = canReflect.new(_List, listData.data);
                canReflect.eachKey(listData, function (val, prop) {
                    if (prop !== 'data') {
                        canReflect.setKeyValue(list, prop, val);
                    }
                });
                list[this.listQueryProp] = set;
                return list;
            },
            updatedList: function (list, listData, set) {
                queues.batch.start();
                var enqueueOptions = {};
                if (process.env.NODE_ENV !== 'production') {
                    enqueueOptions = {
                        reasonLog: [
                            'set',
                            set,
                            'list',
                            list,
                            'updated with',
                            listData
                        ]
                    };
                }
                queues.mutateQueue.enqueue(baseConnection.updatedList, this, arguments, enqueueOptions);
                queues.batch.stop();
            },
            save: function (instance) {
                canReflect.setKeyValue(instance, '_saving', true);
                var done = function () {
                    canReflect.setKeyValue(instance, '_saving', false);
                };
                var base = baseConnection.save.apply(this, arguments);
                base.then(done, done);
                return base;
            },
            destroy: function (instance) {
                canReflect.setKeyValue(instance, '_destroying', true);
                var done = function () {
                    canReflect.setKeyValue(instance, '_destroying', false);
                };
                var base = baseConnection.destroy.apply(this, arguments);
                base.then(done, done);
                return base;
            }
        };
        each([
            'created',
            'updated',
            'destroyed'
        ], function (funcName) {
            behavior[funcName + 'Instance'] = function (instance, props) {
                if (props && typeof props === 'object') {
                    if (funcName === 'destroyed' && canReflect.size(props) === 0) {
                    } else {
                        if (this.constructor.removeAttr) {
                            updateDeepExceptIdentity(instance, props, this.queryLogic.schema);
                        } else if (this.updateInstanceWithAssignDeep) {
                            assignDeepExceptIdentity(instance, props, this.queryLogic.schema);
                        } else {
                            smartMergeExceptIdentity(instance, props, this.queryLogic.schema);
                        }
                    }
                }
                if (funcName === 'created' && this.moveCreatedInstanceToInstanceStore) {
                    this.moveCreatedInstanceToInstanceStore(instance);
                }
                canMapBehavior.callbackInstanceEvents(funcName, instance);
            };
        });
        return behavior;
    });
    canMapBehavior.callbackInstanceEvents = function (funcName, instance) {
        var constructor = instance.constructor;
        queues.batch.start();
        eventQueue.dispatch.call(instance, {
            type: funcName,
            target: instance
        });
        if (process.env.NODE_ENV !== 'production') {
            if (this.id) {
                dev.log('can-connect/can/map/map.js - ' + (constructor.shortName || this.name) + ' ' + this.id(instance) + ' ' + funcName);
            }
        }
        eventQueue.dispatch.call(constructor, funcName, [instance]);
        queues.batch.stop();
    };
    var mapOverwrites = {
        static: {
            getList: function (base, connection) {
                return function (set) {
                    return connection.getList(set);
                };
            },
            findAll: function (base, connection) {
                return function (set) {
                    return connection.getList(set);
                };
            },
            get: function (base, connection) {
                return function (params) {
                    return connection.get(params);
                };
            },
            findOne: function (base, connection) {
                return function (params) {
                    return connection.get(params);
                };
            }
        },
        prototype: {
            isNew: function (base, connection) {
                return function () {
                    return connection.isNew(this);
                };
            },
            isSaving: function (base, connection) {
                return function () {
                    return !!canReflect.getKeyValue(this, '_saving');
                };
            },
            isDestroying: function (base, connection) {
                return function () {
                    return !!canReflect.getKeyValue(this, '_destroying');
                };
            },
            save: function (base, connection) {
                return function (success, error) {
                    var promise = connection.save(this);
                    promise.then(success, error);
                    return promise;
                };
            },
            destroy: function (base, connection) {
                return function (success, error) {
                    var promise = connection.destroy(this);
                    promise.then(success, error);
                    return promise;
                };
            }
        },
        properties: {
            _saving: {
                enumerable: false,
                value: false,
                configurable: true,
                writable: true
            },
            _destroying: {
                enumerable: false,
                value: false,
                configurable: true,
                writable: true
            }
        }
    };
    var listOverwrites = {
        static: {
            _bubbleRule: function (base, connection) {
                return function (eventName, list) {
                    var bubbleRules = base(eventName, list);
                    bubbleRules.push('destroyed');
                    return bubbleRules;
                };
            }
        },
        prototype: {
            setup: function (base, connection) {
                return function (params) {
                    if (isPlainObject(params) && !Array.isArray(params)) {
                        this[connection.listQueryProp] = params;
                        base.apply(this);
                        this.replace(canReflect.isPromise(params) ? params : connection.getList(params));
                    } else {
                        base.apply(this, arguments);
                    }
                };
            }
        },
        properties: {}
    };
    var overwrite = function (connection, Constructor, overwrites) {
        var prop;
        for (prop in overwrites.properties) {
            canReflect.defineInstanceKey(Constructor, prop, overwrites.properties[prop]);
        }
        for (prop in overwrites.prototype) {
            Constructor.prototype[prop] = overwrites.prototype[prop](Constructor.prototype[prop], connection);
        }
        if (overwrites.static) {
            for (prop in overwrites.static) {
                Constructor[prop] = overwrites.static[prop](Constructor[prop], connection);
            }
        }
    };
    module.exports = canMapBehavior;
    if (process.env.NODE_ENV !== 'production') {
        var validate = require('../../helpers/validate');
        module.exports = validate(canMapBehavior, [
            'id',
            'get',
            'updatedList',
            'destroy',
            'save',
            'getList'
        ]);
    }
});
/*can-connect@3.2.1#helpers/weak-reference-set*/
define('can-connect@3.2.1#helpers/weak-reference-set', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    var assign = require('can-reflect').assignMap;
    var WeakReferenceSet = function () {
        this.set = [];
    };
    assign(WeakReferenceSet.prototype, {
        has: function (item) {
            return this._getIndex(item) !== -1;
        },
        addReference: function (item, referenceCount) {
            var index = this._getIndex(item);
            var data = this.set[index];
            if (!data) {
                data = {
                    item: item,
                    referenceCount: 0
                };
                this.set.push(data);
            }
            data.referenceCount += referenceCount || 1;
        },
        deleteReference: function (item) {
            var index = this._getIndex(item);
            var data = this.set[index];
            if (data) {
                data.referenceCount--;
                if (data.referenceCount === 0) {
                    this.set.splice(index, 1);
                }
            }
        },
        delete: function (item) {
            var index = this._getIndex(item);
            if (index !== -1) {
                this.set.splice(index, 1);
            }
        },
        get: function (item) {
            var data = this.set[this._getIndex(item)];
            if (data) {
                return data.item;
            }
        },
        referenceCount: function (item) {
            var data = this.set[this._getIndex(item)];
            if (data) {
                return data.referenceCount;
            }
        },
        _getIndex: function (item) {
            var index;
            this.set.every(function (data, i) {
                if (data.item === item) {
                    index = i;
                    return false;
                }
                return true;
            });
            return index !== undefined ? index : -1;
        },
        forEach: function (cb) {
            return this.set.forEach(cb);
        }
    });
    module.exports = WeakReferenceSet;
});
/*can-connect@3.2.1#helpers/sorted-set-json*/
define('can-connect@3.2.1#helpers/sorted-set-json', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    var canReflect = require('can-reflect');
    module.exports = function (set) {
        if (set == null) {
            return set;
        } else {
            return JSON.stringify(canReflect.cloneKeySort(set));
        }
    };
});
/*can-connect@3.2.1#constructor/store/store*/
define('can-connect@3.2.1#constructor/store/store', [
    'require',
    'exports',
    'module',
    '../../can-connect',
    '../../helpers/weak-reference-map',
    '../../helpers/weak-reference-set',
    '../../helpers/sorted-set-json',
    'can-event-queue/map/map',
    '../../helpers/validate'
], function (require, exports, module) {
    'use strict';
    var connect = require('../../can-connect');
    var WeakReferenceMap = require('../../helpers/weak-reference-map');
    var WeakReferenceSet = require('../../helpers/weak-reference-set');
    var sortedSetJSON = require('../../helpers/sorted-set-json');
    var eventQueue = require('can-event-queue/map/map');
    var pendingRequests = 0;
    var noRequestsTimer = null;
    var requests = {
        increment: function (connection) {
            pendingRequests++;
            clearTimeout(noRequestsTimer);
        },
        decrement: function (connection) {
            pendingRequests--;
            if (pendingRequests === 0) {
                noRequestsTimer = setTimeout(function () {
                    requests.dispatch('end');
                }, module.exports.requestCleanupDelay);
            }
            if (pendingRequests < 0) {
                pendingRequests = 0;
            }
        },
        count: function () {
            return pendingRequests;
        }
    };
    eventQueue(requests);
    var constructorStore = connect.behavior('constructor/store', function (baseConnection) {
        var behavior = {
            instanceStore: new WeakReferenceMap(),
            newInstanceStore: new WeakReferenceSet(),
            listStore: new WeakReferenceMap(),
            init: function () {
                if (baseConnection.init) {
                    baseConnection.init.apply(this, arguments);
                }
                if (!this.hasOwnProperty('_requestInstances')) {
                    this._requestInstances = {};
                }
                if (!this.hasOwnProperty('_requestLists')) {
                    this._requestLists = {};
                }
                requests.on('end', function onRequestsEnd_deleteStoreReferences() {
                    var id;
                    for (id in this._requestInstances) {
                        this.instanceStore.deleteReference(id);
                    }
                    this._requestInstances = {};
                    for (id in this._requestLists) {
                        this.listStore.deleteReference(id);
                        this._requestLists[id].forEach(this.deleteInstanceReference.bind(this));
                    }
                    this._requestLists = {};
                }.bind(this));
            },
            _finishedRequest: function () {
                requests.decrement(this);
            },
            addInstanceReference: function (instance, id) {
                var ID = id || this.id(instance);
                if (ID === undefined) {
                    this.newInstanceStore.addReference(instance);
                } else {
                    this.instanceStore.addReference(ID, instance);
                }
            },
            createdInstance: function (instance, props) {
                baseConnection.createdInstance.apply(this, arguments);
                this.moveCreatedInstanceToInstanceStore(instance);
            },
            moveCreatedInstanceToInstanceStore: function (instance) {
                var ID = this.id(instance);
                if (this.newInstanceStore.has(instance) && ID !== undefined) {
                    var referenceCount = this.newInstanceStore.referenceCount(instance);
                    this.newInstanceStore.delete(instance);
                    this.instanceStore.addReference(ID, instance, referenceCount);
                }
            },
            addInstanceMetaData: function (instance, name, value) {
                var data = this.instanceStore.set[this.id(instance)];
                if (data) {
                    data[name] = value;
                }
            },
            getInstanceMetaData: function (instance, name) {
                var data = this.instanceStore.set[this.id(instance)];
                if (data) {
                    return data[name];
                }
            },
            deleteInstanceMetaData: function (instance, name) {
                var data = this.instanceStore.set[this.id(instance)];
                delete data[name];
            },
            deleteInstanceReference: function (instance) {
                var ID = this.id(instance);
                if (ID === undefined) {
                    this.newInstanceStore.deleteReference(instance);
                } else {
                    this.instanceStore.deleteReference(this.id(instance), instance);
                }
            },
            addListReference: function (list, set) {
                var id = sortedSetJSON(set || this.listQuery(list));
                if (id) {
                    this.listStore.addReference(id, list);
                    list.forEach(function (instance) {
                        this.addInstanceReference(instance);
                    }.bind(this));
                }
            },
            deleteListReference: function (list, set) {
                var id = sortedSetJSON(set || this.listQuery(list));
                if (id) {
                    this.listStore.deleteReference(id, list);
                    list.forEach(this.deleteInstanceReference.bind(this));
                }
            },
            hydratedInstance: function (instance) {
                if (requests.count() > 0) {
                    var id = this.id(instance);
                    if (!this._requestInstances[id]) {
                        this.addInstanceReference(instance);
                        this._requestInstances[id] = instance;
                    }
                }
            },
            hydrateInstance: function (props) {
                var id = this.id(props);
                if ((id || id === 0) && this.instanceStore.has(id)) {
                    var storeInstance = this.instanceStore.get(id);
                    this.updatedInstance(storeInstance, props);
                    return storeInstance;
                }
                var instance = baseConnection.hydrateInstance.call(this, props);
                this.hydratedInstance(instance);
                return instance;
            },
            hydratedList: function (list, set) {
                if (requests.count() > 0) {
                    var id = sortedSetJSON(set || this.listQuery(list));
                    if (id) {
                        if (!this._requestLists[id]) {
                            this.addListReference(list, set);
                            this._requestLists[id] = list;
                        }
                    }
                }
            },
            hydrateList: function (listData, set) {
                set = set || this.listQuery(listData);
                var id = sortedSetJSON(set);
                if (id && this.listStore.has(id)) {
                    var storeList = this.listStore.get(id);
                    this.updatedList(storeList, listData, set);
                    return storeList;
                }
                var list = baseConnection.hydrateList.call(this, listData, set);
                this.hydratedList(list, set);
                return list;
            },
            getList: function (listQuery) {
                var self = this;
                requests.increment(this);
                var promise = baseConnection.getList.call(this, listQuery);
                promise.then(function (instances) {
                    self._finishedRequest();
                }, function () {
                    self._finishedRequest();
                });
                return promise;
            },
            get: function (params) {
                var self = this;
                requests.increment(this);
                var promise = baseConnection.get.call(this, params);
                promise.then(function (instance) {
                    self._finishedRequest();
                }, function () {
                    self._finishedRequest();
                });
                return promise;
            },
            save: function (instance) {
                var self = this;
                requests.increment(this);
                var updating = !this.isNew(instance);
                if (updating) {
                    this.addInstanceReference(instance);
                }
                var promise = baseConnection.save.call(this, instance);
                promise.then(function (instances) {
                    if (updating) {
                        self.deleteInstanceReference(instance);
                    }
                    self._finishedRequest();
                }, function () {
                    self._finishedRequest();
                });
                return promise;
            },
            destroy: function (instance) {
                var self = this;
                this.addInstanceReference(instance);
                requests.increment(this);
                var promise = baseConnection.destroy.call(this, instance);
                promise.then(function (instance) {
                    self._finishedRequest();
                    self.deleteInstanceReference(instance);
                }, function () {
                    self._finishedRequest();
                });
                return promise;
            },
            updatedList: function (list, listData, set) {
                var oldList = list.slice(0);
                if (!listData.data && typeof listData.length === 'number') {
                    listData = { data: listData };
                }
                if (baseConnection.updatedList) {
                    baseConnection.updatedList.call(this, list, listData, set);
                    list.forEach(function (instance) {
                        this.addInstanceReference(instance);
                    }.bind(this));
                } else if (listData.data) {
                    listData.data.forEach(function (instance) {
                        this.addInstanceReference(instance);
                    }.bind(this));
                }
                oldList.forEach(this.deleteInstanceReference.bind(this));
            }
        };
        return behavior;
    });
    constructorStore.requests = requests;
    constructorStore.requestCleanupDelay = 10;
    module.exports = constructorStore;
    if (process.env.NODE_ENV !== 'production') {
        var validate = require('../../helpers/validate');
        module.exports = validate(constructorStore, [
            'hydrateInstance',
            'hydrateList',
            'getList',
            'get',
            'save',
            'destroy'
        ]);
    }
});
/*can-connect@3.2.1#data/callbacks/callbacks*/
define('can-connect@3.2.1#data/callbacks/callbacks', [
    'require',
    'exports',
    'module',
    '../../can-connect',
    'can-reflect',
    '../../helpers/validate'
], function (require, exports, module) {
    'use strict';
    var connect = require('../../can-connect');
    var each = require('can-reflect').each;
    var pairs = {
        getListData: 'gotListData',
        createData: 'createdData',
        updateData: 'updatedData',
        destroyData: 'destroyedData'
    };
    var dataCallbackBehavior = connect.behavior('data/callbacks', function (baseConnection) {
        var behavior = {};
        each(pairs, function (callbackName, name) {
            behavior[name] = function (params, cid) {
                var self = this;
                return baseConnection[name].call(this, params).then(function (data) {
                    if (self[callbackName]) {
                        return self[callbackName].call(self, data, params, cid);
                    } else {
                        return data;
                    }
                });
            };
        });
        return behavior;
    });
    module.exports = dataCallbackBehavior;
    if (process.env.NODE_ENV !== 'production') {
        var validate = require('../../helpers/validate');
        module.exports = validate(dataCallbackBehavior, [
            'getListData',
            'createData',
            'updateData',
            'destroyData'
        ]);
    }
});
/*can-connect@3.2.1#data/parse/parse*/
define('can-connect@3.2.1#data/parse/parse', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-key/get/get',
    '../../behavior'
], function (require, exports, module) {
    'use strict';
    var each = require('can-reflect').each;
    var getObject = require('can-key/get/get');
    var behavior = require('../../behavior');
    module.exports = behavior('data/parse', function (baseConnection) {
        var behavior = {
            parseListData: function (responseData) {
                if (baseConnection.parseListData) {
                    responseData = baseConnection.parseListData.apply(this, arguments);
                }
                var result;
                if (Array.isArray(responseData)) {
                    result = { data: responseData };
                } else {
                    var prop = this.parseListProp || 'data';
                    responseData.data = getObject(responseData, prop);
                    result = responseData;
                    if (prop !== 'data') {
                        delete responseData[prop];
                    }
                    if (!Array.isArray(result.data)) {
                        throw new Error('Could not get any raw data while converting using .parseListData');
                    }
                }
                var arr = [];
                for (var i = 0; i < result.data.length; i++) {
                    arr.push(this.parseInstanceData(result.data[i]));
                }
                result.data = arr;
                return result;
            },
            parseInstanceData: function (props) {
                if (baseConnection.parseInstanceData) {
                    props = baseConnection.parseInstanceData.apply(this, arguments) || props;
                }
                return this.parseInstanceProp ? getObject(props, this.parseInstanceProp) || props : props;
            }
        };
        each(pairs, function (parseFunction, name) {
            behavior[name] = function (params) {
                var self = this;
                return baseConnection[name].call(this, params).then(function () {
                    return self[parseFunction].apply(self, arguments);
                });
            };
        });
        return behavior;
    });
    var pairs = {
        getListData: 'parseListData',
        getData: 'parseInstanceData',
        createData: 'parseInstanceData',
        updateData: 'parseInstanceData',
        destroyData: 'parseInstanceData'
    };
});
/*can-ajax@2.4.4#can-ajax*/
define('can-ajax@2.4.4#can-ajax', [
    'require',
    'exports',
    'module',
    'can-globals/global/global',
    'can-reflect',
    'can-namespace',
    'can-parse-uri',
    'can-param'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var Global = require('can-globals/global/global');
        var canReflect = require('can-reflect');
        var namespace = require('can-namespace');
        var parseURI = require('can-parse-uri');
        var param = require('can-param');
        var xhrs = [
                function () {
                    return new XMLHttpRequest();
                },
                function () {
                    return new ActiveXObject('Microsoft.XMLHTTP');
                },
                function () {
                    return new ActiveXObject('MSXML2.XMLHTTP.3.0');
                },
                function () {
                    return new ActiveXObject('MSXML2.XMLHTTP');
                }
            ], _xhrf = null;
        var originUrl = parseURI(Global().location.href);
        var globalSettings = {};
        var makeXhr = function () {
            if (_xhrf != null) {
                return _xhrf();
            }
            for (var i = 0, l = xhrs.length; i < l; i++) {
                try {
                    var f = xhrs[i], req = f();
                    if (req != null) {
                        _xhrf = f;
                        return req;
                    }
                } catch (e) {
                    continue;
                }
            }
            return function () {
            };
        };
        var contentTypes = {
            json: 'application/json',
            form: 'application/x-www-form-urlencoded'
        };
        var _xhrResp = function (xhr, options) {
            try {
                var type = options.dataType || xhr.getResponseHeader('Content-Type').split(';')[0];
                if (type && (xhr.responseText || xhr.responseXML)) {
                    switch (type) {
                    case 'text/xml':
                    case 'xml':
                        return xhr.responseXML;
                    case 'text/json':
                    case 'application/json':
                    case 'text/javascript':
                    case 'application/javascript':
                    case 'application/x-javascript':
                    case 'json':
                        return xhr.responseText && JSON.parse(xhr.responseText);
                    default:
                        return xhr.responseText;
                    }
                } else {
                    return xhr;
                }
            } catch (e) {
                return xhr;
            }
        };
        function ajax(o) {
            var xhr = makeXhr(), timer, n = 0;
            var deferred = {}, isFormData;
            var promise = new Promise(function (resolve, reject) {
                deferred.resolve = resolve;
                deferred.reject = reject;
            });
            var requestUrl;
            var isAborted = false;
            promise.abort = function () {
                isAborted = true;
                xhr.abort();
            };
            o = [
                {
                    userAgent: 'XMLHttpRequest',
                    lang: 'en',
                    type: 'GET',
                    data: null,
                    dataType: 'json'
                },
                globalSettings,
                o
            ].reduce(function (a, b, i) {
                return canReflect.assignDeep(a, b);
            });
            var async = o.async !== false;
            if (!o.contentType) {
                o.contentType = o.type.toUpperCase() === 'GET' ? contentTypes.form : contentTypes.json;
            }
            if (o.crossDomain == null) {
                try {
                    requestUrl = parseURI(o.url);
                    o.crossDomain = !!(requestUrl.protocol && requestUrl.protocol !== originUrl.protocol || requestUrl.host && requestUrl.host !== originUrl.host);
                } catch (e) {
                    o.crossDomain = true;
                }
            }
            if (o.timeout) {
                timer = setTimeout(function () {
                    xhr.abort();
                    if (o.timeoutFn) {
                        o.timeoutFn(o.url);
                    }
                }, o.timeout);
            }
            xhr.onreadystatechange = function () {
                try {
                    if (xhr.readyState === 4) {
                        if (timer) {
                            clearTimeout(timer);
                        }
                        if (xhr.status < 300) {
                            if (o.success) {
                                o.success(_xhrResp(xhr, o));
                            }
                        } else if (o.error) {
                            o.error(xhr, xhr.status, xhr.statusText);
                        }
                        if (o.complete) {
                            o.complete(xhr, xhr.statusText);
                        }
                        if (xhr.status >= 200 && xhr.status < 300) {
                            deferred.resolve(_xhrResp(xhr, o));
                        } else {
                            deferred.reject(_xhrResp(xhr, o));
                        }
                    } else if (o.progress) {
                        o.progress(++n);
                    }
                } catch (e) {
                    deferred.reject(e);
                }
            };
            var url = o.url, data = null, type = o.type.toUpperCase();
            var isJsonContentType = o.contentType === contentTypes.json;
            var isPost = type === 'POST' || type === 'PUT';
            if (!isPost && o.data) {
                url += '?' + (isJsonContentType ? JSON.stringify(o.data) : param(o.data));
            }
            xhr.open(type, url, async);
            var isSimpleCors = o.crossDomain && [
                'GET',
                'POST',
                'HEAD'
            ].indexOf(type) !== -1;
            isFormData = typeof FormData !== 'undefined' && o.data instanceof FormData;
            if (isPost) {
                if (isFormData) {
                    data = o.data;
                } else {
                    data = isJsonContentType && !isSimpleCors ? typeof o.data === 'object' ? JSON.stringify(o.data) : o.data : param(o.data);
                }
                var setContentType = isJsonContentType && !isSimpleCors ? 'application/json' : 'application/x-www-form-urlencoded';
                xhr.setRequestHeader('Content-Type', setContentType);
            } else {
                xhr.setRequestHeader('Content-Type', o.contentType);
            }
            if (!isSimpleCors) {
                xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            }
            if (o.xhrFields) {
                for (var f in o.xhrFields) {
                    xhr[f] = o.xhrFields[f];
                }
            }
            function send() {
                if (!isAborted) {
                    xhr.send(data);
                }
            }
            if (o.beforeSend) {
                var result = o.beforeSend.call(o, xhr, o);
                if (canReflect.isPromise(result)) {
                    result.then(send).catch(deferred.reject);
                    return promise;
                }
            }
            send();
            return promise;
        }
        module.exports = namespace.ajax = ajax;
        module.exports.ajaxSetup = function (o) {
            globalSettings = o || {};
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-util@3.14.0#js/is-array-like/is-array-like*/
define('can-util@3.14.0#js/is-array-like/is-array-like', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    function isArrayLike(obj) {
        var type = typeof obj;
        if (type === 'string') {
            return true;
        } else if (type === 'number') {
            return false;
        }
        var length = obj && type !== 'boolean' && typeof obj !== 'number' && 'length' in obj && obj.length;
        return typeof obj !== 'function' && (length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj);
    }
    module.exports = namespace.isArrayLike = isArrayLike;
});
/*can-util@3.14.0#js/is-iterable/is-iterable*/
define('can-util@3.14.0#js/is-iterable/is-iterable', [
    'require',
    'exports',
    'module',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    module.exports = function (obj) {
        return obj && !!obj[canSymbol.iterator || canSymbol.for('iterator')];
    };
});
/*can-util@3.14.0#js/each/each*/
define('can-util@3.14.0#js/each/each', [
    'require',
    'exports',
    'module',
    '../is-array-like/is-array-like',
    '../is-iterable/is-iterable',
    'can-symbol',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var isArrayLike = require('../is-array-like/is-array-like');
    var has = Object.prototype.hasOwnProperty;
    var isIterable = require('../is-iterable/is-iterable');
    var canSymbol = require('can-symbol');
    var namespace = require('can-namespace');
    function each(elements, callback, context) {
        var i = 0, key, len, item;
        if (elements) {
            if (isArrayLike(elements)) {
                for (len = elements.length; i < len; i++) {
                    item = elements[i];
                    if (callback.call(context || item, item, i, elements) === false) {
                        break;
                    }
                }
            } else if (isIterable(elements)) {
                var iter = elements[canSymbol.iterator || canSymbol.for('iterator')]();
                var res, value;
                while (!(res = iter.next()).done) {
                    value = res.value;
                    callback.call(context || elements, Array.isArray(value) ? value[1] : value, value[0]);
                }
            } else if (typeof elements === 'object') {
                for (key in elements) {
                    if (has.call(elements, key) && callback.call(context || elements[key], elements[key], key, elements) === false) {
                        break;
                    }
                }
            }
        }
        return elements;
    }
    module.exports = namespace.each = each;
});
/*can-make-rest@0.1.3#can-make-rest*/
define('can-make-rest@0.1.3#can-make-rest', [
    'require',
    'exports',
    'module',
    'can-util/js/each/each'
], function (require, exports, module) {
    var each = require('can-util/js/each/each');
    var methodMapping = {
        item: {
            'GET': 'getData',
            'PUT': 'updateData',
            'DELETE': 'destroyData'
        },
        list: {
            'GET': 'getListData',
            'POST': 'createData'
        }
    };
    function inferIdProp(url) {
        var wrappedInBraces = /\{(.*)\}/;
        var matches = url.match(wrappedInBraces);
        var isUniqueMatch = matches && matches.length === 2;
        if (isUniqueMatch) {
            return matches[1];
        }
    }
    function getItemAndListUrls(url, idProp) {
        idProp = idProp || inferIdProp(url) || 'id';
        var itemRegex = new RegExp('\\/\\{' + idProp + '\\}.*');
        var rootIsItemUrl = itemRegex.test(url);
        var listUrl = rootIsItemUrl ? url.replace(itemRegex, '') : url;
        var itemUrl = rootIsItemUrl ? url : url.trim() + '/{' + idProp + '}';
        return {
            item: itemUrl,
            list: listUrl
        };
    }
    module.exports = function (url, idProp) {
        var data = {};
        each(getItemAndListUrls(url, idProp), function (url, type) {
            each(methodMapping[type], function (interfaceMethod, method) {
                data[interfaceMethod] = {
                    method: method,
                    url: url
                };
            });
        });
        return data;
    };
});
/*can-connect@3.2.1#helpers/make-promise*/
define('can-connect@3.2.1#helpers/make-promise', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    var canReflect = require('can-reflect');
    module.exports = function (obj) {
        if (obj && typeof obj.then === 'function' && !canReflect.isPromise(obj)) {
            return new Promise(function (resolve, reject) {
                obj.then(resolve, reject);
            });
        } else {
            return obj;
        }
    };
});
/*can-connect@3.2.1#data/url/url*/
define('can-connect@3.2.1#data/url/url', [
    'require',
    'exports',
    'module',
    'can-ajax',
    'can-key/replace-with/replace-with',
    'can-reflect',
    'can-log/dev/dev',
    '../../behavior',
    'can-make-rest',
    '../../helpers/make-promise',
    '../../helpers/validate'
], function (require, exports, module) {
    'use strict';
    var ajax = require('can-ajax');
    var replaceWith = require('can-key/replace-with/replace-with');
    var canReflect = require('can-reflect');
    var dev = require('can-log/dev/dev');
    var behavior = require('../../behavior');
    var makeRest = require('can-make-rest');
    var defaultRest = makeRest('/resource/{id}');
    var makePromise = require('../../helpers/make-promise');
    var urlBehavior = behavior('data/url', function (baseConnection) {
        var behavior = {};
        canReflect.eachKey(defaultRest, function (defaultData, dataInterfaceName) {
            behavior[dataInterfaceName] = function (params) {
                var meta = methodMetaData[dataInterfaceName];
                var defaultBeforeSend;
                if (typeof this.url === 'object') {
                    defaultBeforeSend = this.url.beforeSend;
                    if (typeof this.url[dataInterfaceName] === 'function') {
                        return makePromise(this.url[dataInterfaceName](params));
                    } else if (this.url[dataInterfaceName]) {
                        var promise = makeAjax(this.url[dataInterfaceName], params, defaultData.method, this.ajax || ajax, findContentType(this.url, defaultData.method), meta, defaultBeforeSend);
                        return makePromise(promise);
                    }
                }
                var resource = typeof this.url === 'string' ? this.url : this.url.resource;
                if (resource) {
                    var idProps = canReflect.getSchema(this.queryLogic).identity;
                    var resourceWithoutTrailingSlashes = resource.replace(/\/+$/, '');
                    var result = makeRest(resourceWithoutTrailingSlashes, idProps[0])[dataInterfaceName];
                    return makePromise(makeAjax(result.url, params, result.method, this.ajax || ajax, findContentType(this.url, result.method), meta, defaultBeforeSend));
                }
                return baseConnection[name].call(this, params);
            };
        });
        return behavior;
    });
    var methodMetaData = {
        getListData: {},
        getData: {},
        createData: {},
        updateData: {},
        destroyData: { includeData: false }
    };
    var findContentType = function (url, method) {
        if (typeof url === 'object' && url.contentType) {
            var acceptableType = url.contentType === 'application/x-www-form-urlencoded' || url.contentType === 'application/json';
            if (acceptableType) {
                return url.contentType;
            } else {
                if (process.env.NODE_ENV !== 'production') {
                    dev.warn('Unacceptable contentType on can-connect request. ' + 'Use \'application/json\' or \'application/x-www-form-urlencoded\'');
                }
            }
        }
        return method === 'GET' ? 'application/x-www-form-urlencoded' : 'application/json';
    };
    function urlParamEncoder(key, value) {
        return encodeURIComponent(value);
    }
    var makeAjax = function (ajaxOb, data, type, ajax, contentType, reqOptions, defaultBeforeSend) {
        var params = {};
        if (typeof ajaxOb === 'string') {
            var parts = ajaxOb.split(/\s+/);
            params.url = parts.pop();
            if (parts.length) {
                params.type = parts.pop();
            }
        } else {
            canReflect.assignMap(params, ajaxOb);
        }
        params.data = typeof data === 'object' && !Array.isArray(data) ? canReflect.assignMap(params.data || {}, data) : data;
        params.url = replaceWith(params.url, params.data, urlParamEncoder, true);
        params.contentType = contentType;
        if (reqOptions.includeData === false) {
            delete params.data;
        }
        return ajax(canReflect.assignMap({
            type: type || 'post',
            dataType: 'json',
            beforeSend: defaultBeforeSend
        }, params));
    };
    module.exports = urlBehavior;
    if (process.env.NODE_ENV !== 'production') {
        var validate = require('../../helpers/validate');
        module.exports = validate(urlBehavior, ['url']);
    }
});
/*can-diff@1.4.5#index-by-identity/index-by-identity*/
define('can-diff@1.4.5#index-by-identity/index-by-identity', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    module.exports = function (items, item, schema) {
        var length = canReflect.size(items);
        if (!schema && length > 0) {
            schema = canReflect.getSchema(items[0]);
        }
        if (!schema) {
            schema = canReflect.getSchema(item);
        }
        if (!schema) {
            throw new Error('No schema to use to get identity.');
        }
        var id = canReflect.getIdentity(item, schema);
        for (var i = 0; i < length; i++) {
            var connId = canReflect.getIdentity(items[i], schema);
            if (id === connId) {
                return i;
            }
        }
        return -1;
    };
});
/*can-connect@3.2.1#real-time/real-time*/
define('can-connect@3.2.1#real-time/real-time', [
    'require',
    'exports',
    'module',
    '../can-connect',
    'can-diff/index-by-identity/index-by-identity',
    'can-log/dev/dev',
    'can-symbol',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var connect = require('../can-connect');
    var indexByIdentity = require('can-diff/index-by-identity/index-by-identity');
    var canDev = require('can-log/dev/dev');
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    var spliceSymbol = canSymbol.for('can.splice');
    function updateList(list, getRecord, currentIndex, newIndex) {
        if (currentIndex === -1) {
            if (newIndex !== -1) {
                canReflect.splice(list, newIndex, 0, [getRecord()]);
            }
        } else {
            if (newIndex === -1) {
                canReflect.splice(list, currentIndex, 1, []);
            } else if (newIndex !== currentIndex) {
                if (currentIndex < newIndex) {
                    canReflect.splice(list, newIndex, 0, [getRecord()]);
                    canReflect.splice(list, currentIndex, 1, []);
                } else {
                    canReflect.splice(list, currentIndex, 1, []);
                    canReflect.splice(list, newIndex, 0, [getRecord()]);
                }
            } else {
            }
        }
    }
    function updateListWithItem(list, recordData, currentIndex, newIndex, connection, set) {
        if (currentIndex !== -1 && (newIndex === currentIndex + 1 || newIndex === currentIndex)) {
            return;
        }
        if (list[spliceSymbol] !== undefined) {
            updateList(list, function () {
                return connection.hydrateInstance(recordData);
            }, currentIndex, newIndex);
        } else {
            var copy = connection.serializeList(list);
            updateList(copy, function () {
                return recordData;
            }, currentIndex, newIndex);
            connection.updatedList(list, { data: copy }, set);
        }
    }
    module.exports = connect.behavior('real-time', function (baseConnection) {
        var createPromise = Promise.resolve();
        var behavior;
        behavior = {
            createData: function () {
                var promise = baseConnection.createData.apply(this, arguments);
                var cleanPromise = promise.catch(function () {
                    return '';
                });
                createPromise = Promise.all([
                    createPromise,
                    cleanPromise
                ]);
                return promise;
            },
            createInstance: function (props) {
                var self = this;
                return new Promise(function (resolve, reject) {
                    createPromise.then(function () {
                        setTimeout(function () {
                            var id = self.id(props);
                            var instance = self.instanceStore.get(id);
                            var serialized;
                            if (instance) {
                                resolve(self.updateInstance(props));
                            } else {
                                instance = self.hydrateInstance(props);
                                serialized = self.serializeInstance(instance);
                                self.addInstanceReference(instance);
                                Promise.resolve(self.createdData(props, serialized)).then(function () {
                                    self.deleteInstanceReference(instance);
                                    resolve(instance);
                                });
                            }
                        }, 1);
                    });
                });
            },
            createdData: function (props, params, cid) {
                var instance;
                if (cid !== undefined) {
                    instance = this.cidStore.get(cid);
                } else {
                    instance = this.instanceStore.get(this.id(props));
                }
                this.addInstanceReference(instance, this.id(props));
                this.createdInstance(instance, props);
                create.call(this, this.serializeInstance(instance));
                this.deleteInstanceReference(instance);
                return undefined;
            },
            updatedData: function (props, params) {
                var instance = this.instanceStore.get(this.id(params));
                this.updatedInstance(instance, props);
                update.call(this, this.serializeInstance(instance));
                return undefined;
            },
            updateInstance: function (props) {
                var id = this.id(props);
                var instance = this.instanceStore.get(id);
                if (!instance) {
                    instance = this.hydrateInstance(props);
                }
                this.addInstanceReference(instance);
                var serialized = this.serializeInstance(instance), self = this;
                return Promise.resolve(this.updatedData(props, serialized)).then(function () {
                    self.deleteInstanceReference(instance);
                    return instance;
                });
            },
            destroyedData: function (props, params) {
                var id = this.id(params || props);
                var instance = this.instanceStore.get(id);
                if (!instance) {
                    instance = this.hydrateInstance(props);
                }
                var serialized = this.serializeInstance(instance);
                this.destroyedInstance(instance, props);
                destroy.call(this, serialized);
                return undefined;
            },
            destroyInstance: function (props) {
                var id = this.id(props);
                var instance = this.instanceStore.get(id);
                if (!instance) {
                    instance = this.hydrateInstance(props);
                }
                this.addInstanceReference(instance);
                var serialized = this.serializeInstance(instance), self = this;
                return Promise.resolve(this.destroyedData(props, serialized)).then(function () {
                    self.deleteInstanceReference(instance);
                    return instance;
                });
            }
        };
        if (process.env.NODE_ENV !== 'production') {
            behavior.gotListData = function (items, set) {
                var self = this;
                if (this.queryLogic) {
                    if (Array.isArray(items)) {
                        items = { data: items };
                    }
                    for (var item, i = 0, l = items.data.length; i < l; i++) {
                        item = items.data[i];
                        if (!self.queryLogic.isMember(set, item)) {
                            var msg = 'One or more items were retrieved which do not match the \'Set\' parameters used to load them. ' + 'Read the docs for more information: https://canjs.com/doc/can-query-logic.html#TestingyourQueryLogic' + '\n\nBelow are the \'query\' parameters:' + '\n' + canDev.stringify(set) + '\n\nAnd below is an item which does not match those parameters:' + '\n' + canDev.stringify(item);
                            canDev.warn(msg);
                            break;
                        }
                    }
                }
                return Promise.resolve(items);
            };
        }
        return behavior;
    });
    var create = function (props) {
        var self = this;
        this.listStore.forEach(function (list, id) {
            var set = JSON.parse(id);
            var index = indexByIdentity(list, props, self.queryLogic.schema);
            if (self.queryLogic.isMember(set, props)) {
                var newIndex = self.queryLogic.index(set, list, props);
                updateListWithItem(list, props, index, newIndex, self, set);
            }
        });
    };
    var update = function (props) {
        var self = this;
        this.listStore.forEach(function (list, id) {
            var set = JSON.parse(id);
            var currentIndex = indexByIdentity(list, props, self.queryLogic.schema);
            if (self.queryLogic.isMember(set, props)) {
                var newIndex = self.queryLogic.index(set, list, props);
                updateListWithItem(list, props, currentIndex, newIndex, self, set);
            } else if (currentIndex !== -1) {
                updateListWithItem(list, props, currentIndex, -1, self, set);
            }
        });
    };
    var destroy = function (props) {
        var self = this;
        this.listStore.forEach(function (list, id) {
            var set = JSON.parse(id);
            var currentIndex = indexByIdentity(list, props, self.queryLogic.schema);
            if (currentIndex !== -1) {
                updateListWithItem(list, props, currentIndex, -1, self, set);
            }
        });
    };
});
/*can-connect@3.2.1#constructor/callbacks-once/callbacks-once*/
define('can-connect@3.2.1#constructor/callbacks-once/callbacks-once', [
    'require',
    'exports',
    'module',
    '../../can-connect',
    '../../helpers/sorted-set-json',
    '../../helpers/validate'
], function (require, exports, module) {
    'use strict';
    var connect = require('../../can-connect');
    var sortedSetJSON = require('../../helpers/sorted-set-json');
    var forEach = [].forEach;
    var callbacks = [
        'createdInstance',
        'updatedInstance',
        'destroyedInstance'
    ];
    var callbacksOnceBehavior = connect.behavior('constructor/callbacks-once', function (baseConnection) {
        var behavior = {};
        forEach.call(callbacks, function (name) {
            behavior[name] = function (instance, data) {
                var lastSerialized = this.getInstanceMetaData(instance, 'last-data-' + name);
                var serialize = sortedSetJSON(data);
                if (lastSerialized !== serialize) {
                    var result = baseConnection[name].apply(this, arguments);
                    this.addInstanceMetaData(instance, 'last-data-' + name, serialize);
                    return result;
                }
            };
        });
        return behavior;
    });
    module.exports = callbacksOnceBehavior;
    if (process.env.NODE_ENV !== 'production') {
        var validate = require('../../helpers/validate');
        module.exports = validate(callbacksOnceBehavior, callbacks);
    }
});
/*can-realtime-rest-model@1.1.1#can-realtime-rest-model*/
define('can-realtime-rest-model@1.1.1#can-realtime-rest-model', [
    'require',
    'exports',
    'module',
    'can-connect',
    'can-connect/constructor/constructor',
    'can-connect/can/map/map',
    'can-connect/constructor/store/store',
    'can-connect/data/callbacks/callbacks',
    'can-connect/data/parse/parse',
    'can-connect/data/url/url',
    'can-define/list/list',
    'can-define/map/map',
    'can-connect/real-time/real-time',
    'can-connect/constructor/callbacks-once/callbacks-once',
    'can-namespace'
], function (require, exports, module) {
    var connect = require('can-connect');
    var constructor = require('can-connect/constructor/constructor');
    var canMap = require('can-connect/can/map/map');
    var constructorStore = require('can-connect/constructor/store/store');
    var dataCallbacks = require('can-connect/data/callbacks/callbacks');
    var dataParse = require('can-connect/data/parse/parse');
    var dataUrl = require('can-connect/data/url/url');
    var DefineList = require('can-define/list/list');
    var DefineMap = require('can-define/map/map');
    var realTime = require('can-connect/real-time/real-time');
    var callbacksOnce = require('can-connect/constructor/callbacks-once/callbacks-once');
    var namespace = require('can-namespace');
    function realtimeRestModel(optionsOrUrl) {
        var options = typeof optionsOrUrl === 'string' ? { url: optionsOrUrl } : optionsOrUrl;
        if (typeof options.Map === 'undefined') {
            options.Map = DefineMap.extend({ seal: false }, {});
        }
        if (typeof options.List === 'undefined') {
            options.List = options.Map.List || DefineList.extend({ '#': options.Map });
        }
        var behaviors = [
            constructor,
            canMap,
            constructorStore,
            dataCallbacks,
            dataParse,
            dataUrl,
            realTime,
            callbacksOnce
        ];
        return connect(behaviors, options);
    }
    module.exports = namespace.realtimeRestModel = realtimeRestModel;
});
/*can@5.31.0#es/can-realtime-rest-model*/
define('can@5.31.0#es/can-realtime-rest-model', [
    'exports',
    'can-realtime-rest-model'
], function (exports, _canRealtimeRestModel) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canRealtimeRestModel).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-namespace@1.0.0#can-namespace*/
define('can-namespace@1.0.0#can-namespace', function (require, exports, module) {
    module.exports = {};
});
/*can@5.31.0#es/can-rest-model*/
define('can@5.31.0#es/can-rest-model', [
    'exports',
    'can-rest-model'
], function (exports, _canRestModel) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canRestModel).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-connect@3.2.1#helpers/get-items*/
define('can-connect@3.2.1#helpers/get-items', function (require, exports, module) {
    'use strict';
    module.exports = function (data) {
        if (Array.isArray(data)) {
            return data;
        } else {
            return data.data;
        }
    };
});
/*can-connect@3.2.1#cache-requests/cache-requests*/
define('can-connect@3.2.1#cache-requests/cache-requests', [
    'require',
    'exports',
    'module',
    '../can-connect',
    '../helpers/get-items',
    '../helpers/validate'
], function (require, exports, module) {
    var connect = require('../can-connect');
    var getItems = require('../helpers/get-items');
    var forEach = Array.prototype.forEach;
    var cacheRequestsBehaviour = connect.behavior('cache-requests', function (baseConnection) {
        return {
            getDiff: function (params, availableQueries) {
                var minSets, self = this;
                forEach.call(availableQueries, function (query) {
                    var curSets;
                    var difference = self.queryLogic.difference(params, query);
                    if (self.queryLogic.isDefinedAndHasMembers(difference)) {
                        var intersection = self.queryLogic.intersection(params, query);
                        curSets = {
                            needed: difference,
                            cached: self.queryLogic.isDefinedAndHasMembers(intersection) ? intersection : false,
                            count: self.queryLogic.count(difference)
                        };
                    } else if (self.queryLogic.isSubset(params, query)) {
                        curSets = {
                            cached: params,
                            count: 0
                        };
                    }
                    if (curSets) {
                        if (!minSets || curSets.count < minSets.count) {
                            minSets = curSets;
                        }
                    }
                });
                if (!minSets) {
                    return { needed: params };
                } else {
                    return {
                        needed: minSets.needed,
                        cached: minSets.cached
                    };
                }
            },
            unionMembers: function (params, diff, neededItems, cachedItems) {
                return { data: this.queryLogic.unionMembers(diff.needed, diff.cached, getItems(neededItems), getItems(cachedItems)) };
            },
            getListData: function (set) {
                set = set || {};
                var self = this;
                return this.cacheConnection.getSets(set).then(function (queries) {
                    var diff = self.getDiff(set, queries);
                    if (!diff.needed) {
                        return self.cacheConnection.getListData(diff.cached);
                    } else if (!diff.cached) {
                        return baseConnection.getListData(diff.needed).then(function (data) {
                            return self.cacheConnection.updateListData(getItems(data), diff.needed).then(function () {
                                return data;
                            });
                        });
                    } else {
                        var cachedPromise = self.cacheConnection.getListData(diff.cached);
                        var needsPromise = baseConnection.getListData(diff.needed);
                        var savedPromise = needsPromise.then(function (data) {
                            return self.cacheConnection.updateListData(getItems(data), diff.needed).then(function () {
                                return data;
                            });
                        });
                        var combinedPromise = Promise.all([
                            cachedPromise,
                            needsPromise
                        ]).then(function (result) {
                            var cached = result[0], needed = result[1];
                            return self.unionMembers(set, diff, needed, cached);
                        });
                        return Promise.all([
                            combinedPromise,
                            savedPromise
                        ]).then(function (data) {
                            return data[0];
                        });
                    }
                });
            }
        };
    });
    module.exports = cacheRequestsBehaviour;
    if (process.env.NODE_ENV !== 'production') {
        var validate = require('../helpers/validate');
    }
    module.exports = validate(cacheRequestsBehaviour, [
        'getListData',
        'cacheConnection'
    ]);
});
/*can-connect@3.2.1#data/callbacks-cache/callbacks-cache*/
define('can-connect@3.2.1#data/callbacks-cache/callbacks-cache', [
    'require',
    'exports',
    'module',
    '../../can-connect',
    'can-reflect',
    'can-reflect',
    '../../helpers/validate'
], function (require, exports, module) {
    'use strict';
    var connect = require('../../can-connect');
    var assign = require('can-reflect').assignMap;
    var each = require('can-reflect').each;
    var pairs = {
        createdData: 'createData',
        updatedData: 'updateData',
        destroyedData: 'destroyData'
    };
    var callbackCache = connect.behavior('data/callbacks-cache', function (baseConnection) {
        var behavior = {};
        each(pairs, function (crudMethod, dataCallback) {
            behavior[dataCallback] = function (data, params, cid) {
                this.cacheConnection[crudMethod](assign(assign({}, params), data));
                if (baseConnection[dataCallback]) {
                    return baseConnection[dataCallback].call(this, data, params, cid);
                } else {
                    return data;
                }
            };
        });
        return behavior;
    });
    module.exports = callbackCache;
    if (process.env.NODE_ENV !== 'production') {
        var validate = require('../../helpers/validate');
        module.exports = validate(callbackCache, []);
    }
});
/*can-connect@3.2.1#helpers/deferred*/
define('can-connect@3.2.1#helpers/deferred', function (require, exports, module) {
    'use strict';
    module.exports = function () {
        var def = {};
        def.promise = new Promise(function (resolve, reject) {
            def.resolve = resolve;
            def.reject = reject;
        });
        return def;
    };
});
/*can-connect@3.2.1#data/combine-requests/combine-requests*/
define('can-connect@3.2.1#data/combine-requests/combine-requests', [
    'require',
    'exports',
    'module',
    '../../can-connect',
    '../../helpers/get-items',
    'can-reflect',
    '../../helpers/deferred',
    '../../helpers/validate'
], function (require, exports, module) {
    var connect = require('../../can-connect');
    var getItems = require('../../helpers/get-items');
    var canReflect = require('can-reflect');
    var makeDeferred = require('../../helpers/deferred');
    var forEach = [].forEach;
    var combineRequests = connect.behavior('data/combine-requests', function (baseConnection) {
        var pendingRequests;
        return {
            unionPendingRequests: function (pendingRequests) {
                var self = this;
                pendingRequests.sort(function (pReq1, pReq2) {
                    if (self.queryLogic.isSubset(pReq1.set, pReq2.set)) {
                        return 1;
                    } else if (self.queryLogic.isSubset(pReq2.set, pReq1.set)) {
                        return -1;
                    } else {
                        return 0;
                    }
                });
                var combineData = [];
                var current;
                doubleLoop(pendingRequests, {
                    start: function (pendingRequest) {
                        current = {
                            set: pendingRequest.set,
                            pendingRequests: [pendingRequest]
                        };
                        combineData.push(current);
                    },
                    iterate: function (pendingRequest) {
                        var combined = self.queryLogic.union(current.set, pendingRequest.set);
                        if (self.queryLogic.isDefinedAndHasMembers(combined)) {
                            current.set = combined;
                            current.pendingRequests.push(pendingRequest);
                            return true;
                        }
                    }
                });
                return Promise.resolve(combineData);
            },
            time: 1,
            getListData: function (set) {
                set = set || {};
                var self = this;
                if (!pendingRequests) {
                    pendingRequests = [];
                    setTimeout(function () {
                        var combineDataPromise = self.unionPendingRequests(pendingRequests);
                        pendingRequests = null;
                        combineDataPromise.then(function (combinedData) {
                            forEach.call(combinedData, function (combined) {
                                var combinedSet = canReflect.serialize(combined.set);
                                baseConnection.getListData(combinedSet).then(function (data) {
                                    if (combined.pendingRequests.length === 1) {
                                        combined.pendingRequests[0].deferred.resolve(data);
                                    } else {
                                        forEach.call(combined.pendingRequests, function (pending) {
                                            pending.deferred.resolve({ data: self.queryLogic.filterMembers(pending.set, combined.set, getItems(data)) });
                                        });
                                    }
                                }, function (err) {
                                    if (combined.pendingRequests.length === 1) {
                                        combined.pendingRequests[0].deferred.reject(err);
                                    } else {
                                        forEach.call(combined.pendingRequests, function (pending) {
                                            pending.deferred.reject(err);
                                        });
                                    }
                                });
                            });
                        });
                    }, this.time || 1);
                }
                var deferred = makeDeferred();
                pendingRequests.push({
                    deferred: deferred,
                    set: set
                });
                return deferred.promise;
            }
        };
    });
    module.exports = combineRequests;
    var validate = require('../../helpers/validate');
    module.exports = validate(combineRequests, ['getListData']);
    var doubleLoop = function (arr, callbacks) {
        var i = 0;
        while (i < arr.length) {
            callbacks.start(arr[i]);
            var j = i + 1;
            while (j < arr.length) {
                if (callbacks.iterate(arr[j]) === true) {
                    arr.splice(j, 1);
                } else {
                    j++;
                }
            }
            i++;
        }
    };
});
/*can-local-store@1.0.1#can-local-store*/
define('can-local-store@1.0.1#can-local-store', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-memory-store/make-simple-store',
    'can-namespace'
], function (require, exports, module) {
    var canReflect = require('can-reflect');
    var makeSimpleStore = require('can-memory-store/make-simple-store');
    var namespace = require('can-namespace');
    module.exports = namespace.localStore = function localStore(baseConnection) {
        baseConnection.constructor = localStore;
        var behavior = Object.create(makeSimpleStore(baseConnection));
        canReflect.assignMap(behavior, {
            clear: function () {
                localStorage.removeItem(this.name + '/queries');
                localStorage.removeItem(this.name + '/records');
                this._recordsMap = null;
                return Promise.resolve();
            },
            updateQueryDataSync: function (queries) {
                localStorage.setItem(this.name + '/queries', JSON.stringify(queries));
            },
            getQueryDataSync: function () {
                return JSON.parse(localStorage.getItem(this.name + '/queries')) || [];
            },
            getRecord: function (id) {
                if (!this._recordsMap) {
                    this.getAllRecords();
                }
                return this._recordsMap[id];
            },
            getAllRecords: function () {
                if (!this.cacheLocalStorageReads || !this._recordsMap) {
                    var recordsMap = JSON.parse(localStorage.getItem(this.name + '/records')) || {};
                    this._recordsMap = recordsMap;
                }
                var records = [];
                for (var id in this._recordsMap) {
                    records.push(this._recordsMap[id]);
                }
                return records;
            },
            destroyRecords: function (records) {
                if (!this._recordsMap) {
                    this.getAllRecords();
                }
                canReflect.eachIndex(records, function (record) {
                    var id = canReflect.getIdentity(record, this.queryLogic.schema);
                    delete this._recordsMap[id];
                }, this);
                localStorage.setItem(this.name + '/records', JSON.stringify(this._recordsMap));
            },
            updateRecordsSync: function (records) {
                if (!this._recordsMap) {
                    this.getAllRecords();
                }
                records.forEach(function (record) {
                    var id = canReflect.getIdentity(record, this.queryLogic.schema);
                    this._recordsMap[id] = record;
                }, this);
                localStorage.setItem(this.name + '/records', JSON.stringify(this._recordsMap));
            }
        });
        return behavior;
    };
});
/*can-connect@3.2.1#data/localstorage-cache/localstorage-cache*/
define('can-connect@3.2.1#data/localstorage-cache/localstorage-cache', [
    'require',
    'exports',
    'module',
    'can-local-store'
], function (require, exports, module) {
    'use strict';
    module.exports = require('can-local-store');
});
/*can-connect@3.2.1#data/memory-cache/memory-cache*/
define('can-connect@3.2.1#data/memory-cache/memory-cache', [
    'require',
    'exports',
    'module',
    'can-memory-store'
], function (require, exports, module) {
    'use strict';
    var memoryStore = require('can-memory-store');
    module.exports = memoryStore;
});
/*can-connect@3.2.1#fall-through-cache/fall-through-cache*/
define('can-connect@3.2.1#fall-through-cache/fall-through-cache', [
    'require',
    'exports',
    'module',
    '../can-connect',
    '../helpers/sorted-set-json',
    'can-log',
    '../helpers/validate'
], function (require, exports, module) {
    'use strict';
    var connect = require('../can-connect');
    var sortedSetJSON = require('../helpers/sorted-set-json');
    var canLog = require('can-log');
    var fallThroughCache = connect.behavior('fall-through-cache', function (baseConnection) {
        var behavior = {
            hydrateList: function (listData, set) {
                set = set || this.listQuery(listData);
                var id = sortedSetJSON(set);
                var list = baseConnection.hydrateList.call(this, listData, set);
                if (this._getHydrateListCallbacks[id]) {
                    this._getHydrateListCallbacks[id].shift()(list);
                    if (!this._getHydrateListCallbacks[id].length) {
                        delete this._getHydrateListCallbacks[id];
                    }
                }
                return list;
            },
            _getHydrateListCallbacks: {},
            _getHydrateList: function (set, callback) {
                var id = sortedSetJSON(set);
                if (!this._getHydrateListCallbacks[id]) {
                    this._getHydrateListCallbacks[id] = [];
                }
                this._getHydrateListCallbacks[id].push(callback);
            },
            getListData: function (set) {
                set = set || {};
                var self = this;
                return this.cacheConnection.getListData(set).then(function (data) {
                    self._getHydrateList(set, function (list) {
                        self.addListReference(list, set);
                        setTimeout(function () {
                            baseConnection.getListData.call(self, set).then(function (listData) {
                                self.cacheConnection.updateListData(listData, set);
                                self.updatedList(list, listData, set);
                                self.deleteListReference(list, set);
                            }, function (e) {
                                canLog.log('REJECTED', e);
                            });
                        }, 1);
                    });
                    return data;
                }, function () {
                    var listData = baseConnection.getListData.call(self, set);
                    listData.then(function (listData) {
                        self.cacheConnection.updateListData(listData, set);
                    });
                    return listData;
                });
            },
            hydrateInstance: function (props) {
                var id = this.id(props);
                var instance = baseConnection.hydrateInstance.apply(this, arguments);
                if (this._getMakeInstanceCallbacks[id]) {
                    this._getMakeInstanceCallbacks[id].shift()(instance);
                    if (!this._getMakeInstanceCallbacks[id].length) {
                        delete this._getMakeInstanceCallbacks[id];
                    }
                }
                return instance;
            },
            _getMakeInstanceCallbacks: {},
            _getMakeInstance: function (id, callback) {
                if (!this._getMakeInstanceCallbacks[id]) {
                    this._getMakeInstanceCallbacks[id] = [];
                }
                this._getMakeInstanceCallbacks[id].push(callback);
            },
            getData: function (params) {
                var self = this;
                return this.cacheConnection.getData(params).then(function (instanceData) {
                    self._getMakeInstance(self.id(instanceData) || self.id(params), function (instance) {
                        self.addInstanceReference(instance);
                        setTimeout(function () {
                            baseConnection.getData.call(self, params).then(function (instanceData2) {
                                self.cacheConnection.updateData(instanceData2);
                                self.updatedInstance(instance, instanceData2);
                                self.deleteInstanceReference(instance);
                            }, function (e) {
                                canLog.log('REJECTED', e);
                            });
                        }, 1);
                    });
                    return instanceData;
                }, function () {
                    var listData = baseConnection.getData.call(self, params);
                    listData.then(function (instanceData) {
                        self.cacheConnection.updateData(instanceData);
                    });
                    return listData;
                });
            }
        };
        return behavior;
    });
    module.exports = fallThroughCache;
    if (process.env.NODE_ENV !== 'production') {
        var validate = require('../helpers/validate');
        module.exports = validate(fallThroughCache, [
            'hydrateList',
            'hydrateInstance',
            'getListData',
            'getData'
        ]);
    }
});
/*can-connect@3.2.1#can/ref/ref*/
define('can-connect@3.2.1#can/ref/ref', [
    'require',
    'exports',
    'module',
    '../../can-connect',
    '../../helpers/weak-reference-map',
    'can-observation-recorder',
    '../../constructor/store/store',
    'can-define',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var connect = require('../../can-connect');
    var WeakReferenceMap = require('../../helpers/weak-reference-map');
    var ObservationRecorder = require('can-observation-recorder');
    var constructorStore = require('../../constructor/store/store');
    var define = require('can-define');
    var canReflect = require('can-reflect');
    var makeRef = function (connection) {
        var idProp = canReflect.getSchema(connection.queryLogic).identity[0];
        var Ref = function () {
            return function (id, value) {
                if (typeof id === 'object') {
                    value = id;
                    id = value[idProp];
                }
                var storeRef = Ref.store.get(id);
                if (storeRef) {
                    if (value && !storeRef._value) {
                        if (value instanceof connection.Map) {
                            storeRef._value = value;
                        } else {
                            storeRef._value = connection.hydrateInstance(value);
                        }
                    }
                    return storeRef;
                }
                this[idProp] = id;
                if (value) {
                    if (value instanceof connection.Map) {
                        this._value = value;
                    } else {
                        this._value = connection.hydrateInstance(value);
                    }
                }
                if (constructorStore.requests.count() > 0) {
                    if (!Ref._requestInstances[id]) {
                        Ref.store.addReference(id, this);
                        Ref._requestInstances[id] = this;
                    }
                }
            };
        }();
        Ref.store = new WeakReferenceMap();
        Ref._requestInstances = {};
        Ref.type = function (ref) {
            if (ref && typeof ref !== 'object') {
                return new Ref(ref);
            } else {
                return new Ref(ref[idProp], ref);
            }
        };
        var defs = {
            promise: {
                get: function () {
                    if (this._value) {
                        return Promise.resolve(this._value);
                    } else {
                        var props = {};
                        props[idProp] = this[idProp];
                        return connection.Map.get(props);
                    }
                }
            },
            _state: {
                get: function (lastSet, resolve) {
                    if (resolve) {
                        this.promise.then(function () {
                            resolve('resolved');
                        }, function () {
                            resolve('rejected');
                        });
                    }
                    return 'pending';
                }
            },
            value: {
                get: function (lastSet, resolve) {
                    if (this._value) {
                        return this._value;
                    } else if (resolve) {
                        this.promise.then(function (value) {
                            resolve(value);
                        });
                    }
                }
            },
            reason: {
                get: function (lastSet, resolve) {
                    if (this._value) {
                        return undefined;
                    } else {
                        this.promise.catch(function (value) {
                            resolve(value);
                        });
                    }
                }
            }
        };
        defs[idProp] = {
            type: '*',
            set: function () {
                this._value = undefined;
            }
        };
        define(Ref.prototype, defs);
        Ref.prototype.unobservedId = ObservationRecorder.ignore(function () {
            return this[idProp];
        });
        Ref.prototype.isResolved = function () {
            return !!this._value || this._state === 'resolved';
        };
        Ref.prototype.isRejected = function () {
            return this._state === 'rejected';
        };
        Ref.prototype.isPending = function () {
            return !this._value && (this._state !== 'resolved' || this._state !== 'rejected');
        };
        Ref.prototype.serialize = function () {
            return this[idProp];
        };
        canReflect.assignSymbols(Ref.prototype, {
            'can.serialize': Ref.prototype.serialize,
            'can.getName': function () {
                return canReflect.getName(this.constructor) + '{' + this[idProp] + '}';
            }
        });
        var baseEventSetup = Ref.prototype._eventSetup;
        Ref.prototype._eventSetup = function () {
            Ref.store.addReference(this.unobservedId(), this);
            return baseEventSetup.apply(this, arguments);
        };
        var baseTeardown = Ref.prototype._eventTeardown;
        Ref.prototype._eventTeardown = function () {
            Ref.store.deleteReference(this.unobservedId(), this);
            return baseTeardown.apply(this, arguments);
        };
        constructorStore.requests.on('end', function () {
            for (var id in Ref._requestInstances) {
                Ref.store.deleteReference(id);
            }
            Ref._requestInstances = {};
        });
        Object.defineProperty(Ref, 'name', {
            value: canReflect.getName(connection.Map) + 'Ref',
            configurable: true
        });
        return Ref;
    };
    module.exports = connect.behavior('can/ref', function (baseConnection) {
        return {
            init: function () {
                baseConnection.init.apply(this, arguments);
                this.Map.Ref = makeRef(this);
            }
        };
    });
});
/*can-connect@3.2.1#can/super-map/super-map*/
define('can-connect@3.2.1#can/super-map/super-map', [
    'require',
    'exports',
    'module',
    '../../can-connect',
    '../../constructor/constructor',
    '../map/map',
    '../ref/ref',
    '../../constructor/store/store',
    '../../data/callbacks/callbacks',
    '../../data/callbacks-cache/callbacks-cache',
    '../../data/combine-requests/combine-requests',
    '../../data/localstorage-cache/localstorage-cache',
    '../../data/parse/parse',
    '../../data/url/url',
    '../../fall-through-cache/fall-through-cache',
    '../../real-time/real-time',
    '../../constructor/callbacks-once/callbacks-once',
    'can-globals/global/global'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var connect = require('../../can-connect');
        var constructor = require('../../constructor/constructor');
        var canMap = require('../map/map');
        var canRef = require('../ref/ref');
        var constructorStore = require('../../constructor/store/store');
        var dataCallbacks = require('../../data/callbacks/callbacks');
        var callbacksCache = require('../../data/callbacks-cache/callbacks-cache');
        var combineRequests = require('../../data/combine-requests/combine-requests');
        var localCache = require('../../data/localstorage-cache/localstorage-cache');
        var dataParse = require('../../data/parse/parse');
        var dataUrl = require('../../data/url/url');
        var fallThroughCache = require('../../fall-through-cache/fall-through-cache');
        var realTime = require('../../real-time/real-time');
        var callbacksOnce = require('../../constructor/callbacks-once/callbacks-once');
        var GLOBAL = require('can-globals/global/global');
        var $ = GLOBAL().$;
        connect.superMap = function (options) {
            var behaviors = [
                constructor,
                canMap,
                canRef,
                constructorStore,
                dataCallbacks,
                combineRequests,
                dataParse,
                dataUrl,
                realTime,
                callbacksOnce
            ];
            if (typeof localStorage !== 'undefined') {
                if (!options.cacheConnection) {
                    options.cacheConnection = connect([localCache], {
                        name: options.name + 'Cache',
                        idProp: options.idProp,
                        queryLogic: options.queryLogic
                    });
                }
                behaviors.push(callbacksCache, fallThroughCache);
            }
            if ($ && $.ajax) {
                options.ajax = $.ajax;
            }
            return connect(behaviors, options);
        };
        module.exports = connect.superMap;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-connect@3.2.1#can/base-map/base-map*/
define('can-connect@3.2.1#can/base-map/base-map', [
    'require',
    'exports',
    'module',
    '../../can-connect',
    '../../constructor/constructor',
    '../map/map',
    '../ref/ref',
    '../../constructor/store/store',
    '../../data/callbacks/callbacks',
    '../../data/callbacks-cache/callbacks-cache',
    '../../data/parse/parse',
    '../../data/url/url',
    '../../real-time/real-time',
    '../../constructor/callbacks-once/callbacks-once',
    'can-globals/global/global'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        var connect = require('../../can-connect');
        var constructor = require('../../constructor/constructor');
        var canMap = require('../map/map');
        var canRef = require('../ref/ref');
        var constructorStore = require('../../constructor/store/store');
        var dataCallbacks = require('../../data/callbacks/callbacks');
        var callbacksCache = require('../../data/callbacks-cache/callbacks-cache');
        var dataParse = require('../../data/parse/parse');
        var dataUrl = require('../../data/url/url');
        var realTime = require('../../real-time/real-time');
        var callbacksOnce = require('../../constructor/callbacks-once/callbacks-once');
        var GLOBAL = require('can-globals/global/global');
        var $ = GLOBAL().$;
        connect.baseMap = function (options) {
            var behaviors = [
                constructor,
                canMap,
                canRef,
                constructorStore,
                dataCallbacks,
                dataParse,
                dataUrl,
                realTime,
                callbacksOnce
            ];
            if ($ && $.ajax) {
                options.ajax = $.ajax;
            }
            return connect(behaviors, options);
        };
        module.exports = connect.baseMap;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-connect@3.2.1#all*/
define('can-connect@3.2.1#all', [
    'require',
    'exports',
    'module',
    './can-connect',
    './cache-requests/cache-requests',
    './constructor/constructor',
    './constructor/callbacks-once/callbacks-once',
    './constructor/store/store',
    './data/callbacks/callbacks',
    './data/callbacks-cache/callbacks-cache',
    './data/combine-requests/combine-requests',
    './data/localstorage-cache/localstorage-cache',
    './data/memory-cache/memory-cache',
    './data/parse/parse',
    './data/url/url',
    './fall-through-cache/fall-through-cache',
    './real-time/real-time',
    './can/map/map',
    './can/super-map/super-map',
    './can/base-map/base-map'
], function (require, exports, module) {
    'use strict';
    var connect = require('./can-connect');
    connect.cacheRequests = require('./cache-requests/cache-requests');
    connect.constructor = require('./constructor/constructor');
    connect.constructorCallbacksOnce = require('./constructor/callbacks-once/callbacks-once');
    connect.constructorStore = require('./constructor/store/store');
    connect.dataCallbacks = require('./data/callbacks/callbacks');
    connect.dataCallbacksCache = require('./data/callbacks-cache/callbacks-cache');
    connect.dataCombineRequests = require('./data/combine-requests/combine-requests');
    connect.dataLocalStorageCache = require('./data/localstorage-cache/localstorage-cache');
    connect.dataMemoryCache = require('./data/memory-cache/memory-cache');
    connect.dataParse = require('./data/parse/parse');
    connect.dataUrl = require('./data/url/url');
    connect.fallThroughCache = require('./fall-through-cache/fall-through-cache');
    connect.realTime = require('./real-time/real-time');
    connect.canMap = require('./can/map/map');
    connect.superMap = require('./can/super-map/super-map');
    connect.baseMap = require('./can/base-map/base-map');
    module.exports = connect;
});
/*can@5.31.0#es/can-connect*/
define('can@5.31.0#es/can-connect', [
    'exports',
    'can-connect/all'
], function (exports, _all) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_all).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-local-store*/
define('can@5.31.0#es/can-local-store', [
    'exports',
    'can-local-store'
], function (exports, _canLocalStore) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canLocalStore).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-memory-store*/
define('can@5.31.0#es/can-memory-store', [
    'exports',
    'can-memory-store'
], function (exports, _canMemoryStore) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canMemoryStore).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-route*/
define('can@5.31.0#es/can-route', [
    'exports',
    'can-route'
], function (exports, _canRoute) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canRoute).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-route-hash*/
define('can@5.31.0#es/can-route-hash', [
    'exports',
    'can-route-hash'
], function (exports, _canRouteHash) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canRouteHash).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-route-pushstate@5.0.13#can-route-pushstate*/
define('can-route-pushstate@5.0.13#can-route-pushstate', [
    'require',
    'exports',
    'module',
    'can-route',
    'can-route/src/binding-proxy',
    'can-reflect',
    'can-symbol',
    'can-simple-observable',
    'can-observation-recorder',
    'can-globals/is-node/is-node',
    'can-globals/location/location',
    'can-globals/document/document',
    'can-globals/global/global',
    'can-dom-events',
    'can-diff/map/map'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var route = require('can-route');
        var bindingProxy = require('can-route/src/binding-proxy');
        var canReflect = require('can-reflect');
        var canSymbol = require('can-symbol');
        var SimpleObservable = require('can-simple-observable');
        var ObservationRecorder = require('can-observation-recorder');
        var isNode = require('can-globals/is-node/is-node');
        var LOCATION = require('can-globals/location/location');
        var getDocument = require('can-globals/document/document');
        var getGlobal = require('can-globals/global/global');
        var domEvents = require('can-dom-events');
        var diffObject = require('can-diff/map/map');
        var methodsToOverwrite = [
                'pushState',
                'replaceState'
            ], dispatchSymbol = canSymbol.for('can.dispatch');
        function cleanRoot() {
            var location = LOCATION(), domain = location.protocol + '//' + location.host, root = bindingProxy.call('root'), index = root.indexOf(domain);
            if (index === 0) {
                return root.substr(domain.length);
            }
            return root;
        }
        function getCurrentUrl() {
            var root = cleanRoot(), location = LOCATION(), loc = location.pathname + location.search, index = loc.indexOf(root);
            return loc.substr(index + root.length);
        }
        function PushstateObservable() {
            this.replaceStateOnceKeys = [];
            this.replaceStateKeys = [];
            this.dispatchHandlers = this.dispatchHandlers.bind(this);
            this.anchorClickHandler = function (event) {
                var shouldCallPushState = PushstateObservable.prototype.shouldCallPushState.call(this, this, event);
                if (shouldCallPushState) {
                    PushstateObservable.prototype.anchorClickHandler.call(this, this, event);
                }
            };
            this.keepHash = true;
        }
        PushstateObservable.prototype = Object.create(SimpleObservable.prototype);
        PushstateObservable.constructor = PushstateObservable;
        canReflect.assign(PushstateObservable.prototype, {
            root: '/',
            matchSlashes: false,
            paramsMatcher: /^\?(?:[^=]+=[^&]*&)*[^=]+=[^&]*/,
            querySeparator: '?',
            dispatchHandlers: function () {
                var old = this._value;
                this._value = getCurrentUrl();
                if (old !== this._value) {
                    this[dispatchSymbol](this._value, old);
                }
            },
            shouldCallPushState: function (node, event) {
                if (!(event.isDefaultPrevented ? event.isDefaultPrevented() : event.defaultPrevented === true)) {
                    if (node.href === 'javascript://') {
                        return;
                    }
                    if (node.target === '_blank') {
                        return;
                    }
                    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {
                        return;
                    }
                    var linksHost = node.host || window.location.host;
                    if (window.location.host === linksHost) {
                        var root = cleanRoot(), pathname, href, nodePathWithSearch;
                        if (node instanceof HTMLAnchorElement) {
                            pathname = node.pathname;
                            href = node.href;
                            nodePathWithSearch = pathname + node.search;
                        } else if (node.namespaceURI === 'http://www.w3.org/1999/xlink') {
                            pathname = href = node.getAttributeNS('http://www.w3.org/1999/xlink', 'href');
                            nodePathWithSearch = href;
                        }
                        if (pathname !== undefined && pathname.indexOf(root) === 0) {
                            var url = nodePathWithSearch.substr(root.length);
                            if (route.rule(url) !== undefined) {
                                if (href.indexOf('#') >= 0) {
                                    this.keepHash = true;
                                }
                                var windowPathWithSearch = window.location.pathname + window.location.search;
                                var shouldCallPreventDefault = nodePathWithSearch !== windowPathWithSearch || node.hash === window.location.hash;
                                if (shouldCallPreventDefault && event.preventDefault) {
                                    event.preventDefault();
                                }
                                return true;
                            }
                            return false;
                        }
                    }
                }
            },
            anchorClickHandler: function (node, event) {
                var href = node.href ? node.href : node.getAttributeNS('http://www.w3.org/1999/xlink', 'href');
                window.history.pushState(null, null, href);
            },
            onBound: function () {
                if (isNode()) {
                    return;
                }
                var document = getDocument(), window = getGlobal();
                this._value = getCurrentUrl();
                domEvents.addDelegateListener(document.documentElement, 'click', 'a', this.anchorClickHandler);
                var originalMethods = this.originalMethods = {};
                var dispatchHandlers = this.dispatchHandlers;
                canReflect.eachKey(methodsToOverwrite, function (method) {
                    this.originalMethods[method] = window.history[method];
                    window.history[method] = function (state, title, url) {
                        var absolute = url.indexOf('http') === 0;
                        var location = LOCATION();
                        var searchHash = location.search + location.hash;
                        if (!absolute && url !== location.pathname + searchHash || absolute && url !== location.href + searchHash) {
                            originalMethods[method].apply(window.history, arguments);
                            dispatchHandlers();
                        }
                    };
                }, this);
                domEvents.addEventListener(window, 'popstate', this.dispatchHandlers);
            },
            onUnbound: function () {
                if (isNode()) {
                    return;
                }
                var document = getDocument(), window = getGlobal();
                domEvents.removeDelegateListener(document.documentElement, 'click', 'a', this.anchorClickHandler);
                canReflect.eachKey(methodsToOverwrite, function (method) {
                    window.history[method] = this.originalMethods[method];
                }, this);
                domEvents.removeEventListener(window, 'popstate', this.dispatchHandlers);
            },
            get: function get() {
                ObservationRecorder.add(this);
                return getCurrentUrl();
            },
            set: function (path) {
                var newProps = route.deparam(path), oldProps = route.deparam(getCurrentUrl()), method = 'pushState', changed = {};
                if (this.keepHash && path.indexOf('#') === -1 && window.location.hash) {
                    path += window.location.hash;
                }
                diffObject(oldProps, newProps).forEach(function (patch) {
                    return changed[patch.key] = true;
                });
                if (this.replaceStateKeys.length) {
                    this.replaceStateKeys.forEach(function (replaceKey) {
                        if (changed[replaceKey]) {
                            method = 'replaceState';
                        }
                    });
                }
                if (this.replaceStateOnceKeys.length) {
                    this.replaceStateOnceKeys.forEach(function (replaceOnceKey, index, thisArray) {
                        if (changed[replaceOnceKey]) {
                            method = 'replaceState';
                            thisArray.splice(index, 1);
                        }
                    });
                }
                window.history[method](null, null, bindingProxy.call('root') + path);
            },
            replaceStateOn: function () {
                canReflect.addValues(this.replaceStateKeys, canReflect.toArray(arguments));
            },
            replaceStateOnce: function () {
                canReflect.addValues(this.replaceStateOnceKeys, canReflect.toArray(arguments));
            },
            replaceStateOff: function () {
                canReflect.removeValues(this.replaceStateKeys, canReflect.toArray(arguments));
                canReflect.removeValues(this.replaceStateOnceKeys, canReflect.toArray(arguments));
            }
        });
        canReflect.assignSymbols(PushstateObservable.prototype, {
            'can.getValue': PushstateObservable.prototype.get,
            'can.setValue': PushstateObservable.prototype.set
        });
        module.exports = PushstateObservable;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can@5.31.0#es/can-route-pushstate*/
define('can@5.31.0#es/can-route-pushstate', [
    'exports',
    'can-route-pushstate'
], function (exports, _canRoutePushstate) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canRoutePushstate).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-param*/
define('can@5.31.0#es/can-param', [
    'exports',
    'can-param'
], function (exports, _canParam) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canParam).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-deparam*/
define('can@5.31.0#es/can-deparam', [
    'exports',
    'can-deparam'
], function (exports, _canDeparam) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canDeparam).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-assign*/
define('can@5.31.0#es/can-assign', [
    'exports',
    'can-assign'
], function (exports, _canAssign) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canAssign).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-define-lazy-value*/
define('can@5.31.0#es/can-define-lazy-value', [
    'exports',
    'can-define-lazy-value'
], function (exports, _canDefineLazyValue) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canDefineLazyValue).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-diff@1.4.5#deep/deep*/
define('can-diff@1.4.5#deep/deep', [
    'require',
    'exports',
    'module',
    '../map/map',
    '../list/list',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var diffMap = require('../map/map'), diffList = require('../list/list'), canReflect = require('can-reflect');
    function shouldCheckSet(patch, destVal, sourceVal) {
        return patch.type === 'set' && destVal && sourceVal && typeof destVal === 'object' && typeof sourceVal === 'object';
    }
    function makeIdentityFromMapSchema(typeSchema) {
        if (typeSchema.identity && typeSchema.identity.length) {
            return function identityCheck(a, b) {
                var aId = canReflect.getIdentity(a, typeSchema), bId = canReflect.getIdentity(b, typeSchema);
                return aId === bId;
            };
        }
    }
    function makeDiffListIdentityComparison(oldList, newList, parentKey, nestedPatches) {
        var listSchema = canReflect.getSchema(oldList), typeSchema, identityCheckFromSchema, oldListLength = canReflect.size(oldList);
        if (listSchema != null) {
            if (listSchema.values != null) {
                typeSchema = canReflect.getSchema(listSchema.values);
            }
        }
        if (typeSchema == null && oldListLength > 0) {
            typeSchema = canReflect.getSchema(canReflect.getKeyValue(oldList, 0));
        }
        if (typeSchema) {
            identityCheckFromSchema = makeIdentityFromMapSchema(typeSchema);
        }
        return function (a, b, aIndex) {
            if (canReflect.isPrimitive(a)) {
                return a === b;
            }
            if (canReflect.isPrimitive(b)) {
                return a === b;
            }
            if (identityCheckFromSchema) {
                if (identityCheckFromSchema(a, b)) {
                    var patches = diffDeep(a, b, parentKey ? parentKey + '.' + aIndex : '' + aIndex);
                    nestedPatches.push.apply(nestedPatches, patches);
                    return true;
                }
            }
            return diffDeep(a, b).length === 0;
        };
    }
    function diffDeep(dest, source, parentKey) {
        if (dest && canReflect.isMoreListLikeThanMapLike(dest)) {
            var nestedPatches = [], diffingIdentity = makeDiffListIdentityComparison(dest, source, parentKey, nestedPatches);
            var primaryPatches = diffList(dest, source, diffingIdentity).map(function (patch) {
                if (parentKey) {
                    patch.key = parentKey;
                }
                return patch;
            });
            return nestedPatches.concat(primaryPatches);
        } else {
            parentKey = parentKey ? parentKey + '.' : '';
            var patches = diffMap(dest, source);
            var finalPatches = [];
            patches.forEach(function (patch) {
                var key = patch.key;
                patch.key = parentKey + patch.key;
                var destVal = dest && canReflect.getKeyValue(dest, key), sourceVal = source && canReflect.getKeyValue(source, key);
                if (shouldCheckSet(patch, destVal, sourceVal)) {
                    var deepPatches = diffDeep(destVal, sourceVal, patch.key);
                    finalPatches.push.apply(finalPatches, deepPatches);
                } else {
                    finalPatches.push(patch);
                }
            });
            return finalPatches;
        }
    }
    module.exports = diffDeep;
});
/*can-diff@1.4.5#can-diff*/
define('can-diff@1.4.5#can-diff', [
    'require',
    'exports',
    'module',
    './deep/deep',
    './list/list',
    './map/map',
    './merge-deep/merge-deep',
    './patcher/patcher',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var deep = require('./deep/deep'), list = require('./list/list'), map = require('./map/map'), mergeDeep = require('./merge-deep/merge-deep'), Patcher = require('./patcher/patcher'), namespace = require('can-namespace');
    var diff = {
        deep: deep,
        list: list,
        map: map,
        mergeDeep: mergeDeep,
        Patcher: Patcher
    };
    module.exports = namespace.diff = diff;
});
/*can@5.31.0#es/can-diff*/
define('can@5.31.0#es/can-diff', [
    'exports',
    'can-diff'
], function (exports, _canDiff) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canDiff).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-globals*/
define('can@5.31.0#es/can-globals', [
    'exports',
    'can-globals'
], function (exports, _canGlobals) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canGlobals).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-key*/
define('can@5.31.0#es/can-key', [
    'exports',
    'can-key'
], function (exports, _canKey) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canKey).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-key-tree*/
define('can@5.31.0#es/can-key-tree', [
    'exports',
    'can-key-tree'
], function (exports, _canKeyTree) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canKeyTree).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-make-map@1.2.1#can-make-map*/
define('can-make-map@1.2.1#can-make-map', function (require, exports, module) {
    'use strict';
    function makeMap(str) {
        var obj = {}, items = str.split(',');
        items.forEach(function (name) {
            obj[name] = true;
        });
        return obj;
    }
    module.exports = makeMap;
});
/*can@5.31.0#es/can-make-map*/
define('can@5.31.0#es/can-make-map', [
    'exports',
    'can-make-map'
], function (exports, _canMakeMap) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canMakeMap).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-parse-uri*/
define('can@5.31.0#es/can-parse-uri', [
    'exports',
    'can-parse-uri'
], function (exports, _canParseUri) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canParseUri).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-queues*/
define('can@5.31.0#es/can-queues', [
    'exports',
    'can-queues'
], function (exports, _canQueues) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canQueues).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-string*/
define('can@5.31.0#es/can-string', [
    'exports',
    'can-string'
], function (exports, _canString) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canString).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-string-to-any*/
define('can@5.31.0#es/can-string-to-any', [
    'exports',
    'can-string-to-any'
], function (exports, _canStringToAny) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canStringToAny).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-ajax*/
define('can@5.31.0#es/can-ajax', [
    'exports',
    'can-ajax'
], function (exports, _canAjax) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canAjax).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-attribute-encoder*/
define('can@5.31.0#es/can-attribute-encoder', [
    'exports',
    'can-attribute-encoder'
], function (exports, _canAttributeEncoder) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canAttributeEncoder).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-child-nodes*/
define('can@5.31.0#es/can-child-nodes', [
    'exports',
    'can-child-nodes'
], function (exports, _canChildNodes) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canChildNodes).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-control*/
define('can@5.31.0#es/can-control', [
    'exports',
    'can-control'
], function (exports, _canControl) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canControl).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-dom-data*/
define('can@5.31.0#es/can-dom-data', [
    'exports',
    'can-dom-data'
], function (exports, _canDomData) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canDomData).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-dom-events@1.3.11#helpers/add-jquery-events*/
define('can-dom-events@1.3.11#helpers/add-jquery-events', [
    'require',
    'exports',
    'module',
    '../can-dom-events',
    'can-namespace'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var domEvents = require('../can-dom-events');
        var namespace = require('can-namespace');
        module.exports = namespace.addJQueryEvents = function addJQueryEvents(jQuery) {
            var jQueryEvents = jQuery.event.special;
            var removeEvents = [];
            for (var eventType in jQueryEvents) {
                if (!domEvents._eventRegistry.has(eventType)) {
                    var eventDefinition = {
                        defaultEventType: eventType,
                        addEventListener: function (target, eventType, handler) {
                            $(target).on(eventType, handler);
                        },
                        removeEventListener: function (target, eventType, handler) {
                            $(target).off(eventType, handler);
                        }
                    };
                    var removeEvent = domEvents.addEvent(eventDefinition);
                    removeEvents.push(removeEvent);
                }
            }
            return function removeJQueryEvents() {
                removeEvents.forEach(function (removeEvent) {
                    removeEvent();
                });
            };
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can@5.31.0#es/can-dom-events*/
define('can@5.31.0#es/can-dom-events', [
    'exports',
    'can-dom-events',
    'can-dom-events/helpers/add-jquery-events'
], function (exports, _canDomEvents, _addJqueryEvents) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canDomEvents).default;
        }
    });
    Object.defineProperty(exports, 'addJQueryEvents', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_addJqueryEvents).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-dom-mutate@1.3.9#events/events*/
define('can-dom-mutate@1.3.9#events/events', [
    'require',
    'exports',
    'module',
    '../can-dom-mutate',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var domMutate = require('../can-dom-mutate');
    var namespace = require('can-namespace');
    function makeMutationEvent(defaultEventType, subscription, bubbles) {
        var elementSubscriptions = new Map();
        return {
            _subscriptions: elementSubscriptions,
            defaultEventType: defaultEventType,
            addEventListener: function (target, eventType, handler) {
                var dispatch = this.dispatch;
                var data = elementSubscriptions.get(target);
                if (!data) {
                    data = {
                        removeListener: null,
                        listeners: new Set()
                    };
                    elementSubscriptions.set(target, data);
                }
                if (data.listeners.size === 0) {
                    data.removeListener = subscription(target, function (mutation) {
                        var eventData = { type: eventType };
                        for (var key in mutation) {
                            eventData[key] = mutation[key];
                        }
                        dispatch(target, eventData, bubbles !== false);
                    });
                }
                data.listeners.add(handler);
                target.addEventListener(eventType, handler);
            },
            removeEventListener: function (target, eventType, handler) {
                target.removeEventListener(eventType, handler);
                var data = elementSubscriptions.get(target);
                if (data) {
                    data.listeners['delete'](handler);
                    if (data.listeners.size === 0) {
                        data.removeListener();
                        elementSubscriptions['delete'](target);
                    }
                }
            }
        };
    }
    module.exports = namespace.domMutateDomEvents = {
        attributes: makeMutationEvent('attributes', domMutate.onNodeAttributeChange),
        inserted: makeMutationEvent('inserted', domMutate.onNodeInsertion, false),
        removed: makeMutationEvent('removed', domMutate.onNodeRemoval)
    };
});
/*can-dom-mutate@1.3.9#dom-events*/
define('can-dom-mutate@1.3.9#dom-events', [
    'require',
    'exports',
    'module',
    'can-namespace',
    './events/events'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var domMutateEvents = require('./events/events');
    module.exports = namespace.domMutateDomEvents = domMutateEvents;
});
/*can@5.31.0#es/can-dom-mutate*/
define('can@5.31.0#es/can-dom-mutate', [
    'exports',
    'can-dom-mutate',
    'can-dom-mutate/node',
    'can-dom-mutate/dom-events'
], function (exports, _canDomMutate, _node, _domEvents) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canDomMutate).default;
        }
    });
    Object.defineProperty(exports, 'domMutateNode', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_node).default;
        }
    });
    Object.defineProperty(exports, 'domMutateDomEvents', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_domEvents).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-fragment*/
define('can@5.31.0#es/can-fragment', [
    'exports',
    'can-fragment'
], function (exports, _canFragment) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canFragment).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-validate-interface*/
define('can@5.31.0#es/can-validate-interface', [
    'exports',
    'can-validate-interface'
], function (exports, _canValidateInterface) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canValidateInterface).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-data-types*/
define('can@5.31.0#es/can-data-types', [
    'exports',
    'can-data-types/maybe-boolean/maybe-boolean',
    'can-data-types/maybe-date/maybe-date',
    'can-data-types/maybe-number/maybe-number',
    'can-data-types/maybe-string/maybe-string'
], function (exports, _maybeBoolean, _maybeDate, _maybeNumber, _maybeString) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'MaybeBoolean', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_maybeBoolean).default;
        }
    });
    Object.defineProperty(exports, 'MaybeDate', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_maybeDate).default;
        }
    });
    Object.defineProperty(exports, 'MaybeNumber', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_maybeNumber).default;
        }
    });
    Object.defineProperty(exports, 'MaybeString', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_maybeString).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-namespace*/
define('can@5.31.0#es/can-namespace', [
    'exports',
    'can-namespace'
], function (exports, _canNamespace) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canNamespace).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-reflect*/
define('can@5.31.0#es/can-reflect', [
    'exports',
    'can-reflect'
], function (exports, _canReflect) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canReflect).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-reflect-dependencies*/
define('can@5.31.0#es/can-reflect-dependencies', [
    'exports',
    'can-reflect-dependencies'
], function (exports, _canReflectDependencies) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canReflectDependencies).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-reflect-promise*/
define('can@5.31.0#es/can-reflect-promise', [
    'exports',
    'can-reflect-promise'
], function (exports, _canReflectPromise) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canReflectPromise).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#core*/
define('can@5.31.0#core', [
    'exports',
    './es/can-define',
    './es/can-value',
    './es/can-observation',
    './es/can-observation-recorder',
    './es/can-simple-map',
    './es/can-bind',
    './es/can-event-queue',
    './es/can-simple-observable',
    './es/can-component',
    './es/can-stache',
    './es/can-stache-bindings',
    './es/can-stache-route-helpers',
    './es/can-view-callbacks',
    './es/can-view-live',
    './es/can-view-model',
    './es/can-view-nodelist',
    './es/can-view-parser',
    './es/can-view-scope',
    './es/can-view-target',
    './es/can-fixture',
    './es/can-query-logic',
    './es/can-realtime-rest-model',
    './es/can-rest-model',
    './es/can-connect',
    './es/can-local-store',
    './es/can-memory-store',
    './es/can-route',
    './es/can-route-hash',
    './es/can-route-pushstate',
    './es/can-param',
    './es/can-deparam',
    './es/can-assign',
    './es/can-define-lazy-value',
    './es/can-diff',
    './es/can-globals',
    './es/can-key',
    './es/can-key-tree',
    './es/can-make-map',
    './es/can-parse-uri',
    './es/can-queues',
    './es/can-string',
    './es/can-string-to-any',
    './es/can-ajax',
    './es/can-attribute-encoder',
    './es/can-child-nodes',
    './es/can-control',
    './es/can-dom-data',
    './es/can-dom-events',
    './es/can-dom-mutate',
    './es/can-fragment',
    './es/can-validate-interface',
    'can-cid',
    'can-construct',
    './es/can-data-types',
    './es/can-namespace',
    './es/can-reflect',
    './es/can-reflect-dependencies',
    './es/can-reflect-promise',
    './enable-can-debug'
], function (exports, _canDefine, _canValue, _canObservation, _canObservationRecorder, _canSimpleMap, _canBind, _canEventQueue, _canSimpleObservable, _canComponent, _canStache, _canStacheBindings, _canStacheRouteHelpers, _canViewCallbacks, _canViewLive, _canViewModel, _canViewNodelist, _canViewParser, _canViewScope, _canViewTarget, _canFixture, _canQueryLogic, _canRealtimeRestModel, _canRestModel, _canConnect, _canLocalStore, _canMemoryStore, _canRoute, _canRouteHash, _canRoutePushstate, _canParam, _canDeparam, _canAssign, _canDefineLazyValue, _canDiff, _canGlobals, _canKey, _canKeyTree, _canMakeMap, _canParseUri, _canQueues, _canString, _canStringToAny, _canAjax, _canAttributeEncoder, _canChildNodes, _canControl, _canDomData, _canDomEvents, _canDomMutate, _canFragment, _canValidateInterface, _canCid, _canConstruct, _canDataTypes, _canNamespace, _canReflect, _canReflectDependencies, _canReflectPromise) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.reflectPromise = exports.reflectDependencies = exports.Reflect = exports.can = exports.default = exports.MaybeString = exports.MaybeNumber = exports.MaybeDate = exports.MaybeBoolean = exports.Construct = exports.cid = exports.makeInterfaceValidator = exports.fragment = exports.domMutateDomEvents = exports.domMutateNode = exports.domMutate = exports.addJQueryEvents = exports.domEvents = exports.domData = exports.Control = exports.childNodes = exports.attributeEncoder = exports.ajax = exports.stringToAny = exports.string = exports.queues = exports.parseURI = exports.makeMap = exports.KeyTree = exports.key = exports.globals = exports.diff = exports.defineLazyValue = exports.assign = exports.deparam = exports.param = exports.RoutePushstate = exports.RouteHash = exports.route = exports.memoryStore = exports.localStore = exports.connect = exports.restModel = exports.realtimeRestModel = exports.QueryLogic = exports.fixture = exports.target = exports.Scope = exports.viewParser = exports.nodeList = exports.viewModel = exports.viewLive = exports.viewCallbacks = exports.stacheRouteHelpers = exports.stacheBindings = exports.stache = exports.Component = exports.SimpleObservable = exports.valueEventBindings = exports.mapEventBindings = exports.bind = exports.SimpleMap = exports.ObservationRecorder = exports.Observation = exports.value = exports.DefineList = exports.DefineMap = exports.define = undefined;
    Object.defineProperty(exports, 'define', {
        enumerable: true,
        get: function () {
            return _canDefine.define;
        }
    });
    Object.defineProperty(exports, 'DefineMap', {
        enumerable: true,
        get: function () {
            return _canDefine.DefineMap;
        }
    });
    Object.defineProperty(exports, 'DefineList', {
        enumerable: true,
        get: function () {
            return _canDefine.DefineList;
        }
    });
    Object.defineProperty(exports, 'value', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canValue).default;
        }
    });
    Object.defineProperty(exports, 'Observation', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canObservation).default;
        }
    });
    Object.defineProperty(exports, 'ObservationRecorder', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canObservationRecorder).default;
        }
    });
    Object.defineProperty(exports, 'SimpleMap', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canSimpleMap).default;
        }
    });
    Object.defineProperty(exports, 'bind', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canBind).default;
        }
    });
    Object.defineProperty(exports, 'mapEventBindings', {
        enumerable: true,
        get: function () {
            return _canEventQueue.mapEventBindings;
        }
    });
    Object.defineProperty(exports, 'valueEventBindings', {
        enumerable: true,
        get: function () {
            return _canEventQueue.valueEventBindings;
        }
    });
    Object.defineProperty(exports, 'SimpleObservable', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canSimpleObservable).default;
        }
    });
    Object.defineProperty(exports, 'Component', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canComponent).default;
        }
    });
    Object.defineProperty(exports, 'stache', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canStache).default;
        }
    });
    Object.defineProperty(exports, 'stacheBindings', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canStacheBindings).default;
        }
    });
    Object.defineProperty(exports, 'stacheRouteHelpers', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canStacheRouteHelpers).default;
        }
    });
    Object.defineProperty(exports, 'viewCallbacks', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canViewCallbacks).default;
        }
    });
    Object.defineProperty(exports, 'viewLive', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canViewLive).default;
        }
    });
    Object.defineProperty(exports, 'viewModel', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canViewModel).default;
        }
    });
    Object.defineProperty(exports, 'nodeList', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canViewNodelist).default;
        }
    });
    Object.defineProperty(exports, 'viewParser', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canViewParser).default;
        }
    });
    Object.defineProperty(exports, 'Scope', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canViewScope).default;
        }
    });
    Object.defineProperty(exports, 'target', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canViewTarget).default;
        }
    });
    Object.defineProperty(exports, 'fixture', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canFixture).default;
        }
    });
    Object.defineProperty(exports, 'QueryLogic', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canQueryLogic).default;
        }
    });
    Object.defineProperty(exports, 'realtimeRestModel', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canRealtimeRestModel).default;
        }
    });
    Object.defineProperty(exports, 'restModel', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canRestModel).default;
        }
    });
    Object.defineProperty(exports, 'connect', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canConnect).default;
        }
    });
    Object.defineProperty(exports, 'localStore', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canLocalStore).default;
        }
    });
    Object.defineProperty(exports, 'memoryStore', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canMemoryStore).default;
        }
    });
    Object.defineProperty(exports, 'route', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canRoute).default;
        }
    });
    Object.defineProperty(exports, 'RouteHash', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canRouteHash).default;
        }
    });
    Object.defineProperty(exports, 'RoutePushstate', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canRoutePushstate).default;
        }
    });
    Object.defineProperty(exports, 'param', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canParam).default;
        }
    });
    Object.defineProperty(exports, 'deparam', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canDeparam).default;
        }
    });
    Object.defineProperty(exports, 'assign', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canAssign).default;
        }
    });
    Object.defineProperty(exports, 'defineLazyValue', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canDefineLazyValue).default;
        }
    });
    Object.defineProperty(exports, 'diff', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canDiff).default;
        }
    });
    Object.defineProperty(exports, 'globals', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canGlobals).default;
        }
    });
    Object.defineProperty(exports, 'key', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canKey).default;
        }
    });
    Object.defineProperty(exports, 'KeyTree', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canKeyTree).default;
        }
    });
    Object.defineProperty(exports, 'makeMap', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canMakeMap).default;
        }
    });
    Object.defineProperty(exports, 'parseURI', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canParseUri).default;
        }
    });
    Object.defineProperty(exports, 'queues', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canQueues).default;
        }
    });
    Object.defineProperty(exports, 'string', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canString).default;
        }
    });
    Object.defineProperty(exports, 'stringToAny', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canStringToAny).default;
        }
    });
    Object.defineProperty(exports, 'ajax', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canAjax).default;
        }
    });
    Object.defineProperty(exports, 'attributeEncoder', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canAttributeEncoder).default;
        }
    });
    Object.defineProperty(exports, 'childNodes', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canChildNodes).default;
        }
    });
    Object.defineProperty(exports, 'Control', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canControl).default;
        }
    });
    Object.defineProperty(exports, 'domData', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canDomData).default;
        }
    });
    Object.defineProperty(exports, 'domEvents', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canDomEvents).default;
        }
    });
    Object.defineProperty(exports, 'addJQueryEvents', {
        enumerable: true,
        get: function () {
            return _canDomEvents.addJQueryEvents;
        }
    });
    Object.defineProperty(exports, 'domMutate', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canDomMutate).default;
        }
    });
    Object.defineProperty(exports, 'domMutateNode', {
        enumerable: true,
        get: function () {
            return _canDomMutate.domMutateNode;
        }
    });
    Object.defineProperty(exports, 'domMutateDomEvents', {
        enumerable: true,
        get: function () {
            return _canDomMutate.domMutateDomEvents;
        }
    });
    Object.defineProperty(exports, 'fragment', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canFragment).default;
        }
    });
    Object.defineProperty(exports, 'makeInterfaceValidator', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canValidateInterface).default;
        }
    });
    Object.defineProperty(exports, 'cid', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canCid).default;
        }
    });
    Object.defineProperty(exports, 'Construct', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canConstruct).default;
        }
    });
    Object.defineProperty(exports, 'MaybeBoolean', {
        enumerable: true,
        get: function () {
            return _canDataTypes.MaybeBoolean;
        }
    });
    Object.defineProperty(exports, 'MaybeDate', {
        enumerable: true,
        get: function () {
            return _canDataTypes.MaybeDate;
        }
    });
    Object.defineProperty(exports, 'MaybeNumber', {
        enumerable: true,
        get: function () {
            return _canDataTypes.MaybeNumber;
        }
    });
    Object.defineProperty(exports, 'MaybeString', {
        enumerable: true,
        get: function () {
            return _canDataTypes.MaybeString;
        }
    });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canNamespace).default;
        }
    });
    Object.defineProperty(exports, 'can', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canNamespace).default;
        }
    });
    Object.defineProperty(exports, 'Reflect', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canReflect).default;
        }
    });
    Object.defineProperty(exports, 'reflectDependencies', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canReflectDependencies).default;
        }
    });
    Object.defineProperty(exports, 'reflectPromise', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canReflectPromise).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-define-backup@2.1.2#can-define-backup*/
define('can-define-backup@2.1.2#can-define-backup', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-simple-observable',
    'can-diff/deep/deep',
    'can-diff/map/map'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var SimpleObservable = require('can-simple-observable');
    var diffDeep = require('can-diff/deep/deep');
    var diffMap = require('can-diff/map/map');
    var flatProps = function (a, cur) {
        var obj = {};
        for (var prop in a) {
            if (typeof a[prop] !== 'object' || a[prop] === null || a[prop] instanceof Date) {
                obj[prop] = a[prop];
            } else {
                obj[prop] = cur[prop];
            }
        }
        return obj;
    };
    var assignNonEnumerable = function (base, props) {
        for (var prop in props) {
            Object.defineProperty(base, prop, {
                enumerable: false,
                configurable: true,
                writable: true,
                value: props[prop]
            });
        }
    };
    var observables = new WeakMap();
    function getBackup(map) {
        var obs = observables.get(map);
        if (!obs) {
            obs = new SimpleObservable();
            observables.set(map, obs);
        }
        return obs;
    }
    function defineBackup(Map) {
        assignNonEnumerable(Map.prototype, {
            backup: function () {
                var store = getBackup(this);
                canReflect.setValue(store, this.serialize());
                return this;
            },
            isDirty: function (checkAssociations) {
                var store = getBackup(this);
                var backupStore = canReflect.getValue(store);
                if (!backupStore) {
                    return false;
                }
                var currentValue = this.serialize();
                var patches;
                if (!!checkAssociations) {
                    patches = diffDeep(currentValue, backupStore);
                } else {
                    patches = diffMap(currentValue, backupStore).filter(function (patch) {
                        if (patch.type !== 'set') {
                            return true;
                        } else {
                            var curVal = currentValue[patch.key], backupVal = backupStore[patch.key];
                            var twoObjectsCompared = curVal && backupVal && typeof curVal === 'object' && typeof backupVal === 'object';
                            return !twoObjectsCompared;
                        }
                    });
                }
                return patches.length;
            },
            restore: function (restoreAssociations) {
                var store = getBackup(this);
                var curVal = canReflect.getValue(store);
                var props = restoreAssociations ? curVal : flatProps(curVal, this);
                if (this.isDirty(restoreAssociations)) {
                    for (var prop in props) {
                        this[prop] = props[prop];
                    }
                }
                return this;
            }
        });
        return Map;
    }
    module.exports = exports = defineBackup;
});
/*can@5.31.0#es/can-define-backup*/
define('can@5.31.0#es/can-define-backup', [
    'exports',
    'can-define-backup'
], function (exports, _canDefineBackup) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canDefineBackup).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-define-stream@1.1.1#can-define-stream*/
define('can-define-stream@1.1.1#can-define-stream', [
    'require',
    'exports',
    'module',
    'can-define',
    'can-assign',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var define = require('can-define');
    var assign = require('can-assign');
    var canReflect = require('can-reflect');
    module.exports = function (canStream) {
        return function (DefineMapType) {
            [
                'toStream',
                'toStreamFromProperty',
                'toStreamFromEvent'
            ].forEach(function (name) {
                DefineMapType.prototype[name] = function () {
                    return canStream[name].apply(canStream, [this].concat([].slice.call(arguments)));
                };
            });
            DefineMapType.prototype.stream = DefineMapType.prototype.toStream;
            var definitions = DefineMapType.prototype._define.definitions, dataInitializers = DefineMapType.prototype._define.dataInitializers, computedInitializers = DefineMapType.prototype._define.computedInitializers;
            canReflect.eachKey(definitions, function (definition, property) {
                var streamDefinition = definition.stream;
                if (streamDefinition) {
                    var newDefinition = assign({
                        default: function () {
                            return canStream.toCompute(streamDefinition, this);
                        }
                    }, define.types.compute);
                    define.property(DefineMapType.prototype, property, newDefinition, dataInitializers, computedInitializers);
                }
            });
        };
    };
});
/*can@5.31.0#es/can-define-stream*/
define('can@5.31.0#es/can-define-stream', [
    'exports',
    'can-define-stream'
], function (exports, _canDefineStream) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canDefineStream).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*kefir@3.8.6#dist/kefir*/
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define('kefir@3.8.6#dist/kefir', ['exports'], factory) : factory(global.Kefir = global.Kefir || {});
}(this, function (exports) {
    'use strict';
    function createObj(proto) {
        var F = function () {
        };
        F.prototype = proto;
        return new F();
    }
    function extend(target) {
        var length = arguments.length, i = void 0, prop = void 0;
        for (i = 1; i < length; i++) {
            for (prop in arguments[i]) {
                target[prop] = arguments[i][prop];
            }
        }
        return target;
    }
    function inherit(Child, Parent) {
        var length = arguments.length, i = void 0;
        Child.prototype = createObj(Parent.prototype);
        Child.prototype.constructor = Child;
        for (i = 2; i < length; i++) {
            extend(Child.prototype, arguments[i]);
        }
        return Child;
    }
    var NOTHING = ['<nothing>'];
    var END = 'end';
    var VALUE = 'value';
    var ERROR = 'error';
    var ANY = 'any';
    function concat(a, b) {
        var result = void 0, length = void 0, i = void 0, j = void 0;
        if (a.length === 0) {
            return b;
        }
        if (b.length === 0) {
            return a;
        }
        j = 0;
        result = new Array(a.length + b.length);
        length = a.length;
        for (i = 0; i < length; i++, j++) {
            result[j] = a[i];
        }
        length = b.length;
        for (i = 0; i < length; i++, j++) {
            result[j] = b[i];
        }
        return result;
    }
    function find(arr, value) {
        var length = arr.length, i = void 0;
        for (i = 0; i < length; i++) {
            if (arr[i] === value) {
                return i;
            }
        }
        return -1;
    }
    function findByPred(arr, pred) {
        var length = arr.length, i = void 0;
        for (i = 0; i < length; i++) {
            if (pred(arr[i])) {
                return i;
            }
        }
        return -1;
    }
    function cloneArray(input) {
        var length = input.length, result = new Array(length), i = void 0;
        for (i = 0; i < length; i++) {
            result[i] = input[i];
        }
        return result;
    }
    function remove(input, index) {
        var length = input.length, result = void 0, i = void 0, j = void 0;
        if (index >= 0 && index < length) {
            if (length === 1) {
                return [];
            } else {
                result = new Array(length - 1);
                for (i = 0, j = 0; i < length; i++) {
                    if (i !== index) {
                        result[j] = input[i];
                        j++;
                    }
                }
                return result;
            }
        } else {
            return input;
        }
    }
    function map(input, fn) {
        var length = input.length, result = new Array(length), i = void 0;
        for (i = 0; i < length; i++) {
            result[i] = fn(input[i]);
        }
        return result;
    }
    function forEach(arr, fn) {
        var length = arr.length, i = void 0;
        for (i = 0; i < length; i++) {
            fn(arr[i]);
        }
    }
    function fillArray(arr, value) {
        var length = arr.length, i = void 0;
        for (i = 0; i < length; i++) {
            arr[i] = value;
        }
    }
    function contains(arr, value) {
        return find(arr, value) !== -1;
    }
    function slide(cur, next, max) {
        var length = Math.min(max, cur.length + 1), offset = cur.length - length + 1, result = new Array(length), i = void 0;
        for (i = offset; i < length; i++) {
            result[i - offset] = cur[i];
        }
        result[length - 1] = next;
        return result;
    }
    function callSubscriber(type, fn, event) {
        if (type === ANY) {
            fn(event);
        } else if (type === event.type) {
            if (type === VALUE || type === ERROR) {
                fn(event.value);
            } else {
                fn();
            }
        }
    }
    function Dispatcher() {
        this._items = [];
        this._spies = [];
        this._inLoop = 0;
        this._removedItems = null;
    }
    extend(Dispatcher.prototype, {
        add: function (type, fn) {
            this._items = concat(this._items, [{
                    type: type,
                    fn: fn
                }]);
            return this._items.length;
        },
        remove: function (type, fn) {
            var index = findByPred(this._items, function (x) {
                return x.type === type && x.fn === fn;
            });
            if (this._inLoop !== 0 && index !== -1) {
                if (this._removedItems === null) {
                    this._removedItems = [];
                }
                this._removedItems.push(this._items[index]);
            }
            this._items = remove(this._items, index);
            return this._items.length;
        },
        addSpy: function (fn) {
            this._spies = concat(this._spies, [fn]);
            return this._spies.length;
        },
        removeSpy: function (fn) {
            this._spies = remove(this._spies, this._spies.indexOf(fn));
            return this._spies.length;
        },
        dispatch: function (event) {
            this._inLoop++;
            for (var i = 0, spies = this._spies; this._spies !== null && i < spies.length; i++) {
                spies[i](event);
            }
            for (var _i = 0, items = this._items; _i < items.length; _i++) {
                if (this._items === null) {
                    break;
                }
                if (this._removedItems !== null && contains(this._removedItems, items[_i])) {
                    continue;
                }
                callSubscriber(items[_i].type, items[_i].fn, event);
            }
            this._inLoop--;
            if (this._inLoop === 0) {
                this._removedItems = null;
            }
        },
        cleanup: function () {
            this._items = null;
            this._spies = null;
        }
    });
    function Observable() {
        this._dispatcher = new Dispatcher();
        this._active = false;
        this._alive = true;
        this._activating = false;
        this._logHandlers = null;
        this._spyHandlers = null;
    }
    extend(Observable.prototype, {
        _name: 'observable',
        _onActivation: function () {
        },
        _onDeactivation: function () {
        },
        _setActive: function (active) {
            if (this._active !== active) {
                this._active = active;
                if (active) {
                    this._activating = true;
                    this._onActivation();
                    this._activating = false;
                } else {
                    this._onDeactivation();
                }
            }
        },
        _clear: function () {
            this._setActive(false);
            this._dispatcher.cleanup();
            this._dispatcher = null;
            this._logHandlers = null;
        },
        _emit: function (type, x) {
            switch (type) {
            case VALUE:
                return this._emitValue(x);
            case ERROR:
                return this._emitError(x);
            case END:
                return this._emitEnd();
            }
        },
        _emitValue: function (value) {
            if (this._alive) {
                this._dispatcher.dispatch({
                    type: VALUE,
                    value: value
                });
            }
        },
        _emitError: function (value) {
            if (this._alive) {
                this._dispatcher.dispatch({
                    type: ERROR,
                    value: value
                });
            }
        },
        _emitEnd: function () {
            if (this._alive) {
                this._alive = false;
                this._dispatcher.dispatch({ type: END });
                this._clear();
            }
        },
        _on: function (type, fn) {
            if (this._alive) {
                this._dispatcher.add(type, fn);
                this._setActive(true);
            } else {
                callSubscriber(type, fn, { type: END });
            }
            return this;
        },
        _off: function (type, fn) {
            if (this._alive) {
                var count = this._dispatcher.remove(type, fn);
                if (count === 0) {
                    this._setActive(false);
                }
            }
            return this;
        },
        onValue: function (fn) {
            return this._on(VALUE, fn);
        },
        onError: function (fn) {
            return this._on(ERROR, fn);
        },
        onEnd: function (fn) {
            return this._on(END, fn);
        },
        onAny: function (fn) {
            return this._on(ANY, fn);
        },
        offValue: function (fn) {
            return this._off(VALUE, fn);
        },
        offError: function (fn) {
            return this._off(ERROR, fn);
        },
        offEnd: function (fn) {
            return this._off(END, fn);
        },
        offAny: function (fn) {
            return this._off(ANY, fn);
        },
        observe: function (observerOrOnValue, onError, onEnd) {
            var _this = this;
            var closed = false;
            var observer = !observerOrOnValue || typeof observerOrOnValue === 'function' ? {
                value: observerOrOnValue,
                error: onError,
                end: onEnd
            } : observerOrOnValue;
            var handler = function (event) {
                if (event.type === END) {
                    closed = true;
                }
                if (event.type === VALUE && observer.value) {
                    observer.value(event.value);
                } else if (event.type === ERROR && observer.error) {
                    observer.error(event.value);
                } else if (event.type === END && observer.end) {
                    observer.end(event.value);
                }
            };
            this.onAny(handler);
            return {
                unsubscribe: function () {
                    if (!closed) {
                        _this.offAny(handler);
                        closed = true;
                    }
                },
                get closed() {
                    return closed;
                }
            };
        },
        _ofSameType: function (A, B) {
            return A.prototype.getType() === this.getType() ? A : B;
        },
        setName: function (sourceObs, selfName) {
            this._name = selfName ? sourceObs._name + '.' + selfName : sourceObs;
            return this;
        },
        log: function () {
            var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.toString();
            var isCurrent = void 0;
            var handler = function (event) {
                var type = '<' + event.type + (isCurrent ? ':current' : '') + '>';
                if (event.type === END) {
                    console.log(name, type);
                } else {
                    console.log(name, type, event.value);
                }
            };
            if (this._alive) {
                if (!this._logHandlers) {
                    this._logHandlers = [];
                }
                this._logHandlers.push({
                    name: name,
                    handler: handler
                });
            }
            isCurrent = true;
            this.onAny(handler);
            isCurrent = false;
            return this;
        },
        offLog: function () {
            var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.toString();
            if (this._logHandlers) {
                var handlerIndex = findByPred(this._logHandlers, function (obj) {
                    return obj.name === name;
                });
                if (handlerIndex !== -1) {
                    this.offAny(this._logHandlers[handlerIndex].handler);
                    this._logHandlers.splice(handlerIndex, 1);
                }
            }
            return this;
        },
        spy: function () {
            var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.toString();
            var handler = function (event) {
                var type = '<' + event.type + '>';
                if (event.type === END) {
                    console.log(name, type);
                } else {
                    console.log(name, type, event.value);
                }
            };
            if (this._alive) {
                if (!this._spyHandlers) {
                    this._spyHandlers = [];
                }
                this._spyHandlers.push({
                    name: name,
                    handler: handler
                });
                this._dispatcher.addSpy(handler);
            }
            return this;
        },
        offSpy: function () {
            var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.toString();
            if (this._spyHandlers) {
                var handlerIndex = findByPred(this._spyHandlers, function (obj) {
                    return obj.name === name;
                });
                if (handlerIndex !== -1) {
                    this._dispatcher.removeSpy(this._spyHandlers[handlerIndex].handler);
                    this._spyHandlers.splice(handlerIndex, 1);
                }
            }
            return this;
        }
    });
    Observable.prototype.toString = function () {
        return '[' + this._name + ']';
    };
    function Stream() {
        Observable.call(this);
    }
    inherit(Stream, Observable, {
        _name: 'stream',
        getType: function () {
            return 'stream';
        }
    });
    function Property() {
        Observable.call(this);
        this._currentEvent = null;
    }
    inherit(Property, Observable, {
        _name: 'property',
        _emitValue: function (value) {
            if (this._alive) {
                this._currentEvent = {
                    type: VALUE,
                    value: value
                };
                if (!this._activating) {
                    this._dispatcher.dispatch({
                        type: VALUE,
                        value: value
                    });
                }
            }
        },
        _emitError: function (value) {
            if (this._alive) {
                this._currentEvent = {
                    type: ERROR,
                    value: value
                };
                if (!this._activating) {
                    this._dispatcher.dispatch({
                        type: ERROR,
                        value: value
                    });
                }
            }
        },
        _emitEnd: function () {
            if (this._alive) {
                this._alive = false;
                if (!this._activating) {
                    this._dispatcher.dispatch({ type: END });
                }
                this._clear();
            }
        },
        _on: function (type, fn) {
            if (this._alive) {
                this._dispatcher.add(type, fn);
                this._setActive(true);
            }
            if (this._currentEvent !== null) {
                callSubscriber(type, fn, this._currentEvent);
            }
            if (!this._alive) {
                callSubscriber(type, fn, { type: END });
            }
            return this;
        },
        getType: function () {
            return 'property';
        }
    });
    var neverS = new Stream();
    neverS._emitEnd();
    neverS._name = 'never';
    function never() {
        return neverS;
    }
    function timeBased(mixin) {
        function AnonymousStream(wait, options) {
            var _this = this;
            Stream.call(this);
            this._wait = wait;
            this._intervalId = null;
            this._$onTick = function () {
                return _this._onTick();
            };
            this._init(options);
        }
        inherit(AnonymousStream, Stream, {
            _init: function () {
            },
            _free: function () {
            },
            _onTick: function () {
            },
            _onActivation: function () {
                this._intervalId = setInterval(this._$onTick, this._wait);
            },
            _onDeactivation: function () {
                if (this._intervalId !== null) {
                    clearInterval(this._intervalId);
                    this._intervalId = null;
                }
            },
            _clear: function () {
                Stream.prototype._clear.call(this);
                this._$onTick = null;
                this._free();
            }
        }, mixin);
        return AnonymousStream;
    }
    var S = timeBased({
        _name: 'later',
        _init: function (_ref) {
            var x = _ref.x;
            this._x = x;
        },
        _free: function () {
            this._x = null;
        },
        _onTick: function () {
            this._emitValue(this._x);
            this._emitEnd();
        }
    });
    function later(wait, x) {
        return new S(wait, { x: x });
    }
    var S$1 = timeBased({
        _name: 'interval',
        _init: function (_ref) {
            var x = _ref.x;
            this._x = x;
        },
        _free: function () {
            this._x = null;
        },
        _onTick: function () {
            this._emitValue(this._x);
        }
    });
    function interval(wait, x) {
        return new S$1(wait, { x: x });
    }
    var S$2 = timeBased({
        _name: 'sequentially',
        _init: function (_ref) {
            var xs = _ref.xs;
            this._xs = cloneArray(xs);
        },
        _free: function () {
            this._xs = null;
        },
        _onTick: function () {
            if (this._xs.length === 1) {
                this._emitValue(this._xs[0]);
                this._emitEnd();
            } else {
                this._emitValue(this._xs.shift());
            }
        }
    });
    function sequentially(wait, xs) {
        return xs.length === 0 ? never() : new S$2(wait, { xs: xs });
    }
    var S$3 = timeBased({
        _name: 'fromPoll',
        _init: function (_ref) {
            var fn = _ref.fn;
            this._fn = fn;
        },
        _free: function () {
            this._fn = null;
        },
        _onTick: function () {
            var fn = this._fn;
            this._emitValue(fn());
        }
    });
    function fromPoll(wait, fn) {
        return new S$3(wait, { fn: fn });
    }
    function emitter(obs) {
        function value(x) {
            obs._emitValue(x);
            return obs._active;
        }
        function error(x) {
            obs._emitError(x);
            return obs._active;
        }
        function end() {
            obs._emitEnd();
            return obs._active;
        }
        function event(e) {
            obs._emit(e.type, e.value);
            return obs._active;
        }
        return {
            value: value,
            error: error,
            end: end,
            event: event,
            emit: value,
            emitEvent: event
        };
    }
    var S$4 = timeBased({
        _name: 'withInterval',
        _init: function (_ref) {
            var fn = _ref.fn;
            this._fn = fn;
            this._emitter = emitter(this);
        },
        _free: function () {
            this._fn = null;
            this._emitter = null;
        },
        _onTick: function () {
            var fn = this._fn;
            fn(this._emitter);
        }
    });
    function withInterval(wait, fn) {
        return new S$4(wait, { fn: fn });
    }
    function S$5(fn) {
        Stream.call(this);
        this._fn = fn;
        this._unsubscribe = null;
    }
    inherit(S$5, Stream, {
        _name: 'stream',
        _onActivation: function () {
            var fn = this._fn;
            var unsubscribe = fn(emitter(this));
            this._unsubscribe = typeof unsubscribe === 'function' ? unsubscribe : null;
            if (!this._active) {
                this._callUnsubscribe();
            }
        },
        _callUnsubscribe: function () {
            if (this._unsubscribe !== null) {
                this._unsubscribe();
                this._unsubscribe = null;
            }
        },
        _onDeactivation: function () {
            this._callUnsubscribe();
        },
        _clear: function () {
            Stream.prototype._clear.call(this);
            this._fn = null;
        }
    });
    function stream(fn) {
        return new S$5(fn);
    }
    function fromCallback(callbackConsumer) {
        var called = false;
        return stream(function (emitter) {
            if (!called) {
                callbackConsumer(function (x) {
                    emitter.emit(x);
                    emitter.end();
                });
                called = true;
            }
        }).setName('fromCallback');
    }
    function fromNodeCallback(callbackConsumer) {
        var called = false;
        return stream(function (emitter) {
            if (!called) {
                callbackConsumer(function (error, x) {
                    if (error) {
                        emitter.error(error);
                    } else {
                        emitter.emit(x);
                    }
                    emitter.end();
                });
                called = true;
            }
        }).setName('fromNodeCallback');
    }
    function spread(fn, length) {
        switch (length) {
        case 0:
            return function () {
                return fn();
            };
        case 1:
            return function (a) {
                return fn(a[0]);
            };
        case 2:
            return function (a) {
                return fn(a[0], a[1]);
            };
        case 3:
            return function (a) {
                return fn(a[0], a[1], a[2]);
            };
        case 4:
            return function (a) {
                return fn(a[0], a[1], a[2], a[3]);
            };
        default:
            return function (a) {
                return fn.apply(null, a);
            };
        }
    }
    function apply(fn, c, a) {
        var aLength = a ? a.length : 0;
        if (c == null) {
            switch (aLength) {
            case 0:
                return fn();
            case 1:
                return fn(a[0]);
            case 2:
                return fn(a[0], a[1]);
            case 3:
                return fn(a[0], a[1], a[2]);
            case 4:
                return fn(a[0], a[1], a[2], a[3]);
            default:
                return fn.apply(null, a);
            }
        } else {
            switch (aLength) {
            case 0:
                return fn.call(c);
            default:
                return fn.apply(c, a);
            }
        }
    }
    function fromSubUnsub(sub, unsub, transformer) {
        return stream(function (emitter) {
            var handler = transformer ? function () {
                emitter.emit(apply(transformer, this, arguments));
            } : function (x) {
                emitter.emit(x);
            };
            sub(handler);
            return function () {
                return unsub(handler);
            };
        }).setName('fromSubUnsub');
    }
    var pairs = [
        [
            'addEventListener',
            'removeEventListener'
        ],
        [
            'addListener',
            'removeListener'
        ],
        [
            'on',
            'off'
        ]
    ];
    function fromEvents(target, eventName, transformer) {
        var sub = void 0, unsub = void 0;
        for (var i = 0; i < pairs.length; i++) {
            if (typeof target[pairs[i][0]] === 'function' && typeof target[pairs[i][1]] === 'function') {
                sub = pairs[i][0];
                unsub = pairs[i][1];
                break;
            }
        }
        if (sub === undefined) {
            throw new Error('target don\'t support any of ' + 'addEventListener/removeEventListener, addListener/removeListener, on/off method pair');
        }
        return fromSubUnsub(function (handler) {
            return target[sub](eventName, handler);
        }, function (handler) {
            return target[unsub](eventName, handler);
        }, transformer).setName('fromEvents');
    }
    function P(value) {
        this._currentEvent = {
            type: 'value',
            value: value,
            current: true
        };
    }
    inherit(P, Property, {
        _name: 'constant',
        _active: false,
        _activating: false,
        _alive: false,
        _dispatcher: null,
        _logHandlers: null
    });
    function constant(x) {
        return new P(x);
    }
    function P$1(value) {
        this._currentEvent = {
            type: 'error',
            value: value,
            current: true
        };
    }
    inherit(P$1, Property, {
        _name: 'constantError',
        _active: false,
        _activating: false,
        _alive: false,
        _dispatcher: null,
        _logHandlers: null
    });
    function constantError(x) {
        return new P$1(x);
    }
    function createConstructor(BaseClass, name) {
        return function AnonymousObservable(source, options) {
            var _this = this;
            BaseClass.call(this);
            this._source = source;
            this._name = source._name + '.' + name;
            this._init(options);
            this._$handleAny = function (event) {
                return _this._handleAny(event);
            };
        };
    }
    function createClassMethods(BaseClass) {
        return {
            _init: function () {
            },
            _free: function () {
            },
            _handleValue: function (x) {
                this._emitValue(x);
            },
            _handleError: function (x) {
                this._emitError(x);
            },
            _handleEnd: function () {
                this._emitEnd();
            },
            _handleAny: function (event) {
                switch (event.type) {
                case VALUE:
                    return this._handleValue(event.value);
                case ERROR:
                    return this._handleError(event.value);
                case END:
                    return this._handleEnd();
                }
            },
            _onActivation: function () {
                this._source.onAny(this._$handleAny);
            },
            _onDeactivation: function () {
                this._source.offAny(this._$handleAny);
            },
            _clear: function () {
                BaseClass.prototype._clear.call(this);
                this._source = null;
                this._$handleAny = null;
                this._free();
            }
        };
    }
    function createStream(name, mixin) {
        var S = createConstructor(Stream, name);
        inherit(S, Stream, createClassMethods(Stream), mixin);
        return S;
    }
    function createProperty(name, mixin) {
        var P = createConstructor(Property, name);
        inherit(P, Property, createClassMethods(Property), mixin);
        return P;
    }
    var P$2 = createProperty('toProperty', {
        _init: function (_ref) {
            var fn = _ref.fn;
            this._getInitialCurrent = fn;
        },
        _onActivation: function () {
            if (this._getInitialCurrent !== null) {
                var getInitial = this._getInitialCurrent;
                this._emitValue(getInitial());
            }
            this._source.onAny(this._$handleAny);
        }
    });
    function toProperty(obs) {
        var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        if (fn !== null && typeof fn !== 'function') {
            throw new Error('You should call toProperty() with a function or no arguments.');
        }
        return new P$2(obs, { fn: fn });
    }
    var S$6 = createStream('changes', {
        _handleValue: function (x) {
            if (!this._activating) {
                this._emitValue(x);
            }
        },
        _handleError: function (x) {
            if (!this._activating) {
                this._emitError(x);
            }
        }
    });
    function changes(obs) {
        return new S$6(obs);
    }
    function fromPromise(promise) {
        var called = false;
        var result = stream(function (emitter) {
            if (!called) {
                var onValue = function (x) {
                    emitter.emit(x);
                    emitter.end();
                };
                var onError = function (x) {
                    emitter.error(x);
                    emitter.end();
                };
                var _promise = promise.then(onValue, onError);
                if (_promise && typeof _promise.done === 'function') {
                    _promise.done();
                }
                called = true;
            }
        });
        return toProperty(result, null).setName('fromPromise');
    }
    function getGlodalPromise() {
        if (typeof Promise === 'function') {
            return Promise;
        } else {
            throw new Error('There isn\'t default Promise, use shim or parameter');
        }
    }
    var toPromise = function (obs) {
        var Promise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getGlodalPromise();
        var last = null;
        return new Promise(function (resolve, reject) {
            obs.onAny(function (event) {
                if (event.type === END && last !== null) {
                    (last.type === VALUE ? resolve : reject)(last.value);
                    last = null;
                } else {
                    last = event;
                }
            });
        });
    };
    var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};
    function createCommonjsModule(fn, module) {
        return module = { exports: {} }, fn(module, module.exports), module.exports;
    }
    var ponyfill = createCommonjsModule(function (module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports['default'] = symbolObservablePonyfill;
        function symbolObservablePonyfill(root) {
            var result;
            var _Symbol = root.Symbol;
            if (typeof _Symbol === 'function') {
                if (_Symbol.observable) {
                    result = _Symbol.observable;
                } else {
                    result = _Symbol('observable');
                    _Symbol.observable = result;
                }
            } else {
                result = '@@observable';
            }
            return result;
        }
    });
    var index$1 = createCommonjsModule(function (module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _ponyfill2 = _interopRequireDefault(ponyfill);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { 'default': obj };
        }
        var root;
        if (typeof self !== 'undefined') {
            root = self;
        } else if (typeof window !== 'undefined') {
            root = window;
        } else if (typeof commonjsGlobal !== 'undefined') {
            root = commonjsGlobal;
        } else {
            root = module;
        }
        var result = (0, _ponyfill2['default'])(root);
        exports['default'] = result;
    });
    var index = index$1;
    var $$observable = index.default ? index.default : index;
    function fromESObservable(_observable) {
        var observable = _observable[$$observable] ? _observable[$$observable]() : _observable;
        return stream(function (emitter) {
            var unsub = observable.subscribe({
                error: function (error) {
                    emitter.error(error);
                    emitter.end();
                },
                next: function (value) {
                    emitter.emit(value);
                },
                complete: function () {
                    emitter.end();
                }
            });
            if (unsub.unsubscribe) {
                return function () {
                    unsub.unsubscribe();
                };
            } else {
                return unsub;
            }
        }).setName('fromESObservable');
    }
    function ESObservable(observable) {
        this._observable = observable.takeErrors(1);
    }
    extend(ESObservable.prototype, {
        subscribe: function (observerOrOnNext, onError, onComplete) {
            var _this = this;
            var observer = typeof observerOrOnNext === 'function' ? {
                next: observerOrOnNext,
                error: onError,
                complete: onComplete
            } : observerOrOnNext;
            var fn = function (event) {
                if (event.type === END) {
                    closed = true;
                }
                if (event.type === VALUE && observer.next) {
                    observer.next(event.value);
                } else if (event.type === ERROR && observer.error) {
                    observer.error(event.value);
                } else if (event.type === END && observer.complete) {
                    observer.complete(event.value);
                }
            };
            this._observable.onAny(fn);
            var closed = false;
            var subscription = {
                unsubscribe: function () {
                    closed = true;
                    _this._observable.offAny(fn);
                },
                get closed() {
                    return closed;
                }
            };
            return subscription;
        }
    });
    ESObservable.prototype[$$observable] = function () {
        return this;
    };
    function toESObservable() {
        return new ESObservable(this);
    }
    function collect(source, keys, values) {
        for (var prop in source) {
            if (source.hasOwnProperty(prop)) {
                keys.push(prop);
                values.push(source[prop]);
            }
        }
    }
    function defaultErrorsCombinator(errors) {
        var latestError = void 0;
        for (var i = 0; i < errors.length; i++) {
            if (errors[i] !== undefined) {
                if (latestError === undefined || latestError.index < errors[i].index) {
                    latestError = errors[i];
                }
            }
        }
        return latestError.error;
    }
    function Combine(active, passive, combinator) {
        var _this = this;
        Stream.call(this);
        this._activeCount = active.length;
        this._sources = concat(active, passive);
        this._combinator = combinator;
        this._aliveCount = 0;
        this._latestValues = new Array(this._sources.length);
        this._latestErrors = new Array(this._sources.length);
        fillArray(this._latestValues, NOTHING);
        this._emitAfterActivation = false;
        this._endAfterActivation = false;
        this._latestErrorIndex = 0;
        this._$handlers = [];
        var _loop = function (i) {
            _this._$handlers.push(function (event) {
                return _this._handleAny(i, event);
            });
        };
        for (var i = 0; i < this._sources.length; i++) {
            _loop(i);
        }
    }
    inherit(Combine, Stream, {
        _name: 'combine',
        _onActivation: function () {
            this._aliveCount = this._activeCount;
            for (var i = this._activeCount; i < this._sources.length; i++) {
                this._sources[i].onAny(this._$handlers[i]);
            }
            for (var _i = 0; _i < this._activeCount; _i++) {
                this._sources[_i].onAny(this._$handlers[_i]);
            }
            if (this._emitAfterActivation) {
                this._emitAfterActivation = false;
                this._emitIfFull();
            }
            if (this._endAfterActivation) {
                this._emitEnd();
            }
        },
        _onDeactivation: function () {
            var length = this._sources.length, i = void 0;
            for (i = 0; i < length; i++) {
                this._sources[i].offAny(this._$handlers[i]);
            }
        },
        _emitIfFull: function () {
            var hasAllValues = true;
            var hasErrors = false;
            var length = this._latestValues.length;
            var valuesCopy = new Array(length);
            var errorsCopy = new Array(length);
            for (var i = 0; i < length; i++) {
                valuesCopy[i] = this._latestValues[i];
                errorsCopy[i] = this._latestErrors[i];
                if (valuesCopy[i] === NOTHING) {
                    hasAllValues = false;
                }
                if (errorsCopy[i] !== undefined) {
                    hasErrors = true;
                }
            }
            if (hasAllValues) {
                var combinator = this._combinator;
                this._emitValue(combinator(valuesCopy));
            }
            if (hasErrors) {
                this._emitError(defaultErrorsCombinator(errorsCopy));
            }
        },
        _handleAny: function (i, event) {
            if (event.type === VALUE || event.type === ERROR) {
                if (event.type === VALUE) {
                    this._latestValues[i] = event.value;
                    this._latestErrors[i] = undefined;
                }
                if (event.type === ERROR) {
                    this._latestValues[i] = NOTHING;
                    this._latestErrors[i] = {
                        index: this._latestErrorIndex++,
                        error: event.value
                    };
                }
                if (i < this._activeCount) {
                    if (this._activating) {
                        this._emitAfterActivation = true;
                    } else {
                        this._emitIfFull();
                    }
                }
            } else {
                if (i < this._activeCount) {
                    this._aliveCount--;
                    if (this._aliveCount === 0) {
                        if (this._activating) {
                            this._endAfterActivation = true;
                        } else {
                            this._emitEnd();
                        }
                    }
                }
            }
        },
        _clear: function () {
            Stream.prototype._clear.call(this);
            this._sources = null;
            this._latestValues = null;
            this._latestErrors = null;
            this._combinator = null;
            this._$handlers = null;
        }
    });
    function combineAsArray(active) {
        var passive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var combinator = arguments[2];
        if (!Array.isArray(passive)) {
            throw new Error('Combine can only combine active and passive collections of the same type.');
        }
        combinator = combinator ? spread(combinator, active.length + passive.length) : function (x) {
            return x;
        };
        return active.length === 0 ? never() : new Combine(active, passive, combinator);
    }
    function combineAsObject(active) {
        var passive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var combinator = arguments[2];
        if (typeof passive !== 'object' || Array.isArray(passive)) {
            throw new Error('Combine can only combine active and passive collections of the same type.');
        }
        var keys = [], activeObservables = [], passiveObservables = [];
        collect(active, keys, activeObservables);
        collect(passive, keys, passiveObservables);
        var objectify = function (values) {
            var event = {};
            for (var i = values.length - 1; 0 <= i; i--) {
                event[keys[i]] = values[i];
            }
            return combinator ? combinator(event) : event;
        };
        return activeObservables.length === 0 ? never() : new Combine(activeObservables, passiveObservables, objectify);
    }
    function combine(active, passive, combinator) {
        if (typeof passive === 'function') {
            combinator = passive;
            passive = undefined;
        }
        return Array.isArray(active) ? combineAsArray(active, passive, combinator) : combineAsObject(active, passive, combinator);
    }
    var Observable$2 = {
        empty: function () {
            return never();
        },
        concat: function (a, b) {
            return a.merge(b);
        },
        of: function (x) {
            return constant(x);
        },
        map: function (fn, obs) {
            return obs.map(fn);
        },
        bimap: function (fnErr, fnVal, obs) {
            return obs.mapErrors(fnErr).map(fnVal);
        },
        ap: function (obsFn, obsVal) {
            return combine([
                obsFn,
                obsVal
            ], function (fn, val) {
                return fn(val);
            });
        },
        chain: function (fn, obs) {
            return obs.flatMap(fn);
        }
    };
    var staticLand = Object.freeze({ Observable: Observable$2 });
    var mixin = {
        _init: function (_ref) {
            var fn = _ref.fn;
            this._fn = fn;
        },
        _free: function () {
            this._fn = null;
        },
        _handleValue: function (x) {
            var fn = this._fn;
            this._emitValue(fn(x));
        }
    };
    var S$7 = createStream('map', mixin);
    var P$3 = createProperty('map', mixin);
    var id = function (x) {
        return x;
    };
    function map$1(obs) {
        var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : id;
        return new (obs._ofSameType(S$7, P$3))(obs, { fn: fn });
    }
    var mixin$1 = {
        _init: function (_ref) {
            var fn = _ref.fn;
            this._fn = fn;
        },
        _free: function () {
            this._fn = null;
        },
        _handleValue: function (x) {
            var fn = this._fn;
            if (fn(x)) {
                this._emitValue(x);
            }
        }
    };
    var S$8 = createStream('filter', mixin$1);
    var P$4 = createProperty('filter', mixin$1);
    var id$1 = function (x) {
        return x;
    };
    function filter(obs) {
        var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : id$1;
        return new (obs._ofSameType(S$8, P$4))(obs, { fn: fn });
    }
    var mixin$2 = {
        _init: function (_ref) {
            var n = _ref.n;
            this._n = n;
            if (n <= 0) {
                this._emitEnd();
            }
        },
        _handleValue: function (x) {
            if (this._n === 0) {
                return;
            }
            this._n--;
            this._emitValue(x);
            if (this._n === 0) {
                this._emitEnd();
            }
        }
    };
    var S$9 = createStream('take', mixin$2);
    var P$5 = createProperty('take', mixin$2);
    function take(obs, n) {
        return new (obs._ofSameType(S$9, P$5))(obs, { n: n });
    }
    var mixin$3 = {
        _init: function (_ref) {
            var n = _ref.n;
            this._n = n;
            if (n <= 0) {
                this._emitEnd();
            }
        },
        _handleError: function (x) {
            if (this._n === 0) {
                return;
            }
            this._n--;
            this._emitError(x);
            if (this._n === 0) {
                this._emitEnd();
            }
        }
    };
    var S$10 = createStream('takeErrors', mixin$3);
    var P$6 = createProperty('takeErrors', mixin$3);
    function takeErrors(obs, n) {
        return new (obs._ofSameType(S$10, P$6))(obs, { n: n });
    }
    var mixin$4 = {
        _init: function (_ref) {
            var fn = _ref.fn;
            this._fn = fn;
        },
        _free: function () {
            this._fn = null;
        },
        _handleValue: function (x) {
            var fn = this._fn;
            if (fn(x)) {
                this._emitValue(x);
            } else {
                this._emitEnd();
            }
        }
    };
    var S$11 = createStream('takeWhile', mixin$4);
    var P$7 = createProperty('takeWhile', mixin$4);
    var id$2 = function (x) {
        return x;
    };
    function takeWhile(obs) {
        var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : id$2;
        return new (obs._ofSameType(S$11, P$7))(obs, { fn: fn });
    }
    var mixin$5 = {
        _init: function () {
            this._lastValue = NOTHING;
        },
        _free: function () {
            this._lastValue = null;
        },
        _handleValue: function (x) {
            this._lastValue = x;
        },
        _handleEnd: function () {
            if (this._lastValue !== NOTHING) {
                this._emitValue(this._lastValue);
            }
            this._emitEnd();
        }
    };
    var S$12 = createStream('last', mixin$5);
    var P$8 = createProperty('last', mixin$5);
    function last(obs) {
        return new (obs._ofSameType(S$12, P$8))(obs);
    }
    var mixin$6 = {
        _init: function (_ref) {
            var n = _ref.n;
            this._n = Math.max(0, n);
        },
        _handleValue: function (x) {
            if (this._n === 0) {
                this._emitValue(x);
            } else {
                this._n--;
            }
        }
    };
    var S$13 = createStream('skip', mixin$6);
    var P$9 = createProperty('skip', mixin$6);
    function skip(obs, n) {
        return new (obs._ofSameType(S$13, P$9))(obs, { n: n });
    }
    var mixin$7 = {
        _init: function (_ref) {
            var fn = _ref.fn;
            this._fn = fn;
        },
        _free: function () {
            this._fn = null;
        },
        _handleValue: function (x) {
            var fn = this._fn;
            if (this._fn !== null && !fn(x)) {
                this._fn = null;
            }
            if (this._fn === null) {
                this._emitValue(x);
            }
        }
    };
    var S$14 = createStream('skipWhile', mixin$7);
    var P$10 = createProperty('skipWhile', mixin$7);
    var id$3 = function (x) {
        return x;
    };
    function skipWhile(obs) {
        var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : id$3;
        return new (obs._ofSameType(S$14, P$10))(obs, { fn: fn });
    }
    var mixin$8 = {
        _init: function (_ref) {
            var fn = _ref.fn;
            this._fn = fn;
            this._prev = NOTHING;
        },
        _free: function () {
            this._fn = null;
            this._prev = null;
        },
        _handleValue: function (x) {
            var fn = this._fn;
            if (this._prev === NOTHING || !fn(this._prev, x)) {
                this._prev = x;
                this._emitValue(x);
            }
        }
    };
    var S$15 = createStream('skipDuplicates', mixin$8);
    var P$11 = createProperty('skipDuplicates', mixin$8);
    var eq = function (a, b) {
        return a === b;
    };
    function skipDuplicates(obs) {
        var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : eq;
        return new (obs._ofSameType(S$15, P$11))(obs, { fn: fn });
    }
    var mixin$9 = {
        _init: function (_ref) {
            var fn = _ref.fn, seed = _ref.seed;
            this._fn = fn;
            this._prev = seed;
        },
        _free: function () {
            this._prev = null;
            this._fn = null;
        },
        _handleValue: function (x) {
            if (this._prev !== NOTHING) {
                var fn = this._fn;
                this._emitValue(fn(this._prev, x));
            }
            this._prev = x;
        }
    };
    var S$16 = createStream('diff', mixin$9);
    var P$12 = createProperty('diff', mixin$9);
    function defaultFn(a, b) {
        return [
            a,
            b
        ];
    }
    function diff(obs, fn) {
        var seed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NOTHING;
        return new (obs._ofSameType(S$16, P$12))(obs, {
            fn: fn || defaultFn,
            seed: seed
        });
    }
    var P$13 = createProperty('scan', {
        _init: function (_ref) {
            var fn = _ref.fn, seed = _ref.seed;
            this._fn = fn;
            this._seed = seed;
            if (seed !== NOTHING) {
                this._emitValue(seed);
            }
        },
        _free: function () {
            this._fn = null;
            this._seed = null;
        },
        _handleValue: function (x) {
            var fn = this._fn;
            if (this._currentEvent === null || this._currentEvent.type === ERROR) {
                this._emitValue(this._seed === NOTHING ? x : fn(this._seed, x));
            } else {
                this._emitValue(fn(this._currentEvent.value, x));
            }
        }
    });
    function scan(obs, fn) {
        var seed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NOTHING;
        return new P$13(obs, {
            fn: fn,
            seed: seed
        });
    }
    var mixin$10 = {
        _init: function (_ref) {
            var fn = _ref.fn;
            this._fn = fn;
        },
        _free: function () {
            this._fn = null;
        },
        _handleValue: function (x) {
            var fn = this._fn;
            var xs = fn(x);
            for (var i = 0; i < xs.length; i++) {
                this._emitValue(xs[i]);
            }
        }
    };
    var S$17 = createStream('flatten', mixin$10);
    var id$4 = function (x) {
        return x;
    };
    function flatten(obs) {
        var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : id$4;
        return new S$17(obs, { fn: fn });
    }
    var END_MARKER = {};
    var mixin$11 = {
        _init: function (_ref) {
            var _this = this;
            var wait = _ref.wait;
            this._wait = Math.max(0, wait);
            this._buff = [];
            this._$shiftBuff = function () {
                var value = _this._buff.shift();
                if (value === END_MARKER) {
                    _this._emitEnd();
                } else {
                    _this._emitValue(value);
                }
            };
        },
        _free: function () {
            this._buff = null;
            this._$shiftBuff = null;
        },
        _handleValue: function (x) {
            if (this._activating) {
                this._emitValue(x);
            } else {
                this._buff.push(x);
                setTimeout(this._$shiftBuff, this._wait);
            }
        },
        _handleEnd: function () {
            if (this._activating) {
                this._emitEnd();
            } else {
                this._buff.push(END_MARKER);
                setTimeout(this._$shiftBuff, this._wait);
            }
        }
    };
    var S$18 = createStream('delay', mixin$11);
    var P$14 = createProperty('delay', mixin$11);
    function delay(obs, wait) {
        return new (obs._ofSameType(S$18, P$14))(obs, { wait: wait });
    }
    var now = Date.now ? function () {
        return Date.now();
    } : function () {
        return new Date().getTime();
    };
    var mixin$12 = {
        _init: function (_ref) {
            var _this = this;
            var wait = _ref.wait, leading = _ref.leading, trailing = _ref.trailing;
            this._wait = Math.max(0, wait);
            this._leading = leading;
            this._trailing = trailing;
            this._trailingValue = null;
            this._timeoutId = null;
            this._endLater = false;
            this._lastCallTime = 0;
            this._$trailingCall = function () {
                return _this._trailingCall();
            };
        },
        _free: function () {
            this._trailingValue = null;
            this._$trailingCall = null;
        },
        _handleValue: function (x) {
            if (this._activating) {
                this._emitValue(x);
            } else {
                var curTime = now();
                if (this._lastCallTime === 0 && !this._leading) {
                    this._lastCallTime = curTime;
                }
                var remaining = this._wait - (curTime - this._lastCallTime);
                if (remaining <= 0) {
                    this._cancelTrailing();
                    this._lastCallTime = curTime;
                    this._emitValue(x);
                } else if (this._trailing) {
                    this._cancelTrailing();
                    this._trailingValue = x;
                    this._timeoutId = setTimeout(this._$trailingCall, remaining);
                }
            }
        },
        _handleEnd: function () {
            if (this._activating) {
                this._emitEnd();
            } else {
                if (this._timeoutId) {
                    this._endLater = true;
                } else {
                    this._emitEnd();
                }
            }
        },
        _cancelTrailing: function () {
            if (this._timeoutId !== null) {
                clearTimeout(this._timeoutId);
                this._timeoutId = null;
            }
        },
        _trailingCall: function () {
            this._emitValue(this._trailingValue);
            this._timeoutId = null;
            this._trailingValue = null;
            this._lastCallTime = !this._leading ? 0 : now();
            if (this._endLater) {
                this._emitEnd();
            }
        }
    };
    var S$19 = createStream('throttle', mixin$12);
    var P$15 = createProperty('throttle', mixin$12);
    function throttle(obs, wait) {
        var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}, _ref2$leading = _ref2.leading, leading = _ref2$leading === undefined ? true : _ref2$leading, _ref2$trailing = _ref2.trailing, trailing = _ref2$trailing === undefined ? true : _ref2$trailing;
        return new (obs._ofSameType(S$19, P$15))(obs, {
            wait: wait,
            leading: leading,
            trailing: trailing
        });
    }
    var mixin$13 = {
        _init: function (_ref) {
            var _this = this;
            var wait = _ref.wait, immediate = _ref.immediate;
            this._wait = Math.max(0, wait);
            this._immediate = immediate;
            this._lastAttempt = 0;
            this._timeoutId = null;
            this._laterValue = null;
            this._endLater = false;
            this._$later = function () {
                return _this._later();
            };
        },
        _free: function () {
            this._laterValue = null;
            this._$later = null;
        },
        _handleValue: function (x) {
            if (this._activating) {
                this._emitValue(x);
            } else {
                this._lastAttempt = now();
                if (this._immediate && !this._timeoutId) {
                    this._emitValue(x);
                }
                if (!this._timeoutId) {
                    this._timeoutId = setTimeout(this._$later, this._wait);
                }
                if (!this._immediate) {
                    this._laterValue = x;
                }
            }
        },
        _handleEnd: function () {
            if (this._activating) {
                this._emitEnd();
            } else {
                if (this._timeoutId && !this._immediate) {
                    this._endLater = true;
                } else {
                    this._emitEnd();
                }
            }
        },
        _later: function () {
            var last = now() - this._lastAttempt;
            if (last < this._wait && last >= 0) {
                this._timeoutId = setTimeout(this._$later, this._wait - last);
            } else {
                this._timeoutId = null;
                if (!this._immediate) {
                    this._emitValue(this._laterValue);
                    this._laterValue = null;
                }
                if (this._endLater) {
                    this._emitEnd();
                }
            }
        }
    };
    var S$20 = createStream('debounce', mixin$13);
    var P$16 = createProperty('debounce', mixin$13);
    function debounce(obs, wait) {
        var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}, _ref2$immediate = _ref2.immediate, immediate = _ref2$immediate === undefined ? false : _ref2$immediate;
        return new (obs._ofSameType(S$20, P$16))(obs, {
            wait: wait,
            immediate: immediate
        });
    }
    var mixin$14 = {
        _init: function (_ref) {
            var fn = _ref.fn;
            this._fn = fn;
        },
        _free: function () {
            this._fn = null;
        },
        _handleError: function (x) {
            var fn = this._fn;
            this._emitError(fn(x));
        }
    };
    var S$21 = createStream('mapErrors', mixin$14);
    var P$17 = createProperty('mapErrors', mixin$14);
    var id$5 = function (x) {
        return x;
    };
    function mapErrors(obs) {
        var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : id$5;
        return new (obs._ofSameType(S$21, P$17))(obs, { fn: fn });
    }
    var mixin$15 = {
        _init: function (_ref) {
            var fn = _ref.fn;
            this._fn = fn;
        },
        _free: function () {
            this._fn = null;
        },
        _handleError: function (x) {
            var fn = this._fn;
            if (fn(x)) {
                this._emitError(x);
            }
        }
    };
    var S$22 = createStream('filterErrors', mixin$15);
    var P$18 = createProperty('filterErrors', mixin$15);
    var id$6 = function (x) {
        return x;
    };
    function filterErrors(obs) {
        var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : id$6;
        return new (obs._ofSameType(S$22, P$18))(obs, { fn: fn });
    }
    var mixin$16 = {
        _handleValue: function () {
        }
    };
    var S$23 = createStream('ignoreValues', mixin$16);
    var P$19 = createProperty('ignoreValues', mixin$16);
    function ignoreValues(obs) {
        return new (obs._ofSameType(S$23, P$19))(obs);
    }
    var mixin$17 = {
        _handleError: function () {
        }
    };
    var S$24 = createStream('ignoreErrors', mixin$17);
    var P$20 = createProperty('ignoreErrors', mixin$17);
    function ignoreErrors(obs) {
        return new (obs._ofSameType(S$24, P$20))(obs);
    }
    var mixin$18 = {
        _handleEnd: function () {
        }
    };
    var S$25 = createStream('ignoreEnd', mixin$18);
    var P$21 = createProperty('ignoreEnd', mixin$18);
    function ignoreEnd(obs) {
        return new (obs._ofSameType(S$25, P$21))(obs);
    }
    var mixin$19 = {
        _init: function (_ref) {
            var fn = _ref.fn;
            this._fn = fn;
        },
        _free: function () {
            this._fn = null;
        },
        _handleEnd: function () {
            var fn = this._fn;
            this._emitValue(fn());
            this._emitEnd();
        }
    };
    var S$26 = createStream('beforeEnd', mixin$19);
    var P$22 = createProperty('beforeEnd', mixin$19);
    function beforeEnd(obs, fn) {
        return new (obs._ofSameType(S$26, P$22))(obs, { fn: fn });
    }
    var mixin$20 = {
        _init: function (_ref) {
            var min = _ref.min, max = _ref.max;
            this._max = max;
            this._min = min;
            this._buff = [];
        },
        _free: function () {
            this._buff = null;
        },
        _handleValue: function (x) {
            this._buff = slide(this._buff, x, this._max);
            if (this._buff.length >= this._min) {
                this._emitValue(this._buff);
            }
        }
    };
    var S$27 = createStream('slidingWindow', mixin$20);
    var P$23 = createProperty('slidingWindow', mixin$20);
    function slidingWindow(obs, max) {
        var min = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        return new (obs._ofSameType(S$27, P$23))(obs, {
            min: min,
            max: max
        });
    }
    var mixin$21 = {
        _init: function (_ref) {
            var fn = _ref.fn, flushOnEnd = _ref.flushOnEnd;
            this._fn = fn;
            this._flushOnEnd = flushOnEnd;
            this._buff = [];
        },
        _free: function () {
            this._buff = null;
        },
        _flush: function () {
            if (this._buff !== null && this._buff.length !== 0) {
                this._emitValue(this._buff);
                this._buff = [];
            }
        },
        _handleValue: function (x) {
            this._buff.push(x);
            var fn = this._fn;
            if (!fn(x)) {
                this._flush();
            }
        },
        _handleEnd: function () {
            if (this._flushOnEnd) {
                this._flush();
            }
            this._emitEnd();
        }
    };
    var S$28 = createStream('bufferWhile', mixin$21);
    var P$24 = createProperty('bufferWhile', mixin$21);
    var id$7 = function (x) {
        return x;
    };
    function bufferWhile(obs, fn) {
        var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}, _ref2$flushOnEnd = _ref2.flushOnEnd, flushOnEnd = _ref2$flushOnEnd === undefined ? true : _ref2$flushOnEnd;
        return new (obs._ofSameType(S$28, P$24))(obs, {
            fn: fn || id$7,
            flushOnEnd: flushOnEnd
        });
    }
    var mixin$22 = {
        _init: function (_ref) {
            var count = _ref.count, flushOnEnd = _ref.flushOnEnd;
            this._count = count;
            this._flushOnEnd = flushOnEnd;
            this._buff = [];
        },
        _free: function () {
            this._buff = null;
        },
        _flush: function () {
            if (this._buff !== null && this._buff.length !== 0) {
                this._emitValue(this._buff);
                this._buff = [];
            }
        },
        _handleValue: function (x) {
            this._buff.push(x);
            if (this._buff.length >= this._count) {
                this._flush();
            }
        },
        _handleEnd: function () {
            if (this._flushOnEnd) {
                this._flush();
            }
            this._emitEnd();
        }
    };
    var S$29 = createStream('bufferWithCount', mixin$22);
    var P$25 = createProperty('bufferWithCount', mixin$22);
    function bufferWhile$1(obs, count) {
        var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}, _ref2$flushOnEnd = _ref2.flushOnEnd, flushOnEnd = _ref2$flushOnEnd === undefined ? true : _ref2$flushOnEnd;
        return new (obs._ofSameType(S$29, P$25))(obs, {
            count: count,
            flushOnEnd: flushOnEnd
        });
    }
    var mixin$23 = {
        _init: function (_ref) {
            var _this = this;
            var wait = _ref.wait, count = _ref.count, flushOnEnd = _ref.flushOnEnd;
            this._wait = wait;
            this._count = count;
            this._flushOnEnd = flushOnEnd;
            this._intervalId = null;
            this._$onTick = function () {
                return _this._flush();
            };
            this._buff = [];
        },
        _free: function () {
            this._$onTick = null;
            this._buff = null;
        },
        _flush: function () {
            if (this._buff !== null) {
                this._emitValue(this._buff);
                this._buff = [];
            }
        },
        _handleValue: function (x) {
            this._buff.push(x);
            if (this._buff.length >= this._count) {
                clearInterval(this._intervalId);
                this._flush();
                this._intervalId = setInterval(this._$onTick, this._wait);
            }
        },
        _handleEnd: function () {
            if (this._flushOnEnd && this._buff.length !== 0) {
                this._flush();
            }
            this._emitEnd();
        },
        _onActivation: function () {
            this._intervalId = setInterval(this._$onTick, this._wait);
            this._source.onAny(this._$handleAny);
        },
        _onDeactivation: function () {
            if (this._intervalId !== null) {
                clearInterval(this._intervalId);
                this._intervalId = null;
            }
            this._source.offAny(this._$handleAny);
        }
    };
    var S$30 = createStream('bufferWithTimeOrCount', mixin$23);
    var P$26 = createProperty('bufferWithTimeOrCount', mixin$23);
    function bufferWithTimeOrCount(obs, wait, count) {
        var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {}, _ref2$flushOnEnd = _ref2.flushOnEnd, flushOnEnd = _ref2$flushOnEnd === undefined ? true : _ref2$flushOnEnd;
        return new (obs._ofSameType(S$30, P$26))(obs, {
            wait: wait,
            count: count,
            flushOnEnd: flushOnEnd
        });
    }
    function xformForObs(obs) {
        return {
            '@@transducer/step': function (res, input) {
                obs._emitValue(input);
                return null;
            },
            '@@transducer/result': function () {
                obs._emitEnd();
                return null;
            }
        };
    }
    var mixin$24 = {
        _init: function (_ref) {
            var transducer = _ref.transducer;
            this._xform = transducer(xformForObs(this));
        },
        _free: function () {
            this._xform = null;
        },
        _handleValue: function (x) {
            if (this._xform['@@transducer/step'](null, x) !== null) {
                this._xform['@@transducer/result'](null);
            }
        },
        _handleEnd: function () {
            this._xform['@@transducer/result'](null);
        }
    };
    var S$31 = createStream('transduce', mixin$24);
    var P$27 = createProperty('transduce', mixin$24);
    function transduce(obs, transducer) {
        return new (obs._ofSameType(S$31, P$27))(obs, { transducer: transducer });
    }
    var mixin$25 = {
        _init: function (_ref) {
            var fn = _ref.fn;
            this._handler = fn;
            this._emitter = emitter(this);
        },
        _free: function () {
            this._handler = null;
            this._emitter = null;
        },
        _handleAny: function (event) {
            this._handler(this._emitter, event);
        }
    };
    var S$32 = createStream('withHandler', mixin$25);
    var P$28 = createProperty('withHandler', mixin$25);
    function withHandler(obs, fn) {
        return new (obs._ofSameType(S$32, P$28))(obs, { fn: fn });
    }
    var isArray = Array.isArray || function (xs) {
        return Object.prototype.toString.call(xs) === '[object Array]';
    };
    function Zip(sources, combinator) {
        var _this = this;
        Stream.call(this);
        this._buffers = map(sources, function (source) {
            return isArray(source) ? cloneArray(source) : [];
        });
        this._sources = map(sources, function (source) {
            return isArray(source) ? never() : source;
        });
        this._combinator = combinator ? spread(combinator, this._sources.length) : function (x) {
            return x;
        };
        this._aliveCount = 0;
        this._$handlers = [];
        var _loop = function (i) {
            _this._$handlers.push(function (event) {
                return _this._handleAny(i, event);
            });
        };
        for (var i = 0; i < this._sources.length; i++) {
            _loop(i);
        }
    }
    inherit(Zip, Stream, {
        _name: 'zip',
        _onActivation: function () {
            while (this._isFull()) {
                this._emit();
            }
            var length = this._sources.length;
            this._aliveCount = length;
            for (var i = 0; i < length && this._active; i++) {
                this._sources[i].onAny(this._$handlers[i]);
            }
        },
        _onDeactivation: function () {
            for (var i = 0; i < this._sources.length; i++) {
                this._sources[i].offAny(this._$handlers[i]);
            }
        },
        _emit: function () {
            var values = new Array(this._buffers.length);
            for (var i = 0; i < this._buffers.length; i++) {
                values[i] = this._buffers[i].shift();
            }
            var combinator = this._combinator;
            this._emitValue(combinator(values));
        },
        _isFull: function () {
            for (var i = 0; i < this._buffers.length; i++) {
                if (this._buffers[i].length === 0) {
                    return false;
                }
            }
            return true;
        },
        _handleAny: function (i, event) {
            if (event.type === VALUE) {
                this._buffers[i].push(event.value);
                if (this._isFull()) {
                    this._emit();
                }
            }
            if (event.type === ERROR) {
                this._emitError(event.value);
            }
            if (event.type === END) {
                this._aliveCount--;
                if (this._aliveCount === 0) {
                    this._emitEnd();
                }
            }
        },
        _clear: function () {
            Stream.prototype._clear.call(this);
            this._sources = null;
            this._buffers = null;
            this._combinator = null;
            this._$handlers = null;
        }
    });
    function zip(observables, combinator) {
        return observables.length === 0 ? never() : new Zip(observables, combinator);
    }
    var id$8 = function (x) {
        return x;
    };
    function AbstractPool() {
        var _this = this;
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref$queueLim = _ref.queueLim, queueLim = _ref$queueLim === undefined ? 0 : _ref$queueLim, _ref$concurLim = _ref.concurLim, concurLim = _ref$concurLim === undefined ? -1 : _ref$concurLim, _ref$drop = _ref.drop, drop = _ref$drop === undefined ? 'new' : _ref$drop;
        Stream.call(this);
        this._queueLim = queueLim < 0 ? -1 : queueLim;
        this._concurLim = concurLim < 0 ? -1 : concurLim;
        this._drop = drop;
        this._queue = [];
        this._curSources = [];
        this._$handleSubAny = function (event) {
            return _this._handleSubAny(event);
        };
        this._$endHandlers = [];
        this._currentlyAdding = null;
        if (this._concurLim === 0) {
            this._emitEnd();
        }
    }
    inherit(AbstractPool, Stream, {
        _name: 'abstractPool',
        _add: function (obj, toObs) {
            toObs = toObs || id$8;
            if (this._concurLim === -1 || this._curSources.length < this._concurLim) {
                this._addToCur(toObs(obj));
            } else {
                if (this._queueLim === -1 || this._queue.length < this._queueLim) {
                    this._addToQueue(toObs(obj));
                } else if (this._drop === 'old') {
                    this._removeOldest();
                    this._add(obj, toObs);
                }
            }
        },
        _addAll: function (obss) {
            var _this2 = this;
            forEach(obss, function (obs) {
                return _this2._add(obs);
            });
        },
        _remove: function (obs) {
            if (this._removeCur(obs) === -1) {
                this._removeQueue(obs);
            }
        },
        _addToQueue: function (obs) {
            this._queue = concat(this._queue, [obs]);
        },
        _addToCur: function (obs) {
            if (this._active) {
                if (!obs._alive) {
                    if (obs._currentEvent) {
                        this._emit(obs._currentEvent.type, obs._currentEvent.value);
                    }
                    if (this._active) {
                        if (this._queue.length !== 0) {
                            this._pullQueue();
                        } else if (this._curSources.length === 0) {
                            this._onEmpty();
                        }
                    }
                    return;
                }
                this._currentlyAdding = obs;
                obs.onAny(this._$handleSubAny);
                this._currentlyAdding = null;
                if (obs._alive) {
                    this._curSources = concat(this._curSources, [obs]);
                    if (this._active) {
                        this._subToEnd(obs);
                    }
                }
            } else {
                this._curSources = concat(this._curSources, [obs]);
            }
        },
        _subToEnd: function (obs) {
            var _this3 = this;
            var onEnd = function () {
                return _this3._removeCur(obs);
            };
            this._$endHandlers.push({
                obs: obs,
                handler: onEnd
            });
            obs.onEnd(onEnd);
        },
        _subscribe: function (obs) {
            obs.onAny(this._$handleSubAny);
            if (this._active) {
                this._subToEnd(obs);
            }
        },
        _unsubscribe: function (obs) {
            obs.offAny(this._$handleSubAny);
            var onEndI = findByPred(this._$endHandlers, function (obj) {
                return obj.obs === obs;
            });
            if (onEndI !== -1) {
                obs.offEnd(this._$endHandlers[onEndI].handler);
                this._$endHandlers.splice(onEndI, 1);
            }
        },
        _handleSubAny: function (event) {
            if (event.type === VALUE) {
                this._emitValue(event.value);
            } else if (event.type === ERROR) {
                this._emitError(event.value);
            }
        },
        _removeQueue: function (obs) {
            var index = find(this._queue, obs);
            this._queue = remove(this._queue, index);
            return index;
        },
        _removeCur: function (obs) {
            if (this._active) {
                this._unsubscribe(obs);
            }
            var index = find(this._curSources, obs);
            this._curSources = remove(this._curSources, index);
            if (index !== -1) {
                if (this._queue.length !== 0) {
                    this._pullQueue();
                } else if (this._curSources.length === 0) {
                    this._onEmpty();
                }
            }
            return index;
        },
        _removeOldest: function () {
            this._removeCur(this._curSources[0]);
        },
        _pullQueue: function () {
            if (this._queue.length !== 0) {
                this._queue = cloneArray(this._queue);
                this._addToCur(this._queue.shift());
            }
        },
        _onActivation: function () {
            for (var i = 0, sources = this._curSources; i < sources.length && this._active; i++) {
                this._subscribe(sources[i]);
            }
        },
        _onDeactivation: function () {
            for (var i = 0, sources = this._curSources; i < sources.length; i++) {
                this._unsubscribe(sources[i]);
            }
            if (this._currentlyAdding !== null) {
                this._unsubscribe(this._currentlyAdding);
            }
        },
        _isEmpty: function () {
            return this._curSources.length === 0;
        },
        _onEmpty: function () {
        },
        _clear: function () {
            Stream.prototype._clear.call(this);
            this._queue = null;
            this._curSources = null;
            this._$handleSubAny = null;
            this._$endHandlers = null;
        }
    });
    function Merge(sources) {
        AbstractPool.call(this);
        this._addAll(sources);
        this._initialised = true;
    }
    inherit(Merge, AbstractPool, {
        _name: 'merge',
        _onEmpty: function () {
            if (this._initialised) {
                this._emitEnd();
            }
        }
    });
    function merge(observables) {
        return observables.length === 0 ? never() : new Merge(observables);
    }
    function S$33(generator) {
        var _this = this;
        Stream.call(this);
        this._generator = generator;
        this._source = null;
        this._inLoop = false;
        this._iteration = 0;
        this._$handleAny = function (event) {
            return _this._handleAny(event);
        };
    }
    inherit(S$33, Stream, {
        _name: 'repeat',
        _handleAny: function (event) {
            if (event.type === END) {
                this._source = null;
                this._getSource();
            } else {
                this._emit(event.type, event.value);
            }
        },
        _getSource: function () {
            if (!this._inLoop) {
                this._inLoop = true;
                var generator = this._generator;
                while (this._source === null && this._alive && this._active) {
                    this._source = generator(this._iteration++);
                    if (this._source) {
                        this._source.onAny(this._$handleAny);
                    } else {
                        this._emitEnd();
                    }
                }
                this._inLoop = false;
            }
        },
        _onActivation: function () {
            if (this._source) {
                this._source.onAny(this._$handleAny);
            } else {
                this._getSource();
            }
        },
        _onDeactivation: function () {
            if (this._source) {
                this._source.offAny(this._$handleAny);
            }
        },
        _clear: function () {
            Stream.prototype._clear.call(this);
            this._generator = null;
            this._source = null;
            this._$handleAny = null;
        }
    });
    var repeat = function (generator) {
        return new S$33(generator);
    };
    function concat$1(observables) {
        return repeat(function (index) {
            return observables.length > index ? observables[index] : false;
        }).setName('concat');
    }
    function Pool() {
        AbstractPool.call(this);
    }
    inherit(Pool, AbstractPool, {
        _name: 'pool',
        plug: function (obs) {
            this._add(obs);
            return this;
        },
        unplug: function (obs) {
            this._remove(obs);
            return this;
        }
    });
    function FlatMap(source, fn, options) {
        var _this = this;
        AbstractPool.call(this, options);
        this._source = source;
        this._fn = fn;
        this._mainEnded = false;
        this._lastCurrent = null;
        this._$handleMain = function (event) {
            return _this._handleMain(event);
        };
    }
    inherit(FlatMap, AbstractPool, {
        _onActivation: function () {
            AbstractPool.prototype._onActivation.call(this);
            if (this._active) {
                this._source.onAny(this._$handleMain);
            }
        },
        _onDeactivation: function () {
            AbstractPool.prototype._onDeactivation.call(this);
            this._source.offAny(this._$handleMain);
            this._hadNoEvSinceDeact = true;
        },
        _handleMain: function (event) {
            if (event.type === VALUE) {
                var sameCurr = this._activating && this._hadNoEvSinceDeact && this._lastCurrent === event.value;
                if (!sameCurr) {
                    this._add(event.value, this._fn);
                }
                this._lastCurrent = event.value;
                this._hadNoEvSinceDeact = false;
            }
            if (event.type === ERROR) {
                this._emitError(event.value);
            }
            if (event.type === END) {
                if (this._isEmpty()) {
                    this._emitEnd();
                } else {
                    this._mainEnded = true;
                }
            }
        },
        _onEmpty: function () {
            if (this._mainEnded) {
                this._emitEnd();
            }
        },
        _clear: function () {
            AbstractPool.prototype._clear.call(this);
            this._source = null;
            this._lastCurrent = null;
            this._$handleMain = null;
        }
    });
    function FlatMapErrors(source, fn) {
        FlatMap.call(this, source, fn);
    }
    inherit(FlatMapErrors, FlatMap, {
        _handleMain: function (event) {
            if (event.type === ERROR) {
                var sameCurr = this._activating && this._hadNoEvSinceDeact && this._lastCurrent === event.value;
                if (!sameCurr) {
                    this._add(event.value, this._fn);
                }
                this._lastCurrent = event.value;
                this._hadNoEvSinceDeact = false;
            }
            if (event.type === VALUE) {
                this._emitValue(event.value);
            }
            if (event.type === END) {
                if (this._isEmpty()) {
                    this._emitEnd();
                } else {
                    this._mainEnded = true;
                }
            }
        }
    });
    function createConstructor$1(BaseClass, name) {
        return function AnonymousObservable(primary, secondary, options) {
            var _this = this;
            BaseClass.call(this);
            this._primary = primary;
            this._secondary = secondary;
            this._name = primary._name + '.' + name;
            this._lastSecondary = NOTHING;
            this._$handleSecondaryAny = function (event) {
                return _this._handleSecondaryAny(event);
            };
            this._$handlePrimaryAny = function (event) {
                return _this._handlePrimaryAny(event);
            };
            this._init(options);
        };
    }
    function createClassMethods$1(BaseClass) {
        return {
            _init: function () {
            },
            _free: function () {
            },
            _handlePrimaryValue: function (x) {
                this._emitValue(x);
            },
            _handlePrimaryError: function (x) {
                this._emitError(x);
            },
            _handlePrimaryEnd: function () {
                this._emitEnd();
            },
            _handleSecondaryValue: function (x) {
                this._lastSecondary = x;
            },
            _handleSecondaryError: function (x) {
                this._emitError(x);
            },
            _handleSecondaryEnd: function () {
            },
            _handlePrimaryAny: function (event) {
                switch (event.type) {
                case VALUE:
                    return this._handlePrimaryValue(event.value);
                case ERROR:
                    return this._handlePrimaryError(event.value);
                case END:
                    return this._handlePrimaryEnd(event.value);
                }
            },
            _handleSecondaryAny: function (event) {
                switch (event.type) {
                case VALUE:
                    return this._handleSecondaryValue(event.value);
                case ERROR:
                    return this._handleSecondaryError(event.value);
                case END:
                    this._handleSecondaryEnd(event.value);
                    this._removeSecondary();
                }
            },
            _removeSecondary: function () {
                if (this._secondary !== null) {
                    this._secondary.offAny(this._$handleSecondaryAny);
                    this._$handleSecondaryAny = null;
                    this._secondary = null;
                }
            },
            _onActivation: function () {
                if (this._secondary !== null) {
                    this._secondary.onAny(this._$handleSecondaryAny);
                }
                if (this._active) {
                    this._primary.onAny(this._$handlePrimaryAny);
                }
            },
            _onDeactivation: function () {
                if (this._secondary !== null) {
                    this._secondary.offAny(this._$handleSecondaryAny);
                }
                this._primary.offAny(this._$handlePrimaryAny);
            },
            _clear: function () {
                BaseClass.prototype._clear.call(this);
                this._primary = null;
                this._secondary = null;
                this._lastSecondary = null;
                this._$handleSecondaryAny = null;
                this._$handlePrimaryAny = null;
                this._free();
            }
        };
    }
    function createStream$1(name, mixin) {
        var S = createConstructor$1(Stream, name);
        inherit(S, Stream, createClassMethods$1(Stream), mixin);
        return S;
    }
    function createProperty$1(name, mixin) {
        var P = createConstructor$1(Property, name);
        inherit(P, Property, createClassMethods$1(Property), mixin);
        return P;
    }
    var mixin$26 = {
        _handlePrimaryValue: function (x) {
            if (this._lastSecondary !== NOTHING && this._lastSecondary) {
                this._emitValue(x);
            }
        },
        _handleSecondaryEnd: function () {
            if (this._lastSecondary === NOTHING || !this._lastSecondary) {
                this._emitEnd();
            }
        }
    };
    var S$34 = createStream$1('filterBy', mixin$26);
    var P$29 = createProperty$1('filterBy', mixin$26);
    function filterBy(primary, secondary) {
        return new (primary._ofSameType(S$34, P$29))(primary, secondary);
    }
    var id2 = function (_, x) {
        return x;
    };
    function sampledBy(passive, active, combinator) {
        var _combinator = combinator ? function (a, b) {
            return combinator(b, a);
        } : id2;
        return combine([active], [passive], _combinator).setName(passive, 'sampledBy');
    }
    var mixin$27 = {
        _handlePrimaryValue: function (x) {
            if (this._lastSecondary !== NOTHING) {
                this._emitValue(x);
            }
        },
        _handleSecondaryEnd: function () {
            if (this._lastSecondary === NOTHING) {
                this._emitEnd();
            }
        }
    };
    var S$35 = createStream$1('skipUntilBy', mixin$27);
    var P$30 = createProperty$1('skipUntilBy', mixin$27);
    function skipUntilBy(primary, secondary) {
        return new (primary._ofSameType(S$35, P$30))(primary, secondary);
    }
    var mixin$28 = {
        _handleSecondaryValue: function () {
            this._emitEnd();
        }
    };
    var S$36 = createStream$1('takeUntilBy', mixin$28);
    var P$31 = createProperty$1('takeUntilBy', mixin$28);
    function takeUntilBy(primary, secondary) {
        return new (primary._ofSameType(S$36, P$31))(primary, secondary);
    }
    var mixin$29 = {
        _init: function () {
            var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref$flushOnEnd = _ref.flushOnEnd, flushOnEnd = _ref$flushOnEnd === undefined ? true : _ref$flushOnEnd;
            this._buff = [];
            this._flushOnEnd = flushOnEnd;
        },
        _free: function () {
            this._buff = null;
        },
        _flush: function () {
            if (this._buff !== null) {
                this._emitValue(this._buff);
                this._buff = [];
            }
        },
        _handlePrimaryEnd: function () {
            if (this._flushOnEnd) {
                this._flush();
            }
            this._emitEnd();
        },
        _onActivation: function () {
            this._primary.onAny(this._$handlePrimaryAny);
            if (this._alive && this._secondary !== null) {
                this._secondary.onAny(this._$handleSecondaryAny);
            }
        },
        _handlePrimaryValue: function (x) {
            this._buff.push(x);
        },
        _handleSecondaryValue: function () {
            this._flush();
        },
        _handleSecondaryEnd: function () {
            if (!this._flushOnEnd) {
                this._emitEnd();
            }
        }
    };
    var S$37 = createStream$1('bufferBy', mixin$29);
    var P$32 = createProperty$1('bufferBy', mixin$29);
    function bufferBy(primary, secondary, options) {
        return new (primary._ofSameType(S$37, P$32))(primary, secondary, options);
    }
    var mixin$30 = {
        _init: function () {
            var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref$flushOnEnd = _ref.flushOnEnd, flushOnEnd = _ref$flushOnEnd === undefined ? true : _ref$flushOnEnd, _ref$flushOnChange = _ref.flushOnChange, flushOnChange = _ref$flushOnChange === undefined ? false : _ref$flushOnChange;
            this._buff = [];
            this._flushOnEnd = flushOnEnd;
            this._flushOnChange = flushOnChange;
        },
        _free: function () {
            this._buff = null;
        },
        _flush: function () {
            if (this._buff !== null) {
                this._emitValue(this._buff);
                this._buff = [];
            }
        },
        _handlePrimaryEnd: function () {
            if (this._flushOnEnd) {
                this._flush();
            }
            this._emitEnd();
        },
        _handlePrimaryValue: function (x) {
            this._buff.push(x);
            if (this._lastSecondary !== NOTHING && !this._lastSecondary) {
                this._flush();
            }
        },
        _handleSecondaryEnd: function () {
            if (!this._flushOnEnd && (this._lastSecondary === NOTHING || this._lastSecondary)) {
                this._emitEnd();
            }
        },
        _handleSecondaryValue: function (x) {
            if (this._flushOnChange && !x) {
                this._flush();
            }
            this._lastSecondary = x;
        }
    };
    var S$38 = createStream$1('bufferWhileBy', mixin$30);
    var P$33 = createProperty$1('bufferWhileBy', mixin$30);
    function bufferWhileBy(primary, secondary, options) {
        return new (primary._ofSameType(S$38, P$33))(primary, secondary, options);
    }
    var f = function () {
        return false;
    };
    var t = function () {
        return true;
    };
    function awaiting(a, b) {
        var result = merge([
            map$1(a, t),
            map$1(b, f)
        ]);
        result = skipDuplicates(result);
        result = toProperty(result, f);
        return result.setName(a, 'awaiting');
    }
    var mixin$31 = {
        _init: function (_ref) {
            var fn = _ref.fn;
            this._fn = fn;
        },
        _free: function () {
            this._fn = null;
        },
        _handleValue: function (x) {
            var fn = this._fn;
            var result = fn(x);
            if (result.convert) {
                this._emitError(result.error);
            } else {
                this._emitValue(x);
            }
        }
    };
    var S$39 = createStream('valuesToErrors', mixin$31);
    var P$34 = createProperty('valuesToErrors', mixin$31);
    var defFn = function (x) {
        return {
            convert: true,
            error: x
        };
    };
    function valuesToErrors(obs) {
        var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defFn;
        return new (obs._ofSameType(S$39, P$34))(obs, { fn: fn });
    }
    var mixin$32 = {
        _init: function (_ref) {
            var fn = _ref.fn;
            this._fn = fn;
        },
        _free: function () {
            this._fn = null;
        },
        _handleError: function (x) {
            var fn = this._fn;
            var result = fn(x);
            if (result.convert) {
                this._emitValue(result.value);
            } else {
                this._emitError(x);
            }
        }
    };
    var S$40 = createStream('errorsToValues', mixin$32);
    var P$35 = createProperty('errorsToValues', mixin$32);
    var defFn$1 = function (x) {
        return {
            convert: true,
            value: x
        };
    };
    function errorsToValues(obs) {
        var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defFn$1;
        return new (obs._ofSameType(S$40, P$35))(obs, { fn: fn });
    }
    var mixin$33 = {
        _handleError: function (x) {
            this._emitError(x);
            this._emitEnd();
        }
    };
    var S$41 = createStream('endOnError', mixin$33);
    var P$36 = createProperty('endOnError', mixin$33);
    function endOnError(obs) {
        return new (obs._ofSameType(S$41, P$36))(obs);
    }
    Observable.prototype.toProperty = function (fn) {
        return toProperty(this, fn);
    };
    Observable.prototype.changes = function () {
        return changes(this);
    };
    Observable.prototype.toPromise = function (Promise) {
        return toPromise(this, Promise);
    };
    Observable.prototype.toESObservable = toESObservable;
    Observable.prototype[$$observable] = toESObservable;
    Observable.prototype.map = function (fn) {
        return map$1(this, fn);
    };
    Observable.prototype.filter = function (fn) {
        return filter(this, fn);
    };
    Observable.prototype.take = function (n) {
        return take(this, n);
    };
    Observable.prototype.takeErrors = function (n) {
        return takeErrors(this, n);
    };
    Observable.prototype.takeWhile = function (fn) {
        return takeWhile(this, fn);
    };
    Observable.prototype.last = function () {
        return last(this);
    };
    Observable.prototype.skip = function (n) {
        return skip(this, n);
    };
    Observable.prototype.skipWhile = function (fn) {
        return skipWhile(this, fn);
    };
    Observable.prototype.skipDuplicates = function (fn) {
        return skipDuplicates(this, fn);
    };
    Observable.prototype.diff = function (fn, seed) {
        return diff(this, fn, seed);
    };
    Observable.prototype.scan = function (fn, seed) {
        return scan(this, fn, seed);
    };
    Observable.prototype.flatten = function (fn) {
        return flatten(this, fn);
    };
    Observable.prototype.delay = function (wait) {
        return delay(this, wait);
    };
    Observable.prototype.throttle = function (wait, options) {
        return throttle(this, wait, options);
    };
    Observable.prototype.debounce = function (wait, options) {
        return debounce(this, wait, options);
    };
    Observable.prototype.mapErrors = function (fn) {
        return mapErrors(this, fn);
    };
    Observable.prototype.filterErrors = function (fn) {
        return filterErrors(this, fn);
    };
    Observable.prototype.ignoreValues = function () {
        return ignoreValues(this);
    };
    Observable.prototype.ignoreErrors = function () {
        return ignoreErrors(this);
    };
    Observable.prototype.ignoreEnd = function () {
        return ignoreEnd(this);
    };
    Observable.prototype.beforeEnd = function (fn) {
        return beforeEnd(this, fn);
    };
    Observable.prototype.slidingWindow = function (max, min) {
        return slidingWindow(this, max, min);
    };
    Observable.prototype.bufferWhile = function (fn, options) {
        return bufferWhile(this, fn, options);
    };
    Observable.prototype.bufferWithCount = function (count, options) {
        return bufferWhile$1(this, count, options);
    };
    Observable.prototype.bufferWithTimeOrCount = function (wait, count, options) {
        return bufferWithTimeOrCount(this, wait, count, options);
    };
    Observable.prototype.transduce = function (transducer) {
        return transduce(this, transducer);
    };
    Observable.prototype.withHandler = function (fn) {
        return withHandler(this, fn);
    };
    Observable.prototype.thru = function (fn) {
        return fn(this);
    };
    Observable.prototype.combine = function (other, combinator) {
        return combine([
            this,
            other
        ], combinator);
    };
    Observable.prototype.zip = function (other, combinator) {
        return zip([
            this,
            other
        ], combinator);
    };
    Observable.prototype.merge = function (other) {
        return merge([
            this,
            other
        ]);
    };
    Observable.prototype.concat = function (other) {
        return concat$1([
            this,
            other
        ]);
    };
    var pool = function () {
        return new Pool();
    };
    Observable.prototype.flatMap = function (fn) {
        return new FlatMap(this, fn).setName(this, 'flatMap');
    };
    Observable.prototype.flatMapLatest = function (fn) {
        return new FlatMap(this, fn, {
            concurLim: 1,
            drop: 'old'
        }).setName(this, 'flatMapLatest');
    };
    Observable.prototype.flatMapFirst = function (fn) {
        return new FlatMap(this, fn, { concurLim: 1 }).setName(this, 'flatMapFirst');
    };
    Observable.prototype.flatMapConcat = function (fn) {
        return new FlatMap(this, fn, {
            queueLim: -1,
            concurLim: 1
        }).setName(this, 'flatMapConcat');
    };
    Observable.prototype.flatMapConcurLimit = function (fn, limit) {
        return new FlatMap(this, fn, {
            queueLim: -1,
            concurLim: limit
        }).setName(this, 'flatMapConcurLimit');
    };
    Observable.prototype.flatMapErrors = function (fn) {
        return new FlatMapErrors(this, fn).setName(this, 'flatMapErrors');
    };
    Observable.prototype.filterBy = function (other) {
        return filterBy(this, other);
    };
    Observable.prototype.sampledBy = function (other, combinator) {
        return sampledBy(this, other, combinator);
    };
    Observable.prototype.skipUntilBy = function (other) {
        return skipUntilBy(this, other);
    };
    Observable.prototype.takeUntilBy = function (other) {
        return takeUntilBy(this, other);
    };
    Observable.prototype.bufferBy = function (other, options) {
        return bufferBy(this, other, options);
    };
    Observable.prototype.bufferWhileBy = function (other, options) {
        return bufferWhileBy(this, other, options);
    };
    var DEPRECATION_WARNINGS = true;
    function dissableDeprecationWarnings() {
        DEPRECATION_WARNINGS = false;
    }
    function warn(msg) {
        if (DEPRECATION_WARNINGS && console && typeof console.warn === 'function') {
            var msg2 = '\nHere is an Error object for you containing the call stack:';
            console.warn(msg, msg2, new Error());
        }
    }
    Observable.prototype.awaiting = function (other) {
        warn('You are using deprecated .awaiting() method, see https://github.com/kefirjs/kefir/issues/145');
        return awaiting(this, other);
    };
    Observable.prototype.valuesToErrors = function (fn) {
        warn('You are using deprecated .valuesToErrors() method, see https://github.com/kefirjs/kefir/issues/149');
        return valuesToErrors(this, fn);
    };
    Observable.prototype.errorsToValues = function (fn) {
        warn('You are using deprecated .errorsToValues() method, see https://github.com/kefirjs/kefir/issues/149');
        return errorsToValues(this, fn);
    };
    Observable.prototype.endOnError = function () {
        warn('You are using deprecated .endOnError() method, see https://github.com/kefirjs/kefir/issues/150');
        return endOnError(this);
    };
    var Kefir = {
        Observable: Observable,
        Stream: Stream,
        Property: Property,
        never: never,
        later: later,
        interval: interval,
        sequentially: sequentially,
        fromPoll: fromPoll,
        withInterval: withInterval,
        fromCallback: fromCallback,
        fromNodeCallback: fromNodeCallback,
        fromEvents: fromEvents,
        stream: stream,
        constant: constant,
        constantError: constantError,
        fromPromise: fromPromise,
        fromESObservable: fromESObservable,
        combine: combine,
        zip: zip,
        merge: merge,
        concat: concat$1,
        Pool: Pool,
        pool: pool,
        repeat: repeat,
        staticLand: staticLand
    };
    Kefir.Kefir = Kefir;
    exports.dissableDeprecationWarnings = dissableDeprecationWarnings;
    exports.Kefir = Kefir;
    exports.Observable = Observable;
    exports.Stream = Stream;
    exports.Property = Property;
    exports.never = never;
    exports.later = later;
    exports.interval = interval;
    exports.sequentially = sequentially;
    exports.fromPoll = fromPoll;
    exports.withInterval = withInterval;
    exports.fromCallback = fromCallback;
    exports.fromNodeCallback = fromNodeCallback;
    exports.fromEvents = fromEvents;
    exports.stream = stream;
    exports.constant = constant;
    exports.constantError = constantError;
    exports.fromPromise = fromPromise;
    exports.fromESObservable = fromESObservable;
    exports.combine = combine;
    exports.zip = zip;
    exports.merge = merge;
    exports.concat = concat$1;
    exports.Pool = Pool;
    exports.pool = pool;
    exports.repeat = repeat;
    exports.staticLand = staticLand;
    exports['default'] = Kefir;
    Object.defineProperty(exports, '__esModule', { value: true });
}));
/*can-kefir@1.1.4#can-kefir*/
define('can-kefir@1.1.4#can-kefir', [
    'require',
    'exports',
    'module',
    'kefir',
    'can-symbol',
    'can-reflect',
    'can-event-queue/map/map',
    'can-observation-recorder'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var Kefir = require('kefir');
        var canSymbol = require('can-symbol');
        var canReflect = require('can-reflect');
        var mapEventsMixin = require('can-event-queue/map/map');
        var ObservationRecorder = require('can-observation-recorder');
        var metaSymbol = canSymbol.for('can.meta');
        var onKeyValueSymbol = canSymbol.for('can.onKeyValue');
        var offKeyValueSymbol = canSymbol.for('can.offKeyValue');
        var keyNames = {
            value: {
                on: 'onValue',
                off: 'offValue',
                handler: 'onValueHandler',
                handlers: 'onValueHandlers'
            },
            error: {
                on: 'onError',
                off: 'offError',
                handler: 'onErrorHandler',
                handlers: 'onErrorHandlers'
            }
        };
        function ensureMeta(obj) {
            var meta = obj[metaSymbol];
            if (!meta) {
                meta = {};
                canReflect.setKeyValue(obj, metaSymbol, meta);
            }
            return meta;
        }
        function getCurrentValue(stream, key) {
            if (stream._currentEvent && stream._currentEvent.type === key) {
                return stream._currentEvent.value;
            } else {
                var names = keyNames[key];
                if (!names) {
                    return stream[key];
                }
                var VALUE, valueHandler = function (value) {
                        VALUE = value;
                    };
                stream[names.on](valueHandler);
                stream[names.off](valueHandler);
                return VALUE;
            }
        }
        if (Kefir) {
            if (Object.isExtensible && !Object.isExtensible(Kefir)) {
                Kefir = Kefir.Kefir;
            }
            Kefir.Observable.prototype._eventSetup = function eventSetup() {
                var stream = this;
                var meta = ensureMeta(stream);
                meta.bound = true;
                meta.onValueHandler = function onValueHandler(newValue) {
                    var oldValue = meta.value;
                    meta.value = newValue;
                    if (newValue !== oldValue) {
                        mapEventsMixin.dispatch.call(stream, { type: 'value' }, [
                            newValue,
                            oldValue
                        ]);
                    }
                };
                meta.onErrorHandler = function onErrorHandler(error) {
                    var prevError = meta.error;
                    meta.error = error;
                    mapEventsMixin.dispatch.call(stream, { type: 'error' }, [
                        error,
                        prevError
                    ]);
                };
                stream.onValue(meta.onValueHandler);
                stream.onError(meta.onErrorHandler);
            };
            Kefir.Observable.prototype._eventTeardown = function eventTeardown() {
                var stream = this;
                var meta = ensureMeta(stream);
                meta.bound = false;
                stream.offValue(meta.onValueHandler);
                stream.offError(meta.onErrorHandler);
            };
            canReflect.assignSymbols(Kefir.Observable.prototype, {
                'can.onKeyValue': function onKeyValue() {
                    return mapEventsMixin[onKeyValueSymbol].apply(this, arguments);
                },
                'can.offKeyValue': function () {
                    return mapEventsMixin[offKeyValueSymbol].apply(this, arguments);
                },
                'can.getKeyValue': function (key) {
                    var stream = this;
                    var meta = ensureMeta(stream);
                    if (!keyNames[key]) {
                        return stream[key];
                    }
                    ObservationRecorder.add(stream, key);
                    if (meta.bound) {
                        return meta[key];
                    } else {
                        var currentValue = getCurrentValue(stream, key);
                        meta[key] = currentValue;
                        return currentValue;
                    }
                },
                'can.getValueDependencies': function getValueDependencies() {
                    var sources;
                    var stream = this;
                    if (stream._source != null) {
                        sources = [stream._source];
                    } else if (stream._sources != null) {
                        sources = stream._sources;
                    }
                    if (sources != null) {
                        return { valueDependencies: new Set(sources) };
                    }
                }
            });
            Kefir.emitterProperty = function () {
                var emitter;
                var setLastValue = false;
                var lastValue, lastError;
                var stream = Kefir.stream(function (EMITTER) {
                    emitter = EMITTER;
                    if (setLastValue) {
                        emitter.value(lastValue);
                    }
                    return function () {
                        emitter = undefined;
                    };
                });
                var property = stream.toProperty(function () {
                    return lastValue;
                });
                property.emitter = {
                    value: function (newValue) {
                        if (emitter) {
                            return emitter.emit(newValue);
                        } else {
                            setLastValue = true;
                            lastValue = newValue;
                        }
                    },
                    error: function (error) {
                        if (emitter) {
                            return emitter.error(error);
                        } else {
                            lastError = error;
                        }
                    }
                };
                property.emitter.emit = property.emitter.value;
                canReflect.assignSymbols(property, {
                    'can.setKeyValue': function setKeyValue(key, value) {
                        this.emitter[key](value);
                    },
                    'can.hasKey': function hasKey(key) {
                        return key in this.emitter;
                    }
                });
                return property;
            };
        }
        module.exports = Kefir;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-compute@4.1.1#proto-compute*/
define('can-compute@4.1.1#proto-compute', [
    'require',
    'exports',
    'module',
    'can-observation',
    'can-observation-recorder',
    'can-event-queue/map/map',
    'can-stache-key',
    'can-key/get/get',
    'can-assign',
    'can-reflect',
    'can-single-reference'
], function (require, exports, module) {
    'use strict';
    var Observation = require('can-observation');
    var ObservationRecorder = require('can-observation-recorder');
    var eventQueue = require('can-event-queue/map/map');
    var observeReader = require('can-stache-key');
    var getObject = require('can-key/get/get');
    var assign = require('can-assign');
    var canReflect = require('can-reflect');
    var singleReference = require('can-single-reference');
    var Compute = function (getterSetter, context, eventName, bindOnce) {
        var args = [];
        for (var i = 0, arglen = arguments.length; i < arglen; i++) {
            args[i] = arguments[i];
        }
        var contextType = typeof args[1];
        if (typeof args[0] === 'function') {
            this._setupGetterSetterFn(args[0], args[1], args[2], args[3]);
        } else if (args[1] !== undefined) {
            if (contextType === 'string' || contextType === 'number') {
                var isListLike = canReflect.isObservableLike(args[0]) && canReflect.isListLike(args[0]);
                var isMapLike = canReflect.isObservableLike(args[0]) && canReflect.isMapLike(args[0]);
                if (isMapLike || isListLike) {
                    var map = args[0];
                    var propertyName = args[1];
                    var mapGetterSetter = function (newValue) {
                        if (arguments.length) {
                            observeReader.set(map, propertyName, newValue);
                        } else {
                            if (isListLike) {
                                observeReader.get(map, 'length');
                            }
                            return observeReader.get(map, '' + propertyName);
                        }
                    };
                    this._setupGetterSetterFn(mapGetterSetter, args[1], args[2], args[3]);
                } else {
                    this._setupProperty(args[0], args[1], args[2]);
                }
            } else if (contextType === 'function') {
                this._setupSetter(args[0], args[1], args[2]);
            } else {
                if (args[1] && args[1].fn) {
                    this._setupAsyncCompute(args[0], args[1]);
                } else {
                    this._setupSettings(args[0], args[1]);
                }
            }
        } else {
            this._setupSimpleValue(args[0]);
        }
        this._args = args;
        this._primaryDepth = 0;
        this.isComputed = true;
    };
    var updateOnChange = function (compute, newValue, oldValue, batchNum) {
        var valueChanged = newValue !== oldValue && !(newValue !== newValue && oldValue !== oldValue);
        if (valueChanged) {
            compute.dispatch({
                type: 'change',
                batchNum: batchNum
            }, [
                newValue,
                oldValue
            ]);
        }
    };
    var setupComputeHandlers = function (compute, func, context) {
        var observation = new Observation(func, context, compute);
        var updater = compute.updater.bind(compute);
        if (process.env.NODE_ENV !== 'production') {
            Object.defineProperty(updater, 'name', { value: canReflect.getName(compute) + '.updater' });
        }
        compute.observation = observation;
        return {
            _on: function () {
                canReflect.onValue(observation, updater, 'notify');
                if (observation.hasOwnProperty('_value')) {
                    compute.value = observation._value;
                } else {
                    compute.value = observation.value;
                }
            },
            _off: function () {
                canReflect.offValue(observation, updater, 'notify');
            },
            getDepth: function () {
                return observation.getDepth();
            }
        };
    };
    eventQueue(Compute.prototype);
    assign(Compute.prototype, {
        setPrimaryDepth: function (depth) {
            this._primaryDepth = depth;
        },
        _setupGetterSetterFn: function (getterSetter, context, eventName) {
            this._set = context ? getterSetter.bind(context) : getterSetter;
            this._get = context ? getterSetter.bind(context) : getterSetter;
            this._canObserve = eventName === false ? false : true;
            var handlers = setupComputeHandlers(this, getterSetter, context || this);
            assign(this, handlers);
        },
        _setupProperty: function (target, propertyName, eventName) {
            var self = this, handler;
            handler = function () {
                self.updater(self._get(), self.value);
            };
            this._get = function () {
                return getObject(target, propertyName);
            };
            this._set = function (value) {
                var properties = propertyName.split('.'), leafPropertyName = properties.pop();
                if (properties.length) {
                    var targetProperty = getObject(target, properties.join('.'));
                    targetProperty[leafPropertyName] = value;
                } else {
                    target[propertyName] = value;
                }
            };
            this._on = function (update) {
                eventQueue.on.call(target, eventName || propertyName, handler);
                this.value = this._get();
            };
            this._off = function () {
                return eventQueue.off.call(target, eventName || propertyName, handler);
            };
        },
        _setupSetter: function (initialValue, setter, eventName) {
            this.value = initialValue;
            this._set = setter;
            assign(this, eventName);
        },
        _setupSettings: function (initialValue, settings) {
            this.value = initialValue;
            this._set = settings.set || this._set;
            this._get = settings.get || this._get;
            if (!settings.__selfUpdater) {
                var self = this, oldUpdater = this.updater;
                this.updater = function () {
                    oldUpdater.call(self, self._get(), self.value);
                };
            }
            this._on = settings.on ? settings.on : this._on;
            this._off = settings.off ? settings.off : this._off;
        },
        _setupAsyncCompute: function (initialValue, settings) {
            var self = this;
            var getter = settings.fn;
            var bindings;
            this.value = initialValue;
            this._setUpdates = true;
            this.lastSetValue = new Compute(initialValue);
            this._set = function (newVal) {
                if (newVal === self.lastSetValue.get()) {
                    return this.value;
                }
                return self.lastSetValue.set(newVal);
            };
            this._get = function () {
                return getter.call(settings.context, self.lastSetValue.get());
            };
            if (getter.length === 0) {
                bindings = setupComputeHandlers(this, getter, settings.context);
            } else if (getter.length === 1) {
                bindings = setupComputeHandlers(this, function () {
                    return getter.call(settings.context, self.lastSetValue.get());
                }, settings);
            } else {
                var oldUpdater = this.updater, resolve = ObservationRecorder.ignore(function (newVal) {
                        oldUpdater.call(self, newVal, self.value);
                    });
                this.updater = function (newVal) {
                    oldUpdater.call(self, newVal, self.value);
                };
                bindings = setupComputeHandlers(this, function () {
                    var res = getter.call(settings.context, self.lastSetValue.get(), resolve);
                    return res !== undefined ? res : this.value;
                }, this);
            }
            assign(this, bindings);
        },
        _setupSimpleValue: function (initialValue) {
            this.value = initialValue;
        },
        _eventSetup: ObservationRecorder.ignore(function () {
            this.bound = true;
            this._on(this.updater);
        }),
        _eventTeardown: function () {
            this._off(this.updater);
            this.bound = false;
        },
        clone: function (context) {
            if (context && typeof this._args[0] === 'function') {
                this._args[1] = context;
            } else if (context) {
                this._args[2] = context;
            }
            return new Compute(this._args[0], this._args[1], this._args[2], this._args[3]);
        },
        _on: function () {
        },
        _off: function () {
        },
        get: function () {
            var recordingObservation = ObservationRecorder.isRecording();
            if (recordingObservation && this._canObserve !== false) {
                ObservationRecorder.add(this, 'change');
                if (!this.bound) {
                    Compute.temporarilyBind(this);
                }
            }
            if (this.bound) {
                if (this.observation) {
                    return this.observation.get();
                } else {
                    return this.value;
                }
            } else {
                return this._get();
            }
        },
        _get: function () {
            return this.value;
        },
        set: function (newVal) {
            var old = this.value;
            var setVal = this._set(newVal, old);
            if (this._setUpdates) {
                return this.value;
            }
            if (this.hasDependencies) {
                return this._get();
            }
            this.updater(setVal === undefined ? this._get() : setVal, old);
            return this.value;
        },
        _set: function (newVal) {
            return this.value = newVal;
        },
        updater: function (newVal, oldVal, batchNum) {
            this.value = newVal;
            var observation = this.observation;
            if (observation) {
                if (observation.hasOwnProperty('_value')) {
                    observation._value = newVal;
                } else {
                    observation.value = newVal;
                }
            }
            updateOnChange(this, newVal, oldVal, batchNum);
        },
        toFunction: function () {
            return this._computeFn.bind(this);
        },
        _computeFn: function (newVal) {
            if (arguments.length) {
                return this.set(newVal);
            }
            return this.get();
        }
    });
    Compute.prototype.on = Compute.prototype.bind = Compute.prototype.addEventListener;
    Compute.prototype.off = Compute.prototype.unbind = Compute.prototype.removeEventListener;
    var hasDependencies = function hasDependencies() {
        return this.observation && this.observation.hasDependencies();
    };
    Object.defineProperty(Compute.prototype, 'hasDependencies', { get: hasDependencies });
    Compute.temporarilyBind = Observation.temporarilyBind;
    Compute.async = function (initialValue, asyncComputer, context) {
        return new Compute(initialValue, {
            fn: asyncComputer,
            context: context
        });
    };
    Compute.truthy = function (compute) {
        return new Compute(function () {
            var res = compute.get();
            if (typeof res === 'function') {
                res = res.get();
            }
            return !!res;
        });
    };
    canReflect.assignSymbols(Compute.prototype, {
        'can.isValueLike': true,
        'can.isMapLike': false,
        'can.isListLike': false,
        'can.setValue': Compute.prototype.set,
        'can.getValue': Compute.prototype.get,
        'can.valueHasDependencies': hasDependencies,
        'can.onValue': function onValue(handler, queue) {
            function translationHandler(ev, newValue, oldValue) {
                handler(newValue, oldValue);
            }
            singleReference.set(handler, this, translationHandler);
            if (process.env.NODE_ENV !== 'production') {
                Object.defineProperty(translationHandler, 'name', { value: canReflect.getName(handler) + '::onValue' });
            }
            this.addEventListener('change', translationHandler, queue);
        },
        'can.offValue': function offValue(handler, queue) {
            this.removeEventListener('change', singleReference.getAndDelete(handler, this), queue);
        },
        'can.getValueDependencies': function getValueDependencies() {
            var ret;
            if (this.observation) {
                ret = { valueDependencies: new Set([this.observation]) };
            }
            return ret;
        }
    });
    module.exports = exports = Compute;
});
/*can-compute@4.1.1#can-compute*/
define('can-compute@4.1.1#can-compute', [
    'require',
    'exports',
    'module',
    './proto-compute',
    'can-namespace',
    'can-single-reference',
    'can-reflect/reflections/get-set/get-set',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var Compute = require('./proto-compute');
    var namespace = require('can-namespace');
    var singleReference = require('can-single-reference');
    var canReflect = require('can-reflect/reflections/get-set/get-set');
    var canSymbol = require('can-symbol');
    var canOnValueSymbol = canSymbol.for('can.onValue'), canOffValueSymbol = canSymbol.for('can.offValue'), canGetValue = canSymbol.for('can.getValue'), canSetValue = canSymbol.for('can.setValue'), isValueLike = canSymbol.for('can.isValueLike'), isMapLike = canSymbol.for('can.isMapLike'), isListLike = canSymbol.for('can.isListLike'), isFunctionLike = canSymbol.for('can.isFunctionLike'), canValueHasDependencies = canSymbol.for('can.valueHasDependencies'), canGetValueDependencies = canSymbol.for('can.getValueDependencies');
    var addEventListener = function (ev, handler) {
        var compute = this;
        var translationHandler;
        if (handler) {
            translationHandler = function () {
                handler.apply(compute, arguments);
            };
            singleReference.set(handler, this, translationHandler);
        }
        return compute.computeInstance.addEventListener(ev, translationHandler);
    };
    var removeEventListener = function (ev, handler) {
        var args = [];
        if (typeof ev !== 'undefined') {
            args.push(ev);
            if (typeof handler !== 'undefined') {
                args.push(singleReference.getAndDelete(handler, this));
            }
        }
        return this.computeInstance.removeEventListener.apply(this.computeInstance, args);
    };
    var onValue = function (handler, queue) {
            return this.computeInstance[canOnValueSymbol](handler, queue);
        }, offValue = function (handler, queue) {
            return this.computeInstance[canOffValueSymbol](handler, queue);
        }, getValue = function () {
            return this.computeInstance.get();
        }, setValue = function (value) {
            return this.computeInstance.set(value);
        }, hasDependencies = function () {
            return this.computeInstance.hasDependencies;
        }, getDependencies = function () {
            return this.computeInstance[canGetValueDependencies]();
        };
    var COMPUTE = function (getterSetter, context, eventName, bindOnce) {
        function compute(val) {
            if (arguments.length) {
                return compute.computeInstance.set(val);
            }
            return compute.computeInstance.get();
        }
        compute.computeInstance = new Compute(getterSetter, context, eventName, bindOnce);
        compute.on = compute.bind = compute.addEventListener = addEventListener;
        compute.off = compute.unbind = compute.removeEventListener = removeEventListener;
        compute.isComputed = compute.computeInstance.isComputed;
        compute.clone = function (ctx) {
            if (typeof getterSetter === 'function') {
                context = ctx;
            }
            return COMPUTE(getterSetter, context, ctx, bindOnce);
        };
        canReflect.set(compute, canOnValueSymbol, onValue);
        canReflect.set(compute, canOffValueSymbol, offValue);
        canReflect.set(compute, canGetValue, getValue);
        canReflect.set(compute, canSetValue, setValue);
        canReflect.set(compute, isValueLike, true);
        canReflect.set(compute, isMapLike, false);
        canReflect.set(compute, isListLike, false);
        canReflect.set(compute, isFunctionLike, false);
        canReflect.set(compute, canValueHasDependencies, hasDependencies);
        canReflect.set(compute, canGetValueDependencies, getDependencies);
        return compute;
    };
    COMPUTE.truthy = function (compute) {
        return COMPUTE(function () {
            var res = compute();
            return !!res;
        });
    };
    COMPUTE.async = function (initialValue, asyncComputer, context) {
        return COMPUTE(initialValue, {
            fn: asyncComputer,
            context: context
        });
    };
    COMPUTE.temporarilyBind = Compute.temporarilyBind;
    module.exports = namespace.compute = COMPUTE;
});
/*can-stream@1.1.1#can-stream*/
define('can-stream@1.1.1#can-stream', [
    'require',
    'exports',
    'module',
    'can-assign',
    'can-compute',
    'can-reflect',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var assign = require('can-assign');
    var compute = require('can-compute');
    var canReflect = require('can-reflect');
    var namespace = require('can-namespace');
    var toComputeFromEvent = function (observable, eventName) {
        var handler, lastSet;
        return compute(undefined, {
            on: function (updated) {
                handler = function (ev, val) {
                    lastSet = assign({ args: [].slice.call(arguments, 1) }, ev);
                    updated();
                };
                observable.on(eventName, handler);
            },
            off: function (updated) {
                observable.off(eventName, handler);
                lastSet = undefined;
            },
            get: function () {
                return lastSet;
            }
        });
    };
    var STREAM = function (canStreamInterface) {
        var canStream;
        var toStreamFromProperty = function (obs, propName) {
            return canStreamInterface.toStream(compute(obs, propName));
        };
        var toStreamFromEvent = function () {
            var obs = arguments[0];
            var eventName, propName, lastValue, internalCompute;
            if (arguments.length === 2) {
                internalCompute = toComputeFromEvent(obs, arguments[1]);
                return canStreamInterface.toStream(internalCompute);
            } else {
                propName = arguments[1];
                eventName = arguments[2];
                lastValue = obs[propName];
                var valuePropCompute = compute(obs, propName);
                var eventHandler;
                var propChangeHandler;
                internalCompute = compute(undefined, {
                    on: function (updater) {
                        eventHandler = function (ev, newVal, oldVal) {
                            lastValue = newVal;
                            updater(lastValue);
                        };
                        propChangeHandler = function (ev, newVal, oldVal) {
                            oldVal.off(eventName, eventHandler);
                            newVal.on(eventName, eventHandler);
                        };
                        valuePropCompute.on('change', propChangeHandler);
                        valuePropCompute().on(eventName, eventHandler);
                    },
                    off: function () {
                        valuePropCompute().off(eventName, eventHandler);
                        valuePropCompute.off('change', propChangeHandler);
                    },
                    get: function () {
                        return lastValue;
                    },
                    set: function (val) {
                        throw new Error('can-stream: you can\'t set this type of compute');
                    }
                });
                var stream = canStreamInterface.toStream(internalCompute);
                return stream;
            }
        };
        var toStream = function () {
            if (arguments.length === 1) {
                return canStreamInterface.toStream(arguments[0]);
            } else if (arguments.length > 1) {
                var obs = arguments[0];
                var eventNameOrPropName = arguments[1].trim();
                if (eventNameOrPropName.indexOf(' ') === -1) {
                    if (eventNameOrPropName.indexOf('.') === 0) {
                        return canStream.toStreamFromProperty(obs, eventNameOrPropName.slice(1));
                    } else {
                        return canStream.toStreamFromEvent(obs, eventNameOrPropName);
                    }
                } else {
                    var splitEventNameAndProperty = eventNameOrPropName.split(' ');
                    return canStream.toStreamFromEvent(obs, splitEventNameAndProperty[0].slice(1), splitEventNameAndProperty[1]);
                }
            }
            return undefined;
        };
        var toCompute = function (makeStream, context) {
            var args = canReflect.toArray(arguments);
            return canStreamInterface.toCompute.apply(this, args);
        };
        canStream = toStream;
        canStream.toStream = canStream;
        canStream.toStreamFromProperty = toStreamFromProperty;
        canStream.toStreamFromEvent = toStreamFromEvent;
        canStream.toCompute = toCompute;
        return canStream;
    };
    STREAM.toComputeFromEvent = toComputeFromEvent;
    module.exports = namespace.stream = STREAM;
});
/*can-stream-kefir@1.2.1#can-stream-kefir*/
define('can-stream-kefir@1.2.1#can-stream-kefir', [
    'require',
    'exports',
    'module',
    'can-kefir',
    'can-compute',
    'can-stream',
    'can-symbol',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var Kefir = require('can-kefir');
    var compute = require('can-compute');
    var canStream = require('can-stream');
    var canSymbol = require('can-symbol');
    var namespace = require('can-namespace');
    var getValueDependenciesSymbol = canSymbol.for('can.getValueDependencies');
    var getKeyDependenciesSymbol = canSymbol.for('can.getKeyDependencies');
    var canStreamKefir = {};
    canStreamKefir.toStream = function (compute) {
        var stream = Kefir.stream(function (emitter) {
            var changeHandler = function (ev, newVal) {
                emitter.emit(newVal);
            };
            compute.on('change', changeHandler);
            var currentValue = compute();
            if (currentValue !== undefined) {
                emitter.emit(currentValue);
            }
            return function () {
                compute.off('change', changeHandler);
            };
        });
        stream[getValueDependenciesSymbol] = function getValueDependencies() {
            return { valueDependencies: new Set([compute]) };
        };
        return stream;
    };
    canStreamKefir.toCompute = function (makeStream, context) {
        var emitter, lastValue, streamHandler, lastSetValue;
        var setterStream = Kefir.stream(function (e) {
            emitter = e;
            if (lastSetValue !== undefined) {
                emitter.emit(lastSetValue);
            }
        });
        var valueStream = makeStream.call(context, setterStream);
        var streamCompute = compute(undefined, {
            get: function () {
                return lastValue;
            },
            set: function (val) {
                if (emitter) {
                    emitter.emit(val);
                } else {
                    lastSetValue = val;
                }
                return val;
            },
            on: function (updated) {
                streamHandler = function (val) {
                    lastValue = val;
                    updated();
                };
                valueStream.onValue(streamHandler);
            },
            off: function () {
                valueStream.offValue(streamHandler);
            }
        });
        var _compute = streamCompute.computeInstance;
        _compute[getKeyDependenciesSymbol] = function getKeyDependencies(key) {
            if (key === 'change') {
                return { valueDependencies: new Set([valueStream]) };
            }
        };
        return streamCompute;
    };
    if (!namespace.streamKefir) {
        module.exports = namespace.streamKefir = canStream(canStreamKefir);
    }
});
/*can-define-stream-kefir@1.1.1#can-define-stream-kefir*/
define('can-define-stream-kefir@1.1.1#can-define-stream-kefir', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-define-stream',
    'can-stream-kefir'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var canDefineStream = require('can-define-stream');
    var canStreamKefir = require('can-stream-kefir');
    module.exports = namespace.defineStreamKefir = canDefineStream(canStreamKefir);
});
/*can@5.31.0#es/can-define-stream-kefir*/
define('can@5.31.0#es/can-define-stream-kefir', [
    'exports',
    'can-define-stream-kefir'
], function (exports, _canDefineStreamKefir) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canDefineStreamKefir).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-kefir*/
define('can@5.31.0#es/can-kefir', [
    'exports',
    'can-kefir'
], function (exports, _canKefir) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canKefir).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-observe@2.3.1#src/-symbols*/
define('can-observe@2.3.1#src/-symbols', [
    'require',
    'exports',
    'module',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    module.exports = {
        metaSymbol: canSymbol.for('can.meta'),
        patchesSymbol: 'can.patches',
        keysSymbol: 'can.keys'
    };
});
/*can-observe@2.3.1#src/-observable-store*/
define('can-observe@2.3.1#src/-observable-store', function (require, exports, module) {
    'use strict';
    module.exports = {
        proxiedObjects: new WeakMap(),
        proxies: new WeakSet()
    };
});
/*can-observe@2.3.1#src/-helpers*/
define('can-observe@2.3.1#src/-helpers', [
    'require',
    'exports',
    'module',
    'can-globals/global/global',
    'can-symbol'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getGlobal = require('can-globals/global/global');
        var canSymbol = require('can-symbol');
        var metaSymbol = canSymbol.for('can.meta');
        var classTest = /^\s*class\s+/;
        var helpers = {
            assignEverything: function (d, s) {
                Object.getOwnPropertyNames(s).concat(Object.getOwnPropertySymbols(s)).forEach(function (key) {
                    Object.defineProperty(d, key, Object.getOwnPropertyDescriptor(s, key));
                });
                return d;
            },
            isBuiltInButNotArrayOrPlainObjectOrElement: function (obj) {
                if (obj instanceof getGlobal().Element) {
                    return false;
                }
                return helpers.isBuiltInButNotArrayOrPlainObject(obj);
            },
            isBuiltInButNotArrayOrPlainObject: function (obj) {
                if (Array.isArray(obj)) {
                    return false;
                }
                if (typeof obj === 'function') {
                    var fnCode = obj.toString();
                    if (fnCode.indexOf('[native code]') > 0) {
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    var toString = Object.prototype.toString.call(obj);
                    return toString !== '[object Object]' && toString.indexOf('[object ') !== -1;
                }
            },
            inheritsFromArray: function (obj) {
                var cur = obj;
                do {
                    if (Array.isArray(cur)) {
                        return true;
                    }
                    cur = Object.getPrototypeOf(cur);
                } while (cur);
                return false;
            },
            isClass: function (obj) {
                return typeof obj === 'function' && classTest.test(obj.toString());
            },
            supportsClass: function () {
                try {
                    eval('"use strict"; class A{};');
                    return true;
                } catch (e) {
                    return false;
                }
            }(),
            makeSimpleExtender: function (BaseType) {
                return function extend(name, staticProps, prototypeProps) {
                    var Type = function () {
                        var source = this;
                        var instance = BaseType.apply(this, arguments);
                        if (source.init) {
                            instance[metaSymbol].preventSideEffects++;
                            source.init.apply(instance, arguments);
                            instance[metaSymbol].preventSideEffects--;
                        }
                        return instance;
                    };
                    helpers.assignEverything(Type, BaseType);
                    helpers.assignEverything(Type, staticProps || {});
                    Type.extend = helpers.makeSimpleExtender(Type);
                    Type.prototype = Object.create(BaseType.prototype);
                    helpers.assignEverything(Type.prototype, prototypeProps || {});
                    Type.prototype.constructor = Type;
                    if (process.env.NODE_ENV !== 'production') {
                        Object.defineProperty(Type, 'name', { value: name });
                    }
                    return Type;
                };
            },
            assignNonEnumerable: function (obj, key, value) {
                return Object.defineProperty(obj, key, {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: value
                });
            }
        };
        module.exports = helpers;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-observe@2.3.1#src/-computed-helpers*/
define('can-observe@2.3.1#src/-computed-helpers', [
    'require',
    'exports',
    'module',
    'can-observation',
    'can-observation-recorder',
    'can-event-queue/map/map',
    'can-reflect',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var Observation = require('can-observation');
    var ObservationRecorder = require('can-observation-recorder');
    var mapBindings = require('can-event-queue/map/map');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var canMeta = canSymbol.for('can.meta');
    var computedPropertyDefinitionSymbol = canSymbol.for('can.computedPropertyDefinitions');
    var onKeyValueSymbol = canSymbol.for('can.onKeyValue');
    var offKeyValueSymbol = canSymbol.for('can.offKeyValue');
    function ComputedObjectObservationData(instance, prop, observation) {
        this.instance = instance;
        this.prop = prop;
        this.observation = observation;
        this.forward = this.forward.bind(this);
    }
    ComputedObjectObservationData.prototype.bind = function () {
        this.bindingCount++;
        if (this.bindingCount === 1) {
            this.observation.on(this.forward, 'notify');
        }
    };
    ComputedObjectObservationData.prototype.unbind = function () {
        this.bindingCount--;
        if (this.bindingCount === 0) {
            this.observation.off(this.forward, 'notify');
        }
    };
    ComputedObjectObservationData.prototype.forward = function (newValue, oldValue) {
        mapBindings.dispatch.call(this.instance, {
            type: this.prop,
            target: this.instance
        }, [
            newValue,
            oldValue
        ]);
    };
    ComputedObjectObservationData.prototype.bindingCount = 0;
    function findComputed(instance, key) {
        var meta = instance[canMeta];
        var target = meta.target;
        var computedPropertyDefinitions = target[computedPropertyDefinitionSymbol];
        if (computedPropertyDefinitions === undefined) {
            return;
        }
        var computedPropertyDefinition = computedPropertyDefinitions[key];
        if (computedPropertyDefinition === undefined) {
            return;
        }
        if (meta.computedKeys[key] === undefined) {
            meta.computedKeys[key] = new ComputedObjectObservationData(instance, key, computedPropertyDefinition(instance, key));
        }
        return meta.computedKeys[key];
    }
    var computedHelpers = module.exports = {
        get: function (instance, key) {
            var computedObj = findComputed(instance, key);
            if (computedObj === undefined) {
                return;
            }
            ObservationRecorder.add(instance, key.toString());
            if (computedObj.bindingCount === 0 && ObservationRecorder.isRecording()) {
                Observation.temporarilyBind(computedObj.observation);
            }
            return { value: canReflect.getValue(computedObj.observation) };
        },
        set: function (instance, key, value) {
            var computedObj = findComputed(instance, key);
            if (computedObj === undefined) {
                return false;
            }
            if (process.env.NODE_ENV !== 'production') {
                if (computedObj.observation[canSymbol.for('can.setValue')] === undefined) {
                    throw new Error('Cannot set "' + key + '" on ' + canReflect.getName(instance));
                }
            }
            canReflect.setValue(computedObj.observation, value);
            return true;
        },
        bind: function (instance, key) {
            var computedObj = findComputed(instance, key);
            if (computedObj === undefined) {
                return;
            }
            computedObj.bind();
        },
        unbind: function (instance, key) {
            var computedObj = findComputed(instance, key);
            if (computedObj === undefined) {
                return;
            }
            computedObj.unbind();
        },
        addKeyDependencies: function (proxyKeys) {
            var onKeyValue = proxyKeys[onKeyValueSymbol];
            var offKeyValue = proxyKeys[offKeyValueSymbol];
            canReflect.assignSymbols(proxyKeys, {
                'can.onKeyValue': function (key, handler, queue) {
                    computedHelpers.bind(this, key);
                    return onKeyValue.apply(this, arguments);
                },
                'can.offKeyValue': function (key, handler, queue) {
                    computedHelpers.unbind(this, key);
                    return offKeyValue.apply(this, arguments);
                },
                'can.getKeyDependencies': function (key) {
                    var computedObj = findComputed(this, key);
                    if (computedObj === undefined) {
                        return;
                    }
                    return { valueDependencies: new Set([computedObj.observation]) };
                }
            });
        },
        addMethodsAndSymbols: function (Type) {
            Type.prototype.addEventListener = function (key, handler, queue) {
                computedHelpers.bind(this, key);
                return mapBindings.addEventListener.call(this, key, handler, queue);
            };
            Type.prototype.removeEventListener = function (key, handler, queue) {
                computedHelpers.unbind(this, key);
                return mapBindings.removeEventListener.call(this, key, handler, queue);
            };
        },
        ensureDefinition: function (prototype) {
            if (!prototype.hasOwnProperty(computedPropertyDefinitionSymbol)) {
                var parent = prototype[computedPropertyDefinitionSymbol];
                var definitions = prototype[computedPropertyDefinitionSymbol] = Object.create(parent || null);
                Object.getOwnPropertyNames(prototype).forEach(function (prop) {
                    if (prop === 'constructor') {
                        return;
                    }
                    var descriptor = Object.getOwnPropertyDescriptor(prototype, prop);
                    if (descriptor.get !== undefined) {
                        var getter = descriptor.get;
                        definitions[prop] = function (instance, property) {
                            return new Observation(getter, instance);
                        };
                    }
                });
            }
            return prototype[computedPropertyDefinitionSymbol];
        }
    };
});
/*can-observe@2.3.1#src/-make-object*/
define('can-observe@2.3.1#src/-make-object', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-observation-recorder',
    'can-event-queue/map/map',
    './-symbols',
    './-observable-store',
    './-helpers',
    './-computed-helpers'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var ObservationRecorder = require('can-observation-recorder');
    var mapBindings = require('can-event-queue/map/map');
    var symbols = require('./-symbols');
    var observableStore = require('./-observable-store');
    var helpers = require('./-helpers');
    var computedHelpers = require('./-computed-helpers');
    var hasOwn = Object.prototype.hasOwnProperty;
    var isSymbolLike = canReflect.isSymbolLike;
    var proxyKeys = Object.create(null);
    Object.getOwnPropertySymbols(mapBindings).forEach(function (symbol) {
        helpers.assignNonEnumerable(proxyKeys, symbol, mapBindings[symbol]);
    });
    computedHelpers.addKeyDependencies(proxyKeys);
    var makeObject = {
        observable: function (object, options) {
            if (options.shouldRecordObservation === undefined) {
                options.shouldRecordObservation = makeObject.shouldRecordObservationOnOwnAndMissingKeys;
            }
            var meta = {
                target: object,
                proxyKeys: options.proxyKeys !== undefined ? options.proxyKeys : Object.create(makeObject.proxyKeys()),
                computedKeys: Object.create(null),
                options: options,
                preventSideEffects: 0
            };
            helpers.assignNonEnumerable(meta.proxyKeys, symbols.metaSymbol, meta);
            var traps = {
                get: makeObject.get.bind(meta),
                set: makeObject.set.bind(meta),
                ownKeys: makeObject.ownKeys.bind(meta),
                deleteProperty: makeObject.deleteProperty.bind(meta),
                getOwnPropertyDescriptor: makeObject.getOwnPropertyDescriptor.bind(meta),
                meta: meta
            };
            if (options.getPrototypeOf) {
                traps.getPrototypeOf = options.getPrototypeOf;
            }
            meta.proxy = new Proxy(object, traps);
            mapBindings.addHandlers(meta.proxy, meta);
            return meta.proxy;
        },
        proxyKeys: function () {
            return proxyKeys;
        },
        get: function (target, key, receiver) {
            var proxyKey = this.proxyKeys[key];
            if (proxyKey !== undefined) {
                return proxyKey;
            }
            if (isSymbolLike(key)) {
                return target[key];
            }
            var computedValue = computedHelpers.get(receiver, key);
            if (computedValue !== undefined) {
                return computedValue.value;
            }
            var keyInfo = makeObject.getKeyInfo(target, key, receiver, this);
            var value = keyInfo.targetValue;
            if (!keyInfo.valueIsInvariant) {
                value = makeObject.getValueFromStore(key, value, this);
            }
            if (this.options.shouldRecordObservation(keyInfo, this)) {
                ObservationRecorder.add(this.proxy, key.toString());
            }
            if (keyInfo.parentObservableGetCalledOn) {
                ObservationRecorder.add(keyInfo.parentObservableGetCalledOn, key.toString());
            }
            return value;
        },
        set: function (target, key, value, receiver) {
            if (receiver !== this.proxy && this.options.proxiedPrototype !== true) {
                return makeObject.setKey(receiver, key, value, this);
            }
            var computedValue = computedHelpers.set(receiver, key, value);
            if (computedValue === true) {
                return true;
            }
            value = makeObject.getValueToSet(key, value, this);
            makeObject.setValueAndOnChange(key, value, this, function (key, value, meta, hadOwn, old) {
                var reasonLog = [
                    canReflect.getName(meta.proxy) + ' set',
                    key,
                    'to',
                    value
                ];
                var dispatchArgs = {
                    type: key,
                    patches: [{
                            key: key,
                            type: hadOwn ? 'set' : 'add',
                            value: value
                        }],
                    keyChanged: !hadOwn ? key : undefined
                };
                if (process.env.NODE_ENV !== 'production') {
                    dispatchArgs.reasonLog = reasonLog;
                }
                mapBindings.dispatch.call(meta.proxy, dispatchArgs, [
                    value,
                    old
                ]);
            });
            return true;
        },
        deleteProperty: function (target, key) {
            var old = this.target[key], deleteSuccessful = delete this.target[key];
            if (deleteSuccessful && this.preventSideEffects === 0 && old !== undefined) {
                var reasonLog = [
                    canReflect.getName(this.proxy) + ' deleted',
                    key
                ];
                var dispatchArgs = {
                    type: key,
                    patches: [{
                            key: key,
                            type: 'delete'
                        }],
                    keyChanged: key
                };
                if (process.env.NODE_ENV !== 'production') {
                    dispatchArgs.reasonLog = reasonLog;
                }
                mapBindings.dispatch.call(this.proxy, dispatchArgs, [
                    undefined,
                    old
                ]);
            }
            return deleteSuccessful;
        },
        ownKeys: function (target) {
            ObservationRecorder.add(this.proxy, symbols.keysSymbol);
            return Object.getOwnPropertyNames(this.target).concat(Object.getOwnPropertySymbols(this.target)).concat(Object.getOwnPropertySymbols(this.proxyKeys));
        },
        getOwnPropertyDescriptor: function (target, key) {
            var desc = Object.getOwnPropertyDescriptor(target, key);
            if (!desc && key in this.proxyKeys) {
                return Object.getOwnPropertyDescriptor(this.proxyKeys, key);
            }
            return desc;
        },
        getKeyInfo: function (target, key, receiver, meta) {
            var descriptor = Object.getOwnPropertyDescriptor(target, key);
            var propertyInfo = {
                key: key,
                descriptor: descriptor,
                targetHasOwnKey: Boolean(descriptor),
                getCalledOnParent: receiver !== meta.proxy,
                protoHasKey: false,
                valueIsInvariant: false,
                targetValue: undefined,
                isAccessor: false
            };
            if (propertyInfo.getCalledOnParent === true) {
                propertyInfo.parentObservableGetCalledOn = observableStore.proxiedObjects.get(receiver);
            }
            if (descriptor !== undefined) {
                propertyInfo.valueIsInvariant = descriptor.writable === false;
                if (descriptor.get !== undefined) {
                    propertyInfo.targetValue = descriptor.get.call(propertyInfo.parentObservableGetCalledOn || receiver);
                    propertyInfo.isAccessor = true;
                } else {
                    propertyInfo.targetValue = descriptor.value;
                }
            } else {
                propertyInfo.targetValue = meta.target[key];
                propertyInfo.protoHasKey = propertyInfo.targetValue !== undefined ? true : key in target;
            }
            return propertyInfo;
        },
        shouldRecordObservationOnOwnAndMissingKeys: function (keyInfo, meta) {
            return meta.preventSideEffects === 0 && !keyInfo.isAccessor && (keyInfo.targetHasOwnKey || !keyInfo.protoHasKey && !Object.isSealed(meta.target));
        },
        setKey: function (receiver, key, value) {
            Object.defineProperty(receiver, key, {
                value: value,
                configurable: true,
                enumerable: true,
                writable: true
            });
            return true;
        },
        getValueToSet: function (key, value, meta) {
            if (!canReflect.isSymbolLike(key) && meta.handlers.getNode([key])) {
                return makeObject.getValueFromStore(key, value, meta);
            }
            return value;
        },
        getValueFromStore: function (key, value, meta) {
            if (!canReflect.isPrimitive(value) && !canReflect.isObservableLike(value) && !observableStore.proxies.has(value)) {
                if (observableStore.proxiedObjects.has(value)) {
                    value = observableStore.proxiedObjects.get(value);
                } else if (!helpers.isBuiltInButNotArrayOrPlainObject(value)) {
                    value = meta.options.observe(value);
                }
            }
            return value;
        },
        setValueAndOnChange: function (key, value, data, onChange) {
            var old, change;
            var hadOwn = hasOwn.call(data.target, key);
            var descriptor = Object.getOwnPropertyDescriptor(data.target, key);
            if (descriptor && descriptor.set) {
                descriptor.set.call(data.proxy, value);
            } else {
                old = data.target[key];
                change = old !== value;
                if (change) {
                    data.target[key] = value;
                    if (data.preventSideEffects === 0) {
                        onChange(key, value, data, hadOwn, old);
                    }
                }
            }
        }
    };
    module.exports = makeObject;
});
/*can-observe@2.3.1#src/-make-array*/
define('can-observe@2.3.1#src/-make-array', [
    'require',
    'exports',
    'module',
    'can-observation-recorder',
    'can-event-queue/map/map',
    'can-reflect',
    './-make-object',
    './-symbols',
    './-observable-store',
    './-helpers',
    './-computed-helpers'
], function (require, exports, module) {
    'use strict';
    var ObservationRecorder = require('can-observation-recorder');
    var mapBindings = require('can-event-queue/map/map');
    var canReflect = require('can-reflect');
    var makeObject = require('./-make-object');
    var symbols = require('./-symbols');
    var observableStore = require('./-observable-store');
    var helpers = require('./-helpers');
    var computedHelpers = require('./-computed-helpers');
    var isSymbolLike = canReflect.isSymbolLike;
    var isInteger = Number.isInteger || function (value) {
        return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
    };
    function didLengthChangeCauseDeletions(key, value, old) {
        return key === 'length' && value < old;
    }
    var mutateMethods = {
        'push': function (arr, args) {
            return [{
                    index: arr.length - args.length,
                    deleteCount: 0,
                    insert: args,
                    type: 'splice'
                }];
        },
        'pop': function (arr) {
            return [{
                    index: arr.length,
                    deleteCount: 1,
                    insert: [],
                    type: 'splice'
                }];
        },
        'shift': function () {
            return [{
                    index: 0,
                    deleteCount: 1,
                    insert: [],
                    type: 'splice'
                }];
        },
        'unshift': function (arr, args) {
            return [{
                    index: 0,
                    deleteCount: 0,
                    insert: args,
                    type: 'splice'
                }];
        },
        'splice': function (arr, args) {
            return [{
                    index: args[0],
                    deleteCount: args[1],
                    insert: args.slice(2),
                    type: 'splice'
                }];
        },
        'sort': function (arr) {
            return [{
                    index: 0,
                    deleteCount: arr.length,
                    insert: arr,
                    type: 'splice'
                }];
        },
        'reverse': function (arr, args, old) {
            return [{
                    index: 0,
                    deleteCount: arr.length,
                    insert: arr,
                    type: 'splice'
                }];
        }
    };
    canReflect.eachKey(mutateMethods, function (makePatches, prop) {
        var protoFn = Array.prototype[prop];
        var mutateMethod = function () {
            var meta = this[symbols.metaSymbol], makeSideEffects = meta.preventSideEffects === 0, oldLength = meta.target.length;
            meta.preventSideEffects++;
            var ret = protoFn.apply(meta.target, arguments);
            var patches = makePatches(meta.target, Array.from(arguments), oldLength);
            if (makeSideEffects === true) {
                var reasonLog = [
                    canReflect.getName(meta.proxy) + '.' + prop + ' called with',
                    arguments
                ];
                var dispatchArgs = {
                    type: 'length',
                    patches: patches
                };
                if (process.env.NODE_ENV !== 'production') {
                    dispatchArgs.reasonLog = reasonLog;
                }
                mapBindings.dispatch.call(meta.proxy, dispatchArgs, [
                    meta.target.length,
                    oldLength
                ]);
            }
            meta.preventSideEffects--;
            return ret;
        };
        if (process.env.NODE_ENV !== 'production') {
            Object.defineProperty(mutateMethod, 'name', { value: prop });
        }
        observableStore.proxiedObjects.set(protoFn, mutateMethod);
        observableStore.proxies.add(mutateMethod);
    });
    Object.getOwnPropertyNames(Array.prototype).forEach(function (prop) {
        var protoFn = Array.prototype[prop];
        if (observableStore.proxiedObjects.has(protoFn)) {
            return;
        }
        if (prop !== 'constructor' && typeof protoFn === 'function') {
            var arrayMethod = function () {
                ObservationRecorder.add(this, symbols.patchesSymbol);
                var meta = this[symbols.metaSymbol];
                meta.preventSideEffects++;
                var ret = protoFn.apply(this, arguments);
                meta.preventSideEffects--;
                return meta.options.observe(ret);
            };
            if (process.env.NODE_ENV !== 'production') {
                Object.defineProperty(arrayMethod, 'name', { value: prop });
            }
            observableStore.proxiedObjects.set(protoFn, arrayMethod);
            observableStore.proxies.add(arrayMethod);
        }
    });
    var proxyKeys = helpers.assignEverything(Object.create(null), makeObject.proxyKeys());
    var makeArray = {
        observable: function (array, options) {
            if (options.shouldRecordObservation === undefined) {
                options.shouldRecordObservation = makeObject.shouldRecordObservationOnOwnAndMissingKeys;
            }
            var meta = {
                target: array,
                proxyKeys: options.proxyKeys !== undefined ? options.proxyKeys : Object.create(makeArray.proxyKeys()),
                computedKeys: Object.create(null),
                options: options,
                preventSideEffects: 0
            };
            meta.proxyKeys[symbols.metaSymbol] = meta;
            meta.proxy = new Proxy(array, {
                get: makeObject.get.bind(meta),
                set: makeArray.set.bind(meta),
                ownKeys: makeObject.ownKeys.bind(meta),
                deleteProperty: makeObject.deleteProperty.bind(meta),
                meta: meta
            });
            mapBindings.addHandlers(meta.proxy, meta);
            return meta.proxy;
        },
        proxyKeys: function () {
            return proxyKeys;
        },
        set: function (target, key, value, receiver) {
            if (receiver !== this.proxy) {
                return makeObject.setKey(receiver, key, value, this);
            }
            var computedValue = computedHelpers.set(receiver, key, value);
            if (computedValue === true) {
                return true;
            }
            value = makeObject.getValueToSet(key, value, this);
            var startingLength = target.length;
            makeObject.setValueAndOnChange(key, value, this, function (key, value, meta, hadOwn, old) {
                var patches = [{
                        key: key,
                        type: hadOwn ? 'set' : 'add',
                        value: value
                    }];
                var numberKey = !isSymbolLike(key) && +key;
                if (isInteger(numberKey)) {
                    if (!hadOwn && numberKey > startingLength) {
                        patches.push({
                            index: startingLength,
                            deleteCount: 0,
                            insert: target.slice(startingLength),
                            type: 'splice'
                        });
                    } else {
                        patches.push.apply(patches, mutateMethods.splice(target, [
                            numberKey,
                            1,
                            value
                        ]));
                    }
                }
                if (didLengthChangeCauseDeletions(key, value, old, meta)) {
                    patches.push({
                        index: value,
                        deleteCount: old - value,
                        insert: [],
                        type: 'splice'
                    });
                }
                var reasonLog = [
                    canReflect.getName(meta.proxy) + ' set',
                    key,
                    'to',
                    value
                ];
                var dispatchArgs = {
                    type: key,
                    patches: patches,
                    keyChanged: !hadOwn ? key : undefined
                };
                if (process.env.NODE_ENV !== 'production') {
                    dispatchArgs.reasonLog = reasonLog;
                }
                mapBindings.dispatch.call(meta.proxy, dispatchArgs, [
                    value,
                    old
                ]);
            });
            return true;
        }
    };
    module.exports = makeArray;
});
/*can-observe@2.3.1#src/-make-observe*/
define('can-observe@2.3.1#src/-make-observe', [
    'require',
    'exports',
    'module',
    'can-globals/global/global',
    'can-reflect',
    './-observable-store',
    './-helpers'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getGlobal = require('can-globals/global/global');
        var canReflect = require('can-reflect');
        var observables = require('./-observable-store');
        var helpers = require('./-helpers');
        var makeObserve = {
            observe: function (value) {
                if (canReflect.isPrimitive(value)) {
                    return value;
                }
                var observable = observables.proxiedObjects.get(value);
                if (observable) {
                    return observable;
                }
                if (observables.proxies.has(value)) {
                    return value;
                }
                if (helpers.isBuiltInButNotArrayOrPlainObjectOrElement(value)) {
                    return value;
                }
                if (typeof value === 'function') {
                    observable = makeObserve.function(value);
                } else if (helpers.inheritsFromArray(value)) {
                    observable = makeObserve.array(value);
                } else if (value instanceof getGlobal().Element) {
                    observable = makeObserve.prototype(value);
                } else {
                    observable = makeObserve.object(value);
                }
                observables.proxiedObjects.set(value, observable);
                observables.proxies.add(observable);
                return observable;
            },
            'object': null,
            'array': null,
            'function': null
        };
        module.exports = makeObserve;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-observe@2.3.1#src/-make-function*/
define('can-observe@2.3.1#src/-make-function', [
    'require',
    'exports',
    'module',
    'can-reflect',
    './-make-object',
    './-make-observe',
    './-symbols',
    './-observable-store',
    'can-event-queue/map/map',
    'can-event-queue/type/type',
    './-helpers'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var makeObject = require('./-make-object');
    var makeObserve = require('./-make-observe');
    var symbols = require('./-symbols');
    var observableStore = require('./-observable-store');
    var mapBindings = require('can-event-queue/map/map');
    var typeBindings = require('can-event-queue/type/type');
    var helpers = require('./-helpers');
    var proxyKeys = helpers.assignEverything(Object.create(null), makeObject.proxyKeys());
    typeBindings(proxyKeys);
    canReflect.assignSymbols(proxyKeys, {
        'can.defineInstanceKey': function (prop, value) {
            this[symbols.metaSymbol].definitions[prop] = value;
        }
    });
    var makeFunction = {
        observable: function (object, options) {
            if (options.shouldRecordObservation === undefined) {
                options.shouldRecordObservation = makeObject.shouldRecordObservationOnOwnAndMissingKeys;
            }
            var proxyKeys = Object.create(makeFunction.proxyKeys());
            var meta = {
                target: object,
                proxyKeys: proxyKeys,
                computedKeys: Object.create(null),
                options: options,
                definitions: {},
                isClass: helpers.isClass(object),
                preventSideEffects: 0
            };
            proxyKeys[symbols.metaSymbol] = meta;
            meta.proxy = new Proxy(object, {
                get: makeObject.get.bind(meta),
                set: makeObject.set.bind(meta),
                ownKeys: makeObject.ownKeys.bind(meta),
                deleteProperty: makeObject.deleteProperty.bind(meta),
                construct: makeFunction.construct.bind(meta),
                apply: makeFunction.apply.bind(meta),
                meta: meta
            });
            mapBindings.addHandlers(meta.proxy, meta);
            typeBindings.addHandlers(meta.proxy, meta);
            observableStore.proxiedObjects.set(object, meta.proxy);
            observableStore.proxies.add(meta.proxy);
            if (meta.target.prototype && meta.target.prototype.constructor === meta.target) {
                var newPrototype = makeObject.observable(meta.target.prototype, {
                    getPrototypeOf: function () {
                        return meta.target.prototype;
                    },
                    observe: makeObserve.observe
                });
                observableStore.proxiedObjects.set(meta.target.prototype, newPrototype);
                observableStore.proxies.add(newPrototype);
                var prototype = meta.proxy.prototype;
                prototype.constructor = meta.proxy;
            }
            return meta.proxy;
        },
        construct: function (target, argumentsList, newTarget) {
            var instanceTarget, key;
            if (this.isClass) {
                instanceTarget = Reflect.construct(target, argumentsList, newTarget);
                for (key in this.definitions) {
                    Object.defineProperty(instanceTarget, key, this.definitions[key]);
                }
                return this.options.observe(instanceTarget);
            } else {
                instanceTarget = Object.create(this.proxy.prototype);
                for (key in this.definitions) {
                    Object.defineProperty(instanceTarget, key, this.definitions[key]);
                }
                var instance = this.options.observe(instanceTarget);
                instance[symbols.metaSymbol].preventSideEffects++;
                var res = target.apply(instance, argumentsList);
                instance[symbols.metaSymbol].preventSideEffects--;
                if (res) {
                    return res;
                } else {
                    return instance;
                }
            }
        },
        apply: function (target, thisArg, argumentsList) {
            var ret = this.target.apply(thisArg, argumentsList);
            return this.options.observe(ret);
        },
        proxyKeys: function () {
            return proxyKeys;
        }
    };
    module.exports = makeFunction;
});
/*can-observe@2.3.1#src/-make-prototype*/
define('can-observe@2.3.1#src/-make-prototype', [
    'require',
    'exports',
    'module',
    './-make-object',
    './-helpers',
    './-symbols',
    'can-event-queue/map/map',
    'can-reflect',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var makeObject = require('./-make-object');
    var helpers = require('./-helpers');
    var symbols = require('./-symbols');
    var mapBindings = require('can-event-queue/map/map');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var isSymbolLike = canReflect.isSymbolLike;
    var proxyMetaSymbol = canSymbol.for('can.proxyMeta');
    function getMetadata(instance, options) {
        if (instance.hasOwnProperty(proxyMetaSymbol)) {
            return instance[proxyMetaSymbol];
        }
        if (options.shouldRecordObservation === undefined) {
            options.shouldRecordObservation = makeObject.shouldRecordObservationOnOwnAndMissingKeys;
        }
        options.proxiedPrototype = true;
        var meta = {
            target: makeObject.observable({}, options),
            proxyKeys: options.proxyKeys !== undefined ? options.proxyKeys : Object.create(makeObject.proxyKeys()),
            computedKeys: Object.create(null),
            options: options,
            preventSideEffects: 0,
            proxy: instance
        };
        helpers.assignNonEnumerable(meta.proxyKeys, symbols.metaSymbol, meta);
        mapBindings.addHandlers(meta.proxy, meta);
        instance[proxyMetaSymbol] = meta;
        return meta;
    }
    var makePrototype = {
        observable: function (proto, options) {
            var protoProxy = new Proxy(proto, {
                set: function (target, key, value, receiver) {
                    if (isSymbolLike(key) || key in target) {
                        return Reflect.set(target, key, value, receiver);
                    }
                    var meta = getMetadata(receiver, options);
                    return makeObject.set.call(meta, target, key, value, receiver);
                },
                get: function (target, key, receiver) {
                    if (key in target) {
                        return Reflect.get(target, key, receiver);
                    }
                    var meta = getMetadata(receiver, options);
                    return makeObject.get.call(meta, target, key, receiver);
                }
            });
            return protoProxy;
        }
    };
    module.exports = makePrototype;
});
/*can-observe@2.3.1#src/-type-helpers*/
define('can-observe@2.3.1#src/-type-helpers', [
    'require',
    'exports',
    'module',
    'can-queues',
    'can-reflect',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var queues = require('can-queues');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var canMeta = canSymbol.for('can.meta');
    var typeDefinitionsSymbol = canSymbol.for('can.typeDefinitions');
    var helpers = module.exports = {
        ensureDefinition: function (prototype) {
            var typeDefs = prototype[typeDefinitionsSymbol];
            if (!typeDefs) {
                var parent = prototype[typeDefinitionsSymbol];
                typeDefs = prototype[typeDefinitionsSymbol] = Object.create(parent || null);
            }
            return typeDefs;
        },
        addMethodsAndSymbols: function (Type) {
            canReflect.assignSymbols(Type, {
                'can.defineInstanceKey': function (prop, value) {
                    helpers.ensureDefinition(this.prototype)[prop] = value;
                },
                'can.dispatchInstanceBoundChange': function (obj, isBound) {
                    var meta = this[canMeta];
                    if (meta) {
                        var lifecycleHandlers = meta.lifecycleHandlers;
                        if (lifecycleHandlers) {
                            queues.enqueueByQueue(lifecycleHandlers.getNode([]), this, [
                                obj,
                                isBound
                            ]);
                        }
                    }
                }
            });
        },
        shouldRecordObservationOnAllKeysExceptFunctionsOnProto: function (keyInfo, meta) {
            return meta.preventSideEffects === 0 && !keyInfo.isAccessor && (keyInfo.targetHasOwnKey || !keyInfo.protoHasKey && !Object.isSealed(meta.target) || keyInfo.protoHasKey && typeof targetValue !== 'function');
        }
    };
});
/*can-observe@2.3.1#object/object*/
define('can-observe@2.3.1#object/object', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-symbol',
    '../src/-make-observe',
    'can-event-queue/map/map',
    'can-event-queue/type/type',
    '../src/-helpers',
    '../src/-make-object',
    '../src/-observable-store',
    '../src/-computed-helpers',
    '../src/-type-helpers'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var makeObserve = require('../src/-make-observe');
    var eventMixin = require('can-event-queue/map/map');
    var typeEventMixin = require('can-event-queue/type/type');
    var helpers = require('../src/-helpers');
    var makeObject = require('../src/-make-object');
    var observableStore = require('../src/-observable-store');
    var definitionsSymbol = canSymbol.for('can.typeDefinitions');
    var computedHelpers = require('../src/-computed-helpers');
    var typeHelpers = require('../src/-type-helpers');
    var proxyKeys = helpers.assignEverything({}, makeObject.proxyKeys());
    computedHelpers.addKeyDependencies(proxyKeys);
    var ObserveObject = function (props) {
        var prototype = Object.getPrototypeOf(this);
        computedHelpers.ensureDefinition(prototype);
        typeHelpers.ensureDefinition(prototype);
        var sourceInstance = this;
        var definitions = prototype[definitionsSymbol] || {};
        for (var key in definitions) {
            Object.defineProperty(sourceInstance, key, definitions[key]);
        }
        if (props !== undefined) {
            canReflect.assign(sourceInstance, props);
        }
        var localProxyKeys = Object.create(proxyKeys);
        localProxyKeys.constructor = this.constructor;
        var observable = makeObject.observable(sourceInstance, {
            observe: makeObserve.observe,
            proxyKeys: localProxyKeys,
            shouldRecordObservation: typeHelpers.shouldRecordObservationOnAllKeysExceptFunctionsOnProto
        });
        observableStore.proxiedObjects.set(sourceInstance, observable);
        observableStore.proxies.add(observable);
        return observable;
    };
    eventMixin(ObserveObject.prototype);
    typeEventMixin(ObserveObject);
    computedHelpers.addMethodsAndSymbols(ObserveObject);
    typeHelpers.addMethodsAndSymbols(ObserveObject);
    ObserveObject.extend = helpers.makeSimpleExtender(ObserveObject);
    module.exports = ObserveObject;
});
/*can-observe@2.3.1#array/array*/
define('can-observe@2.3.1#array/array', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../src/-make-array',
    '../src/-make-observe',
    'can-event-queue/map/map',
    'can-event-queue/type/type',
    '../src/-helpers',
    '../src/-observable-store',
    '../src/-computed-helpers',
    '../src/-type-helpers'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var makeArray = require('../src/-make-array');
    var makeObserve = require('../src/-make-observe');
    var eventMixin = require('can-event-queue/map/map');
    var typeEventMixin = require('can-event-queue/type/type');
    var helpers = require('../src/-helpers');
    var observableStore = require('../src/-observable-store');
    var computedHelpers = require('../src/-computed-helpers');
    var typeHelpers = require('../src/-type-helpers');
    var definitionsSymbol = canSymbol.for('can.typeDefinitions');
    var proxyKeys = helpers.assignEverything({}, makeArray.proxyKeys());
    var ObserveArray;
    if (false) {
    } else {
        var ObserveArray = function (items) {
            var prototype = Object.getPrototypeOf(this);
            computedHelpers.ensureDefinition(prototype);
            typeHelpers.ensureDefinition(prototype);
            var instance = this;
            var definitions = prototype[definitionsSymbol] || {};
            for (var key in definitions) {
                Object.defineProperty(instance, key, definitions[key]);
            }
            this.push.apply(this, items || []);
            var localProxyKeys = Object.create(proxyKeys);
            localProxyKeys.constructor = this.constructor;
            var observable = makeArray.observable(instance, {
                observe: makeObserve.observe,
                proxyKeys: localProxyKeys,
                shouldRecordObservation: typeHelpers.shouldRecordObservationOnAllKeysExceptFunctionsOnProto
            });
            observableStore.proxiedObjects.set(instance, observable);
            observableStore.proxies.add(observable);
            return observable;
        };
        ObserveArray.prototype = Object.create(Array.prototype);
    }
    eventMixin(ObserveArray.prototype);
    typeEventMixin(ObserveArray);
    computedHelpers.addMethodsAndSymbols(ObserveArray);
    typeHelpers.addMethodsAndSymbols(ObserveArray);
    ObserveArray.extend = helpers.makeSimpleExtender(ObserveArray);
    module.exports = ObserveArray;
});
/*can-observe@2.3.1#decorators/decorators*/
define('can-observe@2.3.1#decorators/decorators', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-simple-observable/async/async',
    'can-simple-observable/resolver/resolver',
    '../src/-computed-helpers'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var AsyncObservable = require('can-simple-observable/async/async');
    var ResolverObservable = require('can-simple-observable/resolver/resolver');
    var computedHelpers = require('../src/-computed-helpers');
    function defineProperty(prototype, prop, makeObservable) {
        computedHelpers.ensureDefinition(prototype)[prop] = makeObservable;
    }
    function asyncBase(config) {
        return function (target, key, descriptor) {
            if (descriptor.get !== undefined) {
                var getter = descriptor.get;
                if (process.env.NODE_ENV !== 'production') {
                    if (getter.length !== 0) {
                        throw new Error('async decorated ' + key + ' on ' + canReflect.getName(target) + ': getters should take no arguments.');
                    }
                }
                return defineProperty(target, key, function (instance, property) {
                    function fn(lastSet, resolve) {
                        if (!resolve) {
                            return config.default;
                        }
                        var promise = getter.call(this, true);
                        if (canReflect.isPromise(promise)) {
                            promise.then(resolve);
                            return config.default;
                        } else if (promise !== undefined) {
                            if (process.env.NODE_ENV !== 'production') {
                                throw new Error('async decorated ' + key + ' on ' + canReflect.getName(target) + ': getters must return undefined or a promise.');
                            }
                        }
                    }
                    if (process.env.NODE_ENV !== 'production') {
                        canReflect.assignSymbols(fn, {
                            'can.getName': function () {
                                return canReflect.getName(getter);
                                +' getter';
                            }
                        });
                    }
                    return new AsyncObservable(fn, instance, config.default);
                });
            }
            if (descriptor.value !== undefined) {
                var method = descriptor.value;
                if (process.env.NODE_ENV !== 'production') {
                    if (method.length !== 1) {
                        throw new Error('async decorated ' + key + ' on ' + canReflect.getName(target) + ': methods should take 1 argument (resolve).');
                    }
                }
                return defineProperty(target, key, function (instance, property) {
                    return new AsyncObservable(function (lastSet, resolve) {
                        return method.call(this, resolve);
                    }, instance, config.default);
                });
            }
            if (process.env.NODE_ENV !== 'production') {
                throw new Error('async decorated ' + key + ' on ' + canReflect.getName(target) + ': Unrecognized descriptor.');
            }
        };
    }
    function resolverBase(config) {
        return function (target, key, descriptor) {
            if (descriptor.value !== undefined) {
                var method = descriptor.value;
                if (process.env.NODE_ENV !== 'production') {
                    if (method.length !== 1) {
                        throw new Error('resolver decorated ' + key + ' on ' + canReflect.getName(target) + ': methods should take 1 argument (value).');
                    }
                }
                return defineProperty(target, key, function (instance, property) {
                    return new ResolverObservable(method, instance);
                });
            }
            if (process.env.NODE_ENV !== 'production') {
                throw new Error('resolver decorated ' + key + ' on ' + canReflect.getName(target) + ': Unrecognized descriptor.');
            }
        };
    }
    function optionalConfig(decorator) {
        function wrapper(config) {
            if (arguments.length === 3) {
                return decorator({}).apply(null, arguments);
            }
            return decorator(config);
        }
        if (process.env.NODE_ENV !== 'production') {
            Object.defineProperty(wrapper, 'name', { value: canReflect.getName(decorator.name) });
        }
        return wrapper;
    }
    module.exports = {
        async: optionalConfig(asyncBase),
        resolver: optionalConfig(resolverBase)
    };
});
/*can-observe@2.3.1#can-observe*/
define('can-observe@2.3.1#can-observe', [
    'require',
    'exports',
    'module',
    './src/-make-object',
    './src/-make-array',
    './src/-make-function',
    './src/-make-observe',
    './src/-make-prototype',
    './object/object',
    './array/array',
    './src/-computed-helpers',
    './decorators/decorators'
], function (require, exports, module) {
    'use strict';
    var makeObject = require('./src/-make-object');
    var makeArray = require('./src/-make-array');
    var makeFunction = require('./src/-make-function');
    var makeObserve = require('./src/-make-observe');
    var makePrototype = require('./src/-make-prototype');
    var ObserveObject = require('./object/object');
    var ObserveArray = require('./array/array');
    var computedHelpers = require('./src/-computed-helpers');
    var decorators = require('./decorators/decorators');
    makeObserve.object = function (object) {
        return makeObject.observable(object, makeObserve);
    };
    makeObserve.prototype = function (proto) {
        return makePrototype.observable(proto, makeObserve);
    };
    makeObserve.array = function (array) {
        return makeArray.observable(array, makeObserve);
    };
    makeObserve.function = function (fn) {
        return makeFunction.observable(fn, makeObserve);
    };
    makeObserve.observe.Object = ObserveObject;
    makeObserve.observe.Array = ObserveArray;
    module.exports = makeObserve.observe;
    module.exports.defineProperty = function (prototype, prop, makeObservable) {
        computedHelpers.ensureDefinition(prototype)[prop] = makeObservable;
    };
    for (var key in decorators) {
        module.exports[key] = decorators[key];
    }
});
/*can@5.31.0#es/can-observe*/
define('can@5.31.0#es/can-observe', [
    'exports',
    'can-observe'
], function (exports, _canObserve) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canObserve).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-stream*/
define('can@5.31.0#es/can-stream', [
    'exports',
    'can-stream'
], function (exports, _canStream) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canStream).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-stream-kefir*/
define('can@5.31.0#es/can-stream-kefir', [
    'exports',
    'can-stream-kefir'
], function (exports, _canStreamKefir) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canStreamKefir).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-map-compat@1.1.1#can-map-compat*/
define('can-map-compat@1.1.1#can-map-compat', [
    'require',
    'exports',
    'module',
    'can-key',
    'can-reflect',
    'can-log'
], function (require, exports, module) {
    var canKey = require('can-key');
    var canReflect = require('can-reflect');
    var canLog = require('can-log');
    function makeCompat(Type, enableWarning) {
        var proto = Type.prototype;
        var isDefined = typeof proto.attr === 'function';
        if (isDefined) {
            return Type;
        }
        var warnOnUse = enableWarning === true;
        proto.attr = function (key, value) {
            if (warnOnUse) {
                canLog.warn('can-map-compat is intended for migrating away from can-map. Remove all uses of .attr() to remove this warning.');
            }
            var type = typeof key;
            var argsLen = arguments.length;
            if (argsLen === 0) {
                return canReflect.unwrap(this);
            } else if (type !== 'string' && type !== 'number') {
                if (value === true) {
                    canReflect.updateDeep(this, key);
                } else {
                    canReflect.assignDeep(this, key);
                }
                return this;
            } else if (argsLen === 1) {
                return canKey.get(this, key);
            } else {
                canKey.set(this, key, value);
                return this;
            }
        };
        proto.removeAttr = function (key) {
            var val = canReflect.getKeyValue(this, key);
            canReflect.deleteKeyValue(this, key);
            return val;
        };
        return Type;
    }
    exports = module.exports = function (Type) {
        return makeCompat(Type, true);
    };
    exports.makeCompat = makeCompat;
});
/*can@5.31.0#es/can-map-compat*/
define('can@5.31.0#es/can-map-compat', [
    'exports',
    'can-map-compat'
], function (exports, _canMapCompat) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canMapCompat).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-type@0.1.13#can-type*/
define('can-type@0.1.13#can-type', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    var canReflect = require('can-reflect');
    var primitives = new Map();
    [
        Number,
        String,
        Boolean
    ].forEach(function (Type) {
        var typeString = Type.name.toLowerCase();
        primitives.set(Type, {
            isMember: function (val) {
                return typeof val === typeString;
            }
        });
    });
    function makeSchema(values) {
        return function () {
            return {
                type: 'Or',
                values: values
            };
        };
    }
    function makeTypeFactory(createSchema) {
        return function makeTypeWithAction(action) {
            var typeCache = new Map();
            return function createType(Type) {
                if (typeCache.has(Type)) {
                    return typeCache.get(Type);
                }
                var isMember = function () {
                    return false;
                };
                if (primitives.has(Type)) {
                    isMember = primitives.get(Type).isMember;
                }
                var createTypeWithSchema = createSchema(Type, action, isMember);
                typeCache.set(Type, createTypeWithSchema);
                return createTypeWithSchema;
            };
        };
    }
    var createMaybe = makeTypeFactory(function createMaybe(Type, action, isMember) {
        var createNewOfType = function (val) {
            if (val == null) {
                return val;
            }
            if (val instanceof Type || isMember(val)) {
                return val;
            }
            if (Type === Boolean && (val === 'false' || val === '0')) {
                return false;
            }
            return action(Type, val);
        };
        var values = [
            Type,
            null,
            undefined
        ];
        if (Type === Boolean) {
            values = [
                true,
                false,
                null,
                undefined
            ];
        }
        return canReflect.assignSymbols(createNewOfType, {
            'can.new': createNewOfType,
            'can.getSchema': makeSchema(values),
            'can.getName': function () {
                return canReflect.getName(Type);
            },
            'can.isMember': function (value) {
                return value == null || value instanceof Type || isMember(value);
            }
        });
    });
    var createNoMaybe = makeTypeFactory(function createNoMaybe(Type, action, isMember) {
        var createNewOfType = function (val) {
            if (val instanceof Type || isMember(val)) {
                return val;
            }
            if (Type === Boolean && (val === 'false' || val === '0')) {
                console.log('createNoMaybe', 'Boolean === "false"');
                return false;
            }
            return action(Type, val);
        };
        var values = [Type];
        if (Type === Boolean) {
            values = [
                true,
                false
            ];
        }
        return canReflect.assignSymbols(createNewOfType, {
            'can.new': createNewOfType,
            'can.getSchema': makeSchema(values),
            'can.getName': function () {
                return canReflect.getName(Type);
            },
            'can.isMember': function (value) {
                return value instanceof Type || isMember(value);
            }
        });
    });
    function check(Type, val) {
        throw new Error(`Type value ${ typeof val === 'string' ? '"' + val + '"' : val } is not of type ${ canReflect.getName(Type) }.`);
    }
    function convert(Type, val) {
        return canReflect.convert(val, Type);
    }
    var Any = canReflect.assignSymbols({}, {
        'can.new': function (val) {
            return val;
        },
        'can.isMember': function () {
            return true;
        }
    });
    exports.check = createNoMaybe(check);
    exports.maybe = createMaybe(check);
    exports.convert = createNoMaybe(convert);
    exports.maybeConvert = createMaybe(convert);
    exports.Any = Any;
});
/*can-observable-mixin@0.4.0#src/define*/
define('can-observable-mixin@0.4.0#src/define', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-observation',
    'can-observation-recorder',
    'can-simple-observable/async/async',
    'can-simple-observable/settable/settable',
    'can-simple-observable/resolver/resolver',
    'can-event-queue/map/map',
    'can-event-queue/type/type',
    'can-queues',
    'can-assign',
    'can-log/dev/dev',
    'can-define-lazy-value',
    'can-type'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var define;
    var Observation = require('can-observation');
    var ObservationRecorder = require('can-observation-recorder');
    var AsyncObservable = require('can-simple-observable/async/async');
    var SettableObservable = require('can-simple-observable/settable/settable');
    var ResolverObservable = require('can-simple-observable/resolver/resolver');
    var eventQueue = require('can-event-queue/map/map');
    var addTypeEvents = require('can-event-queue/type/type');
    var queues = require('can-queues');
    var assign = require('can-assign');
    var canLogDev = require('can-log/dev/dev');
    var defineLazyValue = require('can-define-lazy-value');
    var type = require('can-type');
    var newSymbol = Symbol.for('can.new'), serializeSymbol = Symbol.for('can.serialize'), inSetupSymbol = Symbol.for('can.initializing'), isMemberSymbol = Symbol.for('can.isMember'), hasBeenDefinedSymbol = Symbol.for('can.hasBeenDefined'), canMetaSymbol = Symbol.for('can.meta');
    var eventsProto, define, make, makeDefinition, getDefinitionsAndMethods, getDefinitionOrMethod;
    function isDefineType(func) {
        return func && (func.canDefineType === true || func[newSymbol]);
    }
    function observableType() {
        throw new Error('This is not currently implemented.');
    }
    var AsyncFunction;
    var browserSupportsAsyncFunctions = function () {
        try {
            AsyncFunction = async function () {
            }.constructor;
            return true;
        } catch (e) {
            return false;
        }
    }();
    function isAsyncFunction(fn) {
        if (!browserSupportsAsyncFunctions) {
            return false;
        }
        return fn && fn instanceof AsyncFunction;
    }
    var peek = ObservationRecorder.ignore(canReflect.getValue.bind(canReflect));
    var Object_defineNamedPrototypeProperty = Object.defineProperty;
    if (process.env.NODE_ENV !== 'production') {
        Object_defineNamedPrototypeProperty = function (obj, prop, definition) {
            if (definition.get) {
                Object.defineProperty(definition.get, 'name', {
                    value: 'get ' + canReflect.getName(obj) + '.' + prop,
                    writable: true,
                    configurable: true
                });
            }
            if (definition.set) {
                Object.defineProperty(definition.set, 'name', {
                    value: 'set ' + canReflect.getName(obj) + '.' + prop,
                    configurable: true
                });
            }
            return Object.defineProperty(obj, prop, definition);
        };
    }
    function defineConfigurableAndNotEnumerable(obj, prop, value) {
        Object.defineProperty(obj, prop, {
            configurable: true,
            enumerable: false,
            writable: true,
            value: value
        });
    }
    function defineNotWritableAndNotEnumerable(obj, prop, value) {
        Object.defineProperty(obj, prop, {
            value: value,
            enumerable: false,
            writable: false
        });
    }
    function eachPropertyDescriptor(map, cb, ...args) {
        for (var prop of Object.getOwnPropertyNames(map)) {
            if (map.hasOwnProperty(prop)) {
                cb.call(map, prop, Object.getOwnPropertyDescriptor(map, prop), ...args);
            }
        }
    }
    function getEveryPropertyAndSymbol(obj) {
        var props = Object.getOwnPropertyNames(obj);
        var symbols = 'getOwnPropertySymbols' in Object ? Object.getOwnPropertySymbols(obj) : [];
        return props.concat(symbols);
    }
    module.exports = define = function (typePrototype, defines, baseDefine, propertyDefaults = {}) {
        var prop, dataInitializers = Object.create(baseDefine ? baseDefine.dataInitializers : null), computedInitializers = Object.create(baseDefine ? baseDefine.computedInitializers : null), required = new Set();
        var result = getDefinitionsAndMethods(defines, baseDefine, typePrototype, propertyDefaults);
        result.dataInitializers = dataInitializers;
        result.computedInitializers = computedInitializers;
        result.required = required;
        canReflect.eachKey(result.definitions, function (definition, property) {
            if (definition.required === true) {
                required.add(property);
            }
            define.property(typePrototype, property, definition, dataInitializers, computedInitializers, result.defaultDefinition);
        });
        if (typePrototype.hasOwnProperty('_data')) {
            for (prop in dataInitializers) {
                defineLazyValue(typePrototype._data, prop, dataInitializers[prop].bind(typePrototype), true);
            }
        } else {
            defineLazyValue(typePrototype, '_data', function () {
                var map = this;
                var data = {};
                for (var prop in dataInitializers) {
                    defineLazyValue(data, prop, dataInitializers[prop].bind(map), true);
                }
                return data;
            });
        }
        if (typePrototype.hasOwnProperty('_computed')) {
            for (prop in computedInitializers) {
                defineLazyValue(typePrototype._computed, prop, computedInitializers[prop].bind(typePrototype));
            }
        } else {
            defineLazyValue(typePrototype, '_computed', function () {
                var map = this;
                var data = Object.create(null);
                for (var prop in computedInitializers) {
                    defineLazyValue(data, prop, computedInitializers[prop].bind(map));
                }
                return data;
            });
        }
        getEveryPropertyAndSymbol(eventsProto).forEach(function (prop) {
            Object.defineProperty(typePrototype, prop, {
                enumerable: false,
                value: eventsProto[prop],
                configurable: true,
                writable: true
            });
        });
        Object.defineProperty(typePrototype, '_define', {
            enumerable: false,
            value: result,
            configurable: true,
            writable: true
        });
        var iteratorSymbol = Symbol.iterator || Symbol.for('iterator');
        if (!typePrototype[iteratorSymbol]) {
            defineConfigurableAndNotEnumerable(typePrototype, iteratorSymbol, function () {
                return new define.Iterator(this);
            });
        }
        return result;
    };
    var onlyType = function (obj) {
        for (var prop in obj) {
            if (prop !== 'type') {
                return false;
            }
        }
        return true;
    };
    var callAsync = function (fn) {
        return function asyncResolver(lastSet, resolve) {
            let newValue = fn.call(this, resolve, lastSet);
            if (canReflect.isPromise(newValue)) {
                newValue.then(resolve);
                return undefined;
            }
            return newValue;
        };
    };
    define.extensions = function () {
    };
    define.property = function (typePrototype, prop, definition, dataInitializers, computedInitializers, defaultDefinition) {
        var propertyDefinition = define.extensions.apply(this, arguments);
        if (propertyDefinition) {
            definition = makeDefinition(prop, propertyDefinition, defaultDefinition || {}, typePrototype);
        }
        var type = definition.type;
        if (process.env.NODE_ENV !== 'production') {
            if (!definition.set && definition.get && definition.get.length === 0 && 'default' in definition) {
                canLogDev.warn('can-define-object: default value for property ' + canReflect.getName(typePrototype) + '.' + prop + ' ignored, as its definition has a zero-argument getter and no setter');
            }
            if (!definition.set && definition.get && definition.get.length === 0 && (definition.type && definition.type !== defaultDefinition.type)) {
                canLogDev.warn('can-define-object: type value for property ' + canReflect.getName(typePrototype) + '.' + prop + ' ignored, as its definition has a zero-argument getter and no setter');
            }
        }
        if (type && onlyType(definition) && type === type.Any) {
            Object_defineNamedPrototypeProperty(typePrototype, prop, {
                get: make.get.data(prop),
                set: make.set.events(prop, make.get.data(prop), make.set.data(prop), make.eventType.data(prop)),
                enumerable: true,
                configurable: true
            });
            return;
        }
        definition.type = type;
        var dataProperty = definition.get || definition.async || definition.value ? 'computed' : 'data', reader = make.read[dataProperty](prop), getter = make.get[dataProperty](prop), setter = make.set[dataProperty](prop), getInitialValue;
        if (process.env.NODE_ENV !== 'production') {
            if (definition.get) {
                Object.defineProperty(definition.get, 'name', {
                    value: canReflect.getName(typePrototype) + '\'s ' + prop + ' getter',
                    configurable: true
                });
            }
            if (definition.set) {
                Object.defineProperty(definition.set, 'name', {
                    value: canReflect.getName(typePrototype) + '\'s ' + prop + ' setter',
                    configurable: true
                });
            }
            if (definition.value) {
                Object.defineProperty(definition.value, 'name', {
                    value: canReflect.getName(typePrototype) + '\'s ' + prop + ' value',
                    configurable: true
                });
            }
        }
        var typeConvert = function (val) {
            return val;
        };
        if (type) {
            typeConvert = make.set.type(prop, type, typeConvert);
        }
        var eventsSetter = make.set.events(prop, reader, setter, make.eventType[dataProperty](prop));
        if (definition.value) {
            computedInitializers[prop] = make.resolver(prop, definition, typeConvert);
        } else if (definition.default !== undefined) {
            if (process.env.NODE_ENV !== 'production') {
                if (definition.default !== null && typeof definition.default === 'object') {
                    canLogDev.warn('can-define-object: The default value for ' + canReflect.getName(typePrototype) + '.' + prop + ' is set to an object. This will be shared by all instances of the DefineMap. Use a function that returns the object instead.');
                }
                if (definition.default && canReflect.isConstructorLike(definition.default)) {
                    canLogDev.warn('can-define-object: The "default" for ' + canReflect.getName(typePrototype) + '.' + prop + ' is set to a constructor. Did you mean "Default" instead?');
                }
            }
            getInitialValue = ObservationRecorder.ignore(make.get.defaultValue(prop, definition, typeConvert, eventsSetter));
        }
        if (definition.get) {
            computedInitializers[prop] = make.compute(prop, definition.get, getInitialValue);
        } else if (definition.async) {
            computedInitializers[prop] = make.compute(prop, callAsync(definition.async), getInitialValue);
        } else if (getInitialValue) {
            dataInitializers[prop] = getInitialValue;
        }
        if (definition.get && definition.set) {
            setter = make.set.setter(prop, definition.set, make.read.lastSet(prop), setter, true);
        } else if (definition.set) {
            setter = make.set.setter(prop, definition.set, reader, eventsSetter, false);
        } else if (dataProperty === 'data') {
            setter = eventsSetter;
        } else if (definition.get && definition.get.length < 1) {
            setter = function () {
                if (process.env.NODE_ENV !== 'production') {
                    canLogDev.warn('can-define-object: Set value for property ' + canReflect.getName(typePrototype) + '.' + prop + ' ignored, as its definition has a zero-argument getter and no setter');
                }
            };
        }
        if (type) {
            setter = make.set.type(prop, type, setter);
        }
        Object_defineNamedPrototypeProperty(typePrototype, prop, {
            get: getter,
            set: setter,
            enumerable: 'serialize' in definition ? !!definition.serialize : !definition.get,
            configurable: true
        });
    };
    define.makeDefineInstanceKey = function (constructor) {
        constructor[Symbol.for('can.defineInstanceKey')] = function (property, value) {
            define.hooks.finalizeClass(this);
            var defineResult = this.prototype._define;
            if (value && typeof value.value !== 'undefined') {
                value.default = value.value;
                value.type = type.Any;
                delete value.value;
            }
            var definition = getDefinitionOrMethod(property, value, defineResult.defaultDefinition, this);
            if (definition && typeof definition === 'object') {
                define.property(this.prototype, property, definition, defineResult.dataInitializers, defineResult.computedInitializers, defineResult.defaultDefinition);
                defineResult.definitions[property] = definition;
            } else {
                defineResult.methods[property] = definition;
            }
            this.prototype.dispatch({
                type: 'can.keys',
                target: this.prototype
            });
        };
    };
    define.Constructor = function (defines, sealed) {
        var constructor = function DefineConstructor(props) {
            Object.defineProperty(this, inSetupSymbol, {
                configurable: true,
                enumerable: false,
                value: true,
                writable: true
            });
            define.setup.call(this, props, sealed);
            this[inSetupSymbol] = false;
        };
        var result = define(constructor.prototype, defines);
        addTypeEvents(constructor);
        define.makeDefineInstanceKey(constructor, result);
        return constructor;
    };
    make = {
        computeObj: function (map, prop, observable) {
            var computeObj = {
                oldValue: undefined,
                compute: observable,
                count: 0,
                handler: function (newVal) {
                    var oldValue = computeObj.oldValue;
                    computeObj.oldValue = newVal;
                    map.dispatch({
                        type: prop,
                        target: map
                    }, [
                        newVal,
                        oldValue
                    ]);
                }
            };
            return computeObj;
        },
        resolver: function (prop, definition, typeConvert) {
            var getDefault = make.get.defaultValue(prop, definition, typeConvert);
            return function () {
                var map = this;
                var defaultValue = getDefault.call(this);
                var computeObj = make.computeObj(map, prop, new ResolverObservable(definition.value, map, defaultValue));
                if (process.env.NODE_ENV !== 'production') {
                    Object.defineProperty(computeObj.handler, 'name', { value: canReflect.getName(definition.value).replace('value', 'event emitter') });
                }
                return computeObj;
            };
        },
        compute: function (prop, get, defaultValueFn) {
            return function () {
                var map = this, defaultValue = defaultValueFn && defaultValueFn.call(this), observable, computeObj;
                if (get.length === 0) {
                    observable = new Observation(get, map);
                } else if (get.length === 1) {
                    observable = new SettableObservable(get, map, defaultValue);
                } else {
                    observable = new AsyncObservable(get, map, defaultValue);
                }
                computeObj = make.computeObj(map, prop, observable);
                if (process.env.NODE_ENV !== 'production') {
                    Object.defineProperty(computeObj.handler, 'name', { value: canReflect.getName(get).replace('getter', 'event emitter') });
                }
                return computeObj;
            };
        },
        set: {
            data: function (prop) {
                return function (newVal) {
                    this._data[prop] = newVal;
                };
            },
            computed: function (prop) {
                return function (val) {
                    canReflect.setValue(this._computed[prop].compute, val);
                };
            },
            events: function (prop, getCurrent, setData) {
                return function (newVal) {
                    if (this[inSetupSymbol]) {
                        setData.call(this, newVal);
                    } else {
                        var current = getCurrent.call(this);
                        if (newVal !== current) {
                            var dispatched;
                            setData.call(this, newVal);
                            dispatched = {
                                patches: [{
                                        type: 'set',
                                        key: prop,
                                        value: newVal
                                    }],
                                type: prop,
                                target: this
                            };
                            if (process.env.NODE_ENV !== 'production') {
                                dispatched.reasonLog = [
                                    canReflect.getName(this) + '\'s',
                                    prop,
                                    'changed to',
                                    newVal,
                                    'from',
                                    current
                                ];
                            }
                            this.dispatch(dispatched, [
                                newVal,
                                current
                            ]);
                        }
                    }
                };
            },
            eventDispatcher: function (map, prop, current, newVal) {
                if (map[inSetupSymbol]) {
                    return;
                } else {
                    if (newVal !== current) {
                        var dispatched = {
                            patches: [{
                                    type: 'set',
                                    key: prop,
                                    value: newVal
                                }],
                            type: prop,
                            target: map
                        };
                        if (process.env.NODE_ENV !== 'production') {
                            dispatched.reasonLog = [
                                canReflect.getName(this) + '\'s',
                                prop,
                                'changed to',
                                newVal,
                                'from',
                                current
                            ];
                        }
                        map.dispatch(dispatched, [
                            newVal,
                            current
                        ]);
                    }
                }
            },
            setter: function (prop, setter, getCurrent, setEvents, hasGetter) {
                return function (value) {
                    var asyncTimer;
                    var self = this;
                    queues.batch.start();
                    var setterCalled = false, current = getCurrent.call(this), setValue = setter.call(this, value, current);
                    if (setterCalled) {
                        queues.batch.stop();
                    } else {
                        if (hasGetter) {
                            if (setValue !== undefined) {
                                if (current !== setValue) {
                                    setEvents.call(this, setValue);
                                }
                                queues.batch.stop();
                            } else if (setter.length === 0) {
                                setEvents.call(this, value);
                                queues.batch.stop();
                                return;
                            } else if (setter.length === 1) {
                                queues.batch.stop();
                            } else {
                                if (process.env.NODE_ENV !== 'production') {
                                    asyncTimer = setTimeout(function () {
                                        canLogDev.warn('can-define-object: Setter "' + canReflect.getName(self) + '.' + prop + '" did not return a value or call the setter callback.');
                                    }, canLogDev.warnTimeout);
                                }
                                queues.batch.stop();
                                return;
                            }
                        } else {
                            if (setValue !== undefined) {
                                setEvents.call(this, setValue);
                                queues.batch.stop();
                            } else if (setter.length === 0) {
                                setEvents.call(this, value);
                                queues.batch.stop();
                                return;
                            } else if (setter.length === 1) {
                                setEvents.call(this, undefined);
                                queues.batch.stop();
                            } else {
                                if (process.env.NODE_ENV !== 'production') {
                                    asyncTimer = setTimeout(function () {
                                        canLogDev.warn('can/map/setter.js: Setter "' + canReflect.getName(self) + '.' + prop + '" did not return a value or call the setter callback.');
                                    }, canLogDev.warnTimeout);
                                }
                                queues.batch.stop();
                                return;
                            }
                        }
                    }
                };
            },
            type: function (prop, type, set) {
                function setter(newValue) {
                    return set.call(this, type.call(this, newValue, prop));
                }
                if (isDefineType(type)) {
                    if (type.canDefineType) {
                        return setter;
                    } else {
                        if (process.env.NODE_ENV !== 'production') {
                            return function setter(newValue) {
                                return set.call(this, canReflect.convert(newValue, type));
                            };
                        } else {
                            return function setter(newValue) {
                                return set.call(this, newValue);
                            };
                        }
                    }
                }
                return setter;
            }
        },
        eventType: {
            data: function (prop) {
                return function (newVal, oldVal) {
                    return oldVal !== undefined || this._data.hasOwnProperty(prop) ? 'set' : 'add';
                };
            },
            computed: function () {
                return function () {
                    return 'set';
                };
            }
        },
        read: {
            data: function (prop) {
                return function () {
                    return this._data[prop];
                };
            },
            computed: function (prop) {
                return function () {
                    return canReflect.getValue(this._computed[prop].compute);
                };
            },
            lastSet: function (prop) {
                return function () {
                    var observable = this._computed[prop].compute;
                    if (observable.lastSetValue) {
                        return canReflect.getValue(observable.lastSetValue);
                    }
                };
            }
        },
        get: {
            defaultValue: function (prop, definition, typeConvert, callSetter) {
                return function () {
                    var value = definition.default;
                    if (value !== undefined) {
                        if (typeof value === 'function' && value.isAGetter) {
                            value = value.call(this);
                        }
                        value = typeConvert.call(this, value);
                    }
                    if (definition.set) {
                        var VALUE;
                        var sync = true;
                        var setter = make.set.setter(prop, definition.set, function () {
                        }, function (value) {
                            if (sync) {
                                VALUE = value;
                            } else {
                                callSetter.call(this, value);
                            }
                        }, definition.get);
                        setter.call(this, value);
                        sync = false;
                        return VALUE;
                    }
                    return value;
                };
            },
            data: function (prop) {
                return function () {
                    if (!this[inSetupSymbol]) {
                        ObservationRecorder.add(this, prop);
                    }
                    return this._data[prop];
                };
            },
            computed: function (prop) {
                return function () {
                    var compute = this._computed[prop].compute;
                    if (ObservationRecorder.isRecording()) {
                        ObservationRecorder.add(this, prop);
                        if (!canReflect.isBound(compute)) {
                            Observation.temporarilyBind(compute);
                        }
                    }
                    return peek(compute);
                };
            }
        }
    };
    define.behaviors = [
        'get',
        'set',
        'value',
        'type',
        'serialize'
    ];
    var addBehaviorToDefinition = function (definition, behavior, descriptor, def, prop, typePrototype) {
        if (behavior === 'enumerable') {
            definition.serialize = !!def[behavior];
        } else if (behavior === 'type') {
            var behaviorDef = def[behavior];
            if (typeof behaviorDef !== 'undefined') {
                definition[behavior] = behaviorDef;
            }
        } else {
            var value = descriptor.get || descriptor.value;
            if (descriptor.get) {
                value.isAGetter = true;
            }
            if (behavior === 'async') {
                if (value.length === 1 && isAsyncFunction(value)) {
                    canLogDev.warn(`${ canReflect.getName(typePrototype) }: async property [${ prop }] should not be an async function and also use the resolve() argument. Remove the argument and return a value from the async function instead.`);
                }
            }
            definition[behavior] = value;
        }
    };
    makeDefinition = function (prop, def, defaultDefinition, typePrototype) {
        var definition = {};
        eachPropertyDescriptor(def, function (behavior, descriptor) {
            addBehaviorToDefinition(definition, behavior, descriptor, def, prop, typePrototype);
        });
        canReflect.eachKey(defaultDefinition, function (value, prop) {
            if (definition[prop] === undefined) {
                if (prop !== 'type') {
                    definition[prop] = value;
                }
            }
        });
        if (def.type) {
            var value = def.type;
            var serialize = value[serializeSymbol];
            if (serialize) {
                definition.serialize = function (val) {
                    return serialize.call(val);
                };
            }
            if (value[newSymbol]) {
                if (value[isMemberSymbol]) {
                    definition.type = value;
                } else {
                    definition.type = type.check(value);
                }
            } else if (canReflect.isConstructorLike(value)) {
                definition.type = type.check(value);
            }
        }
        var noTypeDefined = !definition.type && (!defaultDefinition.type || defaultDefinition.type && defaultDefinition.typeSetByDefault);
        if (definition.hasOwnProperty('default')) {
            if (typeof definition.default === 'function' && !definition.default.isAGetter && noTypeDefined) {
                definition.type = type.check(Function);
            }
            if (canReflect.isPrimitive(definition.default) && noTypeDefined) {
                definition.type = type.check(definition.default.constructor);
            }
        }
        if (!definition.type) {
            var defaultsCopy = canReflect.assignMap({}, defaultDefinition);
            definition = canReflect.assignMap(defaultsCopy, definition);
        }
        if (canReflect.size(definition) === 0) {
            definition.type = type.Any;
            definition.typeSetByDefault = true;
        }
        return definition;
    };
    getDefinitionOrMethod = function (prop, value, defaultDefinition, typePrototype) {
        var definition;
        if (canReflect.isPrimitive(value)) {
            definition = {
                default: value,
                type: defaultDefinition.typeSetByDefault ? type.check(value.constructor) : defaultDefinition.type
            };
        } else if (value && (value[serializeSymbol] || value[newSymbol])) {
            if (value[isMemberSymbol]) {
                definition = { type: value };
            } else {
                definition = { type: type.check(value) };
            }
        } else if (typeof value === 'function') {
            if (canReflect.isConstructorLike(value)) {
                definition = { type: type.check(value) };
            } else {
                definition = {
                    default: value,
                    type: Function
                };
            }
        } else if (Array.isArray(value)) {
            definition = { type: value };
        } else if (canReflect.isPlainObject(value)) {
            definition = value;
        }
        if (definition) {
            return makeDefinition(prop, definition, defaultDefinition, typePrototype);
        } else {
            return value;
        }
    };
    getDefinitionsAndMethods = function (defines, baseDefines, typePrototype, propertyDefaults) {
        var definitions = Object.create(baseDefines ? baseDefines.definitions : null);
        var methods = {};
        var defaultDefinition;
        if (propertyDefaults) {
            defaultDefinition = getDefinitionOrMethod('*', propertyDefaults, {}, typePrototype);
        } else {
            defaultDefinition = Object.create(null);
        }
        function addDefinition(prop, propertyDescriptor, skipGetDefinitionForMethods) {
            var value;
            if (propertyDescriptor.get || propertyDescriptor.set) {
                value = {
                    get: propertyDescriptor.get,
                    set: propertyDescriptor.set
                };
            } else {
                value = propertyDescriptor.value;
            }
            if (prop === 'constructor' || skipGetDefinitionForMethods && typeof value === 'function') {
                methods[prop] = value;
                return;
            } else {
                var result = getDefinitionOrMethod(prop, value, defaultDefinition, typePrototype);
                var resultType = typeof result;
                if (result && resultType === 'object' && canReflect.size(result) > 0) {
                    definitions[prop] = result;
                } else {
                    if (resultType === 'function') {
                        methods[prop] = result;
                    } else if (resultType !== 'undefined') {
                        if (process.env.NODE_ENV !== 'production') {
                            canLogDev.error(canReflect.getName(typePrototype) + '.' + prop + ' does not match a supported definitionObject. See: https://canjs.com/doc/can-define-object/object.types.definitionObject.html');
                        }
                    }
                }
            }
        }
        eachPropertyDescriptor(typePrototype, addDefinition, true);
        eachPropertyDescriptor(defines, addDefinition);
        if (propertyDefaults) {
            defineConfigurableAndNotEnumerable(defines, '*', propertyDefaults);
        }
        return {
            definitions: definitions,
            methods: methods,
            defaultDefinition: defaultDefinition
        };
    };
    eventsProto = eventQueue({});
    function setupComputed(instance, eventName) {
        var computedBinding = instance._computed && instance._computed[eventName];
        if (computedBinding && computedBinding.compute) {
            if (!computedBinding.count) {
                computedBinding.count = 1;
                canReflect.onValue(computedBinding.compute, computedBinding.handler, 'notify');
                computedBinding.oldValue = peek(computedBinding.compute);
            } else {
                computedBinding.count++;
            }
        }
    }
    function teardownComputed(instance, eventName) {
        var computedBinding = instance._computed && instance._computed[eventName];
        if (computedBinding) {
            if (computedBinding.count === 1) {
                computedBinding.count = 0;
                canReflect.offValue(computedBinding.compute, computedBinding.handler, 'notify');
            } else {
                computedBinding.count--;
            }
        }
    }
    assign(eventsProto, {
        _eventSetup: function () {
        },
        _eventTeardown: function () {
        },
        addEventListener: function (eventName) {
            setupComputed(this, eventName);
            return eventQueue.addEventListener.apply(this, arguments);
        },
        removeEventListener: function (eventName) {
            teardownComputed(this, eventName);
            return eventQueue.removeEventListener.apply(this, arguments);
        }
    });
    eventsProto.on = eventsProto.bind = eventsProto.addEventListener;
    eventsProto.off = eventsProto.unbind = eventsProto.removeEventListener;
    var onKeyValueSymbol = Symbol.for('can.onKeyValue');
    var offKeyValueSymbol = Symbol.for('can.offKeyValue');
    canReflect.assignSymbols(eventsProto, {
        'can.onKeyValue': function (key) {
            setupComputed(this, key);
            return eventQueue[onKeyValueSymbol].apply(this, arguments);
        },
        'can.offKeyValue': function (key) {
            teardownComputed(this, key);
            return eventQueue[offKeyValueSymbol].apply(this, arguments);
        }
    });
    delete eventsProto.one;
    define.finalizeInstance = function () {
        defineNotWritableAndNotEnumerable(this, 'constructor', this.constructor);
        defineNotWritableAndNotEnumerable(this, canMetaSymbol, Object.create(null));
    };
    define.setup = function (props, sealed) {
        var requiredButNotProvided = new Set(this._define.required);
        var definitions = this._define.definitions;
        var instanceDefinitions = Object.create(null);
        var map = this;
        canReflect.eachKey(props, function (value, prop) {
            if (requiredButNotProvided.has(prop)) {
                requiredButNotProvided.delete(prop);
            }
            if (definitions[prop] !== undefined) {
                map[prop] = value;
            } else {
                if (sealed) {
                    throw new Error(`The type ${ canReflect.getName(map.constructor) } is sealed, but the property [${ prop }] has no definition.`);
                }
                define.expando(map, prop, value);
            }
        });
        if (canReflect.size(instanceDefinitions) > 0) {
            defineConfigurableAndNotEnumerable(this, '_instanceDefinitions', instanceDefinitions);
        }
        if (requiredButNotProvided.size) {
            var msg, missingProps = Array.from(requiredButNotProvided);
            let thisName = canReflect.getName(this);
            if (requiredButNotProvided.size === 1) {
                msg = `${ thisName }: Missing required property [${ missingProps[0] }].`;
            } else {
                msg = `${ thisName }: Missing required properties [${ missingProps.join(', ') }].`;
            }
            throw new Error(msg);
        }
    };
    var returnFirstArg = function (arg) {
        return arg;
    };
    define.expando = function (map, prop, value) {
        if (define._specialKeys[prop]) {
            return true;
        }
        var constructorDefines = map._define.definitions;
        if (constructorDefines && constructorDefines[prop]) {
            return;
        }
        var instanceDefines = map._instanceDefinitions;
        if (!instanceDefines) {
            if (Object.isSealed(map)) {
                let errorMessage = `Cannot set property [${ prop }] on sealed instance of ${ canReflect.getName(map) }`;
                throw new Error(errorMessage);
            }
            Object.defineProperty(map, '_instanceDefinitions', {
                configurable: true,
                enumerable: false,
                writable: true,
                value: {}
            });
            instanceDefines = map._instanceDefinitions;
        }
        if (!instanceDefines[prop]) {
            var defaultDefinition = map._define.defaultDefinition || { type: observableType };
            define.property(map, prop, defaultDefinition, {}, {});
            if (defaultDefinition.type) {
                map._data[prop] = define.make.set.type(prop, defaultDefinition.type, returnFirstArg).call(map, value);
            } else {
                map._data[prop] = observableType(value);
            }
            instanceDefines[prop] = defaultDefinition;
            if (!map[inSetupSymbol]) {
                queues.batch.start();
                map.dispatch({
                    type: 'can.keys',
                    target: map
                });
                if (Object.prototype.hasOwnProperty.call(map._data, prop)) {
                    map.dispatch({
                        type: prop,
                        target: map,
                        patches: [{
                                type: 'add',
                                key: prop,
                                value: map._data[prop]
                            }]
                    }, [
                        map._data[prop],
                        undefined
                    ]);
                } else {
                    map.dispatch({
                        type: 'set',
                        target: map,
                        patches: [{
                                type: 'add',
                                key: prop,
                                value: map._data[prop]
                            }]
                    }, [
                        map._data[prop],
                        undefined
                    ]);
                }
                queues.batch.stop();
            }
            return true;
        }
    };
    define.replaceWith = defineLazyValue;
    define.eventsProto = eventsProto;
    define.defineConfigurableAndNotEnumerable = defineConfigurableAndNotEnumerable;
    define.make = make;
    define.getDefinitionOrMethod = getDefinitionOrMethod;
    define._specialKeys = {
        _data: true,
        _computed: true
    };
    var simpleGetterSetters = {};
    define.makeSimpleGetterSetter = function (prop) {
        if (simpleGetterSetters[prop] === undefined) {
            var setter = make.set.events(prop, make.get.data(prop), make.set.data(prop), make.eventType.data(prop));
            simpleGetterSetters[prop] = {
                get: make.get.data(prop),
                set: function (newVal) {
                    return setter.call(this, observableType(newVal));
                },
                enumerable: true,
                configurable: true
            };
        }
        return simpleGetterSetters[prop];
    };
    define.Iterator = function (obj) {
        this.obj = obj;
        this.definitions = Object.keys(obj._define.definitions);
        this.instanceDefinitions = obj._instanceDefinitions ? Object.keys(obj._instanceDefinitions) : Object.keys(obj);
        this.hasGet = typeof obj.get === 'function';
    };
    define.Iterator.prototype.next = function () {
        var key;
        if (this.definitions.length) {
            key = this.definitions.shift();
            var def = this.obj._define.definitions[key];
            if (def.get) {
                return this.next();
            }
        } else if (this.instanceDefinitions.length) {
            key = this.instanceDefinitions.shift();
        } else {
            return {
                value: undefined,
                done: true
            };
        }
        return {
            value: [
                key,
                this.hasGet ? this.obj.get(key) : this.obj[key]
            ],
            done: false
        };
    };
    define.updateSchemaKeys = function (schema, definitions) {
        for (var prop in definitions) {
            var definition = definitions[prop];
            if (definition.serialize !== false) {
                if (definition.type) {
                    schema.keys[prop] = definition.type;
                } else {
                    schema.keys[prop] = function (val) {
                        return val;
                    };
                }
                if (definitions[prop].identity === true) {
                    schema.identity.push(prop);
                }
            }
        }
        return schema;
    };
    define.hooks = {
        finalizeClass: function (Type) {
            let hasBeenDefined = Type.hasOwnProperty(hasBeenDefinedSymbol);
            if (!hasBeenDefined) {
                let prototypeObject = Type.prototype;
                let defines = typeof Type.props === 'object' ? Type.props : typeof Type.define === 'object' ? Type.define : {};
                define(prototypeObject, defines, null, Type.propertyDefaults);
                Type[hasBeenDefinedSymbol] = true;
            }
        },
        initialize: function (instance, props) {
            var firstInitialize = !instance.hasOwnProperty(canMetaSymbol);
            var sealed = instance.constructor.seal;
            if (firstInitialize) {
                define.finalizeInstance.call(instance);
            }
            if (!instance[canMetaSymbol].initialized) {
                defineConfigurableAndNotEnumerable(instance, inSetupSymbol, true);
                define.setup.call(instance, props, sealed);
                instance[inSetupSymbol] = false;
                instance[canMetaSymbol].initialized = true;
            }
            if (process.env.NODE_ENV !== 'production') {
                if (firstInitialize) {
                    instance._data;
                    instance._computed;
                    if (sealed === true) {
                        Object.seal(instance);
                    }
                }
            }
        },
        expando: define.expando
    };
});
/*can-observable-mixin@0.4.0#src/ensure-meta*/
define('can-observable-mixin@0.4.0#src/ensure-meta', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    const canReflect = require('can-reflect');
    module.exports = function ensureMeta(obj) {
        var metaSymbol = Symbol.for('can.meta');
        var meta = obj[metaSymbol];
        if (!meta) {
            meta = {};
            canReflect.setKeyValue(obj, metaSymbol, meta);
        }
        return meta;
    };
});
/*can-observable-mixin@0.4.0#src/define-helpers*/
define('can-observable-mixin@0.4.0#src/define-helpers', [
    'require',
    'exports',
    'module',
    './define',
    'can-reflect',
    'can-queues',
    'can-log/dev/dev',
    './ensure-meta'
], function (require, exports, module) {
    'use strict';
    const define = require('./define');
    const canReflect = require('can-reflect');
    const queues = require('can-queues');
    const dev = require('can-log/dev/dev');
    const ensureMeta = require('./ensure-meta');
    const defineHelpers = {
        defineExpando: define.expando,
        reflectSerialize: function (unwrapped) {
            var constructorDefinitions = this._define.definitions;
            var defaultDefinition = this._define.defaultDefinition;
            this.forEach(function (val, name) {
                var propDef = constructorDefinitions[name];
                if (propDef && typeof propDef.serialize === 'function') {
                    val = propDef.serialize.call(this, val, name);
                } else if (defaultDefinition && typeof defaultDefinition.serialize === 'function') {
                    val = defaultDefinition.serialize.call(this, val, name);
                } else {
                    val = canReflect.serialize(val);
                }
                if (val !== undefined) {
                    unwrapped[name] = val;
                }
            }, this);
            return unwrapped;
        },
        reflectUnwrap: function (unwrapped) {
            this.forEach(function (value, key) {
                if (value !== undefined) {
                    unwrapped[key] = canReflect.unwrap(value);
                }
            });
            return unwrapped;
        },
        log: function (key) {
            var instance = this;
            var quoteString = function quoteString(x) {
                return typeof x === 'string' ? JSON.stringify(x) : x;
            };
            var meta = ensureMeta(instance);
            var allowed = meta.allowedLogKeysSet || new Set();
            meta.allowedLogKeysSet = allowed;
            if (key) {
                allowed.add(key);
            }
            meta._log = function (event, data) {
                var type = event.type;
                if (type === 'can.onPatches' || key && !allowed.has(type) || type === 'can.keys' || key && !allowed.has(type)) {
                    return;
                }
                if (type === 'add' || type === 'remove') {
                    dev.log(canReflect.getName(instance), '\n how   ', quoteString(type), '\n what  ', quoteString(data[0]), '\n index ', quoteString(data[1]));
                } else {
                    dev.log(canReflect.getName(instance), '\n key ', quoteString(type), '\n is  ', quoteString(data[0]), '\n was ', quoteString(data[1]));
                }
            };
        },
        deleteKey: function (prop) {
            var instanceDefines = this._instanceDefinitions;
            if (instanceDefines && Object.prototype.hasOwnProperty.call(instanceDefines, prop) && !Object.isSealed(this)) {
                delete instanceDefines[prop];
                delete this[prop];
                queues.batch.start();
                this.dispatch({
                    type: 'can.keys',
                    target: this
                });
                var oldValue = this._data[prop];
                if (oldValue !== undefined) {
                    delete this._data[prop];
                    this.dispatch({
                        type: prop,
                        target: this,
                        patches: [{
                                type: 'delete',
                                key: prop
                            }]
                    }, [
                        undefined,
                        oldValue
                    ]);
                }
                queues.batch.stop();
            } else {
                this.set(prop, undefined);
            }
            return this;
        }
    };
    module.exports = defineHelpers;
});
/*can-observable-mixin@0.4.0#src/mixin-mapprops*/
define('can-observable-mixin@0.4.0#src/mixin-mapprops', [
    'require',
    'exports',
    'module',
    './define',
    './define-helpers',
    'can-observation-recorder',
    'can-log/dev/dev',
    'can-reflect',
    'can-queues'
], function (require, exports, module) {
    const addDefinedProps = require('./define');
    const {updateSchemaKeys, hooks} = addDefinedProps;
    const defineHelpers = require('./define-helpers');
    const ObservationRecorder = require('can-observation-recorder');
    const canLogDev = require('can-log/dev/dev');
    const canReflect = require('can-reflect');
    const queues = require('can-queues');
    const getSchemaSymbol = Symbol.for('can.getSchema');
    function keysForDefinition(definitions) {
        var keys = [];
        for (var prop in definitions) {
            var definition = definitions[prop];
            if (typeof definition !== 'object' || ('serialize' in definition ? !!definition.serialize : !definition.get)) {
                keys.push(prop);
            }
        }
        return keys;
    }
    function assign(source) {
        queues.batch.start();
        canReflect.assignMap(this, source || {});
        queues.batch.stop();
    }
    function update(source) {
        queues.batch.start();
        canReflect.updateMap(this, source || {});
        queues.batch.stop();
    }
    function assignDeep(source) {
        queues.batch.start();
        canReflect.assignDeepMap(this, source || {});
        queues.batch.stop();
    }
    function updateDeep(source) {
        queues.batch.start();
        canReflect.updateDeepMap(this, source || {});
        queues.batch.stop();
    }
    function setKeyValue(key, value) {
        var defined = defineHelpers.defineExpando(this, key, value);
        if (!defined) {
            this[key] = value;
        }
    }
    function getKeyValue(key) {
        var value = this[key];
        if (value !== undefined || key in this || Object.isSealed(this)) {
            return value;
        } else {
            ObservationRecorder.add(this, key);
            return this[key];
        }
    }
    module.exports = function (Type) {
        return class extends Type {
            static [getSchemaSymbol]() {
                hooks.finalizeClass(this);
                let def = this.prototype._define;
                let definitions = def ? def.definitions : {};
                let schema = {
                    type: 'map',
                    identity: [],
                    keys: {}
                };
                return updateSchemaKeys(schema, definitions);
            }
            get(prop) {
                if (prop) {
                    return getKeyValue.call(this, prop);
                } else {
                    return canReflect.unwrap(this, Map);
                }
            }
            set(prop, value) {
                if (typeof prop === 'object') {
                    if (process.env.NODE_ENV !== 'production') {
                        canLogDev.warn('can-define/map/map.prototype.set is deprecated; please use can-define/map/map.prototype.assign or can-define/map/map.prototype.update instead');
                    }
                    if (value === true) {
                        updateDeep.call(this, prop);
                    } else {
                        assignDeep.call(this, prop);
                    }
                } else {
                    setKeyValue.call(this, prop, value);
                }
                return this;
            }
            assignDeep(prop) {
                assignDeep.call(this, prop);
                return this;
            }
            updateDeep(prop) {
                updateDeep.call(this, prop);
                return this;
            }
            assign(prop) {
                assign.call(this, prop);
                return this;
            }
            update(prop) {
                update.call(this, prop);
                return this;
            }
            serialize() {
                return canReflect.serialize(this, Map);
            }
            deleteKey() {
                return defineHelpers.deleteKey.apply(this, arguments);
            }
            forEach(cb, thisarg, observe) {
                function forEach(list, cb, thisarg) {
                    return canReflect.eachKey(list, cb, thisarg);
                }
                if (observe === false) {
                    ObservationRecorder.ignore(forEach)(this, cb, thisarg);
                } else {
                    return forEach(this, cb, thisarg);
                }
            }
            static [Symbol.for('can.new')](...args) {
                return new this(...args);
            }
            get [Symbol.for('can.isMapLike')]() {
                return true;
            }
            get [Symbol.for('can.isListLike')]() {
                return false;
            }
            get [Symbol.for('can.isValueLike')]() {
                return false;
            }
            [Symbol.for('can.getKeyValue')](...args) {
                return getKeyValue.apply(this, args);
            }
            [Symbol.for('can.deleteKeyValue')](...args) {
                return defineHelpers.deleteKey.call(this, ...args);
            }
            [Symbol.for('can.getOwnKeys')]() {
                var keys = canReflect.getOwnEnumerableKeys(this);
                if (this._computed) {
                    var computedKeys = canReflect.getOwnKeys(this._computed);
                    var key;
                    for (var i = 0; i < computedKeys.length; i++) {
                        key = computedKeys[i];
                        if (keys.indexOf(key) < 0) {
                            keys.push(key);
                        }
                    }
                }
                return keys;
            }
            [Symbol.for('can.getOwnEnumerableKeys')]() {
                ObservationRecorder.add(this, 'can.keys');
                ObservationRecorder.add(Object.getPrototypeOf(this), 'can.keys');
                return keysForDefinition(this._define.definitions).concat(keysForDefinition(this._instanceDefinitions));
            }
            [Symbol.for('can.serialize')](...args) {
                return defineHelpers.reflectSerialize.apply(this, args);
            }
            [Symbol.for('can.hasKey')](key) {
                return key in this._define.definitions || this._instanceDefinitions !== undefined && key in this._instanceDefinitions;
            }
        };
    };
});
/*can-observable-mixin@0.4.0#src/mixin-proxy*/
define('can-observable-mixin@0.4.0#src/mixin-proxy', [
    'require',
    'exports',
    'module',
    './define',
    'can-observation-recorder'
], function (require, exports, module) {
    const defineBehavior = require('./define');
    const ObservationRecorder = require('can-observation-recorder');
    const eventDispatcher = defineBehavior.make.set.eventDispatcher;
    const inSetupSymbol = Symbol.for('can.initializing');
    let isProtoReadOnSuper = false;
    (function () {
        if (typeof Proxy === 'function') {
            let par = class {
                fn() {
                }
            };
            let base = new Proxy(par, {
                get(t, k, r) {
                    if (k === '__proto__') {
                        isProtoReadOnSuper = true;
                    }
                    return Reflect.get(t, k, r);
                }
            });
            let chi = class extends base {
                fn() {
                    super.fn();
                }
            };
            new chi().fn();
        }
    }());
    function proxyPrototype(Base) {
        const instances = new WeakSet();
        function LateDefined() {
            let inst = Reflect.construct(Base, arguments, new.target);
            instances.add(inst);
            return inst;
        }
        const underlyingPrototypeObject = Object.create(Base.prototype);
        const getHandler = isProtoReadOnSuper ? function (target, key, receiver) {
            if (!this[inSetupSymbol] && typeof key !== 'symbol' && key !== '__proto__') {
                ObservationRecorder.add(receiver, key);
            }
            return Reflect.get(target, key, receiver);
        } : function (target, key, receiver) {
            if (!this[inSetupSymbol] && typeof key !== 'symbol') {
                ObservationRecorder.add(receiver, key);
            }
            return Reflect.get(target, key, receiver);
        };
        const proxyHandlers = {
            get: getHandler,
            set(target, key, value, receiver) {
                if (typeof key === 'symbol') {
                    Reflect.set(target, key, value, receiver);
                    return true;
                }
                if (key in target || !instances.has(receiver)) {
                    let current = Reflect.get(target, key, receiver);
                    Reflect.set(target, key, value, receiver);
                    eventDispatcher(receiver, key, current, value);
                } else {
                    defineBehavior.expando(receiver, key, value);
                }
                return true;
            }
        };
        LateDefined.prototype = new Proxy(underlyingPrototypeObject, proxyHandlers);
        return LateDefined;
    }
    module.exports = proxyPrototype;
});
/*can-observable-mixin@0.4.0#src/mixin-typeevents*/
define('can-observable-mixin@0.4.0#src/mixin-typeevents', [
    'require',
    'exports',
    'module',
    'can-event-queue/type/type'
], function (require, exports, module) {
    const addTypeEvents = require('can-event-queue/type/type');
    function mixinTypeEvents(Type) {
        let Child = class extends Type {
        };
        addTypeEvents(Child);
        return Child;
    }
    module.exports = mixinTypeEvents;
});
/*can-observable-mixin@0.4.0#src/mixin-element*/
define('can-observable-mixin@0.4.0#src/mixin-element', [
    'require',
    'exports',
    'module',
    './define',
    './mixin-mapprops',
    './mixin-proxy',
    './mixin-typeevents'
], function (require, exports, module) {
    const {hooks, makeDefineInstanceKey} = require('./define');
    const mixinMapProps = require('./mixin-mapprops');
    const mixinProxy = require('./mixin-proxy');
    const mixinTypeEvents = require('./mixin-typeevents');
    const constructorPropsSymbol = Symbol.for('can.constructorProps');
    const renderedSymbol = Symbol.for('can.rendered');
    module.exports = function mixinElement(BaseElement) {
        let Element = class extends mixinProxy(BaseElement) {
            constructor(props) {
                super();
                hooks.finalizeClass(this.constructor);
                this[constructorPropsSymbol] = props;
            }
            initialize(props) {
                if (super.initialize) {
                    super.initialize(props);
                }
                hooks.initialize(this, props || this[constructorPropsSymbol]);
            }
            render(props) {
                if (super.render) {
                    super.render(props);
                }
                hooks.initialize(this, props || this[constructorPropsSymbol]);
                this[renderedSymbol] = true;
            }
            connectedCallback() {
                if (super.connectedCallback) {
                    super.connectedCallback();
                }
                if (!this[renderedSymbol]) {
                    this.render();
                }
            }
        };
        Element = mixinTypeEvents(mixinMapProps(Element));
        makeDefineInstanceKey(Element);
        return Element;
    };
});
/*can-observable-mixin@0.4.0#src/mixins*/
define('can-observable-mixin@0.4.0#src/mixins', [
    'require',
    'exports',
    'module',
    './define',
    './mixin-element',
    './mixin-mapprops',
    './mixin-proxy',
    './mixin-typeevents'
], function (require, exports, module) {
    const defineBehavior = require('./define');
    const mixinElement = require('./mixin-element');
    const mixinMapProps = require('./mixin-mapprops');
    const mixinProxy = require('./mixin-proxy');
    const mixinTypeEvents = require('./mixin-typeevents');
    exports.makeDefineInstanceKey = defineBehavior.makeDefineInstanceKey;
    exports.mixins = defineBehavior.hooks;
    exports.mixinElement = mixinElement;
    exports.mixinMapProps = mixinMapProps;
    exports.mixinProxy = mixinProxy;
    exports.mixinTypeEvents = mixinTypeEvents;
});
/*can-observable-object@0.2.0#src/can-observable-object*/
define('can-observable-object@0.2.0#src/can-observable-object', [
    'require',
    'exports',
    'module',
    'can-observable-mixin'
], function (require, exports, module) {
    const {makeDefineInstanceKey, mixins, mixinMapProps, mixinProxy, mixinTypeEvents} = require('can-observable-mixin');
    let ObservableObject = class extends mixinProxy(Object) {
        constructor(props) {
            super();
            mixins.finalizeClass(this.constructor);
            mixins.initialize(this, props);
        }
    };
    ObservableObject = mixinTypeEvents(mixinMapProps(ObservableObject));
    makeDefineInstanceKey(ObservableObject);
    module.exports = ObservableObject;
});
/*can@5.31.0#es/can-observable-object*/
define('can@5.31.0#es/can-observable-object', [
    'exports',
    'can-observable-object'
], function (exports, _canObservableObject) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canObservableObject).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-observable-array@0.5.0#src/helpers*/
define('can-observable-array@0.5.0#src/helpers', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-observation-recorder',
    'can-event-queue/map/map'
], function (require, exports, module) {
    const canReflect = require('can-reflect');
    const ObservationRecorder = require('can-observation-recorder');
    const mapBindings = require('can-event-queue/map/map');
    const metaSymbol = Symbol.for('can.meta');
    const helpers = {
        assignNonEnumerable: function (obj, key, value) {
            return Object.defineProperty(obj, key, {
                enumerable: false,
                writable: true,
                configurable: true,
                value: value
            });
        },
        shouldRecordObservationOnAllKeysExceptFunctionsOnProto: function (keyInfo, meta) {
            return meta.preventSideEffects === 0 && !keyInfo.isAccessor && (keyInfo.targetHasOwnKey || !keyInfo.protoHasKey && !Object.isSealed(meta.target) || keyInfo.protoHasKey && typeof targetValue !== 'function');
        },
        dispatchIndexEvent: function (attr, how, newVal, oldVal) {
            var index = +attr;
            if (!isNaN(index)) {
                var itemsDefinition = this._define.definitions['#'];
                if (how === 'set') {
                    this.dispatch({ type: index }, [
                        newVal,
                        oldVal
                    ]);
                    let meta = this[metaSymbol];
                    if (!('preventSideEffects' in meta) || meta.preventSideEffects === 0) {
                        let patches = [{
                                index: index,
                                deleteCount: 1,
                                insert: [newVal],
                                type: 'splice'
                            }];
                        helpers.dispatchLengthPatch.call(this, how, patches, this.length, this.length);
                    }
                } else if (how === 'add') {
                    if (itemsDefinition && typeof itemsDefinition.added === 'function') {
                        ObservationRecorder.ignore(itemsDefinition.added).call(this, newVal, index);
                    }
                    this.dispatch({ type: index }, [
                        newVal,
                        oldVal
                    ]);
                    let meta = this[metaSymbol];
                    if (!('preventSideEffects' in meta) || meta.preventSideEffects === 0) {
                        let patches = [{
                                index: index,
                                deleteCount: 0,
                                insert: [newVal],
                                type: 'splice'
                            }];
                        helpers.dispatchLengthPatch.call(this, how, patches, this.length, this.length - 1);
                    }
                } else if (how === 'remove') {
                    if (itemsDefinition && typeof itemsDefinition.removed === 'function') {
                        ObservationRecorder.ignore(itemsDefinition.removed).call(this, oldVal, index);
                    }
                }
            } else {
                this.dispatch({
                    type: '' + attr,
                    target: this
                }, [
                    newVal,
                    oldVal
                ]);
            }
        },
        dispatchLengthPatch: function (how, patches, newLength, oldLength) {
            const dispatchArgs = {
                type: 'length',
                patches: patches
            };
            if (process.env.NODE_ENV !== 'production') {
                dispatchArgs.reasonLog = [
                    canReflect.getName(this) + '.' + how + ' called with',
                    arguments
                ];
            }
            mapBindings.dispatch.call(this, dispatchArgs, [
                newLength,
                oldLength
            ]);
        }
    };
    module.exports = helpers;
});
/*can-observable-array@0.5.0#src/computed-helpers*/
define('can-observable-array@0.5.0#src/computed-helpers', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-event-queue/map/map'
], function (require, exports, module) {
    const canReflect = require('can-reflect');
    const mapBindings = require('can-event-queue/map/map');
    var canMeta = Symbol.for('can.meta');
    const computedPropertyDefinitionSymbol = Symbol.for('can.computedPropertyDefinitions');
    const onKeyValueSymbol = Symbol.for('can.onKeyValue');
    const offKeyValueSymbol = Symbol.for('can.offKeyValue');
    function ComputedObjectObservationData(instance, prop, observation) {
        this.instance = instance;
        this.prop = prop;
        this.observation = observation;
        this.forward = this.forward.bind(this);
    }
    ComputedObjectObservationData.prototype.bind = function () {
        this.bindingCount++;
        if (this.bindingCount === 1) {
            this.observation.on(this.forward, 'notify');
        }
    };
    ComputedObjectObservationData.prototype.unbind = function () {
        this.bindingCount--;
        if (this.bindingCount === 0) {
            this.observation.off(this.forward, 'notify');
        }
    };
    ComputedObjectObservationData.prototype.forward = function (newValue, oldValue) {
        mapBindings.dispatch.call(this.instance, {
            type: this.prop,
            target: this.instance
        }, [
            newValue,
            oldValue
        ]);
    };
    ComputedObjectObservationData.prototype.bindingCount = 0;
    function findComputed(instance, key) {
        var meta = instance[canMeta];
        var target = meta.target;
        var computedPropertyDefinitions = target[computedPropertyDefinitionSymbol];
        if (computedPropertyDefinitions === undefined) {
            return;
        }
        var computedPropertyDefinition = computedPropertyDefinitions[key];
        if (computedPropertyDefinition === undefined) {
            return;
        }
        if (meta.computedKeys[key] === undefined) {
            meta.computedKeys[key] = new ComputedObjectObservationData(instance, key, computedPropertyDefinition(instance, key));
        }
        return meta.computedKeys[key];
    }
    const computedHelpers = {
        bind: function (instance, key) {
            let computedObj = findComputed(instance, key);
            if (computedObj === undefined) {
                return;
            }
            computedObj.bind();
        },
        addKeyDependencies: function (proxyKeys) {
            let onKeyValue = proxyKeys[onKeyValueSymbol];
            let offKeyValue = proxyKeys[offKeyValueSymbol];
            canReflect.assignSymbols(proxyKeys, {
                'can.onKeyValue': function (key) {
                    computedHelpers.bind(this, key);
                    return onKeyValue.apply(this, arguments);
                },
                'can.offKeyValue': function (key) {
                    computedHelpers.unbind(this, key);
                    return offKeyValue.apply(this, arguments);
                },
                'can.getKeyDependencies': function (key) {
                    var computedObj = findComputed(this, key);
                    if (computedObj === undefined) {
                        return;
                    }
                    return { valueDependencies: new Set([computedObj.observation]) };
                }
            });
        }
    };
    module.exports = computedHelpers;
});
/*can-observable-array@0.5.0#src/proxy-array*/
define('can-observable-array@0.5.0#src/proxy-array', [
    'require',
    'exports',
    'module',
    'can-reflect',
    './computed-helpers',
    'can-event-queue/map/map',
    'can-observation-recorder',
    './helpers',
    'can-observable-mixin'
], function (require, exports, module) {
    const canReflect = require('can-reflect');
    const computedHelpers = require('./computed-helpers');
    const mapBindings = require('can-event-queue/map/map');
    const ObservationRecorder = require('can-observation-recorder');
    const {assignNonEnumerable, shouldRecordObservationOnAllKeysExceptFunctionsOnProto, dispatchIndexEvent} = require('./helpers');
    const {mixins} = require('can-observable-mixin');
    const hasOwn = Object.prototype.hasOwnProperty;
    const {isSymbolLike} = canReflect;
    const metaSymbol = Symbol.for('can.meta');
    const proxiedObjects = new WeakMap();
    const proxies = new WeakSet();
    const proxyKeys = Object.create(null);
    Object.getOwnPropertySymbols(mapBindings).forEach(function (symbol) {
        assignNonEnumerable(proxyKeys, symbol, mapBindings[symbol]);
    });
    computedHelpers.addKeyDependencies(proxyKeys);
    const mutateMethods = {
        'push': function (arr, args) {
            return [{
                    index: arr.length - args.length,
                    deleteCount: 0,
                    insert: args,
                    type: 'splice'
                }];
        },
        'pop': function (arr) {
            return [{
                    index: arr.length,
                    deleteCount: 1,
                    insert: [],
                    type: 'splice'
                }];
        },
        'shift': function () {
            return [{
                    index: 0,
                    deleteCount: 1,
                    insert: [],
                    type: 'splice'
                }];
        },
        'unshift': function (arr, args) {
            return [{
                    index: 0,
                    deleteCount: 0,
                    insert: args,
                    type: 'splice'
                }];
        },
        'splice': function (arr, args) {
            return [{
                    index: args[0],
                    deleteCount: args[1],
                    insert: args.slice(2),
                    type: 'splice'
                }];
        },
        'sort': function (arr) {
            return [{
                    index: 0,
                    deleteCount: arr.length,
                    insert: arr,
                    type: 'splice'
                }];
        },
        'reverse': function (arr) {
            return [{
                    index: 0,
                    deleteCount: arr.length,
                    insert: arr,
                    type: 'splice'
                }];
        }
    };
    canReflect.eachKey(mutateMethods, function (makePatches, prop) {
        var protoFn = Array.prototype[prop];
        var mutateMethod = function () {
            var meta = this[metaSymbol], makeSideEffects = meta.preventSideEffects === 0, oldLength = meta.target.length;
            meta.preventSideEffects++;
            var ret = protoFn.apply(meta.target, arguments);
            var patches = makePatches(meta.target, Array.from(arguments), oldLength);
            if (makeSideEffects === true) {
                var reasonLog = [
                    canReflect.getName(meta.proxy) + '.' + prop + ' called with',
                    arguments
                ];
                var dispatchArgs = {
                    type: 'length',
                    patches: patches
                };
                if (process.env.NODE_ENV !== 'production') {
                    dispatchArgs.reasonLog = reasonLog;
                }
                mapBindings.dispatch.call(meta.proxy, dispatchArgs, [
                    meta.target.length,
                    oldLength
                ]);
            }
            meta.preventSideEffects--;
            return ret;
        };
        if (process.env.NODE_ENV !== 'production') {
            Object.defineProperty(mutateMethod, 'name', { value: prop });
        }
        proxiedObjects.set(protoFn, mutateMethod);
        proxies.add(mutateMethod);
    });
    function setValueAndOnChange(key, value, target, proxy, onChange) {
        let old, change;
        let hadOwn = hasOwn.call(target, key);
        let descriptor = Object.getOwnPropertyDescriptor(target, key);
        if (descriptor && descriptor.set) {
            descriptor.set.call(proxy, value);
        } else {
            old = target[key];
            change = old !== value;
            if (change) {
                let keyIsString = typeof key === 'string';
                if (keyIsString && !(key in target)) {
                    mixins.expando(target, key, value);
                } else {
                    target[key] = value;
                    onChange(hadOwn, old);
                }
            }
        }
    }
    const proxyHandlers = {
        get(target, key, receiver) {
            if (isSymbolLike(key)) {
                return target[key];
            }
            let proxy = proxiedObjects.get(target);
            ObservationRecorder.add(proxy, key.toString());
            let value = Reflect.get(target, key, receiver);
            return value;
        },
        set(target, key, newValue, receiver) {
            let proxy = proxiedObjects.get(target);
            let numberKey = !isSymbolLike(key) && +key;
            if (Number.isInteger(numberKey)) {
                key = numberKey;
            }
            setValueAndOnChange(key, newValue, target, proxy, function onChange(hadOwn, oldValue) {
                if (Number.isInteger(key)) {
                    dispatchIndexEvent.call(receiver, key, hadOwn ? newValue ? 'set' : 'remove' : 'add', newValue, oldValue);
                }
            });
            return true;
        },
        deleteProperty(target, key) {
            let old = this.target[key];
            let deleteSuccessful = delete this.target[key];
            if (deleteSuccessful && this.preventSideEffects === 0 && old !== undefined) {
                dispatchIndexEvent.call(this.proxy, key, 'remove', undefined, old);
            }
            return deleteSuccessful;
        },
        ownKeys() {
            ObservationRecorder.add(this.proxy, 'can.keys');
            return Object.getOwnPropertyNames(this.target).concat(Object.getOwnPropertySymbols(this.target)).concat(Object.getOwnPropertySymbols(this.proxyKeys));
        }
    };
    function makeObservable(array, options) {
        let meta = {
            target: array,
            proxyKeys: options.proxyKeys !== undefined ? options.proxyKeys : Object.create(proxyKeys),
            computedKeys: Object.create(null),
            options: options,
            preventSideEffects: 0
        };
        meta.proxyKeys[metaSymbol] = meta;
        meta.proxy = new Proxy(array, {
            get: proxyHandlers.get.bind(meta),
            set: proxyHandlers.set.bind(meta),
            ownKeys: proxyHandlers.ownKeys.bind(meta),
            deleteProperty: proxyHandlers.deleteProperty.bind(meta),
            meta: meta
        });
        mapBindings.addHandlers(meta.proxy, meta);
        return meta.proxy;
    }
    function proxyArray() {
        return class ProxyArray extends Array {
            constructor(...items) {
                super(...items);
                let localProxyKeys = Object.create(proxyKeys);
                localProxyKeys.constructor = this.constructor;
                let observable = makeObservable(this, {
                    proxyKeys: localProxyKeys,
                    shouldRecordObservation: shouldRecordObservationOnAllKeysExceptFunctionsOnProto
                });
                proxiedObjects.set(this, observable);
                proxies.add(observable);
                return observable;
            }
        };
    }
    module.exports = proxyArray;
});
/*can-observable-array@0.5.0#src/can-observable-array*/
define('can-observable-array@0.5.0#src/can-observable-array', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-observable-mixin',
    './helpers',
    './proxy-array',
    'can-queues'
], function (require, exports, module) {
    const canReflect = require('can-reflect');
    const {makeDefineInstanceKey, mixins, mixinMapProps, mixinTypeEvents} = require('can-observable-mixin');
    const {dispatchLengthPatch} = require('./helpers');
    const ProxyArray = require('./proxy-array')();
    const queues = require('can-queues');
    const localOnPatchesSymbol = 'can.patches';
    const onKeyValueSymbol = Symbol.for('can.onKeyValue');
    const offKeyValueSymbol = Symbol.for('can.offKeyValue');
    const metaSymbol = Symbol.for('can.meta');
    function convertItems(Constructor, items) {
        if (items.length) {
            if (Constructor.items) {
                for (let i = 0, len = items.length; i < len; i++) {
                    items[i] = canReflect.convert(items[i], Constructor.items);
                }
            }
        }
    }
    const MixedInArray = mixinTypeEvents(mixinMapProps(ProxyArray));
    class ObservableArray extends MixedInArray {
        constructor(...items) {
            let isLengthArg = items.length === 1 && typeof items[0] === 'number';
            if (!isLengthArg) {
                convertItems(new.target, items);
            }
            super(...items);
            mixins.finalizeClass(this.constructor);
            mixins.initialize(this, {});
        }
        static get [Symbol.species]() {
            return this;
        }
        static [Symbol.for('can.new')](items) {
            let array = items || [];
            return new this(...array);
        }
        push(...items) {
            convertItems(this.constructor, items);
            super.push(...items);
        }
        unshift(...items) {
            convertItems(this.constructor, items);
            super.unshift(...items);
        }
        filter(callback) {
            if (typeof callback === 'object') {
                let props = callback;
                callback = function (item) {
                    for (let prop in props) {
                        if (item[prop] !== props[prop]) {
                            return false;
                        }
                    }
                    return true;
                };
            }
            return super.filter(callback);
        }
        forEach(...args) {
            return Array.prototype.forEach.apply(this, args);
        }
        splice(...args) {
            let index = args[0], howMany = args[1], added = [], i, len, listIndex, allSame = args.length > 2;
            index = index || 0;
            for (i = 0, len = args.length - 2; i < len; i++) {
                listIndex = i + 2;
                args[listIndex] = canReflect.convert(args[listIndex], this.constructor.items || Object);
                added.push(args[listIndex]);
                if (this[i + index] !== args[listIndex]) {
                    allSame = false;
                }
            }
            if (allSame && this.length <= added.length) {
                return added;
            }
            if (howMany === undefined) {
                howMany = args[1] = this.length - index;
            }
            queues.batch.start();
            var removed = super.splice.apply(this, args);
            queues.batch.stop();
            return removed;
        }
        [Symbol.for('can.splice')](index, deleteCount, insert) {
            return this.splice(...[
                index,
                deleteCount
            ].concat(insert));
        }
        [Symbol.for('can.onPatches')](handler, queue) {
            this[onKeyValueSymbol](localOnPatchesSymbol, handler, queue);
        }
        [Symbol.for('can.offPatches')](handler, queue) {
            this[offKeyValueSymbol](localOnPatchesSymbol, handler, queue);
        }
        get [Symbol.for('can.isListLike')]() {
            return true;
        }
    }
    var mutateMethods = {
        'push': function (arr, args) {
            return [{
                    index: arr.length - args.length,
                    deleteCount: 0,
                    insert: args,
                    type: 'splice'
                }];
        },
        'pop': function (arr) {
            return [{
                    index: arr.length,
                    deleteCount: 1,
                    type: 'splice'
                }];
        },
        'shift': function () {
            return [{
                    index: 0,
                    deleteCount: 1,
                    type: 'splice'
                }];
        },
        'unshift': function (arr, args) {
            return [{
                    index: 0,
                    deleteCount: 0,
                    insert: args,
                    type: 'splice'
                }];
        },
        'splice': function (arr, args) {
            return [{
                    index: args[0],
                    deleteCount: args[1],
                    insert: args.slice(2),
                    type: 'splice'
                }];
        },
        'sort': function (arr) {
            return [{
                    index: 0,
                    deleteCount: arr.length,
                    insert: arr,
                    type: 'splice'
                }];
        },
        'reverse': function (arr) {
            return [{
                    index: 0,
                    deleteCount: arr.length,
                    insert: arr,
                    type: 'splice'
                }];
        }
    };
    canReflect.eachKey(mutateMethods, function (makePatches, prop) {
        const protoFn = ObservableArray.prototype[prop];
        ObservableArray.prototype[prop] = function () {
            const oldLength = this.length;
            this[metaSymbol].preventSideEffects++;
            protoFn.apply(this, arguments);
            this[metaSymbol].preventSideEffects--;
            const patches = makePatches(this, Array.from(arguments));
            dispatchLengthPatch.call(this, prop, patches, this.length, oldLength);
        };
    });
    makeDefineInstanceKey(ObservableArray);
    module.exports = ObservableArray;
});
/*can@5.31.0#es/can-observable-array*/
define('can@5.31.0#es/can-observable-array', [
    'exports',
    'can-observable-array'
], function (exports, _canObservableArray) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canObservableArray).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-stache-element@0.8.1#src/mixin-lifecycle-methods*/
define('can-stache-element@0.8.1#src/mixin-lifecycle-methods', function (require, exports, module) {
    'use strict';
    const lifecycleStatusSymbol = Symbol.for('can.lifecycleStatus');
    const inSetupSymbol = Symbol.for('can.initializing');
    const teardownHandlersSymbol = Symbol.for('can.teardownHandlers');
    function defineConfigurableNonEnumerable(obj, prop, value) {
        Object.defineProperty(obj, prop, {
            configurable: true,
            enumerable: false,
            writable: true,
            value: value
        });
    }
    module.exports = function mixinLifecycleMethods(BaseElement = HTMLElement) {
        return class LifecycleElement extends BaseElement {
            constructor() {
                super();
                if (arguments.length) {
                    throw new Error('can-stache-element: Do not pass arguments to the constructor. Initial property values should be passed to the `initialize` hook.');
                }
                defineConfigurableNonEnumerable(this, inSetupSymbol, true);
                defineConfigurableNonEnumerable(this, lifecycleStatusSymbol, {
                    initialized: false,
                    rendered: false,
                    connected: false,
                    disconnected: false
                });
                defineConfigurableNonEnumerable(this, teardownHandlersSymbol, []);
            }
            connectedCallback(props) {
                this.initialize(props);
                this.render();
                this.connect();
                return this;
            }
            disconnectedCallback() {
                this.disconnect();
                return this;
            }
            initialize(props) {
                const lifecycleStatus = this[lifecycleStatusSymbol];
                if (lifecycleStatus.initialized) {
                    return this;
                }
                this[inSetupSymbol] = true;
                if (super.initialize) {
                    super.initialize(props);
                }
                this[inSetupSymbol] = false;
                lifecycleStatus.initialized = true;
                return this;
            }
            render(props) {
                const lifecycleStatus = this[lifecycleStatusSymbol];
                if (lifecycleStatus.rendered) {
                    return this;
                }
                if (!lifecycleStatus.initialized) {
                    this.initialize(props);
                }
                if (super.render) {
                    super.render(props);
                }
                lifecycleStatus.rendered = true;
                return this;
            }
            connect(props) {
                const lifecycleStatus = this[lifecycleStatusSymbol];
                if (lifecycleStatus.connected) {
                    return this;
                }
                if (!lifecycleStatus.initialized) {
                    this.initialize(props);
                }
                if (!lifecycleStatus.rendered) {
                    this.render(props);
                }
                if (super.connect) {
                    super.connect(props);
                }
                if (this.connected) {
                    let connectedTeardown = this.connected();
                    if (typeof connectedTeardown === 'function') {
                        this[teardownHandlersSymbol].push(connectedTeardown);
                    }
                }
                lifecycleStatus.connected = true;
                return this;
            }
            disconnect() {
                const lifecycleStatus = this[lifecycleStatusSymbol];
                if (lifecycleStatus.disconnected) {
                    return this;
                }
                if (super.disconnect) {
                    super.disconnect();
                }
                if (this.stopListening) {
                    this.stopListening();
                }
                for (let handler of this[teardownHandlersSymbol]) {
                    handler.call(this);
                }
                if (this.disconnected) {
                    this.disconnected();
                }
                lifecycleStatus.disconnected = true;
                return this;
            }
        };
    };
});
/*can-stache-element@0.8.1#src/mixin-props*/
define('can-stache-element@0.8.1#src/mixin-props', [
    'require',
    'exports',
    'module',
    'can-observable-mixin',
    'can-reflect',
    'can-log/dev/dev'
], function (require, exports, module) {
    const {mixinElement} = require('can-observable-mixin');
    const canReflect = require('can-reflect');
    const canLogDev = require('can-log/dev/dev');
    const eventTargetInstalledSymbol = Symbol.for('can.eventTargetInstalled');
    module.exports = function mixinDefine(Base = HTMLElement) {
        const realAddEventListener = Base.prototype.addEventListener;
        const realRemoveEventListener = Base.prototype.removeEventListener;
        function installEventTarget(Type) {
            if (Type[eventTargetInstalledSymbol]) {
                return;
            }
            const eventQueueAddEventListener = Type.prototype.addEventListener;
            const eventQueueRemoveEventListener = Type.prototype.removeEventListener;
            Type.prototype.addEventListener = function () {
                eventQueueAddEventListener.apply(this, arguments);
                return realAddEventListener.apply(this, arguments);
            };
            Type.prototype.removeEventListener = function () {
                eventQueueRemoveEventListener.apply(this, arguments);
                return realRemoveEventListener.apply(this, arguments);
            };
            Type[eventTargetInstalledSymbol] = true;
            if (process.env.NODE_ENV !== 'production') {
                let props = typeof Type.props === 'object' ? Type.props : typeof Type.define === 'object' ? Type.define : {};
                Object.keys(props).forEach(function (key) {
                    if ('on' + key in Type.prototype) {
                        canLogDev.warn(`${ canReflect.getName(Type) }: The defined property [${ key }] matches the name of a DOM event. This property could update unexpectedly. Consider renaming.`);
                    }
                });
            }
        }
        class DefinedClass extends mixinElement(Base) {
            constructor() {
                super();
                installEventTarget(this.constructor);
            }
            intialize(props) {
                super.intialize(props);
            }
        }
        return DefinedClass;
    };
});
/*can-stache-element@0.8.1#src/mixin-stache-view*/
define('can-stache-element@0.8.1#src/mixin-stache-view', [
    'require',
    'exports',
    'module',
    'can-stache',
    'can-view-nodelist',
    'can-child-nodes',
    'can-dom-mutate/node',
    'can-stache-bindings'
], function (require, exports, module) {
    'use strict';
    const stache = require('can-stache');
    const nodeLists = require('can-view-nodelist');
    const childNodes = require('can-child-nodes');
    const domMutateNode = require('can-dom-mutate/node');
    require('can-stache-bindings');
    const rendererSymbol = Symbol.for('can.stacheRenderer');
    const metaSymbol = Symbol.for('can.meta');
    const viewInsertSymbol = Symbol.for('can.viewInsert');
    function ensureMeta(obj) {
        var meta = obj[metaSymbol];
        if (meta === undefined) {
            meta = {};
            Object.defineProperty(obj, metaSymbol, {
                value: meta,
                enumerable: true
            });
        }
        return meta;
    }
    module.exports = function mixinStacheView(Base = HTMLElement) {
        return class StacheClass extends Base {
            render(props, renderOptions, parentNodeList) {
                if (super.render) {
                    super.render(props);
                }
                let renderer = this.constructor[rendererSymbol];
                if (!renderer) {
                    const view = this.constructor.view;
                    renderer = typeof view === 'function' ? view : stache(view || '');
                    this.constructor[rendererSymbol] = renderer;
                }
                const meta = ensureMeta(this);
                const nodeList = meta._nodeList = nodeLists.register([], () => {
                    if (meta.skipDisconnect) {
                        return;
                    }
                    meta.skipNodeListUnregister = true;
                    this.disconnect();
                    meta.skipNodeListUnregister = false;
                }, parentNodeList || true, false);
                nodeList.expression = '<' + this.localName + '>';
                const frag = renderer(this, renderOptions, nodeList);
                const viewRoot = this.viewRoot || this;
                domMutateNode.appendChild.call(viewRoot, frag);
                nodeLists.update(nodeList, childNodes(viewRoot));
                if (meta._viewDataNodeList) {
                    meta._viewDataNodeList.newDeepChildren.push(nodeList);
                }
            }
            disconnect() {
                const meta = this[metaSymbol];
                if (meta._nodeList && !meta.skipNodeListUnregister) {
                    meta.skipDisconnect = true;
                    nodeLists.unregister(meta._nodeList);
                    meta.skipDisconnect = false;
                    meta._nodeList = null;
                }
                if (super.disconnect) {
                    super.disconnect();
                }
            }
            [viewInsertSymbol](viewData) {
                const meta = ensureMeta(this);
                const nodeList = meta._nodeList;
                if (nodeList) {
                    viewData.nodeList.newDeepChildren.push(nodeList);
                } else {
                    meta._viewDataNodeList = viewData.nodeList;
                }
                return this;
            }
        };
    };
});
/*can-stache-element@0.8.1#src/mixin-viewmodel-symbol*/
define('can-stache-element@0.8.1#src/mixin-viewmodel-symbol', [
    'require',
    'exports',
    'module',
    'can-define-lazy-value'
], function (require, exports, module) {
    'use strict';
    const defineLazyValue = require('can-define-lazy-value');
    const viewModelSymbol = Symbol.for('can.viewModel');
    module.exports = function mixinViewModelSymbol(BaseClass = HTMLElement) {
        class ViewModelClass extends BaseClass {
        }
        defineLazyValue(ViewModelClass.prototype, viewModelSymbol, function () {
            return this;
        });
        return ViewModelClass;
    };
});
/*can-stache-element@0.8.1#src/mixin-bindings*/
define('can-stache-element@0.8.1#src/mixin-bindings', [
    'require',
    'exports',
    'module',
    'can-stache-bindings',
    'can-simple-observable/key/key',
    'can-reflect',
    'can-bind',
    'can-stache-bindings'
], function (require, exports, module) {
    'use strict';
    const stacheBindings = require('can-stache-bindings');
    const keyObservable = require('can-simple-observable/key/key');
    const canReflect = require('can-reflect');
    const Bind = require('can-bind');
    require('can-stache-bindings');
    const getValueSymbol = Symbol.for('can.getValue');
    const setValueSymbol = Symbol.for('can.setValue');
    const lifecycleStatusSymbol = Symbol.for('can.lifecycleStatus');
    const metaSymbol = Symbol.for('can.meta');
    module.exports = function mixinBindings(Base = HTMLElement) {
        return class BindingsClass extends Base {
            bindings(bindings) {
                if (this[metaSymbol] === undefined) {
                    this[metaSymbol] = {};
                }
                this[metaSymbol]._connectedBindings = bindings;
                return this;
            }
            initialize(props) {
                var savedBindings = this[metaSymbol] && this[metaSymbol]._connectedBindings;
                if (savedBindings) {
                    props = props || {};
                    const bindingContext = { element: this };
                    const bindings = [];
                    canReflect.eachKey(savedBindings, (parent, propName) => {
                        var canGetParentValue = parent != null && !!parent[getValueSymbol];
                        var canSetParentValue = parent != null && !!parent[setValueSymbol];
                        if (canGetParentValue === true || canSetParentValue) {
                            var child = keyObservable(this, propName);
                            var canBinding = new Bind({
                                child: child,
                                parent: parent,
                                queue: 'domUI',
                                updateChildName: 'update <' + this.nodeName.toLowerCase() + '>.' + propName,
                                updateParentName: 'update ' + canReflect.getName(parent) + ' from <' + this.nodeName.toLowerCase() + '>.' + propName
                            });
                            bindings.push({
                                binding: canBinding,
                                siblingBindingData: {
                                    parent: {
                                        source: 'scope',
                                        exports: canGetParentValue
                                    },
                                    child: {
                                        source: 'viewModel',
                                        exports: canSetParentValue,
                                        name: propName
                                    },
                                    bindingAttributeName: propName
                                }
                            });
                        } else {
                            props[propName] = parent;
                        }
                    });
                    var initializeData = stacheBindings.behaviors.initializeViewModel(bindings, props, properties => {
                        super.initialize(properties);
                        return this;
                    }, bindingContext);
                    this[metaSymbol]._connectedBindingsTeardown = function () {
                        for (var attrName in initializeData.onTeardowns) {
                            initializeData.onTeardowns[attrName]();
                        }
                    };
                    this[metaSymbol].other = true;
                } else {
                    if (super.initialize) {
                        super.initialize(props);
                    }
                }
            }
            render(props, renderOptions, parentNodeList) {
                const viewRoot = this.viewRoot || this;
                viewRoot.innerHTML = '';
                if (super.render) {
                    super.render(props, renderOptions, parentNodeList);
                }
            }
            disconnect() {
                if (this[metaSymbol] && this[metaSymbol]._connectedBindingsTeardown) {
                    this[metaSymbol]._connectedBindingsTeardown();
                    this[metaSymbol]._connectedBindingsTeardown = null;
                    this[lifecycleStatusSymbol] = {
                        initialized: false,
                        rendered: false,
                        connected: false,
                        disconnected: true
                    };
                }
                if (super.disconnect) {
                    super.disconnect();
                }
            }
        };
    };
});
/*can-stache-element@0.8.1#src/can-stache-element*/
define('can-stache-element@0.8.1#src/can-stache-element', [
    'require',
    'exports',
    'module',
    './mixin-lifecycle-methods',
    './mixin-props',
    './mixin-stache-view',
    './mixin-viewmodel-symbol',
    './mixin-bindings',
    'can-stache-bindings'
], function (require, exports, module) {
    'use strict';
    const mixinLifecycleMethods = require('./mixin-lifecycle-methods');
    const mixinProps = require('./mixin-props');
    const mixinStacheView = require('./mixin-stache-view');
    const mixinViewModelSymbol = require('./mixin-viewmodel-symbol');
    const mixinBindings = require('./mixin-bindings');
    const canStacheBindings = require('can-stache-bindings');
    const initializeSymbol = Symbol.for('can.initialize');
    const teardownHandlersSymbol = Symbol.for('can.teardownHandlers');
    function DeriveElement(BaseElement = HTMLElement) {
        class StacheElement extends mixinLifecycleMethods(mixinBindings(mixinViewModelSymbol(mixinStacheView(mixinProps(BaseElement))))) {
            [initializeSymbol](el, tagData) {
                const teardownBindings = canStacheBindings.behaviors.viewModel(el, tagData, function makeViewModel(initialViewmodelData) {
                    el.render(initialViewmodelData, {}, tagData.parentNodeList);
                    return el;
                });
                if (el[teardownHandlersSymbol]) {
                    el[teardownHandlersSymbol].push(teardownBindings);
                }
            }
        }
        function StacheElementConstructorFunction() {
            const self = Reflect.construct(StacheElement, arguments, this.constructor);
            return self;
        }
        StacheElementConstructorFunction.prototype = Object.create(StacheElement.prototype);
        StacheElementConstructorFunction.prototype.constructor = StacheElementConstructorFunction;
        return StacheElementConstructorFunction;
    }
    module.exports = DeriveElement();
});
/*can@5.31.0#es/can-stache-element*/
define('can@5.31.0#es/can-stache-element', [
    'exports',
    'can-stache-element'
], function (exports, _canStacheElement) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canStacheElement).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-stache-converters@4.2.6#can-stache-converters*/
define('can-stache-converters@4.2.6#can-stache-converters', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-stache',
    'can-string-to-any',
    'can-log/dev/dev',
    'can-stache-bindings',
    'can-stache-helpers'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var stache = require('can-stache');
    var stringToAny = require('can-string-to-any');
    var dev = require('can-log/dev/dev');
    require('can-stache-bindings');
    var stacheHelpers = require('can-stache-helpers');
    var shouldPop = false;
    stache('{{echo(args(1))}}')({
        echo: function () {
        },
        args: function () {
            shouldPop = arguments.length > 1;
        }
    });
    stache.registerConverter('boolean-to-inList', {
        get: function (item, list) {
            if (!list) {
                return false;
            } else {
                return list.indexOf(item) !== -1;
            }
        },
        set: function (newVal, item, list) {
            if (!list) {
                return;
            }
            if (!newVal) {
                var idx = list.indexOf(item);
                if (idx !== -1) {
                    list.splice(idx, 1);
                }
            } else {
                list.push(item);
            }
        }
    });
    var converters = {
        'string-to-any': {
            get: function (obs) {
                return '' + canReflect.getValue(obs);
            },
            set: function (newVal, obs) {
                var converted = stringToAny(newVal);
                canReflect.setValue(obs, converted);
            }
        },
        'index-to-selected': {
            get: function (item, list) {
                var val = canReflect.getValue(item);
                var idx = canReflect.getValue(list).indexOf(val);
                return idx;
            },
            set: function (idx, item, list) {
                var newVal = canReflect.getValue(list)[idx];
                canReflect.setValue(item, newVal);
            }
        },
        'selected-to-index': {
            get: function (idx, list) {
                var val = canReflect.getValue(idx), listValue = canReflect.getValue(list);
                var item = listValue[val];
                return item;
            },
            set: function (item, idx, list) {
                var newVal = canReflect.getValue(list).indexOf(item);
                canReflect.setValue(idx, newVal);
            }
        },
        'either-or': {
            get: function (chosen, a, b) {
                var chosenVal = canReflect.getValue(chosen), aValue = canReflect.getValue(a), bValue = canReflect.getValue(b);
                var matchA = aValue === chosenVal;
                var matchB = bValue === chosenVal;
                if (!matchA && !matchB) {
                    if (process.env.NODE_ENV !== 'production') {
                        dev.warn('can-stache-converter.either-or:', '`' + chosenVal + '`', 'does not match `' + aValue + '`', 'or `' + bValue + '`');
                    }
                    return;
                } else {
                    return matchA;
                }
            },
            set: function (newVal, chosen, a, b) {
                var setVal = newVal ? canReflect.getValue(a) : canReflect.getValue(b);
                canReflect.setValue(chosen, setVal);
            }
        },
        'equal': {
            get: function () {
                var args = canReflect.toArray(arguments);
                if (shouldPop) {
                    args.pop();
                }
                if (args.length > 1) {
                    var comparer = canReflect.getValue(args.pop());
                    return args.every(function (obs) {
                        var value = canReflect.getValue(obs);
                        return value === comparer;
                    });
                }
            },
            set: function () {
                var args = canReflect.toArray(arguments);
                if (shouldPop) {
                    args.pop();
                }
                if (args.length > 2) {
                    var b = args.shift();
                    var comparer = canReflect.getValue(args.pop());
                    if (b) {
                        for (var i = 0; i < args.length; i++) {
                            canReflect.setValue(args[i], comparer);
                        }
                    }
                }
            }
        }
    };
    stache.addConverter(converters);
    if (!stacheHelpers.not) {
        stache.addConverter('not', {
            get: function (obs) {
                return !canReflect.getValue(obs);
            },
            set: function (newVal, obs) {
                canReflect.setValue(obs, !newVal);
            }
        });
    }
    module.exports = converters;
});
/*can@5.31.0#es/can-stache-converters*/
define('can@5.31.0#es/can-stache-converters', [
    'exports',
    'can-stache-converters'
], function (exports, _canStacheConverters) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canStacheConverters).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-view-autorender@5.0.4#can-view-autorender*/
define('can-view-autorender@5.0.4#can-view-autorender', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-view-model',
    'can-reflect',
    'can-string',
    'can-import-module',
    'can-dom-events'
], function (require, exports, module) {
    var namespace = require('can-namespace');
    var canViewModel = require('can-view-model');
    var canReflect = require('can-reflect');
    var camelize = require('can-string').camelize;
    var load = require('can-import-module');
    var domEvents = require('can-dom-events');
    var ignoreAttributesRegExp = /^(dataViewId|class|id|type|src|style)$/i;
    var typeMatch = /\s*text\/(stache)\s*/;
    function isIn(element, type) {
        while (element.parentNode) {
            element = element.parentNode;
            if (element.nodeName.toLowerCase() === type.toLowerCase()) {
                return true;
            }
        }
    }
    function setAttr(el, attr, viewModel) {
        var camelized = camelize(attr);
        if (!ignoreAttributesRegExp.test(camelized)) {
            var value = el.getAttribute(attr);
            if (!canReflect.hasKey(viewModel, camelized)) {
                canReflect.defineInstanceKey(viewModel.constructor, camelized, typeof value);
            }
            canReflect.setKeyValue(viewModel, camelized, value);
        }
    }
    function insertAfter(ref, element) {
        if (ref.nextSibling) {
            ref.parentNode.insertBefore(element, ref.nextSibling);
        } else {
            ref.parentNode.appendChild(element);
        }
    }
    function render(renderer, scope, el) {
        var frag = renderer(scope);
        if (isIn(el, 'head')) {
            document.body.appendChild(frag);
        } else if (el.nodeName.toLowerCase() === 'script') {
            insertAfter(el, frag);
        } else {
            insertAfter(el, frag);
            el.parentNode.removeChild(el);
        }
    }
    function setupScope(el) {
        var scope = canViewModel(el);
        canReflect.each(el.attributes || [], function (attr) {
            setAttr(el, attr.name, scope);
        });
        domEvents.addEventListener(el, 'attributes', function (ev) {
            setAttr(el, ev.attributeName, scope);
        });
        return scope;
    }
    var promise = new Promise(function (resolve, reject) {
        function autoload() {
            var promises = [];
            canReflect.each(document.querySelectorAll('[can-autorender]'), function (el, i) {
                el.style.display = 'none';
                var text = el.innerHTML || el.text, typeAttr = el.getAttribute('type'), typeInfo = typeAttr.match(typeMatch), type = typeInfo && typeInfo[1], typeModule = 'can-' + type;
                promises.push(load(typeModule).then(function (engine) {
                    if (engine.async) {
                        return engine.async(text).then(function (renderer) {
                            render(renderer, setupScope(el), el);
                        });
                    } else {
                        var renderer = engine(text);
                        render(renderer, setupScope(el), el);
                    }
                }));
            });
            Promise.all(promises).then(resolve, reject);
        }
        if (document.readyState === 'complete') {
            autoload();
        } else {
            domEvents.addEventListener(window, 'load', autoload);
        }
    });
    module.exports = namespace.autorender = function autorender(success, error) {
        return promise.then(success, error);
    };
});
/*can@5.31.0#es/can-view-autorender*/
define('can@5.31.0#es/can-view-autorender', [
    'exports',
    'can-view-autorender'
], function (exports, _canViewAutorender) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canViewAutorender).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-super-model@1.1.1#can-super-model*/
define('can-super-model@1.1.1#can-super-model', [
    'require',
    'exports',
    'module',
    'can-connect',
    'can-connect/constructor/constructor',
    'can-connect/can/map/map',
    'can-connect/can/ref/ref',
    'can-connect/constructor/store/store',
    'can-connect/data/callbacks/callbacks',
    'can-connect/data/callbacks-cache/callbacks-cache',
    'can-connect/data/combine-requests/combine-requests',
    'can-connect/data/localstorage-cache/localstorage-cache',
    'can-connect/data/parse/parse',
    'can-connect/data/url/url',
    'can-connect/fall-through-cache/fall-through-cache',
    'can-connect/real-time/real-time',
    'can-connect/constructor/callbacks-once/callbacks-once',
    'can-define/list/list',
    'can-define/map/map',
    'can-namespace',
    'can-reflect',
    'can-query-logic'
], function (require, exports, module) {
    var connect = require('can-connect');
    var connectConstructor = require('can-connect/constructor/constructor');
    var canMap = require('can-connect/can/map/map');
    var canRef = require('can-connect/can/ref/ref');
    var constructorStore = require('can-connect/constructor/store/store');
    var dataCallbacks = require('can-connect/data/callbacks/callbacks');
    var callbacksCache = require('can-connect/data/callbacks-cache/callbacks-cache');
    var combineRequests = require('can-connect/data/combine-requests/combine-requests');
    var localCache = require('can-connect/data/localstorage-cache/localstorage-cache');
    var dataParse = require('can-connect/data/parse/parse');
    var dataUrl = require('can-connect/data/url/url');
    var fallThroughCache = require('can-connect/fall-through-cache/fall-through-cache');
    var realTime = require('can-connect/real-time/real-time');
    var callbacksOnce = require('can-connect/constructor/callbacks-once/callbacks-once');
    var DefineList = require('can-define/list/list');
    var DefineMap = require('can-define/map/map');
    var namespace = require('can-namespace');
    var canReflect = require('can-reflect');
    var QueryLogic = require('can-query-logic');
    function superModel(optionsOrUrl) {
        var options = typeof optionsOrUrl === 'string' ? { url: optionsOrUrl } : optionsOrUrl;
        if (typeof options.Map === 'undefined') {
            options.Map = DefineMap.extend({ seal: false }, {});
        }
        if (typeof options.List === 'undefined') {
            options.List = options.Map.List || DefineList.extend({ '#': options.Map });
        }
        options = canReflect.assignDeep({}, options);
        if (!options.name) {
            options.name = canReflect.getName(options.Map) + '.connection';
        }
        if (!options.queryLogic) {
            options.queryLogic = new QueryLogic(options.Map);
        }
        var behaviors = [
            connectConstructor,
            canMap,
            canRef,
            constructorStore,
            dataCallbacks,
            combineRequests,
            dataParse,
            dataUrl,
            realTime,
            callbacksOnce
        ];
        if (typeof localStorage !== 'undefined') {
            if (!options.cacheConnection) {
                options.cacheConnection = connect([localCache], {
                    name: options.name + '.cacheConnection',
                    idProp: options.idProp,
                    queryLogic: options.queryLogic
                });
            }
            behaviors.push(callbacksCache, fallThroughCache);
        }
        return connect(behaviors, options);
    }
    module.exports = namespace.superModel = superModel;
});
/*can@5.31.0#es/can-super-model*/
define('can@5.31.0#es/can-super-model', [
    'exports',
    'can-super-model'
], function (exports, _canSuperModel) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canSuperModel).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-connect-feathers@5.0.1#service/service*/
define('can-connect-feathers@5.0.1#service/service', [
    'require',
    'exports',
    'module',
    'can-connect'
], function (require, exports, module) {
    'use strict';
    var connect = require('can-connect');
    function getIdProp(Model) {
        var algebraIdProp;
        var algebraClause = Model.algebra && Model.algebra.clauses && Model.algebra.clauses.id;
        if (algebraClause) {
            algebraIdProp = Object.keys(algebraClause)[0];
        }
        if (!algebraIdProp && !Model.idProp) {
            throw new Error('An idProp was not set in the Model for ' + Model + '. Things may not work as expected.');
        }
        return algebraIdProp || Model.idProp;
    }
    module.exports = connect.behavior('data/feathers-service', function (base) {
        var helpURL = 'https://canjs.com/doc/can-connect-feathers.html';
        if (!this.feathersService) {
            throw new Error('You must provide a feathersService to the feathers-service behavior: ' + helpURL);
        }
        var service = this.feathersService;
        return {
            init: function () {
                base.init.apply(this, arguments);
                var self = this;
                service.on('created', function (message) {
                    self.createInstance(message);
                });
                service.on('updated', function (message) {
                    self.updateInstance(message);
                });
                service.on('patched', function (message) {
                    self.updateInstance(message);
                });
                service.on('removed', function (message) {
                    self.destroyInstance(message);
                });
            },
            getListData: function (params) {
                return service.find({ query: params });
            },
            getData: function (params) {
                var id = null;
                var idProp = getIdProp(this);
                if (typeof params === 'string' || typeof params === 'number') {
                    id = params;
                    params = {};
                } else if (params && typeof params[idProp] !== 'undefined') {
                    id = params[idProp];
                    delete params[idProp];
                }
                return service.get(id, { query: params });
            },
            createData: function (data) {
                return service.create(data);
            },
            updateData: function (instance) {
                var idProp = getIdProp(this);
                return service.update(instance[idProp], instance);
            },
            destroyData: function (instance) {
                var idProp = getIdProp(this);
                return service.remove(instance[idProp]);
            }
        };
    });
});
/*ms@2.1.2#index*/
define('ms@2.1.2#index', function (require, exports, module) {
    var s = 1000;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module.exports = function (val, options) {
        options = options || {};
        var type = typeof val;
        if (type === 'string' && val.length > 0) {
            return parse(val);
        } else if (type === 'number' && isFinite(val)) {
            return options.long ? fmtLong(val) : fmtShort(val);
        }
        throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
    };
    function parse(str) {
        str = String(str);
        if (str.length > 100) {
            return;
        }
        var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
        if (!match) {
            return;
        }
        var n = parseFloat(match[1]);
        var type = (match[2] || 'ms').toLowerCase();
        switch (type) {
        case 'years':
        case 'year':
        case 'yrs':
        case 'yr':
        case 'y':
            return n * y;
        case 'weeks':
        case 'week':
        case 'w':
            return n * w;
        case 'days':
        case 'day':
        case 'd':
            return n * d;
        case 'hours':
        case 'hour':
        case 'hrs':
        case 'hr':
        case 'h':
            return n * h;
        case 'minutes':
        case 'minute':
        case 'mins':
        case 'min':
        case 'm':
            return n * m;
        case 'seconds':
        case 'second':
        case 'secs':
        case 'sec':
        case 's':
            return n * s;
        case 'milliseconds':
        case 'millisecond':
        case 'msecs':
        case 'msec':
        case 'ms':
            return n;
        default:
            return undefined;
        }
    }
    function fmtShort(ms) {
        var msAbs = Math.abs(ms);
        if (msAbs >= d) {
            return Math.round(ms / d) + 'd';
        }
        if (msAbs >= h) {
            return Math.round(ms / h) + 'h';
        }
        if (msAbs >= m) {
            return Math.round(ms / m) + 'm';
        }
        if (msAbs >= s) {
            return Math.round(ms / s) + 's';
        }
        return ms + 'ms';
    }
    function fmtLong(ms) {
        var msAbs = Math.abs(ms);
        if (msAbs >= d) {
            return plural(ms, msAbs, d, 'day');
        }
        if (msAbs >= h) {
            return plural(ms, msAbs, h, 'hour');
        }
        if (msAbs >= m) {
            return plural(ms, msAbs, m, 'minute');
        }
        if (msAbs >= s) {
            return plural(ms, msAbs, s, 'second');
        }
        return ms + ' ms';
    }
    function plural(ms, msAbs, n, name) {
        var isPlural = msAbs >= n * 1.5;
        return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
    }
});
/*debug@3.2.6#src/common*/
define('debug@3.2.6#src/common', [
    'require',
    'exports',
    'module',
    'ms'
], function (require, exports, module) {
    'use strict';
    function setup(env) {
        createDebug.debug = createDebug;
        createDebug.default = createDebug;
        createDebug.coerce = coerce;
        createDebug.disable = disable;
        createDebug.enable = enable;
        createDebug.enabled = enabled;
        createDebug.humanize = require('ms');
        Object.keys(env).forEach(function (key) {
            createDebug[key] = env[key];
        });
        createDebug.instances = [];
        createDebug.names = [];
        createDebug.skips = [];
        createDebug.formatters = {};
        function selectColor(namespace) {
            var hash = 0;
            for (var i = 0; i < namespace.length; i++) {
                hash = (hash << 5) - hash + namespace.charCodeAt(i);
                hash |= 0;
            }
            return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
        }
        createDebug.selectColor = selectColor;
        function createDebug(namespace) {
            var prevTime;
            function debug() {
                if (!debug.enabled) {
                    return;
                }
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }
                var self = debug;
                var curr = Number(new Date());
                var ms = curr - (prevTime || curr);
                self.diff = ms;
                self.prev = prevTime;
                self.curr = curr;
                prevTime = curr;
                args[0] = createDebug.coerce(args[0]);
                if (typeof args[0] !== 'string') {
                    args.unshift('%O');
                }
                var index = 0;
                args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
                    if (match === '%%') {
                        return match;
                    }
                    index++;
                    var formatter = createDebug.formatters[format];
                    if (typeof formatter === 'function') {
                        var val = args[index];
                        match = formatter.call(self, val);
                        args.splice(index, 1);
                        index--;
                    }
                    return match;
                });
                createDebug.formatArgs.call(self, args);
                var logFn = self.log || createDebug.log;
                logFn.apply(self, args);
            }
            debug.namespace = namespace;
            debug.enabled = createDebug.enabled(namespace);
            debug.useColors = createDebug.useColors();
            debug.color = selectColor(namespace);
            debug.destroy = destroy;
            debug.extend = extend;
            if (typeof createDebug.init === 'function') {
                createDebug.init(debug);
            }
            createDebug.instances.push(debug);
            return debug;
        }
        function destroy() {
            var index = createDebug.instances.indexOf(this);
            if (index !== -1) {
                createDebug.instances.splice(index, 1);
                return true;
            }
            return false;
        }
        function extend(namespace, delimiter) {
            return createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
        }
        function enable(namespaces) {
            createDebug.save(namespaces);
            createDebug.names = [];
            createDebug.skips = [];
            var i;
            var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
            var len = split.length;
            for (i = 0; i < len; i++) {
                if (!split[i]) {
                    continue;
                }
                namespaces = split[i].replace(/\*/g, '.*?');
                if (namespaces[0] === '-') {
                    createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
                } else {
                    createDebug.names.push(new RegExp('^' + namespaces + '$'));
                }
            }
            for (i = 0; i < createDebug.instances.length; i++) {
                var instance = createDebug.instances[i];
                instance.enabled = createDebug.enabled(instance.namespace);
            }
        }
        function disable() {
            createDebug.enable('');
        }
        function enabled(name) {
            if (name[name.length - 1] === '*') {
                return true;
            }
            var i;
            var len;
            for (i = 0, len = createDebug.skips.length; i < len; i++) {
                if (createDebug.skips[i].test(name)) {
                    return false;
                }
            }
            for (i = 0, len = createDebug.names.length; i < len; i++) {
                if (createDebug.names[i].test(name)) {
                    return true;
                }
            }
            return false;
        }
        function coerce(val) {
            if (val instanceof Error) {
                return val.stack || val.message;
            }
            return val;
        }
        createDebug.enable(createDebug.load());
        return createDebug;
    }
    module.exports = setup;
});
/*debug@3.2.6#src/browser*/
define('debug@3.2.6#src/browser', [
    'require',
    'exports',
    'module',
    './common'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        function _typeof(obj) {
            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
                _typeof = function _typeof(obj) {
                    return typeof obj;
                };
            } else {
                _typeof = function _typeof(obj) {
                    return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
                };
            }
            return _typeof(obj);
        }
        exports.log = log;
        exports.formatArgs = formatArgs;
        exports.save = save;
        exports.load = load;
        exports.useColors = useColors;
        exports.storage = localstorage();
        exports.colors = [
            '#0000CC',
            '#0000FF',
            '#0033CC',
            '#0033FF',
            '#0066CC',
            '#0066FF',
            '#0099CC',
            '#0099FF',
            '#00CC00',
            '#00CC33',
            '#00CC66',
            '#00CC99',
            '#00CCCC',
            '#00CCFF',
            '#3300CC',
            '#3300FF',
            '#3333CC',
            '#3333FF',
            '#3366CC',
            '#3366FF',
            '#3399CC',
            '#3399FF',
            '#33CC00',
            '#33CC33',
            '#33CC66',
            '#33CC99',
            '#33CCCC',
            '#33CCFF',
            '#6600CC',
            '#6600FF',
            '#6633CC',
            '#6633FF',
            '#66CC00',
            '#66CC33',
            '#9900CC',
            '#9900FF',
            '#9933CC',
            '#9933FF',
            '#99CC00',
            '#99CC33',
            '#CC0000',
            '#CC0033',
            '#CC0066',
            '#CC0099',
            '#CC00CC',
            '#CC00FF',
            '#CC3300',
            '#CC3333',
            '#CC3366',
            '#CC3399',
            '#CC33CC',
            '#CC33FF',
            '#CC6600',
            '#CC6633',
            '#CC9900',
            '#CC9933',
            '#CCCC00',
            '#CCCC33',
            '#FF0000',
            '#FF0033',
            '#FF0066',
            '#FF0099',
            '#FF00CC',
            '#FF00FF',
            '#FF3300',
            '#FF3333',
            '#FF3366',
            '#FF3399',
            '#FF33CC',
            '#FF33FF',
            '#FF6600',
            '#FF6633',
            '#FF9900',
            '#FF9933',
            '#FFCC00',
            '#FFCC33'
        ];
        function useColors() {
            if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
                return true;
            }
            if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
                return false;
            }
            return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
        }
        function formatArgs(args) {
            args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);
            if (!this.useColors) {
                return;
            }
            var c = 'color: ' + this.color;
            args.splice(1, 0, c, 'color: inherit');
            var index = 0;
            var lastC = 0;
            args[0].replace(/%[a-zA-Z%]/g, function (match) {
                if (match === '%%') {
                    return;
                }
                index++;
                if (match === '%c') {
                    lastC = index;
                }
            });
            args.splice(lastC, 0, c);
        }
        function log() {
            var _console;
            return (typeof console === 'undefined' ? 'undefined' : _typeof(console)) === 'object' && console.log && (_console = console).log.apply(_console, arguments);
        }
        function save(namespaces) {
            try {
                if (namespaces) {
                    exports.storage.setItem('debug', namespaces);
                } else {
                    exports.storage.removeItem('debug');
                }
            } catch (error) {
            }
        }
        function load() {
            var r;
            try {
                r = exports.storage.getItem('debug');
            } catch (error) {
            }
            if (!r && typeof process !== 'undefined' && 'env' in process) {
                r = process.env.DEBUG;
            }
            return r;
        }
        function localstorage() {
            try {
                return localStorage;
            } catch (error) {
            }
        }
        module.exports = require('./common')(exports);
        var formatters = module.exports.formatters;
        formatters.j = function (v) {
            try {
                return JSON.stringify(v);
            } catch (error) {
                return '[UnexpectedJSONParseError]: ' + error.message;
            }
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*feathers-errors@2.9.2#lib/index*/
define('feathers-errors@2.9.2#lib/index', [
    'require',
    'exports',
    'module',
    'debug'
], function (require, exports, module) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
    };
    var debug = require('debug')('feathers-errors');
    function FeathersError(msg, name, code, className, data) {
        msg = msg || 'Error';
        var errors = void 0;
        var message = void 0;
        var newData = void 0;
        if (msg instanceof Error) {
            message = msg.message || 'Error';
            if (msg.errors) {
                errors = msg.errors;
            }
        } else if ((typeof msg === 'undefined' ? 'undefined' : _typeof(msg)) === 'object') {
            message = msg.message || 'Error';
            data = msg;
        } else {
            message = msg;
        }
        if (data) {
            newData = JSON.parse(JSON.stringify(data));
            if (newData.errors) {
                errors = newData.errors;
                delete newData.errors;
            } else if (data.errors) {
                errors = JSON.parse(JSON.stringify(data.errors));
            }
        }
        this.type = 'FeathersError';
        this.name = name;
        this.message = message;
        this.code = code;
        this.className = className;
        this.data = newData;
        this.errors = errors || {};
        debug(this.name + '(' + this.code + '): ' + this.message);
        debug(this.errors);
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, FeathersError);
        } else {
            this.stack = new Error().stack;
        }
    }
    FeathersError.prototype = Object.create(Error.prototype);
    Object.defineProperty(FeathersError.prototype, 'toJSON', {
        value: function value() {
            return {
                name: this.name,
                message: this.message,
                code: this.code,
                className: this.className,
                data: this.data,
                errors: this.errors
            };
        }
    });
    function BadRequest(message, data) {
        FeathersError.call(this, message, 'BadRequest', 400, 'bad-request', data);
    }
    BadRequest.prototype = FeathersError.prototype;
    function NotAuthenticated(message, data) {
        FeathersError.call(this, message, 'NotAuthenticated', 401, 'not-authenticated', data);
    }
    NotAuthenticated.prototype = FeathersError.prototype;
    function PaymentError(message, data) {
        FeathersError.call(this, message, 'PaymentError', 402, 'payment-error', data);
    }
    PaymentError.prototype = FeathersError.prototype;
    function Forbidden(message, data) {
        FeathersError.call(this, message, 'Forbidden', 403, 'forbidden', data);
    }
    Forbidden.prototype = FeathersError.prototype;
    function NotFound(message, data) {
        FeathersError.call(this, message, 'NotFound', 404, 'not-found', data);
    }
    NotFound.prototype = FeathersError.prototype;
    function MethodNotAllowed(message, data) {
        FeathersError.call(this, message, 'MethodNotAllowed', 405, 'method-not-allowed', data);
    }
    MethodNotAllowed.prototype = FeathersError.prototype;
    function NotAcceptable(message, data) {
        FeathersError.call(this, message, 'NotAcceptable', 406, 'not-acceptable', data);
    }
    NotAcceptable.prototype = FeathersError.prototype;
    function Timeout(message, data) {
        FeathersError.call(this, message, 'Timeout', 408, 'timeout', data);
    }
    Timeout.prototype = FeathersError.prototype;
    function Conflict(message, data) {
        FeathersError.call(this, message, 'Conflict', 409, 'conflict', data);
    }
    Conflict.prototype = FeathersError.prototype;
    function LengthRequired(message, data) {
        FeathersError.call(this, message, 'LengthRequired', 411, 'length-required', data);
    }
    LengthRequired.prototype = FeathersError.prototype;
    function Unprocessable(message, data) {
        FeathersError.call(this, message, 'Unprocessable', 422, 'unprocessable', data);
    }
    Unprocessable.prototype = FeathersError.prototype;
    function TooManyRequests(message, data) {
        FeathersError.call(this, message, 'TooManyRequests', 429, 'too-many-requests', data);
    }
    TooManyRequests.prototype = FeathersError.prototype;
    function GeneralError(message, data) {
        FeathersError.call(this, message, 'GeneralError', 500, 'general-error', data);
    }
    GeneralError.prototype = FeathersError.prototype;
    function NotImplemented(message, data) {
        FeathersError.call(this, message, 'NotImplemented', 501, 'not-implemented', data);
    }
    NotImplemented.prototype = FeathersError.prototype;
    function BadGateway(message, data) {
        FeathersError.call(this, message, 'BadGateway', 502, 'bad-gateway', data);
    }
    BadGateway.prototype = FeathersError.prototype;
    function Unavailable(message, data) {
        FeathersError.call(this, message, 'Unavailable', 503, 'unavailable', data);
    }
    Unavailable.prototype = FeathersError.prototype;
    var errors = {
        FeathersError: FeathersError,
        BadRequest: BadRequest,
        NotAuthenticated: NotAuthenticated,
        PaymentError: PaymentError,
        Forbidden: Forbidden,
        NotFound: NotFound,
        MethodNotAllowed: MethodNotAllowed,
        NotAcceptable: NotAcceptable,
        Timeout: Timeout,
        Conflict: Conflict,
        LengthRequired: LengthRequired,
        Unprocessable: Unprocessable,
        TooManyRequests: TooManyRequests,
        GeneralError: GeneralError,
        NotImplemented: NotImplemented,
        BadGateway: BadGateway,
        Unavailable: Unavailable,
        400: BadRequest,
        401: NotAuthenticated,
        402: PaymentError,
        403: Forbidden,
        404: NotFound,
        405: MethodNotAllowed,
        406: NotAcceptable,
        408: Timeout,
        409: Conflict,
        411: LengthRequired,
        422: Unprocessable,
        429: TooManyRequests,
        500: GeneralError,
        501: NotImplemented,
        502: BadGateway,
        503: Unavailable
    };
    function convert(error) {
        if (!error) {
            return error;
        }
        var FeathersError = errors[error.name];
        var result = FeathersError ? new FeathersError(error.message, error.data) : new Error(error.message || error);
        if ((typeof error === 'undefined' ? 'undefined' : _typeof(error)) === 'object') {
            _extends(result, error);
        }
        return result;
    }
    exports.default = _extends({
        convert: convert,
        types: errors,
        errors: errors
    }, errors);
    module.exports = exports['default'];
});
/*events@1.1.1#events*/
define('events@1.1.1#events', function (require, exports, module) {
    function EventEmitter() {
        this._events = this._events || {};
        this._maxListeners = this._maxListeners || undefined;
    }
    module.exports = EventEmitter;
    EventEmitter.EventEmitter = EventEmitter;
    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._maxListeners = undefined;
    EventEmitter.defaultMaxListeners = 10;
    EventEmitter.prototype.setMaxListeners = function (n) {
        if (!isNumber(n) || n < 0 || isNaN(n))
            throw TypeError('n must be a positive number');
        this._maxListeners = n;
        return this;
    };
    EventEmitter.prototype.emit = function (type) {
        var er, handler, len, args, i, listeners;
        if (!this._events)
            this._events = {};
        if (type === 'error') {
            if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
                er = arguments[1];
                if (er instanceof Error) {
                    throw er;
                } else {
                    var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
                    err.context = er;
                    throw err;
                }
            }
        }
        handler = this._events[type];
        if (isUndefined(handler))
            return false;
        if (isFunction(handler)) {
            switch (arguments.length) {
            case 1:
                handler.call(this);
                break;
            case 2:
                handler.call(this, arguments[1]);
                break;
            case 3:
                handler.call(this, arguments[1], arguments[2]);
                break;
            default:
                args = Array.prototype.slice.call(arguments, 1);
                handler.apply(this, args);
            }
        } else if (isObject(handler)) {
            args = Array.prototype.slice.call(arguments, 1);
            listeners = handler.slice();
            len = listeners.length;
            for (i = 0; i < len; i++)
                listeners[i].apply(this, args);
        }
        return true;
    };
    EventEmitter.prototype.addListener = function (type, listener) {
        var m;
        if (!isFunction(listener))
            throw TypeError('listener must be a function');
        if (!this._events)
            this._events = {};
        if (this._events.newListener)
            this.emit('newListener', type, isFunction(listener.listener) ? listener.listener : listener);
        if (!this._events[type])
            this._events[type] = listener;
        else if (isObject(this._events[type]))
            this._events[type].push(listener);
        else
            this._events[type] = [
                this._events[type],
                listener
            ];
        if (isObject(this._events[type]) && !this._events[type].warned) {
            if (!isUndefined(this._maxListeners)) {
                m = this._maxListeners;
            } else {
                m = EventEmitter.defaultMaxListeners;
            }
            if (m && m > 0 && this._events[type].length > m) {
                this._events[type].warned = true;
                console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', this._events[type].length);
                if (typeof console.trace === 'function') {
                    console.trace();
                }
            }
        }
        return this;
    };
    EventEmitter.prototype.on = EventEmitter.prototype.addListener;
    EventEmitter.prototype.once = function (type, listener) {
        if (!isFunction(listener))
            throw TypeError('listener must be a function');
        var fired = false;
        function g() {
            this.removeListener(type, g);
            if (!fired) {
                fired = true;
                listener.apply(this, arguments);
            }
        }
        g.listener = listener;
        this.on(type, g);
        return this;
    };
    EventEmitter.prototype.removeListener = function (type, listener) {
        var list, position, length, i;
        if (!isFunction(listener))
            throw TypeError('listener must be a function');
        if (!this._events || !this._events[type])
            return this;
        list = this._events[type];
        length = list.length;
        position = -1;
        if (list === listener || isFunction(list.listener) && list.listener === listener) {
            delete this._events[type];
            if (this._events.removeListener)
                this.emit('removeListener', type, listener);
        } else if (isObject(list)) {
            for (i = length; i-- > 0;) {
                if (list[i] === listener || list[i].listener && list[i].listener === listener) {
                    position = i;
                    break;
                }
            }
            if (position < 0)
                return this;
            if (list.length === 1) {
                list.length = 0;
                delete this._events[type];
            } else {
                list.splice(position, 1);
            }
            if (this._events.removeListener)
                this.emit('removeListener', type, listener);
        }
        return this;
    };
    EventEmitter.prototype.removeAllListeners = function (type) {
        var key, listeners;
        if (!this._events)
            return this;
        if (!this._events.removeListener) {
            if (arguments.length === 0)
                this._events = {};
            else if (this._events[type])
                delete this._events[type];
            return this;
        }
        if (arguments.length === 0) {
            for (key in this._events) {
                if (key === 'removeListener')
                    continue;
                this.removeAllListeners(key);
            }
            this.removeAllListeners('removeListener');
            this._events = {};
            return this;
        }
        listeners = this._events[type];
        if (isFunction(listeners)) {
            this.removeListener(type, listeners);
        } else if (listeners) {
            while (listeners.length)
                this.removeListener(type, listeners[listeners.length - 1]);
        }
        delete this._events[type];
        return this;
    };
    EventEmitter.prototype.listeners = function (type) {
        var ret;
        if (!this._events || !this._events[type])
            ret = [];
        else if (isFunction(this._events[type]))
            ret = [this._events[type]];
        else
            ret = this._events[type].slice();
        return ret;
    };
    EventEmitter.prototype.listenerCount = function (type) {
        if (this._events) {
            var evlistener = this._events[type];
            if (isFunction(evlistener))
                return 1;
            else if (evlistener)
                return evlistener.length;
        }
        return 0;
    };
    EventEmitter.listenerCount = function (emitter, type) {
        return emitter.listenerCount(type);
    };
    function isFunction(arg) {
        return typeof arg === 'function';
    }
    function isNumber(arg) {
        return typeof arg === 'number';
    }
    function isObject(arg) {
        return typeof arg === 'object' && arg !== null;
    }
    function isUndefined(arg) {
        return arg === void 0;
    }
});
/*feathers-authentication-popups@0.1.2#lib/feathers-authentication-popups*/
define('feathers-authentication-popups@0.1.2#lib/feathers-authentication-popups', [
    'require',
    'exports',
    'module',
    'events'
], function (require, exports, module) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.authAgent = undefined;
    exports.default = openLoginPopup;
    exports.getCenterCoordinates = getCenterCoordinates;
    var _events = require('events');
    var _events2 = _interopRequireDefault(_events);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    window.authAgent = new _events2.default();
    var authAgent = exports.authAgent = window.authAgent;
    function openLoginPopup(url) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var width = options.width || 1024;
        var height = options.height || 640;
        var _getCenterCoordinates = getCenterCoordinates(window, width, height), top = _getCenterCoordinates.top, left = _getCenterCoordinates.left;
        var params = 'width=' + width + ', height=' + height + ', top=' + top + ', left=' + left;
        return window.open(url, 'authWindow', params);
    }
    function getCenterCoordinates(window, width, height) {
        return {
            left: window.screenX + (window.outerWidth - width) / 2,
            top: window.screenY + (window.outerHeight - height) / 2
        };
    }
});
/*jwt-decode@2.2.0#lib/atob*/
define('jwt-decode@2.2.0#lib/atob', function (require, exports, module) {
    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
    function InvalidCharacterError(message) {
        this.message = message;
    }
    InvalidCharacterError.prototype = new Error();
    InvalidCharacterError.prototype.name = 'InvalidCharacterError';
    function polyfill(input) {
        var str = String(input).replace(/=+$/, '');
        if (str.length % 4 == 1) {
            throw new InvalidCharacterError('\'atob\' failed: The string to be decoded is not correctly encoded.');
        }
        for (var bc = 0, bs, buffer, idx = 0, output = ''; buffer = str.charAt(idx++); ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
            buffer = chars.indexOf(buffer);
        }
        return output;
    }
    module.exports = typeof window !== 'undefined' && window.atob && window.atob.bind(window) || polyfill;
});
/*jwt-decode@2.2.0#lib/base64_url_decode*/
define('jwt-decode@2.2.0#lib/base64_url_decode', [
    'require',
    'exports',
    'module',
    './atob'
], function (require, exports, module) {
    var atob = require('./atob');
    function b64DecodeUnicode(str) {
        return decodeURIComponent(atob(str).replace(/(.)/g, function (m, p) {
            var code = p.charCodeAt(0).toString(16).toUpperCase();
            if (code.length < 2) {
                code = '0' + code;
            }
            return '%' + code;
        }));
    }
    module.exports = function (str) {
        var output = str.replace(/-/g, '+').replace(/_/g, '/');
        switch (output.length % 4) {
        case 0:
            break;
        case 2:
            output += '==';
            break;
        case 3:
            output += '=';
            break;
        default:
            throw 'Illegal base64url string!';
        }
        try {
            return b64DecodeUnicode(output);
        } catch (err) {
            return atob(output);
        }
    };
});
/*jwt-decode@2.2.0#lib/index*/
define('jwt-decode@2.2.0#lib/index', [
    'require',
    'exports',
    'module',
    './base64_url_decode'
], function (require, exports, module) {
    'use strict';
    var base64_url_decode = require('./base64_url_decode');
    function InvalidTokenError(message) {
        this.message = message;
    }
    InvalidTokenError.prototype = new Error();
    InvalidTokenError.prototype.name = 'InvalidTokenError';
    module.exports = function (token, options) {
        if (typeof token !== 'string') {
            throw new InvalidTokenError('Invalid token specified');
        }
        options = options || {};
        var pos = options.header === true ? 0 : 1;
        try {
            return JSON.parse(base64_url_decode(token.split('.')[pos]));
        } catch (e) {
            throw new InvalidTokenError('Invalid token specified: ' + e.message);
        }
    };
    module.exports.InvalidTokenError = InvalidTokenError;
});
/*can-connect-feathers@5.0.1#utils/utils*/
define('can-connect-feathers@5.0.1#utils/utils', [
    'require',
    'exports',
    'module',
    'jwt-decode',
    'can-assign'
], function (require, exports, module) {
    'use strict';
    var decode = require('jwt-decode');
    var assign = require('can-assign');
    function readCookie(name) {
        var nameEQ = name + '=';
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) === ' ') {
                c = c.substring(1, c.length);
            }
            if (c.indexOf(nameEQ) === 0) {
                return c.substring(nameEQ.length, c.length);
            }
        }
        return null;
    }
    function getStoredToken(storageLocation) {
        var token = readCookie(storageLocation);
        if (!token && (window && window.localStorage || window.sessionStorage)) {
            token = window.sessionStorage.getItem(storageLocation) || window.localStorage.getItem(storageLocation);
        }
        return token;
    }
    function payloadIsValid(payload) {
        return payload && payload.exp * 1000 > new Date().getTime();
    }
    function hasValidToken(storageLocation) {
        var token = getStoredToken(storageLocation);
        if (token) {
            try {
                var payload = decode(token);
                return payloadIsValid(payload);
            } catch (error) {
                return false;
            }
        }
        return false;
    }
    function convertLocalAuthData(originalData) {
        var data = assign({}, originalData);
        if (data && data.strategy === 'local' && data.user) {
            Object.keys(data.user).forEach(function (key) {
                data[key] = data.user[key];
            });
            delete data.user;
        }
        return data;
    }
    module.exports = {
        readCookie: readCookie,
        getStoredToken: getStoredToken,
        hasValidToken: hasValidToken,
        payloadIsValid: payloadIsValid,
        convertLocalAuthData: convertLocalAuthData
    };
});
/*can-connect-feathers@5.0.1#session/storage*/
define('can-connect-feathers@5.0.1#session/storage', function (require, exports, module) {
    'use strict';
    module.exports = {
        data: {},
        getStore: function () {
            if (window.doneSsr) {
                var CanZone = window.CanZone || undefined;
                return typeof CanZone === 'undefined' ? this.data : CanZone.current.data;
            }
            return this.data;
        },
        setItem: function (prop, value) {
            var store = this.getStore();
            store[prop] = value;
        },
        getItem: function (prop) {
            var store = this.getStore();
            return store[prop];
        },
        removeItem: function (prop) {
            var store = this.getStore();
            delete store[prop];
        }
    };
});
/*can-connect-feathers@5.0.1#session/session*/
define('can-connect-feathers@5.0.1#session/session', [
    'require',
    'exports',
    'module',
    'can-connect',
    'feathers-errors',
    'feathers-authentication-popups',
    'jwt-decode',
    '../utils/utils',
    '../utils/utils',
    '../utils/utils',
    'can-observation-recorder',
    './storage'
], function (require, exports, module) {
    'use strict';
    var connect = require('can-connect');
    var errors = require('feathers-errors');
    var authAgent = require('feathers-authentication-popups').authAgent;
    var decode = require('jwt-decode');
    var payloadIsValid = require('../utils/utils').payloadIsValid;
    var hasValidToken = require('../utils/utils').hasValidToken;
    var convertLocalAuthData = require('../utils/utils').convertLocalAuthData;
    var ObservationRecorder = require('can-observation-recorder');
    var zoneStorage = require('./storage');
    module.exports = connect.behavior('data/feathers-session', function (base) {
        var helpURL = 'https://canjs.com/doc/can-connect-feathers.html';
        var feathersClient = this.feathersClient;
        if (!feathersClient) {
            throw new Error('You must provide a feathersClient instance to the feathers-session behavior. See ' + helpURL);
        }
        if (!this.Map) {
            throw new Error('You must provide a Map instance to the feathers-session behavior. See ' + helpURL);
        }
        if (!feathersClient.passport) {
            throw new Error('You must register the feathers-authentication-client plugin before using the feathers-session behavior. See ' + helpURL);
        }
        var options = feathersClient.passport.options;
        var Session = this.Map;
        Object.defineProperty(Session, 'current', {
            get: function () {
                ObservationRecorder.add(Session, 'current');
                if (zoneStorage.getItem('can-connect-feathers-session') === undefined) {
                    zoneStorage.removeItem('can-connect-feathers-session');
                    Session.get().then(function (session) {
                        zoneStorage.setItem('can-connect-feathers-session', session);
                        Session.dispatch('current', [session]);
                    }).catch(function (error) {
                        zoneStorage.setItem('can-connect-feathers-session', null);
                        Session.dispatch('current', [null]);
                        if (!error.className || error.className.indexOf('not-authenticated') < 0) {
                            return Promise.reject(error);
                        }
                    });
                }
                return zoneStorage.getItem('can-connect-feathers-session');
            }
        });
        Session.on('created', function (ev, session) {
            zoneStorage.setItem('can-connect-feathers-session', session);
            Session.dispatch('current', [session]);
        });
        Session.on('destroyed', function () {
            zoneStorage.removeItem('can-connect-feathers-session');
            Session.dispatch('current', [
                undefined,
                zoneStorage.getItem('can-connect-feathers-session')
            ]);
        });
        return {
            init: function () {
                base.init.apply(this, arguments);
                var connection = this;
                authAgent.on('login', function (token) {
                    try {
                        var payload = decode(token);
                        if (!payloadIsValid(payload)) {
                            throw new Error('invalid token');
                        }
                    } catch (error) {
                        throw new Error('An invalid token was received through the feathers-authentication-popups authAgent');
                    }
                    feathersClient.authenticate({
                        strategy: 'jwt',
                        accessToken: token
                    }).then(function (data) {
                        var payload = decode(data.accessToken);
                        connection.createInstance(payload);
                    });
                });
            },
            createData: function (data) {
                var requestData = convertLocalAuthData(data);
                return feathersClient.authenticate(requestData).then(function (response) {
                    if (response.accessToken) {
                        Object.assign(response, decode(response.accessToken));
                    }
                    return response;
                });
            },
            getData: function () {
                return new Promise(function (resolve, reject) {
                    var tokenLocation = options.tokenKey || options.cookie;
                    if (hasValidToken(tokenLocation) && !window.doneSsr) {
                        feathersClient.authenticate().then(function (data) {
                            var payload = decode(data.accessToken);
                            return resolve(payload);
                        }).catch(reject);
                    } else {
                        reject(new errors.NotAuthenticated('Not Authenticated'));
                    }
                });
            },
            destroyData: function (session) {
                return feathersClient.logout().then(function () {
                    return session;
                });
            }
        };
    });
});
/*can-connect-feathers@5.0.1#can-connect-feathers*/
define('can-connect-feathers@5.0.1#can-connect-feathers', [
    'require',
    'exports',
    'module',
    './service/service',
    './session/session'
], function (require, exports, module) {
    'use strict';
    module.exports = {
        service: require('./service/service'),
        session: require('./session/session')
    };
});
/*can@5.31.0#es/can-connect-feathers*/
define('can@5.31.0#es/can-connect-feathers', [
    'exports',
    'can-connect-feathers'
], function (exports, _canConnectFeathers) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canConnectFeathers).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-connect-tag@1.0.1#can-connect-tag*/
define('can-connect-tag@1.0.1#can-connect-tag', [
    'require',
    'exports',
    'module',
    'can-stache-bindings',
    'can-observation',
    'can-stache/src/expression',
    'can-view-callbacks',
    'can-observation-recorder',
    'can-view-nodelist',
    'can-reflect',
    'can-symbol',
    'can-dom-mutate',
    'can-dom-mutate/node',
    'can-reflect',
    'can-namespace'
], function (require, exports, module) {
    require('can-stache-bindings');
    var Observation = require('can-observation');
    var expression = require('can-stache/src/expression');
    var viewCallbacks = require('can-view-callbacks');
    var ObservationRecorder = require('can-observation-recorder');
    var nodeLists = require('can-view-nodelist');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var domMutate = require('can-dom-mutate');
    var domMutateNode = require('can-dom-mutate/node');
    var each = require('can-reflect').each;
    var namespace = require('can-namespace');
    var convertToValue = function (arg) {
        if (typeof arg === 'function') {
            return convertToValue(arg());
        } else {
            return arg;
        }
    };
    function connectTag(tagName, connection) {
        var removeBrackets = function (value, open, close) {
            open = open || '{';
            close = close || '}';
            if (value[0] === open && value[value.length - 1] === close) {
                return value.substr(1, value.length - 2);
            }
            return value;
        };
        viewCallbacks.tag(tagName, function (el, tagData) {
            var getList = el.getAttribute('getList') || el.getAttribute('get-list');
            var getInstance = el.getAttribute('get');
            var attrValue = getList || getInstance;
            var method = getList ? 'getList' : 'get';
            var attrInfo = expression.parse('tmp(' + removeBrackets(attrValue) + ')', { baseMethodType: 'Call' });
            var addedToPageData = false;
            var addToPageData = ObservationRecorder.ignore(function (set, promise) {
                if (!addedToPageData) {
                    var root = tagData.scope.peek('%root') || tagData.scope.peek('@root');
                    if (root && root.pageData) {
                        if (method === 'get') {
                            set = connection.id(set);
                        }
                        root.pageData(connection.name, set, promise);
                    }
                }
                addedToPageData = true;
            });
            var request = new Observation(function () {
                var hash = {};
                if (typeof attrInfo.hash === 'object') {
                    each(attrInfo.hash, function (val, key) {
                        if (val && val.hasOwnProperty('get')) {
                            hash[key] = tagData.scope.read(val.get, {}).value;
                        } else {
                            hash[key] = val;
                        }
                    });
                } else if (typeof attrInfo.hash === 'function') {
                    var getHash = attrInfo.hash(tagData.scope, tagData.options, {});
                    each(getHash(), function (val, key) {
                        hash[key] = convertToValue(val);
                    });
                } else {
                    hash = attrInfo.argExprs.length ? canReflect.getValue(attrInfo.argExprs[0].value(tagData.scope, tagData.options)) : {};
                }
                var promise = connection[method](hash);
                addToPageData(hash, promise);
                return promise;
            });
            el[canSymbol.for('can.viewModel')] = request;
            var nodeList = nodeLists.register([], undefined, tagData.parentNodeList || true);
            var frag = tagData.subtemplate ? tagData.subtemplate(tagData.scope.add(request), tagData.options, nodeList) : document.createDocumentFragment();
            domMutateNode.appendChild.call(el, frag);
            nodeLists.update(nodeList, el.childNodes);
            var removalDisposal = domMutate.onNodeRemoval(el, function () {
                if (!el.ownerDocument.contains(el)) {
                    removalDisposal();
                    nodeLists.unregister(nodeList);
                }
            });
        });
    }
    module.exports = namespace.connectTag = connectTag;
});
/*can@5.31.0#es/can-connect-tag*/
define('can@5.31.0#es/can-connect-tag', [
    'exports',
    'can-connect-tag'
], function (exports, _canConnectTag) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canConnectTag).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-fixture-socket@2.0.2#src/store*/
define('can-fixture-socket@2.0.2#src/store', [
    'require',
    'exports',
    'module',
    'can-fixture/core'
], function (require, exports, module) {
    'use strict';
    var extractResponse = require('can-fixture/core').extractResponse;
    function requestHandlerToListener(method) {
        return function (query, fn) {
            var req = { data: query };
            var res = function () {
                var response = extractResponse.apply(null, arguments);
                if (response[0] === 200) {
                    fn(null, response[1]);
                } else {
                    fn(response[1]);
                }
            };
            method(req, res);
        };
    }
    function storeToListeners(fixtureStore) {
        var methods = [
            'getListData',
            'getData',
            'updateData',
            'createData',
            'destroyData'
        ];
        return methods.reduce(function (listeners, method) {
            listeners[method] = requestHandlerToListener(fixtureStore[method]);
            return listeners;
        }, {});
    }
    module.exports = {
        requestHandlerToListener: requestHandlerToListener,
        storeToListeners: storeToListeners
    };
});
/*can-fixture-socket@2.0.2#src/feathers-client*/
define('can-fixture-socket@2.0.2#src/feathers-client', [
    'require',
    'exports',
    'module',
    './store',
    'can-assign'
], function (require, exports, module) {
    'use strict';
    var storeToListeners = require('./store').storeToListeners;
    var assign = require('can-assign');
    function subscribeFeathersStoreToServer(serviceName, fixtureStore, mockServer, options) {
        var listeners = storeToListeners(fixtureStore);
        mockServer.on(serviceName + '::find', toFeathersDataHandler(listeners.getListData, null, toFeathersFind));
        mockServer.on(serviceName + '::get', toFeathersDataHandler(listeners.getData, wrapToId(options), null));
        mockServer.on(serviceName + '::remove', toFeathersRemoveHandler(listeners.getData, listeners.destroyData, options));
        mockServer.on(serviceName + '::create', toFeathersCreateHandler(listeners.createData));
        mockServer.on(serviceName + '::update', toFeathersUpdateHandler(listeners.updateData, options));
    }
    function toFeathersDataHandler(method, queryTransformer, dataTransformer) {
        return function (query) {
            var args = Array.prototype.slice.call(arguments), fn;
            if (typeof args[args.length - 1] === 'function') {
                fn = args[args.length - 1];
            }
            query = queryTransformer ? queryTransformer(query) : query;
            method(query, function (err, data) {
                if (err) {
                    fn && fn(err);
                } else {
                    data = dataTransformer ? dataTransformer(data) : data;
                    fn && fn(null, data);
                }
            });
        };
    }
    function wrapToId(options) {
        return function (id) {
            var o = {}, idProp = options && options.id || 'id';
            o[idProp] = id;
            return o;
        };
    }
    function toFeathersFind(data) {
        return {
            total: data.count,
            limit: data.limit,
            skip: data.offset,
            data: data.data
        };
    }
    function toFeathersRemoveHandler(getData, destroyData, options) {
        return function (id, query, fn) {
            var setQuery = wrapToId(options)(id);
            getData(setQuery, function (err, item) {
                if (err) {
                    fn(err);
                } else {
                    destroyData(setQuery, function (err, data) {
                        if (err) {
                            fn(err);
                        } else {
                            fn(null, item);
                        }
                    });
                }
            });
        };
    }
    function toFeathersUpdateHandler(updateData, options) {
        return function (id, data, query, fn) {
            var setQuery = wrapToId(options)(id);
            updateData(assign(setQuery, data), function (err, data2) {
                if (err) {
                    fn(err);
                } else {
                    fn(null, assign(setQuery, assign(data, data2)));
                }
            });
        };
    }
    function toFeathersCreateHandler(createData) {
        return function (data, query, fn) {
            createData(data, function (err, data2) {
                if (err) {
                    fn(err);
                } else {
                    fn(null, assign(data, data2));
                }
            });
        };
    }
    module.exports = { subscribeFeathersStoreToServer: subscribeFeathersStoreToServer };
});
/*can-fixture-socket@2.0.2#src/index*/
define('can-fixture-socket@2.0.2#src/index', [
    'require',
    'exports',
    'module',
    './feathers-client'
], function (require, exports, module) {
    'use strict';
    var subscribeFeathersStoreToServer = require('./feathers-client').subscribeFeathersStoreToServer;
    var MockedServer = function (io) {
        this.io = io;
        this.events = {};
        this.subscribers = {};
        resetManagerCache(io.managers);
        this.origs = mockManager(io.Manager.prototype, this);
    };
    MockedServer.prototype.on = function (event, cb) {
        var self = this;
        var events = {};
        if (typeof event === 'string') {
            events[event] = cb;
        }
        if (typeof event === 'object') {
            events = event;
        }
        Object.keys(events).forEach(function (name) {
            sub(self.events, name, events[name]);
        });
    };
    MockedServer.prototype.emit = function (event) {
        var dataArgs = Array.prototype.slice.call(arguments, 1);
        pub(this.subscribers, event, dataArgs);
    };
    MockedServer.prototype.onFeathersService = function (serviceName, fixtureStore, options) {
        subscribeFeathersStoreToServer(serviceName, fixtureStore, this, options);
    };
    MockedServer.prototype.restore = function () {
        restoreManager(this.io.Manager.prototype, this.origs);
        resetManagerCache(this.io.managers);
    };
    var MockedSocket = function (server) {
        this._server = server;
        this.io = { engine: this };
    };
    MockedSocket.prototype = {
        on: function (event, cb) {
            debug('MockedSocket.on ... ' + event);
            sub(this._server.subscribers, event, cb);
        },
        emit: function (event) {
            var dataArgs = Array.prototype.slice.call(arguments, 1);
            debug('MockedSocket.emit ...' + event);
            pub(this._server.events, event, dataArgs);
        },
        once: function () {
            debug('MockedSocket.once ...');
        },
        off: function (event, cb) {
            debug('MockedSocket.off ... ' + event);
            unsub(this._server.subscribers, event, cb);
        },
        open: function () {
            return this.connect();
        },
        connect: function () {
            this.connected = true;
            this.disconnected = false;
        },
        close: function () {
            return this.disconnect();
        },
        disconnect: function () {
            this.connected = false;
            this.disconnected = true;
        }
    };
    function pub(pubsub, event, dataArgs) {
        debug(' >>> pub ' + event, dataArgs);
        if (dataArgs && typeof dataArgs[0] === 'string' && pubsub[dataArgs[0] + '::' + event]) {
            event = dataArgs.shift() + '::' + event;
        }
        var subscribers = pubsub[event] || [];
        subscribers.forEach(function (subscriber) {
            subscriber.apply(null, dataArgs);
        });
    }
    function sub(pubsub, event, cb) {
        debug(' <<< sub ' + event);
        if (!pubsub[event]) {
            pubsub[event] = [];
        }
        pubsub[event].push(cb);
    }
    function unsub(pubsub, event, cb) {
        debug(' <<< unsub ' + event);
        pubsub[event].forEach(function (registeredCb, index) {
            if (registeredCb === cb) {
                pubsub[event].splice(index, 1);
            }
        });
    }
    function mockManager(managerProto, server) {
        var methods = [
            'open',
            'socket'
        ];
        var origs = methods.map(function (name) {
            return {
                name: name,
                method: managerProto[name]
            };
        });
        managerProto.open = managerProto.connect = function () {
            debug('MockedManager.prototype.open or connect ... arguments:', arguments);
            setTimeout(function () {
                pub(server.subscribers, 'connect');
                pub(server.events, 'connection');
            }, 0);
        };
        managerProto.socket = function () {
            debug('MockedManager.prototype.socket ...');
            var socket = new MockedSocket(server);
            socket.connected = true;
            socket.disconnected = false;
            return socket;
        };
        return origs;
    }
    function restoreManager(managerProto, origs) {
        debug('Restore.');
        origs.forEach(function (orig) {
            managerProto[orig.name] = orig.method;
        });
    }
    function resetManagerCache(cache) {
        for (var i in cache) {
            if (cache.hasOwnProperty(i)) {
                delete cache[i];
            }
        }
    }
    var _DEBUG = false;
    function debug(msg, obj) {
        if (_DEBUG) {
            console.log.apply(console, arguments);
        }
    }
    module.exports = {
        Server: MockedServer,
        mockSocketManager: mockManager,
        restoreManager: restoreManager
    };
});
/*can-fixture-socket@2.0.2#can-fixture-socket*/
define('can-fixture-socket@2.0.2#can-fixture-socket', [
    'require',
    'exports',
    'module',
    './src/index',
    './src/store'
], function (require, exports, module) {
    'use strict';
    var fixtureSocket = require('./src/index');
    var fixtureStore = require('./src/store');
    module.exports = {
        Server: fixtureSocket.Server,
        requestHandlerToListener: fixtureStore.requestHandlerToListener,
        storeToListeners: fixtureStore.storeToListeners
    };
});
/*can@5.31.0#es/can-fixture-socket*/
define('can@5.31.0#es/can-fixture-socket', [
    'exports',
    'can-fixture-socket'
], function (exports, _canFixtureSocket) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canFixtureSocket).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-ndjson-stream@1.0.1#can-ndjson-stream*/
define('can-ndjson-stream@1.0.1#can-ndjson-stream', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var ndjsonStream = function (response) {
        var is_reader, cancellationRequest = false;
        return new ReadableStream({
            start: function (controller) {
                var reader = response.getReader();
                is_reader = reader;
                var decoder = new TextDecoder();
                var data_buf = '';
                reader.read().then(function processResult(result) {
                    if (result.done) {
                        if (cancellationRequest) {
                            return;
                        }
                        data_buf = data_buf.trim();
                        if (data_buf.length !== 0) {
                            try {
                                var data_l = JSON.parse(data_buf);
                                controller.enqueue(data_l);
                            } catch (e) {
                                controller.error(e);
                                return;
                            }
                        }
                        controller.close();
                        return;
                    }
                    var data = decoder.decode(result.value, { stream: true });
                    data_buf += data;
                    var lines = data_buf.split('\n');
                    for (var i = 0; i < lines.length - 1; ++i) {
                        var l = lines[i].trim();
                        if (l.length > 0) {
                            try {
                                var data_line = JSON.parse(l);
                                controller.enqueue(data_line);
                            } catch (e) {
                                controller.error(e);
                                cancellationRequest = true;
                                reader.cancel();
                                return;
                            }
                        }
                    }
                    data_buf = lines[lines.length - 1];
                    return reader.read().then(processResult);
                });
            },
            cancel: function (reason) {
                console.log('Cancel registered due to ', reason);
                cancellationRequest = true;
                is_reader.cancel();
            }
        });
    };
    module.exports = namespace.ndjsonStream = ndjsonStream;
});
/*can@5.31.0#es/can-ndjson-stream*/
define('can@5.31.0#es/can-ndjson-stream', [
    'exports',
    'can-ndjson-stream'
], function (exports, _canNdjsonStream) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canNdjsonStream).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-connect-ndjson@1.0.1#can-connect-ndjson*/
define('can-connect-ndjson@1.0.1#can-connect-ndjson', [
    'require',
    'exports',
    'module',
    'can-connect',
    'can-connect/helpers/sorted-set-json',
    'can-ndjson-stream',
    'can-reflect',
    'can-namespace'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        var connect = require('can-connect');
        var sortedSetJSON = require('can-connect/helpers/sorted-set-json');
        var ndJSONStream = require('can-ndjson-stream');
        var canReflect = require('can-reflect');
        var namespace = require('can-namespace');
        var connectNdjson = connect.behavior('data-ndjson', function (baseConnection) {
            try {
                new ReadableStream();
                if (typeof window.fetch !== 'function') {
                    throw new Error('fetch not supported');
                }
            } catch (err) {
                return {};
            }
            return {
                hydrateList: function (listData, set) {
                    set = set || this.listSet(listData);
                    var id = sortedSetJSON(set);
                    var list = baseConnection.hydrateList.call(this, listData, set);
                    if (this._getHydrateListCallbacks[id]) {
                        this._getHydrateListCallbacks[id].shift()(list);
                        if (!this._getHydrateListCallbacks[id].length) {
                            delete this._getHydrateListCallbacks[id];
                        }
                    }
                    return list;
                },
                _getHydrateListCallbacks: {},
                _getHydrateList: function (set, callback) {
                    var id = sortedSetJSON(set);
                    if (!this._getHydrateListCallbacks[id]) {
                        this._getHydrateListCallbacks[id] = [];
                    }
                    this._getHydrateListCallbacks[id].push(callback);
                },
                getListData: function (set) {
                    var fetchPromise = fetch(this.ndjson || this.url);
                    this._getHydrateList(set, function (list) {
                        function streamerr(e) {
                            canReflect.setKeyValue(list, 'isStreaming', false);
                            canReflect.setKeyValue(list, 'streamError', e);
                        }
                        fetchPromise.then(function (response) {
                            canReflect.setKeyValue(list, 'isStreaming', true);
                            return ndJSONStream(response.body);
                        }).then(function (itemStream) {
                            var reader = itemStream.getReader();
                            reader.read().then(function read(result) {
                                if (result.done) {
                                    canReflect.setKeyValue(list, 'isStreaming', false);
                                    return;
                                }
                                list.push(result.value);
                                reader.read().then(read, streamerr);
                            }, streamerr);
                        });
                    });
                    return fetchPromise.then(function () {
                        return { data: [] };
                    });
                }
            };
        });
        module.exports = namespace.connectNdjson = connectNdjson;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can@5.31.0#es/can-connect-ndjson*/
define('can@5.31.0#es/can-connect-ndjson', [
    'exports',
    'can-connect-ndjson'
], function (exports, _canConnectNdjson) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canConnectNdjson).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-define-connected-singleton@0.2.2#util/zone-storage*/
define('can-define-connected-singleton@0.2.2#util/zone-storage', function (require, exports, module) {
    module.exports = {
        data: {},
        getStore: function () {
            if (window.doneSsr) {
                var CanZone = window.CanZone || undefined;
                return typeof CanZone === 'undefined' ? this.data : CanZone.current.data;
            }
            return this.data;
        },
        setItem: function (prop, value) {
            var store = this.getStore();
            store[prop] = value;
        },
        getItem: function (prop) {
            var store = this.getStore();
            return store[prop];
        },
        removeItem: function (prop) {
            var store = this.getStore();
            delete store[prop];
        }
    };
});
/*can-define-connected-singleton@0.2.2#util/helpers*/
define('can-define-connected-singleton@0.2.2#util/helpers', function (require, exports, module) {
    var assign = function (obj) {
        var to = Object(obj);
        for (var i = 1, l = arguments.length; i < l; i++) {
            var next = arguments[i];
            if (next != null) {
                for (var key in next) {
                    if (Object.prototype.hasOwnProperty.call(next, key)) {
                        to[key] = next[key];
                    }
                }
            }
        }
        return to;
    };
    module.exports = { assign: assign };
});
/*can-define-connected-singleton@0.2.2#can-define-connected-singleton*/
define('can-define-connected-singleton@0.2.2#can-define-connected-singleton', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-define/map/map',
    'can-observation-recorder',
    './util/zone-storage',
    './util/helpers'
], function (require, exports, module) {
    'use strict';
    var reflect = require('can-reflect');
    var DefineMap = require('can-define/map/map');
    var ObservationRecorder = require('can-observation-recorder');
    var zoneStorage = require('./util/zone-storage');
    var helpers = require('./util/helpers');
    var defaults = {
        storagePrefix: 'can-define-connected-singleton',
        currentPropertyName: 'current',
        savingPropertyName: 'saving',
        fetchMethodName: 'get',
        createMethodName: 'save',
        destroyMethodName: 'destroy'
    };
    function isDefineMapConstructor(Obj) {
        return Obj && Obj.prototype instanceof DefineMap;
    }
    function wrapCreateMethod(Ctor, options) {
        var baseCreate = Ctor.prototype[options.createMethodName];
        Ctor.prototype[options.createMethodName] = function wrappedCreate() {
            var ret = baseCreate.apply(this, arguments);
            zoneStorage.setItem(options.storageKeys.savingProperty, this);
            Ctor.dispatch(options.savingPropertyName, [this]);
            zoneStorage.setItem(options.storageKeys.currentPropertyPromise, ret);
            Ctor.dispatch(options.currentPropertyPromiseName, [ret]);
            ret.then(instance => {
                zoneStorage.setItem(options.storageKeys.savingProperty, undefined);
                Ctor.dispatch(options.savingPropertyName, [undefined]);
                zoneStorage.setItem(options.storageKeys.currentProperty, instance);
                Ctor.dispatch(options.currentPropertyName, [instance]);
            }, () => {
                zoneStorage.setItem(options.storageKeys.savingProperty, undefined);
                Ctor.dispatch(options.savingPropertyName, [undefined]);
            });
            return ret;
        };
    }
    function wrapDestroyMethod(Ctor, options) {
        var baseDestroy = Ctor.prototype[options.destroyMethodName];
        Ctor.prototype[options.destroyMethodName] = function wrappedDestroy() {
            var ret = baseDestroy.apply(this, arguments);
            return ret.then(value => {
                zoneStorage.setItem(options.storageKeys.currentProperty, undefined);
                Ctor.dispatch(options.currentPropertyName, [undefined]);
                const storedPromise = zoneStorage.getItem(options.storageKeys.currentPropertyPromise);
                storedPromise.then(() => {
                    var promise = Promise.reject(undefined);
                    zoneStorage.setItem(options.storageKeys.currentPropertyPromise, promise);
                    Ctor.dispatch(options.currentPropertyPromiseName, [promise]);
                }, () => {
                });
                return value;
            });
        };
    }
    function checkForExistingKeys(options) {
        if (zoneStorage.getItem(options.storageKeys.currentProperty) || zoneStorage.getItem(options.storageKeys.currentPropertyPromise) || zoneStorage.getItem(options.storageKeys.savingProperty)) {
            console.warn('can-define-connected-singleton: Removing existing values from zone storage. You are likely configuring a singleton twice.');
            zoneStorage.removeItem(options.storageKeys.currentProperty);
            zoneStorage.removeItem(options.storageKeys.currentPropertyPromise);
            zoneStorage.removeItem(options.storageKeys.savingProperty);
        }
    }
    function getCurrentAndPromise(Ctor, options) {
        var current = zoneStorage.getItem(options.storageKeys.currentProperty);
        var promise = zoneStorage.getItem(options.storageKeys.currentPropertyPromise);
        if (promise == null) {
            promise = Ctor[options.fetchMethodName]();
            zoneStorage.setItem(options.storageKeys.currentPropertyPromise, promise);
            Ctor.dispatch(options.currentPropertyPromiseName, [promise]);
            promise.then(function (value) {
                zoneStorage.setItem(options.storageKeys.currentProperty, value);
                Ctor.dispatch(options.currentPropertyName, [value]);
            }).catch(function () {
                zoneStorage.setItem(options.storageKeys.currentProperty, null);
                Ctor.dispatch(options.currentPropertyName, [null]);
            });
        }
        return {
            current: current,
            promise: promise
        };
    }
    function makeSingleton(Ctor, input_options) {
        var helpURL = 'https://canjs.com/doc/can-define-connected-singleton';
        if (!isDefineMapConstructor(Ctor)) {
            throw new Error('The singleton decorator/mixin can only be used for DefineMaps: ' + helpURL);
        }
        var savingPropertyName = input_options.savingPropertyName;
        var currentPropertyName = input_options.currentPropertyName;
        var currentPropertyPromiseName = currentPropertyName + 'Promise';
        var currentPropertyKey = input_options.storagePrefix + '-' + Ctor.name + '-' + currentPropertyName;
        var storageKeys = {
            savingProperty: input_options.storagePrefix + '-' + Ctor.name + '-' + savingPropertyName,
            currentProperty: currentPropertyKey,
            currentPropertyPromise: currentPropertyKey + '-promise'
        };
        var options = Object.assign({}, input_options, {
            currentPropertyPromiseName,
            storageKeys
        });
        checkForExistingKeys(options);
        Object.defineProperty(Ctor, options.currentPropertyPromiseName, {
            get: function () {
                ObservationRecorder.add(Ctor, options.currentPropertyPromiseName);
                return getCurrentAndPromise(Ctor, options).promise;
            }
        });
        Object.defineProperty(Ctor, options.currentPropertyName, {
            get: function () {
                ObservationRecorder.add(Ctor, options.currentPropertyName);
                return getCurrentAndPromise(Ctor, options).current;
            },
            set: function (instance) {
                if (!(instance instanceof Ctor) && instance !== undefined) {
                    throw new TypeError('Attempted to set singleton to an unexpected type. Expected an instance of the constructor "' + reflect.getName(Ctor) + '"');
                }
                let promise = instance ? Promise.resolve(instance) : Promise.reject(undefined);
                zoneStorage.setItem(options.storageKeys.currentProperty, instance);
                Ctor.dispatch(options.currentPropertyName, [instance]);
                zoneStorage.setItem(options.storageKeys.currentPropertyPromise, promise);
                Ctor.dispatch(options.currentPropertyPromiseName, [promise]);
            }
        });
        Object.defineProperty(Ctor, options.savingPropertyName, {
            get: function () {
                ObservationRecorder.add(Ctor, options.savingPropertyName);
                return zoneStorage.getItem(options.storageKeys.savingProperty);
            }
        });
        wrapCreateMethod(Ctor, options);
        wrapDestroyMethod(Ctor, options);
        return Ctor;
    }
    function singleton(Obj) {
        var opts = helpers.assign({}, defaults);
        if (isDefineMapConstructor(Obj)) {
            return makeSingleton(Obj, opts);
        }
        return function (Ctor) {
            return makeSingleton(Ctor, helpers.assign(opts, Obj));
        };
    }
    module.exports = singleton;
});
/*can-connect@3.2.1#can/session/session*/
define('can-connect@3.2.1#can/session/session', [
    'require',
    'exports',
    'module',
    'can-reflect',
    '../../connect',
    'can-define-connected-singleton'
], function (require, exports, module) {
    'use strict';
    var reflect = require('can-reflect');
    var connect = require('../../connect');
    var singleton = require('can-define-connected-singleton');
    module.exports = connect.behavior('can/session', function (higherBehaviors) {
        return {
            id: function (instance) {
                if (instance.isDestroying()) {
                    return reflect.getName(this.Map) + '-singleton';
                } else {
                    return undefined;
                }
            },
            init: function () {
                higherBehaviors.init.apply(this, arguments);
                singleton(this.Map);
            },
            createdInstance: function (instance) {
                higherBehaviors.createdInstance.apply(this, arguments);
                this.Map.current = instance;
            },
            destroyedInstance: function () {
                higherBehaviors.destroyedInstance.apply(this, arguments);
                this.Map.current = undefined;
            }
        };
    });
});
/*can@5.31.0#es/can-connect-session*/
define('can@5.31.0#es/can-connect-session', [
    'exports',
    'can-connect/can/session/session'
], function (exports, _session) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_session).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-construct-super@3.2.1#can-construct-super*/
define('can-construct-super@3.2.1#can-construct-super', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-construct'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var canReflect = require('can-reflect');
        var Construct = require('can-construct');
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var isFunction = function (val) {
                return typeof val === 'function';
            }, fnTest = /xyz/.test(function () {
                return this.xyz;
            }) ? /\b_super\b/ : /.*/, getset = [
                'get',
                'set'
            ], getSuper = function (base, name, fn) {
                return function () {
                    var hasExistingValue = false;
                    var existingValue;
                    var prototype = getPrototypeOf(this);
                    var existingPrototypeValue = prototype._super;
                    if (hasOwnProperty.call(this, '_super')) {
                        hasExistingValue = true;
                        existingValue = this._super;
                        delete this._super;
                    }
                    prototype._super = base[name];
                    var ret = fn.apply(this, arguments);
                    prototype._super = existingPrototypeValue;
                    if (hasExistingValue) {
                        this._super = existingValue;
                    }
                    return ret;
                };
            };
        Construct._defineProperty = function (addTo, base, name, descriptor) {
            var _super = Object.getOwnPropertyDescriptor(base, name);
            if (_super) {
                canReflect.each(getset, function (method) {
                    if (isFunction(_super[method]) && isFunction(descriptor[method])) {
                        descriptor[method] = getSuper(_super, method, descriptor[method]);
                    } else if (!isFunction(descriptor[method])) {
                        descriptor[method] = _super[method];
                    }
                });
            }
            Object.defineProperty(addTo, name, descriptor);
        };
        var getPrototypeOf = Object.getPrototypeOf || function (obj) {
            return obj.__proto__;
        };
        var getPropertyDescriptor = Object.getPropertyDescriptor || function (subject, name) {
            if (name in subject) {
                var pd = Object.getOwnPropertyDescriptor(subject, name);
                var proto = getPrototypeOf(subject);
                while (pd === undefined && proto !== null) {
                    pd = Object.getOwnPropertyDescriptor(proto, name);
                    proto = getPrototypeOf(proto);
                }
                return pd;
            }
        };
        Construct._overwrite = function (addTo, base, name, val) {
            var baseDescriptor = getPropertyDescriptor(base, name);
            var baseValue = baseDescriptor && baseDescriptor.value;
            Object.defineProperty(addTo, name, {
                value: isFunction(val) && isFunction(baseValue) && fnTest.test(val) ? getSuper(base, name, val) : val,
                configurable: true,
                enumerable: true,
                writable: true
            });
        };
        module.exports = Construct;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can@5.31.0#es/can-construct-super*/
define('can@5.31.0#es/can-construct-super', [
    'exports',
    'can-construct-super'
], function (exports, _canConstructSuper) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canConstructSuper).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-route-mock@1.0.2#can-route-mock*/
define('can-route-mock@1.0.2#can-route-mock', [
    'require',
    'exports',
    'module',
    'can-simple-observable',
    'can-reflect'
], function (require, exports, module) {
    var SimpleObservable = require('can-simple-observable');
    var canReflect = require('can-reflect');
    function MockRoute() {
        this.routeValue = new SimpleObservable('');
    }
    canReflect.assignMap(MockRoute.prototype, {
        paramsMatcher: /^(?:&[^=]+=[^&]*)+/,
        querySeparator: '&',
        matchSlashes: false,
        root: '#!',
        get: function () {
            return this.value;
        },
        set: function (newVal) {
            return this.value = newVal;
        },
        on: function (handler) {
            canReflect.onValue(this, handler);
        },
        off: function (handler) {
            canReflect.offValue(this, handler);
        }
    });
    Object.defineProperty(MockRoute.prototype, 'value', {
        get: function () {
            return this.routeValue.get().split(/#!?/)[1] || '';
        },
        set: function (path) {
            if (path[0] !== '#') {
                this.routeValue.set('#' + (path || ''));
            } else {
                this.routeValue.set(path || '');
            }
            return path;
        }
    });
    canReflect.assignSymbols(MockRoute.prototype, {
        'can.onValue': function (handler) {
            this.routeValue.on(handler);
        },
        'can.offValue': function (handler) {
            this.routeValue.off(handler);
        },
        'can.getValue': function () {
            return this.value;
        },
        'can.setValue': function (path) {
            this.value = path;
        }
    });
    module.exports = MockRoute;
});
/*can@5.31.0#es/can-route-mock*/
define('can@5.31.0#es/can-route-mock', [
    'exports',
    'can-route-mock'
], function (exports, _canRouteMock) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canRouteMock).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*validate.js@0.11.1#validate*/
(function (exports, module, define) {
    'use strict';
    var validate = function (attributes, constraints, options) {
        options = v.extend({}, v.options, options);
        var results = v.runValidations(attributes, constraints, options), attr, validator;
        for (attr in results) {
            for (validator in results[attr]) {
                if (v.isPromise(results[attr][validator])) {
                    throw new Error('Use validate.async if you want support for promises');
                }
            }
        }
        return validate.processValidationResults(results, options);
    };
    var v = validate;
    v.extend = function (obj) {
        [].slice.call(arguments, 1).forEach(function (source) {
            for (var attr in source) {
                obj[attr] = source[attr];
            }
        });
        return obj;
    };
    v.extend(validate, {
        version: {
            major: 0,
            minor: 11,
            patch: 1,
            metadata: null,
            toString: function () {
                var version = v.format('%{major}.%{minor}.%{patch}', v.version);
                if (!v.isEmpty(v.version.metadata)) {
                    version += '+' + v.version.metadata;
                }
                return version;
            }
        },
        Promise: typeof Promise !== 'undefined' ? Promise : null,
        EMPTY_STRING_REGEXP: /^\s*$/,
        runValidations: function (attributes, constraints, options) {
            var results = [], attr, validatorName, value, validators, validator, validatorOptions, error;
            if (v.isDomElement(attributes) || v.isJqueryElement(attributes)) {
                attributes = v.collectFormValues(attributes);
            }
            for (attr in constraints) {
                value = v.getDeepObjectValue(attributes, attr);
                validators = v.result(constraints[attr], value, attributes, attr, options, constraints);
                for (validatorName in validators) {
                    validator = v.validators[validatorName];
                    if (!validator) {
                        error = v.format('Unknown validator %{name}', { name: validatorName });
                        throw new Error(error);
                    }
                    validatorOptions = validators[validatorName];
                    validatorOptions = v.result(validatorOptions, value, attributes, attr, options, constraints);
                    if (!validatorOptions) {
                        continue;
                    }
                    results.push({
                        attribute: attr,
                        value: value,
                        validator: validatorName,
                        globalOptions: options,
                        attributes: attributes,
                        options: validatorOptions,
                        error: validator.call(validator, value, validatorOptions, attr, attributes, options)
                    });
                }
            }
            return results;
        },
        processValidationResults: function (errors, options) {
            errors = v.pruneEmptyErrors(errors, options);
            errors = v.expandMultipleErrors(errors, options);
            errors = v.convertErrorMessages(errors, options);
            var format = options.format || 'grouped';
            if (typeof v.formatters[format] === 'function') {
                errors = v.formatters[format](errors);
            } else {
                throw new Error(v.format('Unknown format %{format}', options));
            }
            return v.isEmpty(errors) ? undefined : errors;
        },
        async: function (attributes, constraints, options) {
            options = v.extend({}, v.async.options, options);
            var WrapErrors = options.wrapErrors || function (errors) {
                return errors;
            };
            if (options.cleanAttributes !== false) {
                attributes = v.cleanAttributes(attributes, constraints);
            }
            var results = v.runValidations(attributes, constraints, options);
            return new v.Promise(function (resolve, reject) {
                v.waitForResults(results).then(function () {
                    var errors = v.processValidationResults(results, options);
                    if (errors) {
                        reject(new WrapErrors(errors, options, attributes, constraints));
                    } else {
                        resolve(attributes);
                    }
                }, function (err) {
                    reject(err);
                });
            });
        },
        single: function (value, constraints, options) {
            options = v.extend({}, v.single.options, options, {
                format: 'flat',
                fullMessages: false
            });
            return v({ single: value }, { single: constraints }, options);
        },
        waitForResults: function (results) {
            return results.reduce(function (memo, result) {
                if (!v.isPromise(result.error)) {
                    return memo;
                }
                return memo.then(function () {
                    return result.error.then(function (error) {
                        result.error = error || null;
                    });
                });
            }, new v.Promise(function (r) {
                r();
            }));
        },
        result: function (value) {
            var args = [].slice.call(arguments, 1);
            if (typeof value === 'function') {
                value = value.apply(null, args);
            }
            return value;
        },
        isNumber: function (value) {
            return typeof value === 'number' && !isNaN(value);
        },
        isFunction: function (value) {
            return typeof value === 'function';
        },
        isInteger: function (value) {
            return v.isNumber(value) && value % 1 === 0;
        },
        isBoolean: function (value) {
            return typeof value === 'boolean';
        },
        isObject: function (obj) {
            return obj === Object(obj);
        },
        isDate: function (obj) {
            return obj instanceof Date;
        },
        isDefined: function (obj) {
            return obj !== null && obj !== undefined;
        },
        isPromise: function (p) {
            return !!p && v.isFunction(p.then);
        },
        isJqueryElement: function (o) {
            return o && v.isString(o.jquery);
        },
        isDomElement: function (o) {
            if (!o) {
                return false;
            }
            if (!o.querySelectorAll || !o.querySelector) {
                return false;
            }
            if (v.isObject(document) && o === document) {
                return true;
            }
            if (typeof HTMLElement === 'object') {
                return o instanceof HTMLElement;
            } else {
                return o && typeof o === 'object' && o !== null && o.nodeType === 1 && typeof o.nodeName === 'string';
            }
        },
        isEmpty: function (value) {
            var attr;
            if (!v.isDefined(value)) {
                return true;
            }
            if (v.isFunction(value)) {
                return false;
            }
            if (v.isString(value)) {
                return v.EMPTY_STRING_REGEXP.test(value);
            }
            if (v.isArray(value)) {
                return value.length === 0;
            }
            if (v.isDate(value)) {
                return false;
            }
            if (v.isObject(value)) {
                for (attr in value) {
                    return false;
                }
                return true;
            }
            return false;
        },
        format: v.extend(function (str, vals) {
            if (!v.isString(str)) {
                return str;
            }
            return str.replace(v.format.FORMAT_REGEXP, function (m0, m1, m2) {
                if (m1 === '%') {
                    return '%{' + m2 + '}';
                } else {
                    return String(vals[m2]);
                }
            });
        }, { FORMAT_REGEXP: /(%?)%\{([^\}]+)\}/g }),
        prettify: function (str) {
            if (v.isNumber(str)) {
                if (str * 100 % 1 === 0) {
                    return '' + str;
                } else {
                    return parseFloat(Math.round(str * 100) / 100).toFixed(2);
                }
            }
            if (v.isArray(str)) {
                return str.map(function (s) {
                    return v.prettify(s);
                }).join(', ');
            }
            if (v.isObject(str)) {
                return str.toString();
            }
            str = '' + str;
            return str.replace(/([^\s])\.([^\s])/g, '$1 $2').replace(/\\+/g, '').replace(/[_-]/g, ' ').replace(/([a-z])([A-Z])/g, function (m0, m1, m2) {
                return '' + m1 + ' ' + m2.toLowerCase();
            }).toLowerCase();
        },
        stringifyValue: function (value) {
            return v.prettify(value);
        },
        isString: function (value) {
            return typeof value === 'string';
        },
        isArray: function (value) {
            return {}.toString.call(value) === '[object Array]';
        },
        isHash: function (value) {
            return v.isObject(value) && !v.isArray(value) && !v.isFunction(value);
        },
        contains: function (obj, value) {
            if (!v.isDefined(obj)) {
                return false;
            }
            if (v.isArray(obj)) {
                return obj.indexOf(value) !== -1;
            }
            return value in obj;
        },
        unique: function (array) {
            if (!v.isArray(array)) {
                return array;
            }
            return array.filter(function (el, index, array) {
                return array.indexOf(el) == index;
            });
        },
        forEachKeyInKeypath: function (object, keypath, callback) {
            if (!v.isString(keypath)) {
                return undefined;
            }
            var key = '', i, escape = false;
            for (i = 0; i < keypath.length; ++i) {
                switch (keypath[i]) {
                case '.':
                    if (escape) {
                        escape = false;
                        key += '.';
                    } else {
                        object = callback(object, key, false);
                        key = '';
                    }
                    break;
                case '\\':
                    if (escape) {
                        escape = false;
                        key += '\\';
                    } else {
                        escape = true;
                    }
                    break;
                default:
                    escape = false;
                    key += keypath[i];
                    break;
                }
            }
            return callback(object, key, true);
        },
        getDeepObjectValue: function (obj, keypath) {
            if (!v.isObject(obj)) {
                return undefined;
            }
            return v.forEachKeyInKeypath(obj, keypath, function (obj, key) {
                if (v.isObject(obj)) {
                    return obj[key];
                }
            });
        },
        collectFormValues: function (form, options) {
            var values = {}, i, j, input, inputs, option, value;
            if (v.isJqueryElement(form)) {
                form = form[0];
            }
            if (!form) {
                return values;
            }
            options = options || {};
            inputs = form.querySelectorAll('input[name], textarea[name]');
            for (i = 0; i < inputs.length; ++i) {
                input = inputs.item(i);
                if (v.isDefined(input.getAttribute('data-ignored'))) {
                    continue;
                }
                value = v.sanitizeFormValue(input.value, options);
                if (input.type === 'number') {
                    value = value ? +value : null;
                } else if (input.type === 'checkbox') {
                    if (input.attributes.value) {
                        if (!input.checked) {
                            value = values[input.name] || null;
                        }
                    } else {
                        value = input.checked;
                    }
                } else if (input.type === 'radio') {
                    if (!input.checked) {
                        value = values[input.name] || null;
                    }
                }
                values[input.name] = value;
            }
            inputs = form.querySelectorAll('select[name]');
            for (i = 0; i < inputs.length; ++i) {
                input = inputs.item(i);
                if (input.multiple) {
                    value = [];
                    for (j in input.options) {
                        option = input.options[j];
                        if (option.selected) {
                            value.push(v.sanitizeFormValue(option.value, options));
                        }
                    }
                } else {
                    value = v.sanitizeFormValue(input.options[input.selectedIndex].value, options);
                }
                values[input.name] = value;
            }
            return values;
        },
        sanitizeFormValue: function (value, options) {
            if (options.trim && v.isString(value)) {
                value = value.trim();
            }
            if (options.nullify !== false && value === '') {
                return null;
            }
            return value;
        },
        capitalize: function (str) {
            if (!v.isString(str)) {
                return str;
            }
            return str[0].toUpperCase() + str.slice(1);
        },
        pruneEmptyErrors: function (errors) {
            return errors.filter(function (error) {
                return !v.isEmpty(error.error);
            });
        },
        expandMultipleErrors: function (errors) {
            var ret = [];
            errors.forEach(function (error) {
                if (v.isArray(error.error)) {
                    error.error.forEach(function (msg) {
                        ret.push(v.extend({}, error, { error: msg }));
                    });
                } else {
                    ret.push(error);
                }
            });
            return ret;
        },
        convertErrorMessages: function (errors, options) {
            options = options || {};
            var ret = [];
            errors.forEach(function (errorInfo) {
                var error = v.result(errorInfo.error, errorInfo.value, errorInfo.attribute, errorInfo.options, errorInfo.attributes, errorInfo.globalOptions);
                if (!v.isString(error)) {
                    ret.push(errorInfo);
                    return;
                }
                if (error[0] === '^') {
                    error = error.slice(1);
                } else if (options.fullMessages !== false) {
                    error = v.capitalize(v.prettify(errorInfo.attribute)) + ' ' + error;
                }
                error = error.replace(/\\\^/g, '^');
                error = v.format(error, { value: v.stringifyValue(errorInfo.value) });
                ret.push(v.extend({}, errorInfo, { error: error }));
            });
            return ret;
        },
        groupErrorsByAttribute: function (errors) {
            var ret = {};
            errors.forEach(function (error) {
                var list = ret[error.attribute];
                if (list) {
                    list.push(error);
                } else {
                    ret[error.attribute] = [error];
                }
            });
            return ret;
        },
        flattenErrorsToArray: function (errors) {
            return errors.map(function (error) {
                return error.error;
            }).filter(function (value, index, self) {
                return self.indexOf(value) === index;
            });
        },
        cleanAttributes: function (attributes, whitelist) {
            function whitelistCreator(obj, key, last) {
                if (v.isObject(obj[key])) {
                    return obj[key];
                }
                return obj[key] = last ? true : {};
            }
            function buildObjectWhitelist(whitelist) {
                var ow = {}, lastObject, attr;
                for (attr in whitelist) {
                    if (!whitelist[attr]) {
                        continue;
                    }
                    v.forEachKeyInKeypath(ow, attr, whitelistCreator);
                }
                return ow;
            }
            function cleanRecursive(attributes, whitelist) {
                if (!v.isObject(attributes)) {
                    return attributes;
                }
                var ret = v.extend({}, attributes), w, attribute;
                for (attribute in attributes) {
                    w = whitelist[attribute];
                    if (v.isObject(w)) {
                        ret[attribute] = cleanRecursive(ret[attribute], w);
                    } else if (!w) {
                        delete ret[attribute];
                    }
                }
                return ret;
            }
            if (!v.isObject(whitelist) || !v.isObject(attributes)) {
                return {};
            }
            whitelist = buildObjectWhitelist(whitelist);
            return cleanRecursive(attributes, whitelist);
        },
        exposeModule: function (validate, root, exports, module, define) {
            if (exports) {
                if (module && module.exports) {
                    exports = module.exports = validate;
                }
                exports.validate = validate;
            } else {
                root.validate = validate;
                if (validate.isFunction(define) && define.amd) {
                    define('validate.js@0.11.1#validate', [], function () {
                        return validate;
                    });
                }
            }
        },
        warn: function (msg) {
            if (typeof console !== 'undefined' && console.warn) {
                console.warn('[validate.js] ' + msg);
            }
        },
        error: function (msg) {
            if (typeof console !== 'undefined' && console.error) {
                console.error('[validate.js] ' + msg);
            }
        }
    });
    validate.validators = {
        presence: function (value, options) {
            options = v.extend({}, this.options, options);
            if (options.allowEmpty ? !v.isDefined(value) : v.isEmpty(value)) {
                return options.message || this.message || 'can\'t be blank';
            }
        },
        length: function (value, options, attribute) {
            if (!v.isDefined(value)) {
                return;
            }
            options = v.extend({}, this.options, options);
            var is = options.is, maximum = options.maximum, minimum = options.minimum, tokenizer = options.tokenizer || function (val) {
                    return val;
                }, err, errors = [];
            value = tokenizer(value);
            var length = value.length;
            if (!v.isNumber(length)) {
                v.error(v.format('Attribute %{attr} has a non numeric value for `length`', { attr: attribute }));
                return options.message || this.notValid || 'has an incorrect length';
            }
            if (v.isNumber(is) && length !== is) {
                err = options.wrongLength || this.wrongLength || 'is the wrong length (should be %{count} characters)';
                errors.push(v.format(err, { count: is }));
            }
            if (v.isNumber(minimum) && length < minimum) {
                err = options.tooShort || this.tooShort || 'is too short (minimum is %{count} characters)';
                errors.push(v.format(err, { count: minimum }));
            }
            if (v.isNumber(maximum) && length > maximum) {
                err = options.tooLong || this.tooLong || 'is too long (maximum is %{count} characters)';
                errors.push(v.format(err, { count: maximum }));
            }
            if (errors.length > 0) {
                return options.message || errors;
            }
        },
        numericality: function (value, options) {
            if (!v.isDefined(value)) {
                return;
            }
            options = v.extend({}, this.options, options);
            var errors = [], name, count, checks = {
                    greaterThan: function (v, c) {
                        return v > c;
                    },
                    greaterThanOrEqualTo: function (v, c) {
                        return v >= c;
                    },
                    equalTo: function (v, c) {
                        return v === c;
                    },
                    lessThan: function (v, c) {
                        return v < c;
                    },
                    lessThanOrEqualTo: function (v, c) {
                        return v <= c;
                    },
                    divisibleBy: function (v, c) {
                        return v % c === 0;
                    }
                };
            if (v.isString(value) && options.strict) {
                var pattern = '^(0|[1-9]\\d*)';
                if (!options.onlyInteger) {
                    pattern += '(\\.\\d+)?';
                }
                pattern += '$';
                if (!new RegExp(pattern).test(value)) {
                    return options.message || options.notValid || this.notValid || this.message || 'must be a valid number';
                }
            }
            if (options.noStrings !== true && v.isString(value) && !v.isEmpty(value)) {
                value = +value;
            }
            if (!v.isNumber(value)) {
                return options.message || options.notValid || this.notValid || this.message || 'is not a number';
            }
            if (options.onlyInteger && !v.isInteger(value)) {
                return options.message || options.notInteger || this.notInteger || this.message || 'must be an integer';
            }
            for (name in checks) {
                count = options[name];
                if (v.isNumber(count) && !checks[name](value, count)) {
                    var key = 'not' + v.capitalize(name);
                    var msg = options[key] || this[key] || this.message || 'must be %{type} %{count}';
                    errors.push(v.format(msg, {
                        count: count,
                        type: v.prettify(name)
                    }));
                }
            }
            if (options.odd && value % 2 !== 1) {
                errors.push(options.notOdd || this.notOdd || this.message || 'must be odd');
            }
            if (options.even && value % 2 !== 0) {
                errors.push(options.notEven || this.notEven || this.message || 'must be even');
            }
            if (errors.length) {
                return options.message || errors;
            }
        },
        datetime: v.extend(function (value, options) {
            if (!v.isFunction(this.parse) || !v.isFunction(this.format)) {
                throw new Error('Both the parse and format functions needs to be set to use the datetime/date validator');
            }
            if (!v.isDefined(value)) {
                return;
            }
            options = v.extend({}, this.options, options);
            var err, errors = [], earliest = options.earliest ? this.parse(options.earliest, options) : NaN, latest = options.latest ? this.parse(options.latest, options) : NaN;
            value = this.parse(value, options);
            if (isNaN(value) || options.dateOnly && value % 86400000 !== 0) {
                err = options.notValid || options.message || this.notValid || 'must be a valid date';
                return v.format(err, { value: arguments[0] });
            }
            if (!isNaN(earliest) && value < earliest) {
                err = options.tooEarly || options.message || this.tooEarly || 'must be no earlier than %{date}';
                err = v.format(err, {
                    value: this.format(value, options),
                    date: this.format(earliest, options)
                });
                errors.push(err);
            }
            if (!isNaN(latest) && value > latest) {
                err = options.tooLate || options.message || this.tooLate || 'must be no later than %{date}';
                err = v.format(err, {
                    date: this.format(latest, options),
                    value: this.format(value, options)
                });
                errors.push(err);
            }
            if (errors.length) {
                return v.unique(errors);
            }
        }, {
            parse: null,
            format: null
        }),
        date: function (value, options) {
            options = v.extend({}, options, { dateOnly: true });
            return v.validators.datetime.call(v.validators.datetime, value, options);
        },
        format: function (value, options) {
            if (v.isString(options) || options instanceof RegExp) {
                options = { pattern: options };
            }
            options = v.extend({}, this.options, options);
            var message = options.message || this.message || 'is invalid', pattern = options.pattern, match;
            if (!v.isDefined(value)) {
                return;
            }
            if (!v.isString(value)) {
                return message;
            }
            if (v.isString(pattern)) {
                pattern = new RegExp(options.pattern, options.flags);
            }
            match = pattern.exec(value);
            if (!match || match[0].length != value.length) {
                return message;
            }
        },
        inclusion: function (value, options) {
            if (!v.isDefined(value)) {
                return;
            }
            if (v.isArray(options)) {
                options = { within: options };
            }
            options = v.extend({}, this.options, options);
            if (v.contains(options.within, value)) {
                return;
            }
            var message = options.message || this.message || '^%{value} is not included in the list';
            return v.format(message, { value: value });
        },
        exclusion: function (value, options) {
            if (!v.isDefined(value)) {
                return;
            }
            if (v.isArray(options)) {
                options = { within: options };
            }
            options = v.extend({}, this.options, options);
            if (!v.contains(options.within, value)) {
                return;
            }
            var message = options.message || this.message || '^%{value} is restricted';
            return v.format(message, { value: value });
        },
        email: v.extend(function (value, options) {
            options = v.extend({}, this.options, options);
            var message = options.message || this.message || 'is not a valid email';
            if (!v.isDefined(value)) {
                return;
            }
            if (!v.isString(value)) {
                return message;
            }
            if (!this.PATTERN.exec(value)) {
                return message;
            }
        }, { PATTERN: /^[a-z0-9\u007F-\uffff!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9\u007F-\uffff!#$%&'*+\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z]{2,}$/i }),
        equality: function (value, options, attribute, attributes) {
            if (!v.isDefined(value)) {
                return;
            }
            if (v.isString(options)) {
                options = { attribute: options };
            }
            options = v.extend({}, this.options, options);
            var message = options.message || this.message || 'is not equal to %{attribute}';
            if (v.isEmpty(options.attribute) || !v.isString(options.attribute)) {
                throw new Error('The attribute must be a non empty string');
            }
            var otherValue = v.getDeepObjectValue(attributes, options.attribute), comparator = options.comparator || function (v1, v2) {
                    return v1 === v2;
                };
            if (!comparator(value, otherValue, options, attribute, attributes)) {
                return v.format(message, { attribute: v.prettify(options.attribute) });
            }
        },
        url: function (value, options) {
            if (!v.isDefined(value)) {
                return;
            }
            options = v.extend({}, this.options, options);
            var message = options.message || this.message || 'is not a valid url', schemes = options.schemes || this.schemes || [
                    'http',
                    'https'
                ], allowLocal = options.allowLocal || this.allowLocal || false;
            if (!v.isString(value)) {
                return message;
            }
            var regex = '^' + '(?:(?:' + schemes.join('|') + ')://)' + '(?:\\S+(?::\\S*)?@)?' + '(?:';
            var tld = '(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))';
            if (allowLocal) {
                tld += '?';
            } else {
                regex += '(?!(?:10|127)(?:\\.\\d{1,3}){3})' + '(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})' + '(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})';
            }
            regex += '(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])' + '(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}' + '(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))' + '|' + '(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)' + '(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*' + tld + ')' + '(?::\\d{2,5})?' + '(?:[/?#]\\S*)?' + '$';
            var PATTERN = new RegExp(regex, 'i');
            if (!PATTERN.exec(value)) {
                return message;
            }
        }
    };
    validate.formatters = {
        detailed: function (errors) {
            return errors;
        },
        flat: v.flattenErrorsToArray,
        grouped: function (errors) {
            var attr;
            errors = v.groupErrorsByAttribute(errors);
            for (attr in errors) {
                errors[attr] = v.flattenErrorsToArray(errors[attr]);
            }
            return errors;
        },
        constraint: function (errors) {
            var attr;
            errors = v.groupErrorsByAttribute(errors);
            for (attr in errors) {
                errors[attr] = errors[attr].map(function (result) {
                    return result.validator;
                }).sort();
            }
            return errors;
        }
    };
    validate.exposeModule(validate, this, exports, module, define);
}.call(this, typeof exports !== 'undefined' ? exports : null, typeof module !== 'undefined' ? module : null, typeof define !== 'undefined' ? define : null));
/*can-validate-validatejs@0.1.3#can-validate-validatejs*/
define('can-validate-validatejs@0.1.3#can-validate-validatejs', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'validate.js'
], function (require, exports, module) {
    var canReflect = require('can-reflect');
    var validatejs = require('validate.js');
    var makeValidator = function (constraints) {
        return function (value) {
            return validatejs.single(value, constraints);
        };
    };
    makeValidator.many = function (constraints) {
        return function (values) {
            var rawErrors = validatejs(values, constraints, {
                format: 'detailed',
                fullMessages: false
            });
            var errors;
            if (rawErrors) {
                errors = [];
                canReflect.eachIndex(rawErrors, function (error) {
                    errors.push({
                        message: error.options.message || error.error,
                        related: [error.attribute]
                    });
                });
            }
            return errors;
        };
    };
    makeValidator.validatejs = validatejs;
    module.exports = makeValidator;
});
/*can-validate@1.2.1#can-validate*/
define('can-validate@1.2.1#can-validate', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var validate = {};
    var helpers = {
        'object': function (normalizedErrors) {
            var errors = normalizedErrors.length > 0 ? {} : undefined;
            canReflect.eachIndex(normalizedErrors, function (error) {
                canReflect.eachIndex(error.related, function (related) {
                    if (!errors[related]) {
                        errors[related] = [];
                    }
                    errors[related].push(error.message);
                });
            });
            return errors;
        },
        'flat': function (normalizedErrors) {
            var errors = normalizedErrors.length > 0 ? [] : undefined;
            canReflect.eachIndex(normalizedErrors, function (error) {
                errors.push(error.message);
            });
            return errors;
        },
        'errors': function (normalizedErrors) {
            return normalizedErrors.length > 0 ? normalizedErrors : undefined;
        },
        'errors-object': function (normalizedErrors) {
            var errors = normalizedErrors.length > 0 ? {} : undefined;
            canReflect.eachIndex(normalizedErrors, function (error) {
                canReflect.eachIndex(error.related, function (related) {
                    if (!errors[related]) {
                        errors[related] = [];
                    }
                    errors[related].push(error);
                });
            });
            return errors;
        }
    };
    var parseErrorItem = function (rawErrors) {
        var errors = [];
        if (typeof rawErrors === 'string') {
            errors.push({
                message: rawErrors,
                related: ['*']
            });
        }
        if (typeof rawErrors === 'object' && !Array.isArray(rawErrors)) {
            if (rawErrors.related) {
                if (!Array.isArray(rawErrors.related)) {
                    rawErrors.related = [rawErrors.related];
                }
            } else {
                rawErrors.related = '*';
            }
            errors.push(rawErrors);
        }
        if (Array.isArray(rawErrors)) {
            canReflect.eachIndex(rawErrors, function (error) {
                [].push.apply(errors, parseErrorItem(error));
            });
        }
        return errors;
    };
    var normalizeErrors = function (rawErrors) {
        var normalizedErrors = [];
        if (typeof rawErrors === 'string' || typeof rawErrors === 'object' && !Array.isArray(rawErrors)) {
            rawErrors = [rawErrors];
        }
        if (rawErrors != null) {
            canReflect.eachIndex(rawErrors, function (error) {
                [].push.apply(normalizedErrors, parseErrorItem(error));
            });
        }
        return normalizedErrors;
    };
    validate.formatErrors = function (errors, format) {
        var normalized = normalizeErrors(errors);
        if (format) {
            if (helpers[format]) {
                return helpers[format](normalized);
            } else {
                return normalized;
            }
        } else {
            return normalized;
        }
    };
    module.exports = validate;
});
/*can-define-validate-validatejs@1.1.1#can-define-validate-validatejs*/
define('can-define-validate-validatejs@1.1.1#can-define-validate-validatejs', [
    'require',
    'exports',
    'module',
    'can-validate-validatejs',
    'can-define',
    'can-assign',
    'can-reflect',
    'can-validate'
], function (require, exports, module) {
    'use strict';
    var validate = require('can-validate-validatejs');
    var define = require('can-define');
    var assign = require('can-assign');
    var canReflect = require('can-reflect');
    var formatErrors = require('can-validate').formatErrors;
    var getMapConstraints = function (Map) {
        var constraints = {};
        canReflect.eachKey(Map.prototype._define.definitions, function (prop, key) {
            if (prop.validate && canReflect.size(prop.validate) !== 0) {
                constraints[key] = prop.validate;
            }
        });
        return constraints;
    };
    var validateMap = function (Map, validator) {
        var mapDefinition = Map.prototype._define;
        Map.prototype.testSet = function () {
            var values = {};
            var useNewObject = false;
            if (arguments.length) {
                if (typeof arguments[0] === 'object' && Boolean(arguments[0])) {
                    values = arguments[0];
                    useNewObject = Boolean(arguments[1]);
                }
                if (typeof arguments[0] === 'string') {
                    values[arguments[0]] = arguments[1];
                }
                if (useNewObject) {
                    values = new Map(values);
                } else {
                    var mapClone = this.serialize();
                    assign(mapClone, values);
                    values = mapClone;
                }
                return validator(values);
            } else {
                return this.errors();
            }
        };
        Map.prototype.errors = function () {
            var _errors = this._errors;
            var errors;
            if (arguments.length) {
                var errorsObj = formatErrors(_errors, 'errors-object');
                errors = [];
                canReflect.eachIndex(arguments, function (key) {
                    [].push.apply(errors, errorsObj ? errorsObj[key] : []);
                });
                errors = errors.length > 0 ? errors : undefined;
            } else {
                errors = _errors;
            }
            return errors;
        };
        define.property(Map.prototype, '_errors', {
            get: function () {
                var errors = validator(this);
                return errors;
            }
        }, mapDefinition.dataInitializers, mapDefinition.computedInitializers);
    };
    var decorator = function (Map) {
        var constraints = getMapConstraints(Map);
        var validator = validate.many(constraints);
        validateMap(Map, function (map) {
            var errors = validator(map);
            return formatErrors(errors, 'errors');
        });
    };
    decorator.validatejs = validate.validatejs;
    module.exports = decorator;
});
/*can@5.31.0#es/can-define-validate-validatejs*/
define('can@5.31.0#es/can-define-validate-validatejs', [
    'exports',
    'can-define-validate-validatejs'
], function (exports, _canDefineValidateValidatejs) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canDefineValidateValidatejs).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-validate*/
define('can@5.31.0#es/can-validate', [
    'exports',
    'can-validate'
], function (exports, _canValidate) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canValidate).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-validate-validatejs@1.0.1#can-validate-validatejs*/
define('can-validate-validatejs@1.0.1#can-validate-validatejs', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'validate.js'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var validatejs = require('validate.js');
    var makeValidator = function (constraints) {
        return function (value) {
            return validatejs.single(value, constraints);
        };
    };
    makeValidator.many = function (constraints) {
        return function (values) {
            var rawErrors = validatejs(values, constraints, {
                format: 'detailed',
                fullMessages: false
            });
            var errors;
            if (rawErrors) {
                errors = [];
                canReflect.eachIndex(rawErrors, function (error) {
                    errors.push({
                        message: error.options.message || error.error,
                        related: [error.attribute]
                    });
                });
            }
            return errors;
        };
    };
    makeValidator.validatejs = validatejs;
    module.exports = makeValidator;
});
/*can@5.31.0#es/can-validate-validatejs*/
define('can@5.31.0#es/can-validate-validatejs', [
    'exports',
    'can-validate-validatejs'
], function (exports, _canValidateValidatejs) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canValidateValidatejs).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-type*/
define('can@5.31.0#es/can-type', [
    'exports',
    'can-type'
], function (exports, _canType) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canType).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-event-dom-radiochange*/
define('can@5.31.0#es/can-event-dom-radiochange', [
    'exports',
    'can-event-dom-radiochange'
], function (exports, _canEventDomRadiochange) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canEventDomRadiochange).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-event-dom-enter@2.2.1#can-event-dom-enter*/
define('can-event-dom-enter@2.2.1#can-event-dom-enter', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var baseEventType = 'keyup';
    function isEnterEvent(event) {
        var hasEnterKey = event.key === 'Enter';
        var hasEnterCode = event.keyCode === 13;
        return hasEnterKey || hasEnterCode;
    }
    var enterEvent = {
        defaultEventType: 'enter',
        addEventListener: function (target, eventType, handler) {
            var keyHandler = function (event) {
                if (isEnterEvent(event)) {
                    return handler.apply(this, arguments);
                }
            };
            var handlerMap = enterEvent._eventTypeHandlerMap[eventType];
            if (!handlerMap) {
                handlerMap = enterEvent._eventTypeHandlerMap[eventType] = new Map();
            }
            handlerMap.set(handler, keyHandler);
            this.addEventListener(target, baseEventType, keyHandler);
        },
        removeEventListener: function (target, eventType, handler) {
            var handlerMap = enterEvent._eventTypeHandlerMap[eventType];
            if (handlerMap) {
                var keyHandler = handlerMap.get(handler);
                if (keyHandler) {
                    handlerMap.delete(handler);
                    if (handlerMap.size === 0) {
                        delete enterEvent._eventTypeHandlerMap[eventType];
                    }
                    this.removeEventListener(target, baseEventType, keyHandler);
                }
            }
        },
        _eventTypeHandlerMap: {}
    };
    module.exports = namespace.domEventEnter = enterEvent;
});
/*can@5.31.0#es/can-event-dom-enter*/
define('can@5.31.0#es/can-event-dom-enter', [
    'exports',
    'can-event-dom-enter'
], function (exports, _canEventDomEnter) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canEventDomEnter).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-observable-mixin*/
define('can@5.31.0#es/can-observable-mixin', [
    'exports',
    'can-observable-mixin'
], function (exports, _canObservableMixin) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canObservableMixin).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#ecosystem*/
define('can@5.31.0#ecosystem', [
    'exports',
    './es/can-debug',
    './es/can-define-backup',
    './es/can-define-stream',
    './es/can-define-stream-kefir',
    './es/can-kefir',
    './es/can-observe',
    './es/can-stream',
    './es/can-stream-kefir',
    './es/can-map-compat',
    './es/can-observable-object',
    './es/can-observable-array',
    './es/can-stache-element',
    './es/can-stache-converters',
    './es/can-view-autorender',
    './es/can-super-model',
    './es/can-connect-feathers',
    './es/can-connect-tag',
    './es/can-fixture-socket',
    './es/can-ndjson-stream',
    './es/can-connect-ndjson',
    './es/can-connect-session',
    './es/can-construct-super',
    './es/can-route-mock',
    './es/can-define-validate-validatejs',
    './es/can-validate',
    './es/can-validate-validatejs',
    './es/can-type',
    './es/can-event-dom-radiochange',
    './es/can-event-dom-enter',
    './es/can-observable-mixin'
], function (exports, _canDebug, _canDefineBackup, _canDefineStream, _canDefineStreamKefir, _canKefir, _canObserve, _canStream, _canStreamKefir, _canMapCompat, _canObservableObject, _canObservableArray, _canStacheElement, _canStacheConverters, _canViewAutorender, _canSuperModel, _canConnectFeathers, _canConnectTag, _canFixtureSocket, _canNdjsonStream, _canConnectNdjson, _canConnectSession, _canConstructSuper, _canRouteMock, _canDefineValidateValidatejs, _canValidate, _canValidateValidatejs, _canType, _canEventDomRadiochange, _canEventDomEnter, _canObservableMixin) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'debug', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canDebug).default;
        }
    });
    Object.defineProperty(exports, 'defineBackup', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canDefineBackup).default;
        }
    });
    Object.defineProperty(exports, 'defineStream', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canDefineStream).default;
        }
    });
    Object.defineProperty(exports, 'defineStreamKefir', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canDefineStreamKefir).default;
        }
    });
    Object.defineProperty(exports, 'kefir', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canKefir).default;
        }
    });
    Object.defineProperty(exports, 'Kefir', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canKefir).default;
        }
    });
    Object.defineProperty(exports, 'observe', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canObserve).default;
        }
    });
    Object.defineProperty(exports, 'stream', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canStream).default;
        }
    });
    Object.defineProperty(exports, 'streamKefir', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canStreamKefir).default;
        }
    });
    Object.defineProperty(exports, 'makeMapCompat', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canMapCompat).default;
        }
    });
    Object.defineProperty(exports, 'ObservableObject', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canObservableObject).default;
        }
    });
    Object.defineProperty(exports, 'DefineObject', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canObservableObject).default;
        }
    });
    Object.defineProperty(exports, 'ObservableArray', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canObservableArray).default;
        }
    });
    Object.defineProperty(exports, 'DefineArray', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canObservableArray).default;
        }
    });
    Object.defineProperty(exports, 'StacheElement', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canStacheElement).default;
        }
    });
    Object.defineProperty(exports, 'StacheDefineElement', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canStacheElement).default;
        }
    });
    Object.defineProperty(exports, 'stacheConverters', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canStacheConverters).default;
        }
    });
    Object.defineProperty(exports, 'viewAutorender', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canViewAutorender).default;
        }
    });
    Object.defineProperty(exports, 'superModel', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canSuperModel).default;
        }
    });
    Object.defineProperty(exports, 'connectFeathers', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canConnectFeathers).default;
        }
    });
    Object.defineProperty(exports, 'connectTag', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canConnectTag).default;
        }
    });
    Object.defineProperty(exports, 'fixtureSocket', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canFixtureSocket).default;
        }
    });
    Object.defineProperty(exports, 'ndjsonStream', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canNdjsonStream).default;
        }
    });
    Object.defineProperty(exports, 'connectNDJSON', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canConnectNdjson).default;
        }
    });
    Object.defineProperty(exports, 'connectCanSession', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canConnectSession).default;
        }
    });
    Object.defineProperty(exports, 'constructSuper', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canConstructSuper).default;
        }
    });
    Object.defineProperty(exports, 'RouteMock', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canRouteMock).default;
        }
    });
    Object.defineProperty(exports, 'defineValidateValidatejs', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canDefineValidateValidatejs).default;
        }
    });
    Object.defineProperty(exports, 'validate', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canValidate).default;
        }
    });
    Object.defineProperty(exports, 'validateValidatejs', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canValidateValidatejs).default;
        }
    });
    Object.defineProperty(exports, 'type', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canType).default;
        }
    });
    Object.defineProperty(exports, 'radioChangeEvent', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canEventDomRadiochange).default;
        }
    });
    Object.defineProperty(exports, 'enterEvent', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canEventDomEnter).default;
        }
    });
    Object.defineProperty(exports, 'observableMixin', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canObservableMixin).default;
        }
    });
    Object.defineProperty(exports, 'defineMixin', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canObservableMixin).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#es/can-compute*/
define('can@5.31.0#es/can-compute', [
    'exports',
    'can-compute'
], function (exports, _canCompute) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canCompute).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-map@4.3.8#bubble*/
define('can-map@4.3.8#bubble', [
    'require',
    'exports',
    'module',
    'can-event-queue/map/map',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canEvent = require('can-event-queue/map/map');
    var canReflect = require('can-reflect');
    var bubble = {
        bind: function (parent, eventName) {
            if (!parent.__inSetup) {
                var bubbleEvents = bubble.events(parent, eventName), len = bubbleEvents.length, bubbleEvent;
                if (!parent._bubbleBindings) {
                    parent._bubbleBindings = {};
                }
                for (var i = 0; i < len; i++) {
                    bubbleEvent = bubbleEvents[i];
                    if (!parent._bubbleBindings[bubbleEvent]) {
                        parent._bubbleBindings[bubbleEvent] = 1;
                        bubble.childrenOf(parent, bubbleEvent);
                    } else {
                        parent._bubbleBindings[bubbleEvent]++;
                    }
                }
            }
        },
        unbind: function (parent, eventName) {
            var bubbleEvents = bubble.events(parent, eventName), len = bubbleEvents.length, bubbleEvent;
            for (var i = 0; i < len; i++) {
                bubbleEvent = bubbleEvents[i];
                if (parent._bubbleBindings) {
                    parent._bubbleBindings[bubbleEvent]--;
                }
                if (parent._bubbleBindings && !parent._bubbleBindings[bubbleEvent]) {
                    delete parent._bubbleBindings[bubbleEvent];
                    bubble.teardownChildrenFrom(parent, bubbleEvent);
                    if (canReflect.size(parent._bubbleBindings) === 0) {
                        delete parent._bubbleBindings;
                    }
                }
            }
        },
        add: function (parent, child, prop) {
            if (canReflect.isObservableLike(child) && canReflect.isMapLike(child) && parent._bubbleBindings) {
                for (var eventName in parent._bubbleBindings) {
                    if (parent._bubbleBindings[eventName]) {
                        bubble.teardownFromParent(parent, child, eventName);
                        bubble.toParent(child, parent, prop, eventName);
                    }
                }
            }
        },
        addMany: function (parent, children) {
            for (var i = 0, len = children.length; i < len; i++) {
                bubble.add(parent, children[i], i);
            }
        },
        remove: function (parent, child) {
            if (canReflect.isObservableLike(child) && canReflect.isMapLike(child) && parent._bubbleBindings) {
                for (var eventName in parent._bubbleBindings) {
                    if (parent._bubbleBindings[eventName]) {
                        bubble.teardownFromParent(parent, child, eventName);
                    }
                }
            }
        },
        removeMany: function (parent, children) {
            for (var i = 0, len = children.length; i < len; i++) {
                bubble.remove(parent, children[i]);
            }
        },
        set: function (parent, prop, value, current) {
            if (canReflect.isObservableLike(value) && canReflect.isMapLike(value)) {
                bubble.add(parent, value, prop);
            }
            if (canReflect.isObservableLike(current) && canReflect.isMapLike(current)) {
                bubble.remove(parent, current);
            }
            return value;
        },
        events: function (map, boundEventName) {
            return map.constructor._bubbleRule(boundEventName, map);
        },
        toParent: function (child, parent, prop, eventName) {
            canEvent.listenTo.call(parent, child, eventName, function () {
                var args = canReflect.toArray(arguments), ev = args.shift();
                args[0] = (canReflect.isObservableLike(parent) && canReflect.isListLike(parent) ? parent.indexOf(child) : prop) + (args[0] ? '.' + args[0] : '');
                ev.triggeredNS = ev.triggeredNS || {};
                if (ev.triggeredNS[parent._cid]) {
                    return;
                }
                ev.triggeredNS[parent._cid] = true;
                canEvent.dispatch.call(parent, ev, args);
                if (eventName === 'change') {
                    canEvent.dispatch.call(parent, args[0], [
                        args[2],
                        args[3]
                    ]);
                }
            });
        },
        childrenOf: function (parent, eventName) {
            parent._each(function (child, prop) {
                if (child && child.bind) {
                    bubble.toParent(child, parent, prop, eventName);
                }
            });
        },
        teardownFromParent: function (parent, child, eventName) {
            if (child && child.unbind) {
                canEvent.stopListening.call(parent, child, eventName);
            }
        },
        teardownChildrenFrom: function (parent, eventName) {
            parent._each(function (child) {
                bubble.teardownFromParent(parent, child, eventName);
            });
        },
        isBubbling: function (parent, eventName) {
            return parent._bubbleBindings && parent._bubbleBindings[eventName];
        }
    };
    module.exports = bubble;
});
/*can-map@4.3.8#map-helpers*/
define('can-map@4.3.8#map-helpers', [
    'require',
    'exports',
    'module',
    'can-cid',
    'can-assign',
    'can-reflect',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var CID = require('can-cid');
    var assign = require('can-assign');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var madeMap = null;
    var teardownMap = function () {
        for (var cid in madeMap) {
            if (madeMap[cid].added) {
                delete madeMap[cid].obj._cid;
            }
        }
        madeMap = null;
    };
    var mapHelpers = {
        attrParts: function (attr, keepKey) {
            if (keepKey) {
                return [attr];
            }
            return typeof attr === 'object' ? attr : ('' + attr).split('.');
        },
        canMakeObserve: function (obj) {
            return obj && !canReflect.isPromise(obj) && (Array.isArray(obj) || canReflect.isPlainObject(obj));
        },
        reflectSerialize: function (unwrapped) {
            this.forEach(function (val, name) {
                if (this.___serialize) {
                    val = this.___serialize(name, val);
                } else {
                    val = canReflect.serialize(val);
                }
                if (val !== undefined) {
                    unwrapped[name] = val;
                }
            }, this);
            return unwrapped;
        },
        reflectUnwrap: function (unwrapped) {
            this.forEach(function (value, key) {
                if (value !== undefined) {
                    unwrapped[key] = canReflect.unwrap(value);
                }
            });
            return unwrapped;
        },
        removeSpecialKeys: function (map) {
            if (map) {
                [
                    '_data',
                    'constructor',
                    '_cid',
                    '__bindEvents'
                ].forEach(function (key) {
                    delete map[key];
                });
            }
            return map;
        },
        serialize: function () {
            var serializeMap = null;
            return function (map, how, where) {
                var cid = CID(map), firstSerialize = false;
                if (!serializeMap) {
                    firstSerialize = true;
                    serializeMap = {
                        attr: {},
                        serialize: {}
                    };
                }
                serializeMap[how][cid] = where;
                map.forEach(function (val, name) {
                    var result, isObservable = canReflect.isObservableLike(val), serialized = isObservable && serializeMap[how][CID(val)];
                    if (serialized) {
                        result = serialized;
                    } else {
                        if (map['___' + how]) {
                            result = map['___' + how](name, val);
                        } else {
                            result = mapHelpers.getValue(map, name, val, how);
                        }
                    }
                    if (result !== undefined) {
                        where[name] = result;
                    }
                });
                if (firstSerialize) {
                    serializeMap = null;
                }
                return where;
            };
        }(),
        getValue: function (map, name, val, how) {
            if (how === 'attr') {
                how = canSymbol.for('can.getValue');
            }
            if (canReflect.isObservableLike(val) && val[how]) {
                return val[how]();
            } else {
                return val;
            }
        },
        define: null,
        addComputedAttr: function (map, attrName, compute) {
            map._computedAttrs[attrName] = {
                compute: compute,
                count: 0,
                handler: function (newVal, oldVal) {
                    map._triggerChange(attrName, 'set', newVal, oldVal);
                }
            };
        },
        addToMap: function addToMap(obj, instance) {
            var teardown;
            if (!madeMap) {
                teardown = teardownMap;
                madeMap = {};
            }
            var hasCid = obj._cid;
            var cid = CID(obj);
            if (!madeMap[cid]) {
                madeMap[cid] = {
                    obj: obj,
                    instance: instance,
                    added: !hasCid
                };
            }
            return teardown;
        },
        getMapFromObject: function (obj) {
            return madeMap && madeMap[obj._cid] && madeMap[obj._cid].instance;
        },
        twoLevelDeepExtend: function (destination, source) {
            for (var prop in source) {
                destination[prop] = destination[prop] || {};
                assign(destination[prop], source[prop]);
            }
        }
    };
    module.exports = exports = mapHelpers;
});
/*can-types@1.4.0#can-types*/
define('can-types@1.4.0#can-types', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-reflect',
    'can-symbol',
    'can-log/dev/dev'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var dev = require('can-log/dev/dev');
    var types = {
        isMapLike: function (obj) {
            if (process.env.NODE_ENV !== 'production') {
                dev.warn('can-types.isMapLike(obj) is deprecated, please use `canReflect.isObservableLike(obj) && canReflect.isMapLike(obj)` instead.');
            }
            return canReflect.isObservableLike(obj) && canReflect.isMapLike(obj);
        },
        isListLike: function (obj) {
            if (process.env.NODE_ENV !== 'production') {
                dev.warn('can-types.isListLike(obj) is deprecated, please use `canReflect.isObservableLike(obj) && canReflect.isListLike(obj)` instead.');
            }
            return canReflect.isObservableLike(obj) && canReflect.isListLike(obj);
        },
        isPromise: function (obj) {
            if (process.env.NODE_ENV !== 'production') {
                dev.warn('can-types.isPromise is deprecated, please use canReflect.isPromise instead.');
            }
            return canReflect.isPromise(obj);
        },
        isConstructor: function (func) {
            if (process.env.NODE_ENV !== 'production') {
                dev.warn('can-types.isConstructor is deprecated, please use canReflect.isConstructorLike instead.');
            }
            return canReflect.isConstructorLike(func);
        },
        isCallableForValue: function (obj) {
            if (process.env.NODE_ENV !== 'production') {
                dev.warn('can-types.isCallableForValue(obj) is deprecated, please use `canReflect.isFunctionLike(obj) && !canReflect.isConstructorLike(obj)` instead.');
            }
            return obj && canReflect.isFunctionLike(obj) && !canReflect.isConstructorLike(obj);
        },
        isCompute: function (obj) {
            if (process.env.NODE_ENV !== 'production') {
                dev.warn('can-types.isCompute is deprecated.');
            }
            return obj && obj.isComputed;
        },
        get iterator() {
            if (process.env.NODE_ENV !== 'production') {
                dev.warn('can-types.iterator is deprecated, use `canSymbol.iterator || canSymbol.for("iterator")` instead.');
            }
            return canSymbol.iterator || canSymbol.for('iterator');
        },
        DefaultMap: null,
        DefaultList: null,
        queueTask: function (task) {
            var args = task[2] || [];
            task[0].apply(task[1], args);
        },
        wrapElement: function (element) {
            return element;
        },
        unwrapElement: function (element) {
            return element;
        }
    };
    if (namespace.types) {
        throw new Error('You can\'t have two versions of can-types, check your dependencies');
    } else {
        module.exports = namespace.types = types;
    }
});
/*can-cid@1.3.1#helpers*/
define('can-cid@1.3.1#helpers', function (require, exports, module) {
    'use strict';
    module.exports = {
        each: function (obj, cb, context) {
            for (var prop in obj) {
                cb.call(context, obj[prop], prop);
            }
            return obj;
        }
    };
});
/*can-cid@1.3.1#set/set*/
define('can-cid@1.3.1#set/set', [
    'require',
    'exports',
    'module',
    '../can-cid',
    '../helpers'
], function (require, exports, module) {
    'use strict';
    var getCID = require('../can-cid').get;
    var helpers = require('../helpers');
    var CIDSet;
    if (typeof Set !== 'undefined') {
        CIDSet = Set;
    } else {
        var CIDSet = function () {
            this.values = {};
        };
        CIDSet.prototype.add = function (value) {
            this.values[getCID(value)] = value;
        };
        CIDSet.prototype['delete'] = function (key) {
            var has = getCID(key) in this.values;
            if (has) {
                delete this.values[getCID(key)];
            }
            return has;
        };
        CIDSet.prototype.forEach = function (cb, thisArg) {
            helpers.each(this.values, cb, thisArg);
        };
        CIDSet.prototype.has = function (value) {
            return getCID(value) in this.values;
        };
        CIDSet.prototype.clear = function () {
            return this.values = {};
        };
        Object.defineProperty(CIDSet.prototype, 'size', {
            get: function () {
                var size = 0;
                helpers.each(this.values, function () {
                    size++;
                });
                return size;
            }
        });
    }
    module.exports = CIDSet;
});
/*can-cid@1.3.1#map/map*/
define('can-cid@1.3.1#map/map', [
    'require',
    'exports',
    'module',
    '../can-cid',
    '../helpers'
], function (require, exports, module) {
    'use strict';
    var getCID = require('../can-cid').get;
    var helpers = require('../helpers');
    var CIDMap;
    if (typeof Map !== 'undefined') {
        CIDMap = Map;
    } else {
        var CIDMap = function () {
            this.values = {};
        };
        CIDMap.prototype.set = function (key, value) {
            this.values[getCID(key)] = {
                key: key,
                value: value
            };
        };
        CIDMap.prototype['delete'] = function (key) {
            var has = getCID(key) in this.values;
            if (has) {
                delete this.values[getCID(key)];
            }
            return has;
        };
        CIDMap.prototype.forEach = function (cb, thisArg) {
            helpers.each(this.values, function (pair) {
                return cb.call(thisArg || this, pair.value, pair.key, this);
            }, this);
        };
        CIDMap.prototype.has = function (key) {
            return getCID(key) in this.values;
        };
        CIDMap.prototype.get = function (key) {
            var obj = this.values[getCID(key)];
            return obj && obj.value;
        };
        CIDMap.prototype.clear = function () {
            return this.values = {};
        };
        Object.defineProperty(CIDMap.prototype, 'size', {
            get: function () {
                var size = 0;
                helpers.each(this.values, function () {
                    size++;
                });
                return size;
            }
        });
    }
    module.exports = CIDMap;
});
/*can-map@4.3.8#can-map*/
define('can-map@4.3.8#can-map', [
    'require',
    'exports',
    'module',
    './bubble',
    './map-helpers',
    'can-event-queue/map/map',
    'can-event-queue/type/type',
    'can-construct',
    'can-observation-recorder',
    'can-stache-key',
    'can-compute',
    'can-single-reference',
    'can-observation',
    'can-namespace',
    'can-log/dev/dev',
    'can-cid',
    'can-assign',
    'can-types',
    'can-reflect',
    'can-symbol',
    'can-cid/set/set',
    'can-cid/map/map',
    'can-queues'
], function (require, exports, module) {
    'use strict';
    var bubble = require('./bubble');
    var mapHelpers = require('./map-helpers');
    var canEvent = require('can-event-queue/map/map');
    var addTypeEvents = require('can-event-queue/type/type');
    var Construct = require('can-construct');
    var ObservationRecorder = require('can-observation-recorder');
    var ObserveReader = require('can-stache-key');
    var canCompute = require('can-compute');
    var singleReference = require('can-single-reference');
    var Observation = require('can-observation');
    var namespace = require('can-namespace');
    var dev = require('can-log/dev/dev');
    var CID = require('can-cid');
    var assign = require('can-assign');
    var types = require('can-types');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var CIDSet = require('can-cid/set/set');
    var CIDMap = require('can-cid/map/map');
    var canQueues = require('can-queues');
    var unobservable = { 'constructor': true };
    var hasOwnProperty = {}.hasOwnProperty;
    var inSetupSymbol = canSymbol.for('can.initializing');
    var Map = Construct.extend({
        setup: function (baseMap) {
            Construct.setup.apply(this, arguments);
            this._computedPropertyNames = [];
            if (Map) {
                addTypeEvents(this);
                this[canSymbol.for('can.defineInstanceKey')] = function (prop, definition) {
                    if (definition.value !== undefined) {
                        this.defaults[prop] = definition.value;
                    }
                    if (definition.enumerable === false) {
                        this.enumerable[prop] = false;
                    }
                };
                if (process.env.NODE_ENV !== 'production') {
                    if (this.prototype.define && !mapHelpers.define) {
                        dev.warn('can/map/define is not included, yet there is a define property ' + 'used. You may want to add this plugin.');
                    }
                    if (this.define && !mapHelpers.define) {
                        dev.warn('The define property should be on the map\'s prototype properties, ' + 'not the static properties. Also, can/map/define is not included.');
                    }
                }
                if (!this.defaults) {
                    this.defaults = {};
                }
                if (!this.enumerable) {
                    this.enumerable = {};
                }
                for (var prop in this.prototype) {
                    if (prop !== 'define' && prop !== 'constructor' && (typeof this.prototype[prop] !== 'function' || this.prototype[prop].prototype instanceof Construct)) {
                        this.defaults[prop] = this.prototype[prop];
                    } else if (canReflect.isObservableLike(this.prototype[prop])) {
                        this._computedPropertyNames.push(prop);
                    }
                }
                if (mapHelpers.define) {
                    mapHelpers.define(this, baseMap.prototype.define);
                }
            }
        },
        shortName: 'Map',
        _bubbleRule: function (eventName) {
            return eventName === 'change' || eventName.indexOf('.') >= 0 ? ['change'] : [];
        },
        addEventListener: canEvent.addEventListener,
        removeEventListener: canEvent.removeEventListener,
        keys: function (map) {
            return canReflect.getOwnEnumerableKeys(map);
        }
    }, {
        setup: function (obj) {
            if (canReflect.isObservableLike(obj) && typeof obj.serialize === 'function') {
                obj = obj.serialize();
            }
            this._data = Object.create(null);
            CID(this, '.map');
            this._setupComputedProperties();
            var teardownMapping = obj && mapHelpers.addToMap(obj, this);
            var defaultValues = this._setupDefaults(obj);
            var data = assign(canReflect.assignDeep({}, defaultValues), obj);
            this.attr(data);
            if (teardownMapping) {
                teardownMapping();
            }
        },
        _setupComputedProperties: function () {
            this._computedAttrs = Object.create(null);
            var computes = this.constructor._computedPropertyNames;
            for (var i = 0, len = computes.length; i < len; i++) {
                var attrName = computes[i];
                mapHelpers.addComputedAttr(this, attrName, this[attrName]);
            }
        },
        _setupDefaults: function () {
            return this.constructor.defaults || {};
        },
        attr: function (attr, val) {
            var type = typeof attr;
            if (attr === undefined) {
                return this._getAttrs();
            } else if (type !== 'string' && type !== 'number') {
                return this._setAttrs(attr, val);
            } else if (arguments.length === 1) {
                return this._get(attr);
            } else {
                this._set(attr + '', val);
                return this;
            }
        },
        _get: function (attr) {
            attr = attr + '';
            var dotIndex = attr.indexOf('.');
            if (dotIndex >= 0) {
                var value = this.___get(attr);
                if (value !== undefined) {
                    ObservationRecorder.add(this, attr);
                    return value;
                }
                var first = attr.substr(0, dotIndex), second = attr.substr(dotIndex + 1);
                var current = this.__get(first);
                return current && canReflect.getKeyValue(current, second);
            } else {
                return this.__get(attr);
            }
        },
        __get: function (attr) {
            if (!unobservable[attr] && !this._computedAttrs[attr]) {
                ObservationRecorder.add(this, attr);
            }
            return this.___get(attr);
        },
        ___get: function (attr) {
            if (attr !== undefined) {
                var computedAttr = this._computedAttrs[attr];
                if (computedAttr) {
                    return canReflect.getValue(computedAttr.compute);
                } else {
                    return hasOwnProperty.call(this._data, attr) ? this._data[attr] : undefined;
                }
            } else {
                return this._data;
            }
        },
        _set: function (attr, value, keepKey) {
            attr = attr + '';
            var dotIndex = attr.indexOf('.'), current;
            if (process.env.NODE_ENV !== 'production') {
                var lastItem, lastFn;
                if (ObservationRecorder.isRecording() && canQueues.stack().length && !this[inSetupSymbol]) {
                    lastItem = canQueues.stack()[canQueues.stack().length - 1];
                    lastFn = lastItem.context instanceof Observation ? lastItem.context.func : lastItem.fn;
                    var mutationWarning = 'can-map: The ' + attr + ' property on ' + canReflect.getName(this) + ' is being set in ' + (canReflect.getName(lastFn) || canReflect.getName(lastItem.fn)) + '. This can cause infinite loops and performance issues. ' + 'Use getters and listeners to derive properties instead. https://canjs.com/doc/guides/logic.html#Derivedproperties';
                    dev.warn(mutationWarning);
                    canQueues.logStack();
                }
            }
            if (dotIndex >= 0 && !keepKey) {
                var first = attr.substr(0, dotIndex), second = attr.substr(dotIndex + 1);
                current = this[inSetupSymbol] ? undefined : this.___get(first);
                if (canReflect.isMapLike(current)) {
                    canReflect.setKeyValue(current, second, value);
                } else {
                    current = this[inSetupSymbol] ? undefined : this.___get(attr);
                    if (this.__convert) {
                        value = this.__convert(attr, value);
                    }
                    this.__set(attr, this.__type(value, attr), current);
                }
            } else {
                current = this[inSetupSymbol] ? undefined : this.___get(attr);
                if (this.__convert) {
                    value = this.__convert(attr, value);
                }
                this.__set(attr, this.__type(value, attr), current);
            }
        },
        __type: function (value, prop) {
            if (typeof value === 'object' && !canReflect.isObservableLike(value) && mapHelpers.canMakeObserve(value) && !canReflect.isListLike(value)) {
                var cached = mapHelpers.getMapFromObject(value);
                if (cached) {
                    return cached;
                }
                var MapConstructor = this.constructor.Map || Map;
                return new MapConstructor(value);
            }
            return value;
        },
        __set: function (prop, value, current) {
            if (value !== current || !Object.prototype.hasOwnProperty.call(this._data, prop)) {
                var computedAttr = this._computedAttrs[prop];
                var changeType = computedAttr || current !== undefined || hasOwnProperty.call(this.___get(), prop) ? 'set' : 'add';
                this.___set(prop, typeof value === 'object' ? bubble.set(this, prop, value, current) : value);
                if (!computedAttr || !computedAttr.count) {
                    this._triggerChange(prop, changeType, value, current);
                }
                if (typeof current === 'object') {
                    bubble.teardownFromParent(this, current);
                }
            }
        },
        ___set: function (prop, val) {
            var computedAttr = this._computedAttrs[prop];
            if (computedAttr) {
                canReflect.setValue(computedAttr.compute, val);
            } else {
                this._data[prop] = val;
            }
            if (typeof this.constructor.prototype[prop] !== 'function' && !computedAttr) {
                this[prop] = val;
            }
        },
        removeAttr: function (attr) {
            return this._remove(attr);
        },
        _remove: function (attr) {
            var parts = mapHelpers.attrParts(attr), prop = parts.shift(), current = this.___get(prop);
            if (parts.length && current) {
                return canReflect.deleteKeyValue(current, parts.join('.'));
            } else {
                if (typeof attr === 'string' && !!~attr.indexOf('.')) {
                    prop = attr;
                }
                this.__remove(prop, current);
                return current;
            }
        },
        __remove: function (prop, current) {
            if (prop in this._data) {
                this.___remove(prop);
                this._triggerChange(prop, 'remove', undefined, current);
            }
        },
        ___remove: function (prop) {
            delete this._data[prop];
            if (!(prop in this.constructor.prototype)) {
                delete this[prop];
            }
        },
        ___serialize: function (name, val) {
            if (this._legacyAttrBehavior) {
                return mapHelpers.getValue(this, name, val, 'serialize');
            } else {
                return canReflect.serialize(val, CIDMap);
            }
        },
        _getAttrs: function () {
            if (this._legacyAttrBehavior) {
                return mapHelpers.serialize(this, 'attr', {});
            } else {
                return canReflect.unwrap(this, CIDMap);
            }
        },
        _setAttrs: function (props, remove) {
            if (this._legacyAttrBehavior) {
                return this.__setAttrs(props, remove);
            }
            if (remove === true || remove === 'true') {
                this[canSymbol.for('can.updateDeep')](props);
            } else {
                this[canSymbol.for('can.assignDeep')](props);
            }
            return this;
        },
        __setAttrs: function (props, remove) {
            props = assign({}, props);
            var prop, self = this, newVal;
            canQueues.batch.start();
            this._each(function (curVal, prop) {
                if (prop === '_cid') {
                    return;
                }
                newVal = props[prop];
                if (newVal === undefined) {
                    if (remove) {
                        self.removeAttr(prop);
                    }
                    return;
                }
                if (self.__convert) {
                    newVal = self.__convert(prop, newVal);
                }
                if (canReflect.isObservableLike(curVal) && canReflect.isMapLike(curVal) && mapHelpers.canMakeObserve(newVal)) {
                    if (remove === true) {
                        canReflect.updateDeep(curVal, newVal);
                    } else {
                        canReflect.assignDeep(curVal, newVal);
                    }
                } else if (curVal !== newVal) {
                    self.__set(prop, self.__type(newVal, prop), curVal);
                }
                delete props[prop];
            });
            for (prop in props) {
                if (prop !== '_cid') {
                    newVal = props[prop];
                    this._set(prop, newVal, true);
                }
            }
            canQueues.batch.stop();
            return this;
        },
        serialize: function () {
            return canReflect.serialize(this, CIDMap);
        },
        _triggerChange: function (attr, how, newVal, oldVal, batchNum) {
            canQueues.batch.start();
            if (bubble.isBubbling(this, 'change')) {
                canEvent.dispatch.call(this, {
                    type: 'change',
                    target: this,
                    batchNum: batchNum
                }, [
                    attr,
                    how,
                    newVal,
                    oldVal
                ]);
            }
            canEvent.dispatch.call(this, {
                type: attr,
                target: this,
                batchNum: batchNum,
                patches: [{
                        type: 'set',
                        key: attr,
                        value: newVal
                    }]
            }, [
                newVal,
                oldVal
            ]);
            if (how === 'remove' || how === 'add') {
                canEvent.dispatch.call(this, {
                    type: '__keys',
                    target: this,
                    batchNum: batchNum
                });
            }
            canQueues.batch.stop();
        },
        compute: function (prop) {
            if (typeof this.constructor.prototype[prop] === 'function') {
                return canCompute(this[prop], this);
            } else {
                var reads = ObserveReader.reads(prop);
                var last = reads.length - 1;
                return canCompute(function (newVal) {
                    if (arguments.length) {
                        ObserveReader.write(this, reads[last].key, newVal, {});
                    } else {
                        return ObserveReader.get(this, prop);
                    }
                }, this);
            }
        },
        forEach: function (callback, context) {
            var key, item;
            var keys = canReflect.getOwnEnumerableKeys(this);
            for (var i = 0, len = keys.length; i < len; i++) {
                key = keys[i];
                item = this.attr(key);
                if (callback.call(context || item, item, key, this) === false) {
                    break;
                }
            }
            return this;
        },
        _each: function (callback) {
            var data = this.___get();
            for (var prop in data) {
                if (hasOwnProperty.call(data, prop)) {
                    callback(data[prop], prop);
                }
            }
        },
        dispatch: canEvent.dispatch
    });
    canEvent(Map.prototype);
    Map.prototype.addEventListener = function (eventName, handler) {
        var computedBinding = this._computedAttrs && this._computedAttrs[eventName];
        if (computedBinding && computedBinding.compute) {
            if (!computedBinding.count) {
                computedBinding.count = 1;
                canReflect.onValue(computedBinding.compute, computedBinding.handler, 'notify');
            } else {
                computedBinding.count++;
            }
        }
        bubble.bind(this, eventName);
        return canEvent.addEventListener.apply(this, arguments);
    };
    Map.prototype.removeEventListener = function (eventName, handler) {
        var computedBinding = this._computedAttrs && this._computedAttrs[eventName];
        if (computedBinding) {
            if (computedBinding.count === 1) {
                computedBinding.count = 0;
                canReflect.offValue(computedBinding.compute, computedBinding.handler, 'notify');
            } else {
                computedBinding.count--;
            }
        }
        bubble.unbind(this, eventName);
        return canEvent.removeEventListener.apply(this, arguments);
    };
    Map.prototype.on = Map.prototype.bind = Map.prototype.addEventListener;
    Map.prototype.off = Map.prototype.unbind = Map.prototype.removeEventListener;
    Map.on = Map.bind = Map.addEventListener;
    Map.off = Map.unbind = Map.removeEventListener;
    canReflect.assignSymbols(Map.prototype, {
        'can.isMapLike': true,
        'can.isListLike': false,
        'can.isValueLike': false,
        'can.getKeyValue': Map.prototype._get,
        'can.setKeyValue': Map.prototype._set,
        'can.deleteKeyValue': Map.prototype._remove,
        'can.getOwnEnumerableKeys': function () {
            if (!this[inSetupSymbol]) {
                ObservationRecorder.add(this, '__keys');
            }
            var enumerable = this.constructor.enumerable;
            if (enumerable) {
                return Object.keys(this._data).filter(function (key) {
                    return enumerable[key] !== false;
                }, this);
            } else {
                return Object.keys(this._data);
            }
        },
        'can.assignDeep': function (source) {
            canQueues.batch.start();
            canReflect.assignDeepMap(this, mapHelpers.removeSpecialKeys(canReflect.assignMap({}, source)));
            canQueues.batch.stop();
        },
        'can.updateDeep': function (source) {
            canQueues.batch.start();
            canReflect.updateDeepMap(this, mapHelpers.removeSpecialKeys(canReflect.assignMap({}, source)));
            canQueues.batch.stop();
        },
        'can.unwrap': mapHelpers.reflectUnwrap,
        'can.serialize': mapHelpers.reflectSerialize,
        'can.onKeyValue': function (key, handler, queue) {
            var translationHandler = function (ev, newValue, oldValue) {
                handler.call(this, newValue, oldValue);
            };
            singleReference.set(handler, this, translationHandler, key);
            this.addEventListener(key, translationHandler, queue);
        },
        'can.offKeyValue': function (key, handler, queue) {
            this.removeEventListener(key, singleReference.getAndDelete(handler, this, key), queue);
        },
        'can.keyHasDependencies': function (key) {
            return !!(this._computedAttrs && this._computedAttrs[key] && this._computedAttrs[key].compute);
        },
        'can.getKeyDependencies': function (key) {
            var ret;
            if (this._computedAttrs && this._computedAttrs[key] && this._computedAttrs[key].compute) {
                ret = {};
                ret.valueDependencies = new CIDSet();
                ret.valueDependencies.add(this._computedAttrs[key].compute);
            }
            return ret;
        }
    });
    if (!types.DefaultMap) {
        types.DefaultMap = Map;
    }
    module.exports = namespace.Map = Map;
});
/*can@5.31.0#es/can-map*/
define('can@5.31.0#es/can-map', [
    'exports',
    'can-map'
], function (exports, _canMap) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canMap).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-list@4.2.2#can-list*/
define('can-list@4.2.2#can-list', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-map',
    'can-map/bubble',
    'can-map/map-helpers',
    'can-queues',
    'can-event-queue/map/map',
    'can-observation-recorder',
    'can-cid',
    'can-reflect',
    'can-assign',
    'can-types',
    'can-symbol',
    'can-cid/map/map'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var Map = require('can-map');
    var bubble = require('can-map/bubble');
    var mapHelpers = require('can-map/map-helpers');
    var queues = require('can-queues');
    var canEvent = require('can-event-queue/map/map');
    var ObservationRecorder = require('can-observation-recorder');
    var CID = require('can-cid');
    var canReflect = require('can-reflect');
    var assign = require('can-assign');
    var types = require('can-types');
    var canSymbol = require('can-symbol');
    var CIDMap = require('can-cid/map/map');
    var splice = [].splice, spliceRemovesProps = function () {
            var obj = {
                0: 'a',
                length: 1
            };
            splice.call(obj, 0, 1);
            return !obj[0];
        }();
    var serializeNonTypes = function (MapType, arg, args) {
        if (arg && arg.serialize && !(arg instanceof MapType)) {
            args.push(new MapType(arg.serialize()));
        } else {
            args.push(arg);
        }
    };
    var List = Map.extend({ Map: Map }, {
            setup: function (instances, options) {
                this.length = 0;
                CID(this, '.map');
                this._setupComputedProperties();
                instances = instances === undefined ? [] : canReflect.toArray(instances);
                var teardownMapping;
                if (canReflect.isPromise(instances)) {
                    this.replace(instances);
                } else {
                    teardownMapping = instances.length && mapHelpers.addToMap(instances, this);
                    this.push.apply(this, instances);
                }
                if (teardownMapping) {
                    teardownMapping();
                }
                assign(this, options);
            },
            _triggerChange: function (attr, how, newVal, oldVal) {
                queues.batch.start();
                var index = +attr, patches;
                if (!~('' + attr).indexOf('.') && !isNaN(index)) {
                    if (bubble.isBubbling(this, 'change')) {
                        canEvent.dispatch.call(this, {
                            type: 'change',
                            target: this
                        }, [
                            attr,
                            how,
                            newVal,
                            oldVal
                        ]);
                    }
                    if (how === 'add') {
                        patches = [{
                                insert: newVal,
                                index: index,
                                deleteCount: 0,
                                type: 'splice'
                            }];
                        canEvent.dispatch.call(this, {
                            type: how,
                            patches: patches
                        }, [
                            newVal,
                            index
                        ]);
                        canEvent.dispatch.call(this, 'length', [this.length]);
                        canEvent.dispatch.call(this, 'can.patches', [patches]);
                    } else if (how === 'remove') {
                        patches = [{
                                index: index,
                                deleteCount: oldVal.length,
                                type: 'splice'
                            }];
                        canEvent.dispatch.call(this, {
                            type: how,
                            patches: patches
                        }, [
                            oldVal,
                            index
                        ]);
                        canEvent.dispatch.call(this, 'length', [this.length]);
                        canEvent.dispatch.call(this, 'can.patches', [patches]);
                    } else {
                        canEvent.dispatch.call(this, how, [
                            newVal,
                            index
                        ]);
                    }
                } else {
                    Map.prototype._triggerChange.apply(this, arguments);
                }
                queues.batch.stop();
            },
            __get: function (prop) {
                prop = isNaN(+prop) || prop % 1 ? prop : +prop;
                if (typeof prop === 'number') {
                    ObservationRecorder.add(this, 'can.patches');
                    return this.___get('' + prop);
                } else {
                    return Map.prototype.__get.call(this, prop);
                }
            },
            ___get: function (attr) {
                if (attr) {
                    var computedAttr = this._computedAttrs[attr];
                    if (computedAttr && computedAttr.compute) {
                        return canReflect.getValue(computedAttr.compute);
                    }
                    if (this[attr] && this[attr].isComputed && typeof this.constructor.prototype[attr] === 'function') {
                        return canReflect.getValue(this[attr]);
                    } else {
                        return this[attr];
                    }
                } else {
                    return this;
                }
            },
            __set: function (prop, value, current) {
                prop = isNaN(+prop) || prop % 1 ? prop : +prop;
                if (typeof prop === 'number') {
                    if (prop > this.length - 1) {
                        var newArr = new Array(prop + 1 - this.length);
                        newArr[newArr.length - 1] = value;
                        this.push.apply(this, newArr);
                        return newArr;
                    } else {
                        this.splice(prop, 1, value);
                        return this;
                    }
                }
                return Map.prototype.__set.call(this, '' + prop, value, current);
            },
            ___set: function (attr, val) {
                this[attr] = val;
                if (+attr >= this.length) {
                    this.length = +attr + 1;
                }
            },
            __remove: function (prop, current) {
                if (isNaN(+prop)) {
                    delete this[prop];
                    this._triggerChange(prop, 'remove', undefined, current);
                } else {
                    this.splice(prop, 1);
                }
            },
            _each: function (callback) {
                var data = this.___get();
                for (var i = 0; i < data.length; i++) {
                    callback(data[i], i);
                }
            },
            serialize: function () {
                return canReflect.serialize(this, CIDMap);
            },
            splice: function (index, howMany) {
                var args = canReflect.toArray(arguments), added = [], i, len, listIndex, allSame = args.length > 2;
                index = index || 0;
                for (i = 0, len = args.length - 2; i < len; i++) {
                    listIndex = i + 2;
                    args[listIndex] = this.__type(args[listIndex], listIndex);
                    added.push(args[listIndex]);
                    if (this[i + index] !== args[listIndex]) {
                        allSame = false;
                    }
                }
                if (allSame && this.length <= added.length) {
                    return added;
                }
                if (howMany === undefined) {
                    howMany = args[1] = this.length - index;
                }
                var removed = splice.apply(this, args);
                if (!spliceRemovesProps) {
                    for (i = this.length; i < removed.length + this.length; i++) {
                        delete this[i];
                    }
                }
                queues.batch.start();
                if (howMany > 0) {
                    bubble.removeMany(this, removed);
                    this._triggerChange('' + index, 'remove', undefined, removed);
                }
                if (args.length > 2) {
                    bubble.addMany(this, added);
                    this._triggerChange('' + index, 'add', added, removed);
                }
                queues.batch.stop();
                return removed;
            }
        }), getArgs = function (args) {
            return args[0] && Array.isArray(args[0]) ? args[0] : canReflect.toArray(args);
        };
    canReflect.eachKey({
        push: 'length',
        unshift: 0
    }, function (where, name) {
        var orig = [][name];
        List.prototype[name] = function () {
            var args = [], len = where ? this.length : 0, i = arguments.length, res, val;
            while (i--) {
                val = arguments[i];
                args[i] = bubble.set(this, i, this.__type(val, i));
            }
            res = orig.apply(this, args);
            if (!this.comparator || args.length) {
                this._triggerChange('' + len, 'add', args, undefined);
            }
            return res;
        };
    });
    canReflect.eachKey({
        pop: 'length',
        shift: 0
    }, function (where, name) {
        List.prototype[name] = function () {
            if (!this.length) {
                return undefined;
            }
            var args = getArgs(arguments), len = where && this.length ? this.length - 1 : 0;
            var res = [][name].apply(this, args);
            this._triggerChange('' + len, 'remove', undefined, [res]);
            if (res && res.removeEventListener) {
                bubble.remove(this, res);
            }
            return res;
        };
    });
    assign(List.prototype, {
        indexOf: function (item, fromIndex) {
            ObservationRecorder.add(this, 'length');
            for (var i = fromIndex || 0, len = this.length; i < len; i++) {
                if (this.attr(i) === item) {
                    return i;
                }
            }
            return -1;
        },
        join: function () {
            ObservationRecorder.add(this, 'length');
            return [].join.apply(this, arguments);
        },
        reverse: function () {
            var list = [].reverse.call(canReflect.toArray(this));
            return this.replace(list);
        },
        slice: function () {
            ObservationRecorder.add(this, 'length');
            var temp = Array.prototype.slice.apply(this, arguments);
            return new this.constructor(temp);
        },
        concat: function () {
            var args = [], MapType = this.constructor.Map;
            canReflect.each(arguments, function (arg) {
                if (canReflect.isObservableLike(arg) && canReflect.isListLike(arg) || Array.isArray(arg)) {
                    var arr = canReflect.isObservableLike(arg) && canReflect.isListLike(arg) ? canReflect.toArray(arg) : arg;
                    canReflect.each(arr, function (innerArg) {
                        serializeNonTypes(MapType, innerArg, args);
                    });
                } else {
                    serializeNonTypes(MapType, arg, args);
                }
            });
            return new this.constructor(Array.prototype.concat.apply(canReflect.toArray(this), args));
        },
        forEach: function (cb, thisarg) {
            var item;
            for (var i = 0, len = this.attr('length'); i < len; i++) {
                item = this.attr(i);
                if (item !== undefined && cb.call(thisarg || item, item, i, this) === false) {
                    break;
                }
            }
            return this;
        },
        replace: function (newList) {
            if (canReflect.isPromise(newList)) {
                if (this._promise) {
                    this._promise.__isCurrentPromise = false;
                }
                var promise = this._promise = newList;
                promise.__isCurrentPromise = true;
                var self = this;
                newList.then(function (newList) {
                    if (promise.__isCurrentPromise) {
                        self.replace(newList);
                    }
                });
            } else {
                newList = newList === undefined ? [] : canReflect.toArray(newList);
                this.splice.apply(this, [
                    0,
                    this.length
                ].concat(newList));
            }
            return this;
        },
        filter: function (callback, thisArg) {
            var filteredList = new this.constructor(), self = this, filtered;
            this.forEach(function (item, index, list) {
                filtered = callback.call(thisArg || self, item, index, self);
                if (filtered) {
                    filteredList.push(item);
                }
            });
            return filteredList;
        },
        map: function (callback, thisArg) {
            var filteredList = new List(), self = this;
            this.forEach(function (item, index, list) {
                var mapped = callback.call(thisArg || self, item, index, self);
                filteredList.push(mapped);
            });
            return filteredList;
        },
        sort: function (compareFunction) {
            var sorting = Array.prototype.slice.call(this);
            Array.prototype.sort.call(sorting, compareFunction);
            this.splice.apply(this, [
                0,
                sorting.length
            ].concat(sorting));
            return this;
        }
    });
    var oldType = Map.prototype.__type;
    Map.prototype.__type = function (value, prop) {
        if (typeof value === 'object' && Array.isArray(value)) {
            var cached = mapHelpers.getMapFromObject(value);
            if (cached) {
                return cached;
            }
            return new List(value);
        }
        return oldType.apply(this, arguments);
    };
    var oldSetup = Map.setup;
    Map.setup = function () {
        oldSetup.apply(this, arguments);
        if (!(this.prototype instanceof List)) {
            this.List = Map.List.extend({ Map: this }, {});
        }
    };
    if (!types.DefaultList) {
        types.DefaultList = List;
    }
    canReflect.assignSymbols(List.prototype, {
        'can.isMoreListLikeThanMapLike': true,
        'can.isListLike': true,
        'can.getKeyValue': List.prototype._get,
        'can.setKeyValue': List.prototype._set,
        'can.deleteKeyValue': List.prototype._remove,
        'can.getOwnEnumerableKeys': function () {
            return Object.keys(this._data || {}).concat(this.map(function (val, index) {
                return index;
            }));
        },
        'can.assignDeep': function (source) {
            queues.batch.start();
            canReflect.assignDeepList(this, source);
            queues.batch.stop();
        },
        'can.updateDeep': function (source) {
            queues.batch.start();
            canReflect.updateDeepList(this, source);
            queues.batch.stop();
        },
        'can.unwrap': mapHelpers.reflectUnwrap,
        'can.serialize': mapHelpers.reflectSerialize,
        'can.onKeysAdded': function (handler) {
            this[canSymbol.for('can.onKeyValue')]('add', handler);
        },
        'can.onKeysRemoved': function (handler) {
            this[canSymbol.for('can.onKeyValue')]('remove', handler);
        },
        'can.splice': function (index, deleteCount, insert) {
            this.splice.apply(this, [
                index,
                deleteCount
            ].concat(insert));
        },
        'can.onPatches': function (handler, queue) {
            this[canSymbol.for('can.onKeyValue')]('can.patches', handler, queue);
        },
        'can.offPatches': function (handler, queue) {
            this[canSymbol.for('can.offKeyValue')]('can.patches', handler, queue);
        }
    });
    Map.List = List;
    module.exports = namespace.List = List;
});
/*can@5.31.0#es/can-list*/
define('can@5.31.0#es/can-list', [
    'exports',
    'can-list'
], function (exports, _canList) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canList).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-map-define@4.3.8#can-map-define*/
define('can-map-define@4.3.8#can-map-define', [
    'require',
    'exports',
    'module',
    'can-log/dev/dev',
    'can-assign',
    'can-event-queue/map/map',
    'can-queues',
    'can-map/map-helpers',
    'can-map',
    'can-compute',
    'can-reflect',
    'can-observation-recorder',
    'can-symbol',
    'can-list'
], function (require, exports, module) {
    'use strict';
    var dev = require('can-log/dev/dev');
    var extend = require('can-assign');
    var mapEventsMixin = require('can-event-queue/map/map');
    var queues = require('can-queues');
    var mapHelpers = require('can-map/map-helpers');
    var CanMap = require('can-map');
    var compute = require('can-compute');
    var canReflect = require('can-reflect');
    var ObservationRecorder = require('can-observation-recorder');
    var canSymbol = require('can-symbol');
    require('can-list');
    var define = {};
    var inSetupSymbol = canSymbol.for('can.initializing');
    var hasDefaultForSerialize = function (defaultDefinition) {
        return typeof defaultDefinition === 'object' && 'serialize' in defaultDefinition;
    };
    var getDefaultForSerialize = function (defaultDefinition) {
        var shouldSerialize = true;
        if (hasDefaultForSerialize(defaultDefinition)) {
            shouldSerialize = !!defaultDefinition.serialize;
        }
        return shouldSerialize;
    };
    var keysForDefinition = function (definitions) {
        var keys = [];
        var defaultDefinition = definitions && definitions['*'];
        for (var prop in definitions) {
            var definition = definitions[prop];
            var shouldSerialize = getDefaultForSerialize(defaultDefinition);
            if (typeof definition === 'object' && 'serialize' in definition) {
                shouldSerialize = !!definition.serialize;
            } else if (typeof definition === 'object' && !hasDefaultForSerialize(defaultDefinition)) {
                shouldSerialize = !definition.get;
            }
            if (shouldSerialize) {
                keys.push(prop);
            }
        }
        return keys;
    };
    var getPropDefineBehavior = function (behavior, attr, define) {
        var prop, defaultProp;
        if (define) {
            prop = define[attr];
            defaultProp = define['*'];
            if (prop && prop[behavior] !== undefined) {
                return prop[behavior];
            } else if (defaultProp && defaultProp[behavior] !== undefined) {
                return defaultProp[behavior];
            }
        }
    };
    mapHelpers.define = function (Map, baseDefine) {
        var definitions = Map.prototype.define;
        if (baseDefine) {
            var defines = {};
            mapHelpers.twoLevelDeepExtend(defines, baseDefine);
            mapHelpers.twoLevelDeepExtend(defines, definitions);
            extend(definitions, defines);
        }
        if (process.env.NODE_ENV !== 'production') {
            if (Map.define) {
                dev.warn('The define property should be on the map\'s prototype properties, ' + 'not the static properties.');
            }
        }
        Map.defaultGenerators = {};
        for (var prop in definitions) {
            var type = definitions[prop].type;
            if (typeof type === 'string') {
                if (typeof define.types[type] === 'object') {
                    delete definitions[prop].type;
                    extend(definitions[prop], define.types[type]);
                }
            }
            if ('value' in definitions[prop]) {
                if (typeof definitions[prop].value === 'function') {
                    Map.defaultGenerators[prop] = definitions[prop].value;
                } else {
                    Map.defaults[prop] = definitions[prop].value;
                }
            }
            if (typeof definitions[prop].Value === 'function') {
                (function (Constructor) {
                    Map.defaultGenerators[prop] = function () {
                        return new Constructor();
                    };
                }(definitions[prop].Value));
            }
        }
    };
    var oldSetupDefaults = CanMap.prototype._setupDefaults;
    CanMap.prototype._setupDefaults = function (obj) {
        var defaults = extend({}, oldSetupDefaults.call(this)), propsCommittedToAttr = {}, Map = this.constructor, originalGet = this._get;
        this._get = function (originalProp) {
            var prop = originalProp.indexOf('.') !== -1 ? originalProp.substr(0, originalProp.indexOf('.')) : originalProp;
            if (prop in defaults && !(prop in propsCommittedToAttr)) {
                this.attr(prop, defaults[prop]);
                propsCommittedToAttr[prop] = true;
            }
            return originalGet.apply(this, arguments);
        };
        for (var prop in Map.defaultGenerators) {
            if (!obj || !(prop in obj)) {
                defaults[prop] = Map.defaultGenerators[prop].call(this);
            }
        }
        delete this._get;
        return defaults;
    };
    var proto = CanMap.prototype, oldSet = proto.__set;
    proto.__set = function (prop, value, current, success, error) {
        var asyncTimer;
        var self = this;
        var errorCallback = function (errors) {
                if (process.env.NODE_ENV !== 'production') {
                    clearTimeout(asyncTimer);
                }
                var stub = error && error.call(self, errors);
                if (stub !== false) {
                    mapEventsMixin.dispatch.call(self, 'error', [
                        prop,
                        errors
                    ], true);
                }
                return false;
            }, setter = getPropDefineBehavior('set', prop, this.define), getter = getPropDefineBehavior('get', prop, this.define);
        if (setter) {
            queues.batch.start();
            var setterCalled = false, setValue = setter.call(this, value, function (value) {
                    if (getter) {
                        self[prop](value);
                    } else {
                        oldSet.call(self, prop, value, current, success, errorCallback);
                    }
                    setterCalled = true;
                    if (process.env.NODE_ENV !== 'production') {
                        clearTimeout(asyncTimer);
                    }
                }, errorCallback, getter ? this._computedAttrs[prop].compute.computeInstance.lastSetValue.get() : current);
            if (getter) {
                if (setValue !== undefined && !setterCalled && setter.length >= 1) {
                    this._computedAttrs[prop].compute(setValue);
                }
                queues.batch.stop();
                return;
            } else if (setValue === undefined && !setterCalled && setter.length > 1) {
                if (process.env.NODE_ENV !== 'production') {
                    asyncTimer = setTimeout(function () {
                        dev.warn('can/map/define: Setter "' + prop + '" did not return a value or call the setter callback.');
                    }, dev.warnTimeout);
                }
                queues.batch.stop();
                return;
            } else {
                if (!setterCalled) {
                    oldSet.call(self, prop, setter.length === 0 && setValue === undefined ? value : setValue, current, success, errorCallback);
                }
                queues.batch.stop();
                return this;
            }
        } else {
            oldSet.call(self, prop, value, current, success, errorCallback);
        }
        return this;
    };
    define.types = {
        'date': function (str) {
            var type = typeof str;
            if (type === 'string') {
                str = Date.parse(str);
                return isNaN(str) ? null : new Date(str);
            } else if (type === 'number') {
                return new Date(str);
            } else {
                return str;
            }
        },
        'number': function (val) {
            if (val == null) {
                return val;
            }
            return +val;
        },
        'boolean': function (val) {
            if (val == null) {
                return val;
            }
            if (val === 'false' || val === '0' || !val) {
                return false;
            }
            return true;
        },
        'htmlbool': function (val) {
            return typeof val === 'string' || !!val;
        },
        '*': function (val) {
            return val;
        },
        'string': function (val) {
            if (val == null) {
                return val;
            }
            return '' + val;
        },
        'compute': {
            set: function (newValue, setVal, setErr, oldValue) {
                if (newValue && newValue.isComputed) {
                    return newValue;
                }
                if (oldValue && oldValue.isComputed) {
                    oldValue(newValue);
                    return oldValue;
                }
                return newValue;
            },
            get: function (value) {
                return value && value.isComputed ? value() : value;
            }
        }
    };
    var oldType = proto.__type;
    proto.__type = function (value, prop) {
        var type = getPropDefineBehavior('type', prop, this.define), Type = getPropDefineBehavior('Type', prop, this.define), newValue = value;
        if (typeof type === 'string') {
            type = define.types[type];
        }
        if (type || Type) {
            if (type) {
                newValue = type.call(this, newValue, prop);
            }
            if (Type && newValue != null && !(newValue instanceof Type)) {
                newValue = new Type(newValue);
            }
            return newValue;
        } else if (canReflect.isPlainObject(newValue) && newValue.define) {
            newValue = CanMap.extend(newValue);
            newValue = new newValue();
        }
        return oldType.call(this, newValue, prop);
    };
    var oldRemove = proto.__remove;
    proto.__remove = function (prop, current) {
        var remove = getPropDefineBehavior('remove', prop, this.define), res;
        if (remove) {
            queues.batch.start();
            res = remove.call(this, current);
            if (res === false) {
                queues.batch.stop();
                return;
            } else {
                res = oldRemove.call(this, prop, current);
                queues.batch.stop();
                return res;
            }
        }
        return oldRemove.call(this, prop, current);
    };
    var oldSetupComputes = proto._setupComputedProperties;
    proto._setupComputedProperties = function () {
        oldSetupComputes.apply(this, arguments);
        for (var attr in this.define) {
            var def = this.define[attr], get = def.get;
            if (get) {
                mapHelpers.addComputedAttr(this, attr, compute.async(undefined, get, this));
            }
        }
    };
    var oldSingleSerialize = proto.___serialize;
    var serializeProp = function (map, attr, val) {
        var serializer = attr === '*' ? false : getPropDefineBehavior('serialize', attr, map.define);
        if (serializer === undefined) {
            return oldSingleSerialize.call(map, attr, val);
        } else if (serializer !== false) {
            return typeof serializer === 'function' ? serializer.call(map, val, attr) : oldSingleSerialize.call(map, attr, val);
        }
    };
    proto.___serialize = function (name, val) {
        return serializeProp(this, name, val);
    };
    var oldSerialize = proto.serialize;
    proto.serialize = function (property) {
        var serialized = oldSerialize.apply(this, arguments);
        if (property) {
            return serialized;
        }
        var serializer, val;
        for (var attr in this.define) {
            if (!(attr in serialized)) {
                serializer = this.define && (this.define[attr] && this.define[attr].serialize || this.define['*'] && this.define['*'].serialize);
                if (serializer) {
                    val = serializeProp(this, attr, this.attr(attr));
                    if (val !== undefined) {
                        serialized[attr] = val;
                    }
                }
            }
        }
        return serialized;
    };
    canReflect.assignSymbols(proto, {
        'can.hasKey': function (key) {
            var defined = this.define && key in this.define;
            var dataExists = this._data && key in this._data;
            var propExists = key in this;
            return defined || dataExists || propExists;
        },
        'can.getOwnEnumerableKeys': function () {
            if (!this[inSetupSymbol]) {
                ObservationRecorder.add(this, '__keys');
            }
            var definedKeys = keysForDefinition(this.define);
            var dataKeys = Object.keys(this._data);
            var shouldSerialize = getDefaultForSerialize(this.define && this.define['*']);
            var enumerable = this.constructor.enumerable;
            dataKeys = dataKeys.filter(function (key) {
                return enumerable ? shouldSerialize && enumerable[key] !== false : shouldSerialize;
            });
            var i, newKey;
            for (i = 0; i < dataKeys.length; i++) {
                newKey = dataKeys[i];
                if (definedKeys.indexOf(newKey) < 0 && (!this.define || !this.define[newKey])) {
                    definedKeys.push(dataKeys[i]);
                }
            }
            return definedKeys;
        }
    });
    module.exports = define;
});
/*can@5.31.0#es/can-map-define*/
define('can@5.31.0#es/can-map-define', [
    'exports',
    'can-map-define'
], function (exports, _canMapDefine) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canMapDefine).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can-set-legacy@1.0.1#can-set-legacy*/
define('can-set-legacy@1.0.1#can-set-legacy', [
    'require',
    'exports',
    'module',
    'can-query-logic',
    'can-reflect',
    'can-key/transform/transform',
    'can-key/delete/delete',
    'can-key/get/get',
    'can-query-logic/src/helpers',
    'can-query-logic/src/types/make-enum',
    'can-query-logic/src/set'
], function (require, exports, module) {
    var Query = require('can-query-logic');
    var canReflect = require('can-reflect');
    var transform = require('can-key/transform/transform');
    var deleteKey = require('can-key/delete/delete');
    var getKey = require('can-key/get/get');
    var helpers = require('can-query-logic/src/helpers');
    var makeEnum = require('can-query-logic/src/types/make-enum');
    var SET = require('can-query-logic/src/set');
    var IsBoolean = function () {
    };
    makeEnum(IsBoolean, [
        true,
        false
    ], function (value) {
        if (value === 'true') {
            return true;
        } else if (value === 'false') {
            return false;
        } else {
            return value;
        }
    });
    function hasKey(obj, keys, parent, parentKey) {
        if (obj && typeof obj === 'object') {
            for (var key in obj) {
                if (keys[key]) {
                    if (typeof keys[key] === 'function') {
                        parent[parentKey] = keys[key](obj);
                    } else {
                        return true;
                    }
                } else {
                    if (hasKey(obj[key], keys, obj, key)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    function convertToJSONAPISort(sortPropValue) {
        var parts = sortPropValue.split(' ');
        var isDesc = (parts[1] || '').toLowerCase() === 'desc';
        return isDesc ? '-' + parts[0] : parts[0];
    }
    function convertToLegacySort(value) {
        var result = helpers.sortData(value);
        return result.desc ? '-' + result.prop : result.prop;
    }
    var defaultAlgebra;
    var set = {
        UNIVERSAL: SET.UNIVERSAL,
        EMPTY: SET.EMPTY,
        UNDEFINABLE: SET.UNDEFINABLE,
        UNKNOWABLE: SET.UNKNOWABLE,
        Algebra: function () {
            var mutators = {
                schema: [],
                hydrate: [],
                serialize: []
            };
            canReflect.eachIndex(arguments, function (value) {
                for (var prop in value) {
                    if (mutators[prop]) {
                        mutators[prop].push(value[prop]);
                    } else {
                        throw new Error('can-query-logic: This type of configuration is not supported. Please use can-query-logic directly.');
                    }
                }
            });
            var obj = canReflect.assignSymbols({}, {
                'can.getSchema': function () {
                    var schema = {
                        kind: 'record',
                        identity: [],
                        keys: {}
                    };
                    mutators.schema.forEach(function (updateSchema) {
                        updateSchema(schema);
                    });
                    if (!schema.identity.length) {
                        schema.identity.push('id');
                    }
                    return schema;
                }
            });
            return new Query(obj, {
                toQuery: function (data) {
                    return mutators.hydrate.reduce(function (last, hydrator) {
                        return hydrator(last);
                    }, { filter: data });
                },
                toParams: function (data) {
                    if (SET.isSpecial(data)) {
                        return data;
                    }
                    if (Array.isArray(data.filter)) {
                        return SET.UNDEFINABLE;
                    }
                    var filter = data.filter || {};
                    if (hasKey(filter, {
                            '$ne': true,
                            '$in': function (val) {
                                return val.$in;
                            }
                        })) {
                        return SET.UNDEFINABLE;
                    }
                    var out = mutators.serialize.reduce(function (last, serializer) {
                        return serializer(last);
                    }, data);
                    filter = out.filter || {};
                    delete out.filter;
                    return canReflect.assign(out, filter);
                }
            });
        },
        Translate: function (clause, prop) {
            if (clause !== 'where') {
                throw new Error('can-query-logic/compat.Translate is only able to translate the where clause');
            }
            return {
                hydrate: function (raw) {
                    var clone = canReflect.serialize(raw);
                    var value = clone.filter[prop];
                    delete clone.filter[prop];
                    if (value) {
                        canReflect.assign(clone.filter, value);
                    }
                    return clone;
                },
                serialize: function (query) {
                    if (query.filter) {
                        var clone = canReflect.serialize(query);
                        var filter = query.filter;
                        clone.filter = {};
                        clone.filter[prop] = filter;
                        return clone;
                    } else {
                        return query;
                    }
                }
            };
        },
        props: {
            boolean: function (prop) {
                return {
                    schema: function (schema) {
                        schema.keys[prop] = IsBoolean;
                    }
                };
            },
            dotNotation: function () {
                return {};
            },
            enum: function (property, propertyValues) {
                function Enum() {
                }
                makeEnum(Enum, propertyValues);
                return {
                    schema: function (schema) {
                        schema.keys[property] = Enum;
                    }
                };
            },
            id: function (id) {
                return {
                    'schema': function (schema) {
                        schema.identity.push(id);
                    }
                };
            },
            offsetLimit: function (offset, limit) {
                offset = offset || 'offset';
                limit = limit || 'limit';
                return {
                    hydrate: function (raw) {
                        var clone = canReflect.serialize(raw);
                        if (offset in clone.filter || limit in clone.filter) {
                            clone.page = {};
                        }
                        if (offset in clone.filter) {
                            clone.page.start = parseInt(clone.filter[offset], 10);
                            delete clone.filter[offset];
                        }
                        if (limit in clone.filter) {
                            clone.page.end = (clone.page.start || 0) + parseInt(clone.filter[limit], 10) - 1;
                            delete clone.filter[limit];
                        }
                        return clone;
                    },
                    serialize: function (raw) {
                        var clone = canReflect.serialize(raw);
                        if (clone.page) {
                            clone[offset] = clone.page.start;
                            clone[limit] = clone.page.end - clone.page.start + 1;
                            delete clone.page;
                        }
                        return clone;
                    }
                };
            },
            rangeInclusive: function (start, end) {
                var hydrateTransfomer = {};
                hydrateTransfomer['filter.' + start] = 'page.start';
                hydrateTransfomer['filter.' + end] = 'page.end';
                var serializeTransformer = {
                    'page.start': start,
                    'page.end': end
                };
                return {
                    hydrate: function (raw) {
                        var res = transform(raw, hydrateTransfomer);
                        if (res.page) {
                            if (res.page.start) {
                                res.page.start = parseInt(res.page.start, 10);
                            }
                            if (res.page.end) {
                                res.page.end = parseInt(res.page.end, 10);
                            }
                        }
                        return res;
                    },
                    serialize: function (raw) {
                        return transform(raw, serializeTransformer);
                    }
                };
            },
            ignore: function (prop) {
                return {
                    hydrate: function (raw) {
                        var clone = canReflect.serialize(raw);
                        delete clone.filter[prop];
                        return clone;
                    }
                };
            },
            sort: function (prop, sortFunc) {
                if (!prop) {
                    prop = 'sort';
                }
                if (sortFunc) {
                    throw new Error('can-query-logic/compat.sort - sortFunc is not supported');
                }
                return {
                    hydrate: function (raw) {
                        var clone = canReflect.serialize(raw);
                        var sort = getKey(clone, 'filter.' + prop);
                        if (sort !== undefined) {
                            deleteKey(clone, 'filter.' + prop);
                            clone.sort = convertToJSONAPISort(sort);
                        }
                        return clone;
                    },
                    serialize: function (raw) {
                        var clone = canReflect.serialize(raw);
                        var sort = clone.sort;
                        if (sort !== undefined) {
                            delete clone.sort;
                            clone[prop] = convertToLegacySort(sort);
                        }
                        return clone;
                    }
                };
            }
        }
    };
    function makeAlgebra(algebra) {
        if (!algebra) {
            return defaultAlgebra;
        } else if (!(algebra instanceof Query)) {
            return new set.Algebra(algebra);
        }
        return algebra;
    }
    function makeFromTwoQueries(prop) {
        set[prop] = function (a, b, algebra) {
            return makeAlgebra(algebra)[prop](a, b);
        };
    }
    makeFromTwoQueries('difference');
    makeFromTwoQueries('union');
    makeFromTwoQueries('intersection');
    makeFromTwoQueries('isSubset');
    makeFromTwoQueries('isEqual');
    makeFromTwoQueries('isProperSubset');
    set.count = function (query, algebra) {
        return makeAlgebra(algebra).count(query);
    };
    set.comparators = set.props;
    defaultAlgebra = new set.Algebra();
    module.exports = set;
});
/*can@5.31.0#es/can-set-legacy*/
define('can@5.31.0#es/can-set-legacy', [
    'exports',
    'can-set-legacy'
], function (exports, _canSetLegacy) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canSetLegacy).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#legacy*/
define('can@5.31.0#legacy', [
    'exports',
    './es/can-compute',
    './es/can-map',
    './es/can-list',
    './es/can-map-define',
    './es/can-set-legacy'
], function (exports, _canCompute, _canMap, _canList, _canMapDefine, _canSetLegacy) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.defineProperty(exports, 'compute', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canCompute).default;
        }
    });
    Object.defineProperty(exports, 'CanMap', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canMap).default;
        }
    });
    Object.defineProperty(exports, 'CanList', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canList).default;
        }
    });
    Object.defineProperty(exports, 'canMapDefine', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canMapDefine).default;
        }
    });
    Object.defineProperty(exports, 'set', {
        enumerable: true,
        get: function () {
            return _interopRequireDefault(_canSetLegacy).default;
        }
    });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
});
/*can@5.31.0#can*/
define('can@5.31.0#can', [
    'exports',
    './core.js',
    './ecosystem.js',
    './legacy.js'
], function (exports, _core, _ecosystem, _legacy) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.keys(_core).forEach(function (key) {
        if (key === 'default' || key === '__esModule')
            return;
        Object.defineProperty(exports, key, {
            enumerable: true,
            get: function () {
                return _core[key];
            }
        });
    });
    Object.keys(_ecosystem).forEach(function (key) {
        if (key === 'default' || key === '__esModule')
            return;
        Object.defineProperty(exports, key, {
            enumerable: true,
            get: function () {
                return _ecosystem[key];
            }
        });
    });
    Object.keys(_legacy).forEach(function (key) {
        if (key === 'default' || key === '__esModule')
            return;
        Object.defineProperty(exports, key, {
            enumerable: true,
            get: function () {
                return _legacy[key];
            }
        });
    });
});
/*shuttle-canstrap@1.2.1#infrastructure/options*/
define('shuttle-canstrap@1.2.1#infrastructure/options', [
    'exports',
    'can'
], function (exports, _can) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Options = exports.FormGroupOptions = exports.FormOptions = exports.TableOptions = exports.ButtonOptions = exports.RemoveButtonOptions = exports.RemoveButtonI18NOptions = exports.IconNameOptions = exports.DateTimeOptions = undefined;
    var DateTimeOptions = exports.DateTimeOptions = _can.DefineMap.extend({
        datetimeClass: {
            type: 'string',
            default: 'datetimepicker-input'
        },
        format: {
            type: 'string',
            default: 'DD/MM/YYYY HH:mm'
        },
        dateFormat: {
            type: 'string',
            default: 'DD/MM/YYYY'
        },
        timeFormat: {
            type: 'string',
            default: 'HH:mm'
        },
        showFormat: {
            type: 'boolean',
            default: true
        }
    });
    var IconNameOptions = exports.IconNameOptions = _can.DefineMap.extend({ iconNameClass: 'string' });
    var RemoveButtonI18NOptions = exports.RemoveButtonI18NOptions = _can.DefineMap.extend({
        removeItemConfirmation: {
            type: 'string',
            default: 'removeItemConfirmation'
        },
        removeItemConfirmationNamed: {
            type: 'string',
            default: 'removeItemConfirmationNamed'
        }
    });
    var RemoveButtonOptions = exports.RemoveButtonOptions = IconNameOptions.extend({
        confirmation: { type: '*' },
        i18n: { Default: RemoveButtonI18NOptions }
    });
    var ButtonOptions = exports.ButtonOptions = _can.DefineMap.extend({
        back: {
            Type: IconNameOptions,
            default: function _default() {
                return { iconNameClass: 'fa-chevron-left' };
            }
        },
        close: {
            Type: IconNameOptions,
            default: function _default() {
                return { iconNameClass: 'fa-times-circle' };
            }
        },
        refresh: {
            Type: IconNameOptions,
            default: function _default() {
                return { iconNameClass: 'fa-sync' };
            }
        },
        remove: {
            Type: RemoveButtonOptions,
            default: function _default() {
                return { iconNameClass: 'fa-times' };
            }
        },
        submit: {
            Type: IconNameOptions,
            default: function _default() {
                return { iconNameClass: 'fa-arrow-circle-right' };
            }
        }
    });
    var TableOptions = exports.TableOptions = _can.DefineMap.extend({
        containerClass: {
            type: 'string',
            default: ''
        },
        tableClass: {
            type: 'string',
            default: ''
        },
        buttonClass: {
            type: 'string',
            default: ''
        }
    });
    var FormOptions = exports.FormOptions = _can.DefineMap.extend({ elementClass: { type: 'string' } });
    var FormGroupOptions = exports.FormGroupOptions = _can.DefineMap.extend({
        elementClass: {
            type: 'string',
            default: 'form-group'
        }
    });
    var Options = exports.Options = _can.DefineMap.extend({
        iconClass: {
            type: 'string',
            default: 'fas'
        },
        iconSpacingClass: {
            type: 'string',
            default: 'pr-2'
        },
        button: { Default: ButtonOptions },
        form: { Default: FormOptions },
        formGroup: { Default: FormOptions },
        table: { Default: TableOptions },
        datetime: { Default: DateTimeOptions }
    });
    var options = new Options({});
    exports.default = options;
});
/*shuttle-canstrap@1.2.1#infrastructure/security*/
define('shuttle-canstrap@1.2.1#infrastructure/security', ['exports'], function (exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _default = {
        hasPermission: function hasPermission(permission) {
            return true;
        }
    };
    var security = {
        _adapter: _default,
        wire: function wire(adapter) {
            if (!adapter) {
                this._adapter = _default;
                return;
            }
            if (!adapter.hasPermission || typeof adapter.hasPermission !== 'function') {
                throw new Error('The `security` adapter has to have a `hasPermission` function that returns whether the given permission is accessible (e.g. `adapter.hasPermission(permissionName)`).');
            }
            this._adapter = adapter;
        },
        hasPermission: function hasPermission(permission) {
            return this._adapter.hasPermission(permission);
        }
    };
    exports.default = security;
});
/*shuttle-guard@1.0.0#shuttle-guard*/
define('shuttle-guard@1.0.0#shuttle-guard', ['exports'], function (exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var guard = {
        againstUndefined: function againstUndefined(value, name) {
            if (value) {
                return;
            }
            throw new Error('\'' + name + '\' may not be undefined/null.');
        },
        againstMissingFunction: function againstMissingFunction(f, name) {
            this.againstUndefined(f, name);
            if (typeof f === 'function') {
                return;
            }
            throw new Error('\'' + name + '\' is not a function.');
        }
    };
    exports.default = guard;
});
/*shuttle-canstrap@1.2.1#infrastructure/click*/
define('shuttle-canstrap@1.2.1#infrastructure/click', [
    'exports',
    'shuttle-guard'
], function (exports, _shuttleGuard) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _shuttleGuard2 = _interopRequireDefault(_shuttleGuard);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var click = {
        on: function on(viewModel, ev) {
            _shuttleGuard2.default.againstUndefined(viewModel, 'viewModel');
            var click = viewModel.click;
            if (!click) {
                console.log('The following view model has no \'click\' method:');
                console.log(viewModel);
                throw new Error('No \'click\' method has been defined.');
                return;
            }
            var clickHandler;
            var context = viewModel.context || viewModel;
            if (typeof click === 'function') {
                clickHandler = click;
            } else {
                clickHandler = context[click];
                if (!clickHandler) {
                    throw new Error('The context does not contain a method with name \'' + click + '\'.');
                }
            }
            if (!!ev) {
                if (!ev.stopPropagation || typeof ev.stopPropagation !== 'function' || !ev.preventDefault || typeof ev.preventDefault !== 'function') {
                    throw new Error('The event argument \'ev\' passed to \'click\' does not appear to be an event object.');
                }
                ev.stopPropagation();
                ev.preventDefault();
            }
            return clickHandler.call(context, ev) || false;
        }
    };
    exports.default = click;
});
/*shuttle-canstrap@1.2.1#infrastructure/i18n*/
define('shuttle-canstrap@1.2.1#infrastructure/i18n', ['exports'], function (exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _default = {
        value: function value(key, options) {
            return key;
        }
    };
    var i18n = {
        _adapter: _default,
        wire: function wire(adapter) {
            if (!adapter) {
                this._adapter = _default;
                return;
            }
            if (!adapter.value || typeof adapter.value !== 'function') {
                throw new Error('The `i18n` adapter has to have a `value` function that returns the value for a given `key` and optional `options` (e.g. `adapter.value(key, options)`).');
            }
            this._adapter = adapter;
        },
        value: function value(key, options) {
            return this._adapter.value(key, options);
        }
    };
    exports.default = i18n;
});
/*can-view-import@4.2.2#can-view-import*/
define('can-view-import@4.2.2#can-view-import', [
    'require',
    'exports',
    'module',
    'can-assign',
    'can-dom-data',
    'can-symbol',
    'can-globals/document/document',
    'can-child-nodes',
    'can-import-module',
    'can-dom-mutate',
    'can-dom-mutate/node',
    'can-view-nodelist',
    'can-view-callbacks',
    'can-log/',
    'can-log/dev/dev'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var assign = require('can-assign');
        var canData = require('can-dom-data');
        var canSymbol = require('can-symbol');
        var DOCUMENT = require('can-globals/document/document');
        var getChildNodes = require('can-child-nodes');
        var importer = require('can-import-module');
        var domMutate = require('can-dom-mutate');
        var domMutateNode = require('can-dom-mutate/node');
        var nodeLists = require('can-view-nodelist');
        var viewCallbacks = require('can-view-callbacks');
        var tag = viewCallbacks.tag;
        var canLog = require('can-log/');
        var dev = require('can-log/dev/dev');
        function setViewModel(element, viewModel) {
            element[canSymbol.for('can.viewModel')] = viewModel;
        }
        function processImport(el, tagData) {
            var moduleName = el.getAttribute('from');
            var templateModule = tagData.scope.get('scope.helpers.module');
            var parentName = templateModule ? templateModule.id : undefined;
            if (!moduleName) {
                return Promise.reject('No module name provided');
            }
            var importPromise = importer(moduleName, parentName);
            importPromise.catch(function (err) {
                canLog.error(err);
            });
            setViewModel(el, importPromise);
            canData.set(el, 'scope', importPromise);
            var scope = tagData.scope.add(importPromise, { notContext: true });
            var handOffTag = el.getAttribute('can-tag');
            if (handOffTag) {
                var callback = tag(handOffTag);
                if (!callback || callback === viewCallbacks.defaultCallback) {
                    dev.error(new Error('The tag \'' + handOffTag + '\' has not been properly registered.'));
                } else {
                    canData.set(el, 'preventDataBindings', true);
                    callback(el, assign(tagData, { scope: scope }));
                    canData.set(el, 'preventDataBindings', false);
                    setViewModel(el, importPromise);
                    canData.set(el, 'scope', importPromise);
                }
            } else {
                var nodeList = nodeLists.register([], undefined, tagData.parentNodeList || true, false);
                nodeList.expression = '<' + this.tagName + '>';
                var frag = tagData.subtemplate ? tagData.subtemplate(scope, tagData.options, nodeList) : DOCUMENT().createDocumentFragment();
                var removalDisposal = domMutate.onNodeRemoval(el, function () {
                    var doc = el.ownerDocument;
                    var ownerNode = doc.contains ? doc : doc.documentElement;
                    if (!ownerNode || ownerNode.contains(el) === false) {
                        removalDisposal();
                        nodeLists.unregister(nodeList);
                    }
                });
                domMutateNode.appendChild.call(el, frag);
                nodeLists.update(nodeList, getChildNodes(el));
            }
        }
        [
            'can-import',
            'can-dynamic-import'
        ].forEach(function (tagName) {
            tag(tagName, processImport.bind({ tagName: tagName }));
        });
    }(function () {
        return this;
    }(), require, exports, module));
});
/*steal-stache@4.1.5#add-bundles*/
define('steal-stache@4.1.5#add-bundles', [
    'require',
    'exports',
    'module',
    '@loader'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        var loader = require('@loader');
        module.exports = function (dynamicImports, parentName) {
            if (!dynamicImports.length) {
                return Promise.resolve();
            }
            var localLoader = loader.localLoader || loader;
            var bundle = localLoader.bundle;
            if (!bundle) {
                bundle = localLoader.bundle = [];
            }
            var bundleNormalizes = [];
            dynamicImports.forEach(function (moduleName) {
                var bundleNormalize = loader.normalize(moduleName, parentName).then(function (moduleName) {
                    if (!~bundle.indexOf(moduleName)) {
                        bundle.push(moduleName);
                    }
                });
                bundleNormalizes.push(bundleNormalize);
            });
            return Promise.all(bundleNormalizes);
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*steal-config-utils@1.0.0#import-specifiers*/
define('steal-config-utils@1.0.0#import-specifiers', function (require, exports, module) {
    function getFromAST(ast) {
        var out = Object.create(null);
        ast.importDeclarations.forEach(function (imp) {
            out[imp.specifier] = {
                start: {
                    line: imp.loc.line,
                    column: 1
                }
            };
        });
        return out;
    }
    function addImportSpecifiers(load, ast) {
        var map = getFromAST(ast);
        load.metadata.importSpecifiers = map;
    }
    exports.getFromAST = getFromAST;
    exports.addImportSpecifiers = addImportSpecifiers;
});
/*steal-stache@4.1.5#steal-stache*/
define('steal-stache@4.1.5#steal-stache', [
    'require',
    'exports',
    'module',
    'can-stache-ast',
    './add-bundles',
    '@loader',
    'steal-config-utils/import-specifiers'
], function (require, exports, module) {
    'format cjs';
    var parse = require('can-stache-ast').parse;
    var addBundles = require('./add-bundles');
    var loader = require('@loader');
    var addImportSpecifiers = require('steal-config-utils/import-specifiers').addImportSpecifiers;
    function template(imports, intermediate, filename) {
        imports = JSON.stringify(imports);
        intermediate = JSON.stringify(intermediate);
        return 'define(' + imports + ',function(module, assign, stache, mustacheCore){ \n' + (filename ? '\tvar renderer = stache(' + JSON.stringify(filename) + ', ' + intermediate + ');\n' : '\tvar renderer = stache(' + intermediate + ');\n') + '\treturn function(scope, options, nodeList){\n' + '\t\tvar moduleOptions = assign({}, options);\n' + '\t\tif(moduleOptions.helpers) {\n' + '\t\t\tmoduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);\n' + '\t\t} else {\n' + '\t\t\tmoduleOptions.module = module;\n' + '\t\t}\n' + '\t\treturn renderer(scope, moduleOptions, nodeList);\n' + '\t};\n' + '});';
    }
    function getFilename(name) {
        var hash = name.indexOf('#');
        var bang = name.indexOf('!');
        return name.slice(hash < bang ? hash + 1 : 0, bang);
    }
    function translate(load) {
        var filename;
        filename = getFilename(load.name);
        var ast = parse(filename, load.source);
        var commonDependencies = Promise.all([
            this.normalize('can-view-import', module.id),
            this.normalize('can-stache-bindings', module.id)
        ]);
        var localLoader = loader.localLoader || loader;
        if (localLoader.slimConfig) {
            localLoader.slimConfig.needsDynamicLoader = true;
            var push = Array.prototype.push;
            var toMap = localLoader.slimConfig.toMap;
            push.apply(toMap, ast.imports);
            push.apply(toMap, ast.dynamicImports);
        }
        addImportSpecifiers(load, ast);
        return Promise.all([
            addBundles(ast.dynamicImports, load.name),
            commonDependencies
        ]).then(function (results) {
            var imports = results[1];
            ast.imports.unshift.apply(ast.imports, imports);
            ast.imports.unshift('can-stache/src/mustache_core');
            ast.imports.unshift('can-stache');
            ast.imports.unshift('can-assign');
            ast.imports.unshift('module');
            return template(ast.imports, ast.intermediate, filename);
        });
    }
    module.exports = { translate: translate };
});
/*shuttle-canstrap@1.2.1#alerts/alerts.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#alerts/alerts.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('alerts/alerts.stache', [
        {
            'tokenType': 'special',
            'args': [
                '#for(alert of alerts.messages)',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'alert alert-',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'alert.type',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' alert-dismissible',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'alert',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'button',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'close',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-label',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'Close',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-label',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-dismiss',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'alert',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-dismiss',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-label',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'Close',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-label',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'scope.vm.alerts.remove(alert)',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'button',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '&times;',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'button',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                6
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'alert.message',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/for',
                9
            ]
        },
        {
            'tokenType': 'done',
            'args': [9]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#alerts/alerts*/
define('shuttle-canstrap@1.2.1#alerts/alerts', [
    'exports',
    'can',
    './alerts.stache!',
    'can-stache/'
], function (exports, _can, _alerts, _canStache) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = exports.Alerts = exports.MessageList = exports.MessageMap = undefined;
    var _alerts2 = _interopRequireDefault(_alerts);
    var _canStache2 = _interopRequireDefault(_canStache);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var MessageMap = exports.MessageMap = _can.DefineMap.extend({
        message: { type: 'any' },
        type: { type: 'string' },
        mode: { type: 'string' },
        key: { type: 'string' },
        name: { type: 'string' },
        expiryDate: { type: 'date' }
    });
    var MessageList = exports.MessageList = _can.DefineList.extend({ '#': MessageMap });
    var Alerts = exports.Alerts = _can.DefineMap.extend({
        _key: {
            type: 'number',
            default: 1
        },
        messages: { Default: MessageList },
        add: function add(options) {
            if (!options || !options.message) {
                return;
            }
            if (options.key || options.name) {
                this.remove(options);
            }
            this._push(options);
        },
        clear: function clear() {
            this.messages = new _can.DefineList();
        },
        remove: function remove(options) {
            if (!options || !options.key && !options.name && !options.type) {
                return;
            }
            this.messages = this.messages.filter(function (item) {
                var keep = true;
                if (options.key) {
                    keep = item.key !== options.key;
                } else {
                    if (options.name) {
                        keep = item.name !== options.name;
                    } else {
                        if (options.type) {
                            keep = (item.type || 'info') !== options.type;
                        }
                    }
                }
                return keep;
            });
        },
        _push: function _push(options, mode) {
            var key = this._key + 1;
            var self = this;
            var expiryDate = new Date();
            if (!options || !options.message) {
                return;
            }
            var type = options.type || 'info';
            expiryDate.setSeconds(expiryDate.getSeconds() + 10);
            var message = new MessageMap({
                message: _canStache2.default.safeString(options.message),
                type: type,
                mode: mode,
                key: key,
                name: options.name,
                expiryDate: expiryDate
            });
            this.messages.push(message);
            this._key = key;
        }
    });
    var ViewModel = exports.ViewModel = _can.DefineMap.extend({
        alerts: { Default: Alerts },
        init: function init() {
            this._removeExpiredAlerts();
        },
        _removeExpiredAlerts: function _removeExpiredAlerts() {
            var self = this;
            var date = new Date();
            if (!this.alerts || !this.alerts.remove) {
                return;
            }
            _can.Reflect.each(this.alerts.messages, function (item) {
                if (item.expiryDate && item.expiryDate < date) {
                    self.alerts.remove({ key: item.key });
                }
            });
            setTimeout(function () {
                self._removeExpiredAlerts();
            }, 500);
        }
    });
    exports.default = _can.Component.extend({
        tag: 'cs-alerts',
        view: _alerts2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.2.1#autocomplete/autocomplete.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#autocomplete/autocomplete.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('autocomplete/autocomplete.stache', [
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value:bind',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value:bind',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:input',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'search(scope.element)',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:input',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form-control dropdown-toggle ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'elementClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-toggle',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dropdown',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-toggle',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'placeholder',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-haspopup',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-haspopup',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dropdown-menu',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-expanded',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'false',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-expanded',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if searchPromise.isResolved',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(searchPromise.value.length)',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                6
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#for(entry of searchPromise.value)',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dropdown-item',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'select(entry)',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                9
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'scope.vm.getText(entry)',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/for',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                11
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'else',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                13
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dropdown-item',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                14
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'emptyText',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                15
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                16
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'else',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                17
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                18
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                18
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dropdown-item',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                19
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'loadingText',
                19
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                19
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                20
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                21
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                22
            ]
        },
        {
            'tokenType': 'done',
            'args': [23]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*jquery@3.4.1#dist/jquery*/
(function (global, factory) {
    'use strict';
    if (typeof module === 'object' && typeof module.exports === 'object') {
        module.exports = global.document ? factory(global, true) : function (w) {
            if (!w.document) {
                throw new Error('jQuery requires a window with a document');
            }
            return factory(w);
        };
    } else {
        factory(global);
    }
}(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {
    'use strict';
    var arr = [];
    var document = window.document;
    var getProto = Object.getPrototypeOf;
    var slice = arr.slice;
    var concat = arr.concat;
    var push = arr.push;
    var indexOf = arr.indexOf;
    var class2type = {};
    var toString = class2type.toString;
    var hasOwn = class2type.hasOwnProperty;
    var fnToString = hasOwn.toString;
    var ObjectFunctionString = fnToString.call(Object);
    var support = {};
    var isFunction = function isFunction(obj) {
        return typeof obj === 'function' && typeof obj.nodeType !== 'number';
    };
    var isWindow = function isWindow(obj) {
        return obj != null && obj === obj.window;
    };
    var preservedScriptAttributes = {
        type: true,
        src: true,
        nonce: true,
        noModule: true
    };
    function DOMEval(code, node, doc) {
        doc = doc || document;
        var i, val, script = doc.createElement('script');
        script.text = code;
        if (node) {
            for (i in preservedScriptAttributes) {
                val = node[i] || node.getAttribute && node.getAttribute(i);
                if (val) {
                    script.setAttribute(i, val);
                }
            }
        }
        doc.head.appendChild(script).parentNode.removeChild(script);
    }
    function toType(obj) {
        if (obj == null) {
            return obj + '';
        }
        return typeof obj === 'object' || typeof obj === 'function' ? class2type[toString.call(obj)] || 'object' : typeof obj;
    }
    var version = '3.4.1', jQuery = function (selector, context) {
            return new jQuery.fn.init(selector, context);
        }, rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
    jQuery.fn = jQuery.prototype = {
        jquery: version,
        constructor: jQuery,
        length: 0,
        toArray: function () {
            return slice.call(this);
        },
        get: function (num) {
            if (num == null) {
                return slice.call(this);
            }
            return num < 0 ? this[num + this.length] : this[num];
        },
        pushStack: function (elems) {
            var ret = jQuery.merge(this.constructor(), elems);
            ret.prevObject = this;
            return ret;
        },
        each: function (callback) {
            return jQuery.each(this, callback);
        },
        map: function (callback) {
            return this.pushStack(jQuery.map(this, function (elem, i) {
                return callback.call(elem, i, elem);
            }));
        },
        slice: function () {
            return this.pushStack(slice.apply(this, arguments));
        },
        first: function () {
            return this.eq(0);
        },
        last: function () {
            return this.eq(-1);
        },
        eq: function (i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },
        end: function () {
            return this.prevObject || this.constructor();
        },
        push: push,
        sort: arr.sort,
        splice: arr.splice
    };
    jQuery.extend = jQuery.fn.extend = function () {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        if (typeof target === 'boolean') {
            deep = target;
            target = arguments[i] || {};
            i++;
        }
        if (typeof target !== 'object' && !isFunction(target)) {
            target = {};
        }
        if (i === length) {
            target = this;
            i--;
        }
        for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    copy = options[name];
                    if (name === '__proto__' || target === copy) {
                        continue;
                    }
                    if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                        src = target[name];
                        if (copyIsArray && !Array.isArray(src)) {
                            clone = [];
                        } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
                            clone = {};
                        } else {
                            clone = src;
                        }
                        copyIsArray = false;
                        target[name] = jQuery.extend(deep, clone, copy);
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }
        return target;
    };
    jQuery.extend({
        expando: 'jQuery' + (version + Math.random()).replace(/\D/g, ''),
        isReady: true,
        error: function (msg) {
            throw new Error(msg);
        },
        noop: function () {
        },
        isPlainObject: function (obj) {
            var proto, Ctor;
            if (!obj || toString.call(obj) !== '[object Object]') {
                return false;
            }
            proto = getProto(obj);
            if (!proto) {
                return true;
            }
            Ctor = hasOwn.call(proto, 'constructor') && proto.constructor;
            return typeof Ctor === 'function' && fnToString.call(Ctor) === ObjectFunctionString;
        },
        isEmptyObject: function (obj) {
            var name;
            for (name in obj) {
                return false;
            }
            return true;
        },
        globalEval: function (code, options) {
            DOMEval(code, { nonce: options && options.nonce });
        },
        each: function (obj, callback) {
            var length, i = 0;
            if (isArrayLike(obj)) {
                length = obj.length;
                for (; i < length; i++) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                        break;
                    }
                }
            } else {
                for (i in obj) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                        break;
                    }
                }
            }
            return obj;
        },
        trim: function (text) {
            return text == null ? '' : (text + '').replace(rtrim, '');
        },
        makeArray: function (arr, results) {
            var ret = results || [];
            if (arr != null) {
                if (isArrayLike(Object(arr))) {
                    jQuery.merge(ret, typeof arr === 'string' ? [arr] : arr);
                } else {
                    push.call(ret, arr);
                }
            }
            return ret;
        },
        inArray: function (elem, arr, i) {
            return arr == null ? -1 : indexOf.call(arr, elem, i);
        },
        merge: function (first, second) {
            var len = +second.length, j = 0, i = first.length;
            for (; j < len; j++) {
                first[i++] = second[j];
            }
            first.length = i;
            return first;
        },
        grep: function (elems, callback, invert) {
            var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
            for (; i < length; i++) {
                callbackInverse = !callback(elems[i], i);
                if (callbackInverse !== callbackExpect) {
                    matches.push(elems[i]);
                }
            }
            return matches;
        },
        map: function (elems, callback, arg) {
            var length, value, i = 0, ret = [];
            if (isArrayLike(elems)) {
                length = elems.length;
                for (; i < length; i++) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret.push(value);
                    }
                }
            } else {
                for (i in elems) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret.push(value);
                    }
                }
            }
            return concat.apply([], ret);
        },
        guid: 1,
        support: support
    });
    if (typeof Symbol === 'function') {
        jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
    }
    jQuery.each('Boolean Number String Function Array Date RegExp Object Error Symbol'.split(' '), function (i, name) {
        class2type['[object ' + name + ']'] = name.toLowerCase();
    });
    function isArrayLike(obj) {
        var length = !!obj && 'length' in obj && obj.length, type = toType(obj);
        if (isFunction(obj) || isWindow(obj)) {
            return false;
        }
        return type === 'array' || length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj;
    }
    var Sizzle = function (window) {
        var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = 'sizzle' + 1 * new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), nonnativeSelectorCache = createCache(), sortOrder = function (a, b) {
                if (a === b) {
                    hasDuplicate = true;
                }
                return 0;
            }, hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice, indexOf = function (list, elem) {
                var i = 0, len = list.length;
                for (; i < len; i++) {
                    if (list[i] === elem) {
                        return i;
                    }
                }
                return -1;
            }, booleans = 'checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped', whitespace = '[\\x20\\t\\r\\n\\f]', identifier = '(?:\\\\.|[\\w-]|[^\0-\\xa0])+', attributes = '\\[' + whitespace + '*(' + identifier + ')(?:' + whitespace + '*([*^$|!~]?=)' + whitespace + '*(?:\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)"|(' + identifier + '))|)' + whitespace + '*\\]', pseudos = ':(' + identifier + ')(?:\\((' + '(\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)")|' + '((?:\\\\.|[^\\\\()[\\]]|' + attributes + ')*)|' + '.*' + ')\\)|)', rwhitespace = new RegExp(whitespace + '+', 'g'), rtrim = new RegExp('^' + whitespace + '+|((?:^|[^\\\\])(?:\\\\.)*)' + whitespace + '+$', 'g'), rcomma = new RegExp('^' + whitespace + '*,' + whitespace + '*'), rcombinators = new RegExp('^' + whitespace + '*([>+~]|' + whitespace + ')' + whitespace + '*'), rdescend = new RegExp(whitespace + '|>'), rpseudo = new RegExp(pseudos), ridentifier = new RegExp('^' + identifier + '$'), matchExpr = {
                'ID': new RegExp('^#(' + identifier + ')'),
                'CLASS': new RegExp('^\\.(' + identifier + ')'),
                'TAG': new RegExp('^(' + identifier + '|[*])'),
                'ATTR': new RegExp('^' + attributes),
                'PSEUDO': new RegExp('^' + pseudos),
                'CHILD': new RegExp('^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(' + whitespace + '*(even|odd|(([+-]|)(\\d*)n|)' + whitespace + '*(?:([+-]|)' + whitespace + '*(\\d+)|))' + whitespace + '*\\)|)', 'i'),
                'bool': new RegExp('^(?:' + booleans + ')$', 'i'),
                'needsContext': new RegExp('^' + whitespace + '*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(' + whitespace + '*((?:-\\d)?\\d*)' + whitespace + '*\\)|)(?=[^-]|$)', 'i')
            }, rhtml = /HTML$/i, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, runescape = new RegExp('\\\\([\\da-f]{1,6}' + whitespace + '?|(' + whitespace + ')|.)', 'ig'), funescape = function (_, escaped, escapedWhitespace) {
                var high = '0x' + escaped - 65536;
                return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
            }, rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, fcssescape = function (ch, asCodePoint) {
                if (asCodePoint) {
                    if (ch === '\0') {
                        return '\uFFFD';
                    }
                    return ch.slice(0, -1) + '\\' + ch.charCodeAt(ch.length - 1).toString(16) + ' ';
                }
                return '\\' + ch;
            }, unloadHandler = function () {
                setDocument();
            }, inDisabledFieldset = addCombinator(function (elem) {
                return elem.disabled === true && elem.nodeName.toLowerCase() === 'fieldset';
            }, {
                dir: 'parentNode',
                next: 'legend'
            });
        try {
            push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
            arr[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
            push = {
                apply: arr.length ? function (target, els) {
                    push_native.apply(target, slice.call(els));
                } : function (target, els) {
                    var j = target.length, i = 0;
                    while (target[j++] = els[i++]) {
                    }
                    target.length = j - 1;
                }
            };
        }
        function Sizzle(selector, context, results, seed) {
            var m, i, elem, nid, match, groups, newSelector, newContext = context && context.ownerDocument, nodeType = context ? context.nodeType : 9;
            results = results || [];
            if (typeof selector !== 'string' || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
                return results;
            }
            if (!seed) {
                if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                    setDocument(context);
                }
                context = context || document;
                if (documentIsHTML) {
                    if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
                        if (m = match[1]) {
                            if (nodeType === 9) {
                                if (elem = context.getElementById(m)) {
                                    if (elem.id === m) {
                                        results.push(elem);
                                        return results;
                                    }
                                } else {
                                    return results;
                                }
                            } else {
                                if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                                    results.push(elem);
                                    return results;
                                }
                            }
                        } else if (match[2]) {
                            push.apply(results, context.getElementsByTagName(selector));
                            return results;
                        } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                            push.apply(results, context.getElementsByClassName(m));
                            return results;
                        }
                    }
                    if (support.qsa && !nonnativeSelectorCache[selector + ' '] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && (nodeType !== 1 || context.nodeName.toLowerCase() !== 'object')) {
                        newSelector = selector;
                        newContext = context;
                        if (nodeType === 1 && rdescend.test(selector)) {
                            if (nid = context.getAttribute('id')) {
                                nid = nid.replace(rcssescape, fcssescape);
                            } else {
                                context.setAttribute('id', nid = expando);
                            }
                            groups = tokenize(selector);
                            i = groups.length;
                            while (i--) {
                                groups[i] = '#' + nid + ' ' + toSelector(groups[i]);
                            }
                            newSelector = groups.join(',');
                            newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                        }
                        try {
                            push.apply(results, newContext.querySelectorAll(newSelector));
                            return results;
                        } catch (qsaError) {
                            nonnativeSelectorCache(selector, true);
                        } finally {
                            if (nid === expando) {
                                context.removeAttribute('id');
                            }
                        }
                    }
                }
            }
            return select(selector.replace(rtrim, '$1'), context, results, seed);
        }
        function createCache() {
            var keys = [];
            function cache(key, value) {
                if (keys.push(key + ' ') > Expr.cacheLength) {
                    delete cache[keys.shift()];
                }
                return cache[key + ' '] = value;
            }
            return cache;
        }
        function markFunction(fn) {
            fn[expando] = true;
            return fn;
        }
        function assert(fn) {
            var el = document.createElement('fieldset');
            try {
                return !!fn(el);
            } catch (e) {
                return false;
            } finally {
                if (el.parentNode) {
                    el.parentNode.removeChild(el);
                }
                el = null;
            }
        }
        function addHandle(attrs, handler) {
            var arr = attrs.split('|'), i = arr.length;
            while (i--) {
                Expr.attrHandle[arr[i]] = handler;
            }
        }
        function siblingCheck(a, b) {
            var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;
            if (diff) {
                return diff;
            }
            if (cur) {
                while (cur = cur.nextSibling) {
                    if (cur === b) {
                        return -1;
                    }
                }
            }
            return a ? 1 : -1;
        }
        function createInputPseudo(type) {
            return function (elem) {
                var name = elem.nodeName.toLowerCase();
                return name === 'input' && elem.type === type;
            };
        }
        function createButtonPseudo(type) {
            return function (elem) {
                var name = elem.nodeName.toLowerCase();
                return (name === 'input' || name === 'button') && elem.type === type;
            };
        }
        function createDisabledPseudo(disabled) {
            return function (elem) {
                if ('form' in elem) {
                    if (elem.parentNode && elem.disabled === false) {
                        if ('label' in elem) {
                            if ('label' in elem.parentNode) {
                                return elem.parentNode.disabled === disabled;
                            } else {
                                return elem.disabled === disabled;
                            }
                        }
                        return elem.isDisabled === disabled || elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
                    }
                    return elem.disabled === disabled;
                } else if ('label' in elem) {
                    return elem.disabled === disabled;
                }
                return false;
            };
        }
        function createPositionalPseudo(fn) {
            return markFunction(function (argument) {
                argument = +argument;
                return markFunction(function (seed, matches) {
                    var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
                    while (i--) {
                        if (seed[j = matchIndexes[i]]) {
                            seed[j] = !(matches[j] = seed[j]);
                        }
                    }
                });
            });
        }
        function testContext(context) {
            return context && typeof context.getElementsByTagName !== 'undefined' && context;
        }
        support = Sizzle.support = {};
        isXML = Sizzle.isXML = function (elem) {
            var namespace = elem.namespaceURI, docElem = (elem.ownerDocument || elem).documentElement;
            return !rhtml.test(namespace || docElem && docElem.nodeName || 'HTML');
        };
        setDocument = Sizzle.setDocument = function (node) {
            var hasCompare, subWindow, doc = node ? node.ownerDocument || node : preferredDoc;
            if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                return document;
            }
            document = doc;
            docElem = document.documentElement;
            documentIsHTML = !isXML(document);
            if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
                if (subWindow.addEventListener) {
                    subWindow.addEventListener('unload', unloadHandler, false);
                } else if (subWindow.attachEvent) {
                    subWindow.attachEvent('onunload', unloadHandler);
                }
            }
            support.attributes = assert(function (el) {
                el.className = 'i';
                return !el.getAttribute('className');
            });
            support.getElementsByTagName = assert(function (el) {
                el.appendChild(document.createComment(''));
                return !el.getElementsByTagName('*').length;
            });
            support.getElementsByClassName = rnative.test(document.getElementsByClassName);
            support.getById = assert(function (el) {
                docElem.appendChild(el).id = expando;
                return !document.getElementsByName || !document.getElementsByName(expando).length;
            });
            if (support.getById) {
                Expr.filter['ID'] = function (id) {
                    var attrId = id.replace(runescape, funescape);
                    return function (elem) {
                        return elem.getAttribute('id') === attrId;
                    };
                };
                Expr.find['ID'] = function (id, context) {
                    if (typeof context.getElementById !== 'undefined' && documentIsHTML) {
                        var elem = context.getElementById(id);
                        return elem ? [elem] : [];
                    }
                };
            } else {
                Expr.filter['ID'] = function (id) {
                    var attrId = id.replace(runescape, funescape);
                    return function (elem) {
                        var node = typeof elem.getAttributeNode !== 'undefined' && elem.getAttributeNode('id');
                        return node && node.value === attrId;
                    };
                };
                Expr.find['ID'] = function (id, context) {
                    if (typeof context.getElementById !== 'undefined' && documentIsHTML) {
                        var node, i, elems, elem = context.getElementById(id);
                        if (elem) {
                            node = elem.getAttributeNode('id');
                            if (node && node.value === id) {
                                return [elem];
                            }
                            elems = context.getElementsByName(id);
                            i = 0;
                            while (elem = elems[i++]) {
                                node = elem.getAttributeNode('id');
                                if (node && node.value === id) {
                                    return [elem];
                                }
                            }
                        }
                        return [];
                    }
                };
            }
            Expr.find['TAG'] = support.getElementsByTagName ? function (tag, context) {
                if (typeof context.getElementsByTagName !== 'undefined') {
                    return context.getElementsByTagName(tag);
                } else if (support.qsa) {
                    return context.querySelectorAll(tag);
                }
            } : function (tag, context) {
                var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag);
                if (tag === '*') {
                    while (elem = results[i++]) {
                        if (elem.nodeType === 1) {
                            tmp.push(elem);
                        }
                    }
                    return tmp;
                }
                return results;
            };
            Expr.find['CLASS'] = support.getElementsByClassName && function (className, context) {
                if (typeof context.getElementsByClassName !== 'undefined' && documentIsHTML) {
                    return context.getElementsByClassName(className);
                }
            };
            rbuggyMatches = [];
            rbuggyQSA = [];
            if (support.qsa = rnative.test(document.querySelectorAll)) {
                assert(function (el) {
                    docElem.appendChild(el).innerHTML = '<a id=\'' + expando + '\'></a>' + '<select id=\'' + expando + '-\r\\\' msallowcapture=\'\'>' + '<option selected=\'\'></option></select>';
                    if (el.querySelectorAll('[msallowcapture^=\'\']').length) {
                        rbuggyQSA.push('[*^$]=' + whitespace + '*(?:\'\'|"")');
                    }
                    if (!el.querySelectorAll('[selected]').length) {
                        rbuggyQSA.push('\\[' + whitespace + '*(?:value|' + booleans + ')');
                    }
                    if (!el.querySelectorAll('[id~=' + expando + '-]').length) {
                        rbuggyQSA.push('~=');
                    }
                    if (!el.querySelectorAll(':checked').length) {
                        rbuggyQSA.push(':checked');
                    }
                    if (!el.querySelectorAll('a#' + expando + '+*').length) {
                        rbuggyQSA.push('.#.+[+~]');
                    }
                });
                assert(function (el) {
                    el.innerHTML = '<a href=\'\' disabled=\'disabled\'></a>' + '<select disabled=\'disabled\'><option/></select>';
                    var input = document.createElement('input');
                    input.setAttribute('type', 'hidden');
                    el.appendChild(input).setAttribute('name', 'D');
                    if (el.querySelectorAll('[name=d]').length) {
                        rbuggyQSA.push('name' + whitespace + '*[*^$|!~]?=');
                    }
                    if (el.querySelectorAll(':enabled').length !== 2) {
                        rbuggyQSA.push(':enabled', ':disabled');
                    }
                    docElem.appendChild(el).disabled = true;
                    if (el.querySelectorAll(':disabled').length !== 2) {
                        rbuggyQSA.push(':enabled', ':disabled');
                    }
                    el.querySelectorAll('*,:x');
                    rbuggyQSA.push(',.*:');
                });
            }
            if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
                assert(function (el) {
                    support.disconnectedMatch = matches.call(el, '*');
                    matches.call(el, '[s!=\'\']:x');
                    rbuggyMatches.push('!=', pseudos);
                });
            }
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join('|'));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join('|'));
            hasCompare = rnative.test(docElem.compareDocumentPosition);
            contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
                var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
                return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
            } : function (a, b) {
                if (b) {
                    while (b = b.parentNode) {
                        if (b === a) {
                            return true;
                        }
                    }
                }
                return false;
            };
            sortOrder = hasCompare ? function (a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                if (compare) {
                    return compare;
                }
                compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
                if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                    if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                        return -1;
                    }
                    if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                        return 1;
                    }
                    return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                }
                return compare & 4 ? -1 : 1;
            } : function (a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [a], bp = [b];
                if (!aup || !bup) {
                    return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                } else if (aup === bup) {
                    return siblingCheck(a, b);
                }
                cur = a;
                while (cur = cur.parentNode) {
                    ap.unshift(cur);
                }
                cur = b;
                while (cur = cur.parentNode) {
                    bp.unshift(cur);
                }
                while (ap[i] === bp[i]) {
                    i++;
                }
                return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
            };
            return document;
        };
        Sizzle.matches = function (expr, elements) {
            return Sizzle(expr, null, null, elements);
        };
        Sizzle.matchesSelector = function (elem, expr) {
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }
            if (support.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + ' '] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
                try {
                    var ret = matches.call(elem, expr);
                    if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                        return ret;
                    }
                } catch (e) {
                    nonnativeSelectorCache(expr, true);
                }
            }
            return Sizzle(expr, document, null, [elem]).length > 0;
        };
        Sizzle.contains = function (context, elem) {
            if ((context.ownerDocument || context) !== document) {
                setDocument(context);
            }
            return contains(context, elem);
        };
        Sizzle.attr = function (elem, name) {
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }
            var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
            return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        };
        Sizzle.escape = function (sel) {
            return (sel + '').replace(rcssescape, fcssescape);
        };
        Sizzle.error = function (msg) {
            throw new Error('Syntax error, unrecognized expression: ' + msg);
        };
        Sizzle.uniqueSort = function (results) {
            var elem, duplicates = [], j = 0, i = 0;
            hasDuplicate = !support.detectDuplicates;
            sortInput = !support.sortStable && results.slice(0);
            results.sort(sortOrder);
            if (hasDuplicate) {
                while (elem = results[i++]) {
                    if (elem === results[i]) {
                        j = duplicates.push(i);
                    }
                }
                while (j--) {
                    results.splice(duplicates[j], 1);
                }
            }
            sortInput = null;
            return results;
        };
        getText = Sizzle.getText = function (elem) {
            var node, ret = '', i = 0, nodeType = elem.nodeType;
            if (!nodeType) {
                while (node = elem[i++]) {
                    ret += getText(node);
                }
            } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                if (typeof elem.textContent === 'string') {
                    return elem.textContent;
                } else {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        ret += getText(elem);
                    }
                }
            } else if (nodeType === 3 || nodeType === 4) {
                return elem.nodeValue;
            }
            return ret;
        };
        Expr = Sizzle.selectors = {
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
                '>': {
                    dir: 'parentNode',
                    first: true
                },
                ' ': { dir: 'parentNode' },
                '+': {
                    dir: 'previousSibling',
                    first: true
                },
                '~': { dir: 'previousSibling' }
            },
            preFilter: {
                'ATTR': function (match) {
                    match[1] = match[1].replace(runescape, funescape);
                    match[3] = (match[3] || match[4] || match[5] || '').replace(runescape, funescape);
                    if (match[2] === '~=') {
                        match[3] = ' ' + match[3] + ' ';
                    }
                    return match.slice(0, 4);
                },
                'CHILD': function (match) {
                    match[1] = match[1].toLowerCase();
                    if (match[1].slice(0, 3) === 'nth') {
                        if (!match[3]) {
                            Sizzle.error(match[0]);
                        }
                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === 'even' || match[3] === 'odd'));
                        match[5] = +(match[7] + match[8] || match[3] === 'odd');
                    } else if (match[3]) {
                        Sizzle.error(match[0]);
                    }
                    return match;
                },
                'PSEUDO': function (match) {
                    var excess, unquoted = !match[6] && match[2];
                    if (matchExpr['CHILD'].test(match[0])) {
                        return null;
                    }
                    if (match[3]) {
                        match[2] = match[4] || match[5] || '';
                    } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(')', unquoted.length - excess) - unquoted.length)) {
                        match[0] = match[0].slice(0, excess);
                        match[2] = unquoted.slice(0, excess);
                    }
                    return match.slice(0, 3);
                }
            },
            filter: {
                'TAG': function (nodeNameSelector) {
                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                    return nodeNameSelector === '*' ? function () {
                        return true;
                    } : function (elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
                },
                'CLASS': function (className) {
                    var pattern = classCache[className + ' '];
                    return pattern || (pattern = new RegExp('(^|' + whitespace + ')' + className + '(' + whitespace + '|$)')) && classCache(className, function (elem) {
                        return pattern.test(typeof elem.className === 'string' && elem.className || typeof elem.getAttribute !== 'undefined' && elem.getAttribute('class') || '');
                    });
                },
                'ATTR': function (name, operator, check) {
                    return function (elem) {
                        var result = Sizzle.attr(elem, name);
                        if (result == null) {
                            return operator === '!=';
                        }
                        if (!operator) {
                            return true;
                        }
                        result += '';
                        return operator === '=' ? result === check : operator === '!=' ? result !== check : operator === '^=' ? check && result.indexOf(check) === 0 : operator === '*=' ? check && result.indexOf(check) > -1 : operator === '$=' ? check && result.slice(-check.length) === check : operator === '~=' ? (' ' + result.replace(rwhitespace, ' ') + ' ').indexOf(check) > -1 : operator === '|=' ? result === check || result.slice(0, check.length + 1) === check + '-' : false;
                    };
                },
                'CHILD': function (type, what, argument, first, last) {
                    var simple = type.slice(0, 3) !== 'nth', forward = type.slice(-4) !== 'last', ofType = what === 'of-type';
                    return first === 1 && last === 0 ? function (elem) {
                        return !!elem.parentNode;
                    } : function (elem, context, xml) {
                        var cache, uniqueCache, outerCache, node, nodeIndex, start, dir = simple !== forward ? 'nextSibling' : 'previousSibling', parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff = false;
                        if (parent) {
                            if (simple) {
                                while (dir) {
                                    node = elem;
                                    while (node = node[dir]) {
                                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                                            return false;
                                        }
                                    }
                                    start = dir = type === 'only' && !start && 'nextSibling';
                                }
                                return true;
                            }
                            start = [forward ? parent.firstChild : parent.lastChild];
                            if (forward && useCache) {
                                node = parent;
                                outerCache = node[expando] || (node[expando] = {});
                                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                cache = uniqueCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = nodeIndex && cache[2];
                                node = nodeIndex && parent.childNodes[nodeIndex];
                                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                    if (node.nodeType === 1 && ++diff && node === elem) {
                                        uniqueCache[type] = [
                                            dirruns,
                                            nodeIndex,
                                            diff
                                        ];
                                        break;
                                    }
                                }
                            } else {
                                if (useCache) {
                                    node = elem;
                                    outerCache = node[expando] || (node[expando] = {});
                                    uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                    cache = uniqueCache[type] || [];
                                    nodeIndex = cache[0] === dirruns && cache[1];
                                    diff = nodeIndex;
                                }
                                if (diff === false) {
                                    while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                        if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                            if (useCache) {
                                                outerCache = node[expando] || (node[expando] = {});
                                                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                                uniqueCache[type] = [
                                                    dirruns,
                                                    diff
                                                ];
                                            }
                                            if (node === elem) {
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            diff -= last;
                            return diff === first || diff % first === 0 && diff / first >= 0;
                        }
                    };
                },
                'PSEUDO': function (pseudo, argument) {
                    var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error('unsupported pseudo: ' + pseudo);
                    if (fn[expando]) {
                        return fn(argument);
                    }
                    if (fn.length > 1) {
                        args = [
                            pseudo,
                            pseudo,
                            '',
                            argument
                        ];
                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
                            var idx, matched = fn(seed, argument), i = matched.length;
                            while (i--) {
                                idx = indexOf(seed, matched[i]);
                                seed[idx] = !(matches[idx] = matched[i]);
                            }
                        }) : function (elem) {
                            return fn(elem, 0, args);
                        };
                    }
                    return fn;
                }
            },
            pseudos: {
                'not': markFunction(function (selector) {
                    var input = [], results = [], matcher = compile(selector.replace(rtrim, '$1'));
                    return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
                        var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                        while (i--) {
                            if (elem = unmatched[i]) {
                                seed[i] = !(matches[i] = elem);
                            }
                        }
                    }) : function (elem, context, xml) {
                        input[0] = elem;
                        matcher(input, null, xml, results);
                        input[0] = null;
                        return !results.pop();
                    };
                }),
                'has': markFunction(function (selector) {
                    return function (elem) {
                        return Sizzle(selector, elem).length > 0;
                    };
                }),
                'contains': markFunction(function (text) {
                    text = text.replace(runescape, funescape);
                    return function (elem) {
                        return (elem.textContent || getText(elem)).indexOf(text) > -1;
                    };
                }),
                'lang': markFunction(function (lang) {
                    if (!ridentifier.test(lang || '')) {
                        Sizzle.error('unsupported lang: ' + lang);
                    }
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function (elem) {
                        var elemLang;
                        do {
                            if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute('xml:lang') || elem.getAttribute('lang')) {
                                elemLang = elemLang.toLowerCase();
                                return elemLang === lang || elemLang.indexOf(lang + '-') === 0;
                            }
                        } while ((elem = elem.parentNode) && elem.nodeType === 1);
                        return false;
                    };
                }),
                'target': function (elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                },
                'root': function (elem) {
                    return elem === docElem;
                },
                'focus': function (elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                },
                'enabled': createDisabledPseudo(false),
                'disabled': createDisabledPseudo(true),
                'checked': function (elem) {
                    var nodeName = elem.nodeName.toLowerCase();
                    return nodeName === 'input' && !!elem.checked || nodeName === 'option' && !!elem.selected;
                },
                'selected': function (elem) {
                    if (elem.parentNode) {
                        elem.parentNode.selectedIndex;
                    }
                    return elem.selected === true;
                },
                'empty': function (elem) {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        if (elem.nodeType < 6) {
                            return false;
                        }
                    }
                    return true;
                },
                'parent': function (elem) {
                    return !Expr.pseudos['empty'](elem);
                },
                'header': function (elem) {
                    return rheader.test(elem.nodeName);
                },
                'input': function (elem) {
                    return rinputs.test(elem.nodeName);
                },
                'button': function (elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === 'input' && elem.type === 'button' || name === 'button';
                },
                'text': function (elem) {
                    var attr;
                    return elem.nodeName.toLowerCase() === 'input' && elem.type === 'text' && ((attr = elem.getAttribute('type')) == null || attr.toLowerCase() === 'text');
                },
                'first': createPositionalPseudo(function () {
                    return [0];
                }),
                'last': createPositionalPseudo(function (matchIndexes, length) {
                    return [length - 1];
                }),
                'eq': createPositionalPseudo(function (matchIndexes, length, argument) {
                    return [argument < 0 ? argument + length : argument];
                }),
                'even': createPositionalPseudo(function (matchIndexes, length) {
                    var i = 0;
                    for (; i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                'odd': createPositionalPseudo(function (matchIndexes, length) {
                    var i = 1;
                    for (; i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                'lt': createPositionalPseudo(function (matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument > length ? length : argument;
                    for (; --i >= 0;) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                'gt': createPositionalPseudo(function (matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; ++i < length;) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                })
            }
        };
        Expr.pseudos['nth'] = Expr.pseudos['eq'];
        for (i in {
                radio: true,
                checkbox: true,
                file: true,
                password: true,
                image: true
            }) {
            Expr.pseudos[i] = createInputPseudo(i);
        }
        for (i in {
                submit: true,
                reset: true
            }) {
            Expr.pseudos[i] = createButtonPseudo(i);
        }
        function setFilters() {
        }
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        tokenize = Sizzle.tokenize = function (selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + ' '];
            if (cached) {
                return parseOnly ? 0 : cached.slice(0);
            }
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while (soFar) {
                if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) {
                        soFar = soFar.slice(match[0].length) || soFar;
                    }
                    groups.push(tokens = []);
                }
                matched = false;
                if (match = rcombinators.exec(soFar)) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: match[0].replace(rtrim, ' ')
                    });
                    soFar = soFar.slice(matched.length);
                }
                for (type in Expr.filter) {
                    if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                        matched = match.shift();
                        tokens.push({
                            value: matched,
                            type: type,
                            matches: match
                        });
                        soFar = soFar.slice(matched.length);
                    }
                }
                if (!matched) {
                    break;
                }
            }
            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
        };
        function toSelector(tokens) {
            var i = 0, len = tokens.length, selector = '';
            for (; i < len; i++) {
                selector += tokens[i].value;
            }
            return selector;
        }
        function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir, skip = combinator.next, key = skip || dir, checkNonElements = base && key === 'parentNode', doneName = done++;
            return combinator.first ? function (elem, context, xml) {
                while (elem = elem[dir]) {
                    if (elem.nodeType === 1 || checkNonElements) {
                        return matcher(elem, context, xml);
                    }
                }
                return false;
            } : function (elem, context, xml) {
                var oldCache, uniqueCache, outerCache, newCache = [
                        dirruns,
                        doneName
                    ];
                if (xml) {
                    while (elem = elem[dir]) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            if (matcher(elem, context, xml)) {
                                return true;
                            }
                        }
                    }
                } else {
                    while (elem = elem[dir]) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            outerCache = elem[expando] || (elem[expando] = {});
                            uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});
                            if (skip && skip === elem.nodeName.toLowerCase()) {
                                elem = elem[dir] || elem;
                            } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                                return newCache[2] = oldCache[2];
                            } else {
                                uniqueCache[key] = newCache;
                                if (newCache[2] = matcher(elem, context, xml)) {
                                    return true;
                                }
                            }
                        }
                    }
                }
                return false;
            };
        }
        function elementMatcher(matchers) {
            return matchers.length > 1 ? function (elem, context, xml) {
                var i = matchers.length;
                while (i--) {
                    if (!matchers[i](elem, context, xml)) {
                        return false;
                    }
                }
                return true;
            } : matchers[0];
        }
        function multipleContexts(selector, contexts, results) {
            var i = 0, len = contexts.length;
            for (; i < len; i++) {
                Sizzle(selector, contexts[i], results);
            }
            return results;
        }
        function condense(unmatched, map, filter, context, xml) {
            var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
            for (; i < len; i++) {
                if (elem = unmatched[i]) {
                    if (!filter || filter(elem, context, xml)) {
                        newUnmatched.push(elem);
                        if (mapped) {
                            map.push(i);
                        }
                    }
                }
            }
            return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) {
                postFilter = setMatcher(postFilter);
            }
            if (postFinder && !postFinder[expando]) {
                postFinder = setMatcher(postFinder, postSelector);
            }
            return markFunction(function (seed, results, context, xml) {
                var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || '*', context.nodeType ? [context] : context, []), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
                if (matcher) {
                    matcher(matcherIn, matcherOut, context, xml);
                }
                if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);
                    i = temp.length;
                    while (i--) {
                        if (elem = temp[i]) {
                            matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                        }
                    }
                }
                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            temp = [];
                            i = matcherOut.length;
                            while (i--) {
                                if (elem = matcherOut[i]) {
                                    temp.push(matcherIn[i] = elem);
                                }
                            }
                            postFinder(null, matcherOut = [], temp, xml);
                        }
                        i = matcherOut.length;
                        while (i--) {
                            if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                                seed[temp] = !(results[temp] = elem);
                            }
                        }
                    }
                } else {
                    matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                    if (postFinder) {
                        postFinder(null, results, matcherOut, xml);
                    } else {
                        push.apply(results, matcherOut);
                    }
                }
            });
        }
        function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[' '], i = leadingRelative ? 1 : 0, matchContext = addCombinator(function (elem) {
                    return elem === checkContext;
                }, implicitRelative, true), matchAnyContext = addCombinator(function (elem) {
                    return indexOf(checkContext, elem) > -1;
                }, implicitRelative, true), matchers = [function (elem, context, xml) {
                        var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                        checkContext = null;
                        return ret;
                    }];
            for (; i < len; i++) {
                if (matcher = Expr.relative[tokens[i].type]) {
                    matchers = [addCombinator(elementMatcher(matchers), matcher)];
                } else {
                    matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                    if (matcher[expando]) {
                        j = ++i;
                        for (; j < len; j++) {
                            if (Expr.relative[tokens[j].type]) {
                                break;
                            }
                        }
                        return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === ' ' ? '*' : '' })).replace(rtrim, '$1'), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                    }
                    matchers.push(matcher);
                }
            }
            return elementMatcher(matchers);
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function (seed, context, xml, results, outermost) {
                    var elem, j, matcher, matchedCount = 0, i = '0', unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find['TAG']('*', outermost), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
                    if (outermost) {
                        outermostContext = context === document || context || outermost;
                    }
                    for (; i !== len && (elem = elems[i]) != null; i++) {
                        if (byElement && elem) {
                            j = 0;
                            if (!context && elem.ownerDocument !== document) {
                                setDocument(elem);
                                xml = !documentIsHTML;
                            }
                            while (matcher = elementMatchers[j++]) {
                                if (matcher(elem, context || document, xml)) {
                                    results.push(elem);
                                    break;
                                }
                            }
                            if (outermost) {
                                dirruns = dirrunsUnique;
                            }
                        }
                        if (bySet) {
                            if (elem = !matcher && elem) {
                                matchedCount--;
                            }
                            if (seed) {
                                unmatched.push(elem);
                            }
                        }
                    }
                    matchedCount += i;
                    if (bySet && i !== matchedCount) {
                        j = 0;
                        while (matcher = setMatchers[j++]) {
                            matcher(unmatched, setMatched, context, xml);
                        }
                        if (seed) {
                            if (matchedCount > 0) {
                                while (i--) {
                                    if (!(unmatched[i] || setMatched[i])) {
                                        setMatched[i] = pop.call(results);
                                    }
                                }
                            }
                            setMatched = condense(setMatched);
                        }
                        push.apply(results, setMatched);
                        if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                            Sizzle.uniqueSort(results);
                        }
                    }
                    if (outermost) {
                        dirruns = dirrunsUnique;
                        outermostContext = contextBackup;
                    }
                    return unmatched;
                };
            return bySet ? markFunction(superMatcher) : superMatcher;
        }
        compile = Sizzle.compile = function (selector, match) {
            var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + ' '];
            if (!cached) {
                if (!match) {
                    match = tokenize(selector);
                }
                i = match.length;
                while (i--) {
                    cached = matcherFromTokens(match[i]);
                    if (cached[expando]) {
                        setMatchers.push(cached);
                    } else {
                        elementMatchers.push(cached);
                    }
                }
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
                cached.selector = selector;
            }
            return cached;
        };
        select = Sizzle.select = function (selector, context, results, seed) {
            var i, tokens, token, type, find, compiled = typeof selector === 'function' && selector, match = !seed && tokenize(selector = compiled.selector || selector);
            results = results || [];
            if (match.length === 1) {
                tokens = match[0] = match[0].slice(0);
                if (tokens.length > 2 && (token = tokens[0]).type === 'ID' && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                    context = (Expr.find['ID'](token.matches[0].replace(runescape, funescape), context) || [])[0];
                    if (!context) {
                        return results;
                    } else if (compiled) {
                        context = context.parentNode;
                    }
                    selector = selector.slice(tokens.shift().value.length);
                }
                i = matchExpr['needsContext'].test(selector) ? 0 : tokens.length;
                while (i--) {
                    token = tokens[i];
                    if (Expr.relative[type = token.type]) {
                        break;
                    }
                    if (find = Expr.find[type]) {
                        if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                            tokens.splice(i, 1);
                            selector = seed.length && toSelector(tokens);
                            if (!selector) {
                                push.apply(results, seed);
                                return results;
                            }
                            break;
                        }
                    }
                }
            }
            (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
            return results;
        };
        support.sortStable = expando.split('').sort(sortOrder).join('') === expando;
        support.detectDuplicates = !!hasDuplicate;
        setDocument();
        support.sortDetached = assert(function (el) {
            return el.compareDocumentPosition(document.createElement('fieldset')) & 1;
        });
        if (!assert(function (el) {
                el.innerHTML = '<a href=\'#\'></a>';
                return el.firstChild.getAttribute('href') === '#';
            })) {
            addHandle('type|href|height|width', function (elem, name, isXML) {
                if (!isXML) {
                    return elem.getAttribute(name, name.toLowerCase() === 'type' ? 1 : 2);
                }
            });
        }
        if (!support.attributes || !assert(function (el) {
                el.innerHTML = '<input/>';
                el.firstChild.setAttribute('value', '');
                return el.firstChild.getAttribute('value') === '';
            })) {
            addHandle('value', function (elem, name, isXML) {
                if (!isXML && elem.nodeName.toLowerCase() === 'input') {
                    return elem.defaultValue;
                }
            });
        }
        if (!assert(function (el) {
                return el.getAttribute('disabled') == null;
            })) {
            addHandle(booleans, function (elem, name, isXML) {
                var val;
                if (!isXML) {
                    return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
                }
            });
        }
        return Sizzle;
    }(window);
    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    jQuery.expr[':'] = jQuery.expr.pseudos;
    jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;
    jQuery.escapeSelector = Sizzle.escape;
    var dir = function (elem, dir, until) {
        var matched = [], truncate = until !== undefined;
        while ((elem = elem[dir]) && elem.nodeType !== 9) {
            if (elem.nodeType === 1) {
                if (truncate && jQuery(elem).is(until)) {
                    break;
                }
                matched.push(elem);
            }
        }
        return matched;
    };
    var siblings = function (n, elem) {
        var matched = [];
        for (; n; n = n.nextSibling) {
            if (n.nodeType === 1 && n !== elem) {
                matched.push(n);
            }
        }
        return matched;
    };
    var rneedsContext = jQuery.expr.match.needsContext;
    function nodeName(elem, name) {
        return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
    }
    ;
    var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
    function winnow(elements, qualifier, not) {
        if (isFunction(qualifier)) {
            return jQuery.grep(elements, function (elem, i) {
                return !!qualifier.call(elem, i, elem) !== not;
            });
        }
        if (qualifier.nodeType) {
            return jQuery.grep(elements, function (elem) {
                return elem === qualifier !== not;
            });
        }
        if (typeof qualifier !== 'string') {
            return jQuery.grep(elements, function (elem) {
                return indexOf.call(qualifier, elem) > -1 !== not;
            });
        }
        return jQuery.filter(qualifier, elements, not);
    }
    jQuery.filter = function (expr, elems, not) {
        var elem = elems[0];
        if (not) {
            expr = ':not(' + expr + ')';
        }
        if (elems.length === 1 && elem.nodeType === 1) {
            return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
        }
        return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
            return elem.nodeType === 1;
        }));
    };
    jQuery.fn.extend({
        find: function (selector) {
            var i, ret, len = this.length, self = this;
            if (typeof selector !== 'string') {
                return this.pushStack(jQuery(selector).filter(function () {
                    for (i = 0; i < len; i++) {
                        if (jQuery.contains(self[i], this)) {
                            return true;
                        }
                    }
                }));
            }
            ret = this.pushStack([]);
            for (i = 0; i < len; i++) {
                jQuery.find(selector, self[i], ret);
            }
            return len > 1 ? jQuery.uniqueSort(ret) : ret;
        },
        filter: function (selector) {
            return this.pushStack(winnow(this, selector || [], false));
        },
        not: function (selector) {
            return this.pushStack(winnow(this, selector || [], true));
        },
        is: function (selector) {
            return !!winnow(this, typeof selector === 'string' && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        }
    });
    var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/, init = jQuery.fn.init = function (selector, context, root) {
            var match, elem;
            if (!selector) {
                return this;
            }
            root = root || rootjQuery;
            if (typeof selector === 'string') {
                if (selector[0] === '<' && selector[selector.length - 1] === '>' && selector.length >= 3) {
                    match = [
                        null,
                        selector,
                        null
                    ];
                } else {
                    match = rquickExpr.exec(selector);
                }
                if (match && (match[1] || !context)) {
                    if (match[1]) {
                        context = context instanceof jQuery ? context[0] : context;
                        jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                        if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                            for (match in context) {
                                if (isFunction(this[match])) {
                                    this[match](context[match]);
                                } else {
                                    this.attr(match, context[match]);
                                }
                            }
                        }
                        return this;
                    } else {
                        elem = document.getElementById(match[2]);
                        if (elem) {
                            this[0] = elem;
                            this.length = 1;
                        }
                        return this;
                    }
                } else if (!context || context.jquery) {
                    return (context || root).find(selector);
                } else {
                    return this.constructor(context).find(selector);
                }
            } else if (selector.nodeType) {
                this[0] = selector;
                this.length = 1;
                return this;
            } else if (isFunction(selector)) {
                return root.ready !== undefined ? root.ready(selector) : selector(jQuery);
            }
            return jQuery.makeArray(selector, this);
        };
    init.prototype = jQuery.fn;
    rootjQuery = jQuery(document);
    var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
            children: true,
            contents: true,
            next: true,
            prev: true
        };
    jQuery.fn.extend({
        has: function (target) {
            var targets = jQuery(target, this), l = targets.length;
            return this.filter(function () {
                var i = 0;
                for (; i < l; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true;
                    }
                }
            });
        },
        closest: function (selectors, context) {
            var cur, i = 0, l = this.length, matched = [], targets = typeof selectors !== 'string' && jQuery(selectors);
            if (!rneedsContext.test(selectors)) {
                for (; i < l; i++) {
                    for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                        if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                            matched.push(cur);
                            break;
                        }
                    }
                }
            }
            return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
        },
        index: function (elem) {
            if (!elem) {
                return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            }
            if (typeof elem === 'string') {
                return indexOf.call(jQuery(elem), this[0]);
            }
            return indexOf.call(this, elem.jquery ? elem[0] : elem);
        },
        add: function (selector, context) {
            return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
        },
        addBack: function (selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        }
    });
    function sibling(cur, dir) {
        while ((cur = cur[dir]) && cur.nodeType !== 1) {
        }
        return cur;
    }
    jQuery.each({
        parent: function (elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function (elem) {
            return dir(elem, 'parentNode');
        },
        parentsUntil: function (elem, i, until) {
            return dir(elem, 'parentNode', until);
        },
        next: function (elem) {
            return sibling(elem, 'nextSibling');
        },
        prev: function (elem) {
            return sibling(elem, 'previousSibling');
        },
        nextAll: function (elem) {
            return dir(elem, 'nextSibling');
        },
        prevAll: function (elem) {
            return dir(elem, 'previousSibling');
        },
        nextUntil: function (elem, i, until) {
            return dir(elem, 'nextSibling', until);
        },
        prevUntil: function (elem, i, until) {
            return dir(elem, 'previousSibling', until);
        },
        siblings: function (elem) {
            return siblings((elem.parentNode || {}).firstChild, elem);
        },
        children: function (elem) {
            return siblings(elem.firstChild);
        },
        contents: function (elem) {
            if (typeof elem.contentDocument !== 'undefined') {
                return elem.contentDocument;
            }
            if (nodeName(elem, 'template')) {
                elem = elem.content || elem;
            }
            return jQuery.merge([], elem.childNodes);
        }
    }, function (name, fn) {
        jQuery.fn[name] = function (until, selector) {
            var matched = jQuery.map(this, fn, until);
            if (name.slice(-5) !== 'Until') {
                selector = until;
            }
            if (selector && typeof selector === 'string') {
                matched = jQuery.filter(selector, matched);
            }
            if (this.length > 1) {
                if (!guaranteedUnique[name]) {
                    jQuery.uniqueSort(matched);
                }
                if (rparentsprev.test(name)) {
                    matched.reverse();
                }
            }
            return this.pushStack(matched);
        };
    });
    var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;
    function createOptions(options) {
        var object = {};
        jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
            object[flag] = true;
        });
        return object;
    }
    jQuery.Callbacks = function (options) {
        options = typeof options === 'string' ? createOptions(options) : jQuery.extend({}, options);
        var firing, memory, fired, locked, list = [], queue = [], firingIndex = -1, fire = function () {
                locked = locked || options.once;
                fired = firing = true;
                for (; queue.length; firingIndex = -1) {
                    memory = queue.shift();
                    while (++firingIndex < list.length) {
                        if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                            firingIndex = list.length;
                            memory = false;
                        }
                    }
                }
                if (!options.memory) {
                    memory = false;
                }
                firing = false;
                if (locked) {
                    if (memory) {
                        list = [];
                    } else {
                        list = '';
                    }
                }
            }, self = {
                add: function () {
                    if (list) {
                        if (memory && !firing) {
                            firingIndex = list.length - 1;
                            queue.push(memory);
                        }
                        (function add(args) {
                            jQuery.each(args, function (_, arg) {
                                if (isFunction(arg)) {
                                    if (!options.unique || !self.has(arg)) {
                                        list.push(arg);
                                    }
                                } else if (arg && arg.length && toType(arg) !== 'string') {
                                    add(arg);
                                }
                            });
                        }(arguments));
                        if (memory && !firing) {
                            fire();
                        }
                    }
                    return this;
                },
                remove: function () {
                    jQuery.each(arguments, function (_, arg) {
                        var index;
                        while ((index = jQuery.inArray(arg, list, index)) > -1) {
                            list.splice(index, 1);
                            if (index <= firingIndex) {
                                firingIndex--;
                            }
                        }
                    });
                    return this;
                },
                has: function (fn) {
                    return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
                },
                empty: function () {
                    if (list) {
                        list = [];
                    }
                    return this;
                },
                disable: function () {
                    locked = queue = [];
                    list = memory = '';
                    return this;
                },
                disabled: function () {
                    return !list;
                },
                lock: function () {
                    locked = queue = [];
                    if (!memory && !firing) {
                        list = memory = '';
                    }
                    return this;
                },
                locked: function () {
                    return !!locked;
                },
                fireWith: function (context, args) {
                    if (!locked) {
                        args = args || [];
                        args = [
                            context,
                            args.slice ? args.slice() : args
                        ];
                        queue.push(args);
                        if (!firing) {
                            fire();
                        }
                    }
                    return this;
                },
                fire: function () {
                    self.fireWith(this, arguments);
                    return this;
                },
                fired: function () {
                    return !!fired;
                }
            };
        return self;
    };
    function Identity(v) {
        return v;
    }
    function Thrower(ex) {
        throw ex;
    }
    function adoptValue(value, resolve, reject, noValue) {
        var method;
        try {
            if (value && isFunction(method = value.promise)) {
                method.call(value).done(resolve).fail(reject);
            } else if (value && isFunction(method = value.then)) {
                method.call(value, resolve, reject);
            } else {
                resolve.apply(undefined, [value].slice(noValue));
            }
        } catch (value) {
            reject.apply(undefined, [value]);
        }
    }
    jQuery.extend({
        Deferred: function (func) {
            var tuples = [
                    [
                        'notify',
                        'progress',
                        jQuery.Callbacks('memory'),
                        jQuery.Callbacks('memory'),
                        2
                    ],
                    [
                        'resolve',
                        'done',
                        jQuery.Callbacks('once memory'),
                        jQuery.Callbacks('once memory'),
                        0,
                        'resolved'
                    ],
                    [
                        'reject',
                        'fail',
                        jQuery.Callbacks('once memory'),
                        jQuery.Callbacks('once memory'),
                        1,
                        'rejected'
                    ]
                ], state = 'pending', promise = {
                    state: function () {
                        return state;
                    },
                    always: function () {
                        deferred.done(arguments).fail(arguments);
                        return this;
                    },
                    'catch': function (fn) {
                        return promise.then(null, fn);
                    },
                    pipe: function () {
                        var fns = arguments;
                        return jQuery.Deferred(function (newDefer) {
                            jQuery.each(tuples, function (i, tuple) {
                                var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];
                                deferred[tuple[1]](function () {
                                    var returned = fn && fn.apply(this, arguments);
                                    if (returned && isFunction(returned.promise)) {
                                        returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                                    } else {
                                        newDefer[tuple[0] + 'With'](this, fn ? [returned] : arguments);
                                    }
                                });
                            });
                            fns = null;
                        }).promise();
                    },
                    then: function (onFulfilled, onRejected, onProgress) {
                        var maxDepth = 0;
                        function resolve(depth, deferred, handler, special) {
                            return function () {
                                var that = this, args = arguments, mightThrow = function () {
                                        var returned, then;
                                        if (depth < maxDepth) {
                                            return;
                                        }
                                        returned = handler.apply(that, args);
                                        if (returned === deferred.promise()) {
                                            throw new TypeError('Thenable self-resolution');
                                        }
                                        then = returned && (typeof returned === 'object' || typeof returned === 'function') && returned.then;
                                        if (isFunction(then)) {
                                            if (special) {
                                                then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));
                                            } else {
                                                maxDepth++;
                                                then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
                                            }
                                        } else {
                                            if (handler !== Identity) {
                                                that = undefined;
                                                args = [returned];
                                            }
                                            (special || deferred.resolveWith)(that, args);
                                        }
                                    }, process = special ? mightThrow : function () {
                                        try {
                                            mightThrow();
                                        } catch (e) {
                                            if (jQuery.Deferred.exceptionHook) {
                                                jQuery.Deferred.exceptionHook(e, process.stackTrace);
                                            }
                                            if (depth + 1 >= maxDepth) {
                                                if (handler !== Thrower) {
                                                    that = undefined;
                                                    args = [e];
                                                }
                                                deferred.rejectWith(that, args);
                                            }
                                        }
                                    };
                                if (depth) {
                                    process();
                                } else {
                                    if (jQuery.Deferred.getStackHook) {
                                        process.stackTrace = jQuery.Deferred.getStackHook();
                                    }
                                    window.setTimeout(process);
                                }
                            };
                        }
                        return jQuery.Deferred(function (newDefer) {
                            tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));
                            tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity));
                            tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
                        }).promise();
                    },
                    promise: function (obj) {
                        return obj != null ? jQuery.extend(obj, promise) : promise;
                    }
                }, deferred = {};
            jQuery.each(tuples, function (i, tuple) {
                var list = tuple[2], stateString = tuple[5];
                promise[tuple[1]] = list.add;
                if (stateString) {
                    list.add(function () {
                        state = stateString;
                    }, tuples[3 - i][2].disable, tuples[3 - i][3].disable, tuples[0][2].lock, tuples[0][3].lock);
                }
                list.add(tuple[3].fire);
                deferred[tuple[0]] = function () {
                    deferred[tuple[0] + 'With'](this === deferred ? undefined : this, arguments);
                    return this;
                };
                deferred[tuple[0] + 'With'] = list.fireWith;
            });
            promise.promise(deferred);
            if (func) {
                func.call(deferred, deferred);
            }
            return deferred;
        },
        when: function (singleValue) {
            var remaining = arguments.length, i = remaining, resolveContexts = Array(i), resolveValues = slice.call(arguments), master = jQuery.Deferred(), updateFunc = function (i) {
                    return function (value) {
                        resolveContexts[i] = this;
                        resolveValues[i] = arguments.length > 1 ? slice.call(arguments) : value;
                        if (!--remaining) {
                            master.resolveWith(resolveContexts, resolveValues);
                        }
                    };
                };
            if (remaining <= 1) {
                adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining);
                if (master.state() === 'pending' || isFunction(resolveValues[i] && resolveValues[i].then)) {
                    return master.then();
                }
            }
            while (i--) {
                adoptValue(resolveValues[i], updateFunc(i), master.reject);
            }
            return master.promise();
        }
    });
    var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
    jQuery.Deferred.exceptionHook = function (error, stack) {
        if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
            window.console.warn('jQuery.Deferred exception: ' + error.message, error.stack, stack);
        }
    };
    jQuery.readyException = function (error) {
        window.setTimeout(function () {
            throw error;
        });
    };
    var readyList = jQuery.Deferred();
    jQuery.fn.ready = function (fn) {
        readyList.then(fn).catch(function (error) {
            jQuery.readyException(error);
        });
        return this;
    };
    jQuery.extend({
        isReady: false,
        readyWait: 1,
        ready: function (wait) {
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return;
            }
            jQuery.isReady = true;
            if (wait !== true && --jQuery.readyWait > 0) {
                return;
            }
            readyList.resolveWith(document, [jQuery]);
        }
    });
    jQuery.ready.then = readyList.then;
    function completed() {
        document.removeEventListener('DOMContentLoaded', completed);
        window.removeEventListener('load', completed);
        jQuery.ready();
    }
    if (document.readyState === 'complete' || document.readyState !== 'loading' && !document.documentElement.doScroll) {
        window.setTimeout(jQuery.ready);
    } else {
        document.addEventListener('DOMContentLoaded', completed);
        window.addEventListener('load', completed);
    }
    var access = function (elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0, len = elems.length, bulk = key == null;
        if (toType(key) === 'object') {
            chainable = true;
            for (i in key) {
                access(elems, fn, i, key[i], true, emptyGet, raw);
            }
        } else if (value !== undefined) {
            chainable = true;
            if (!isFunction(value)) {
                raw = true;
            }
            if (bulk) {
                if (raw) {
                    fn.call(elems, value);
                    fn = null;
                } else {
                    bulk = fn;
                    fn = function (elem, key, value) {
                        return bulk.call(jQuery(elem), value);
                    };
                }
            }
            if (fn) {
                for (; i < len; i++) {
                    fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
                }
            }
        }
        if (chainable) {
            return elems;
        }
        if (bulk) {
            return fn.call(elems);
        }
        return len ? fn(elems[0], key) : emptyGet;
    };
    var rmsPrefix = /^-ms-/, rdashAlpha = /-([a-z])/g;
    function fcamelCase(all, letter) {
        return letter.toUpperCase();
    }
    function camelCase(string) {
        return string.replace(rmsPrefix, 'ms-').replace(rdashAlpha, fcamelCase);
    }
    var acceptData = function (owner) {
        return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
    };
    function Data() {
        this.expando = jQuery.expando + Data.uid++;
    }
    Data.uid = 1;
    Data.prototype = {
        cache: function (owner) {
            var value = owner[this.expando];
            if (!value) {
                value = {};
                if (acceptData(owner)) {
                    if (owner.nodeType) {
                        owner[this.expando] = value;
                    } else {
                        Object.defineProperty(owner, this.expando, {
                            value: value,
                            configurable: true
                        });
                    }
                }
            }
            return value;
        },
        set: function (owner, data, value) {
            var prop, cache = this.cache(owner);
            if (typeof data === 'string') {
                cache[camelCase(data)] = value;
            } else {
                for (prop in data) {
                    cache[camelCase(prop)] = data[prop];
                }
            }
            return cache;
        },
        get: function (owner, key) {
            return key === undefined ? this.cache(owner) : owner[this.expando] && owner[this.expando][camelCase(key)];
        },
        access: function (owner, key, value) {
            if (key === undefined || key && typeof key === 'string' && value === undefined) {
                return this.get(owner, key);
            }
            this.set(owner, key, value);
            return value !== undefined ? value : key;
        },
        remove: function (owner, key) {
            var i, cache = owner[this.expando];
            if (cache === undefined) {
                return;
            }
            if (key !== undefined) {
                if (Array.isArray(key)) {
                    key = key.map(camelCase);
                } else {
                    key = camelCase(key);
                    key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
                }
                i = key.length;
                while (i--) {
                    delete cache[key[i]];
                }
            }
            if (key === undefined || jQuery.isEmptyObject(cache)) {
                if (owner.nodeType) {
                    owner[this.expando] = undefined;
                } else {
                    delete owner[this.expando];
                }
            }
        },
        hasData: function (owner) {
            var cache = owner[this.expando];
            return cache !== undefined && !jQuery.isEmptyObject(cache);
        }
    };
    var dataPriv = new Data();
    var dataUser = new Data();
    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /[A-Z]/g;
    function getData(data) {
        if (data === 'true') {
            return true;
        }
        if (data === 'false') {
            return false;
        }
        if (data === 'null') {
            return null;
        }
        if (data === +data + '') {
            return +data;
        }
        if (rbrace.test(data)) {
            return JSON.parse(data);
        }
        return data;
    }
    function dataAttr(elem, key, data) {
        var name;
        if (data === undefined && elem.nodeType === 1) {
            name = 'data-' + key.replace(rmultiDash, '-$&').toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === 'string') {
                try {
                    data = getData(data);
                } catch (e) {
                }
                dataUser.set(elem, key, data);
            } else {
                data = undefined;
            }
        }
        return data;
    }
    jQuery.extend({
        hasData: function (elem) {
            return dataUser.hasData(elem) || dataPriv.hasData(elem);
        },
        data: function (elem, name, data) {
            return dataUser.access(elem, name, data);
        },
        removeData: function (elem, name) {
            dataUser.remove(elem, name);
        },
        _data: function (elem, name, data) {
            return dataPriv.access(elem, name, data);
        },
        _removeData: function (elem, name) {
            dataPriv.remove(elem, name);
        }
    });
    jQuery.fn.extend({
        data: function (key, value) {
            var i, name, data, elem = this[0], attrs = elem && elem.attributes;
            if (key === undefined) {
                if (this.length) {
                    data = dataUser.get(elem);
                    if (elem.nodeType === 1 && !dataPriv.get(elem, 'hasDataAttrs')) {
                        i = attrs.length;
                        while (i--) {
                            if (attrs[i]) {
                                name = attrs[i].name;
                                if (name.indexOf('data-') === 0) {
                                    name = camelCase(name.slice(5));
                                    dataAttr(elem, name, data[name]);
                                }
                            }
                        }
                        dataPriv.set(elem, 'hasDataAttrs', true);
                    }
                }
                return data;
            }
            if (typeof key === 'object') {
                return this.each(function () {
                    dataUser.set(this, key);
                });
            }
            return access(this, function (value) {
                var data;
                if (elem && value === undefined) {
                    data = dataUser.get(elem, key);
                    if (data !== undefined) {
                        return data;
                    }
                    data = dataAttr(elem, key);
                    if (data !== undefined) {
                        return data;
                    }
                    return;
                }
                this.each(function () {
                    dataUser.set(this, key, value);
                });
            }, null, value, arguments.length > 1, null, true);
        },
        removeData: function (key) {
            return this.each(function () {
                dataUser.remove(this, key);
            });
        }
    });
    jQuery.extend({
        queue: function (elem, type, data) {
            var queue;
            if (elem) {
                type = (type || 'fx') + 'queue';
                queue = dataPriv.get(elem, type);
                if (data) {
                    if (!queue || Array.isArray(data)) {
                        queue = dataPriv.access(elem, type, jQuery.makeArray(data));
                    } else {
                        queue.push(data);
                    }
                }
                return queue || [];
            }
        },
        dequeue: function (elem, type) {
            type = type || 'fx';
            var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function () {
                    jQuery.dequeue(elem, type);
                };
            if (fn === 'inprogress') {
                fn = queue.shift();
                startLength--;
            }
            if (fn) {
                if (type === 'fx') {
                    queue.unshift('inprogress');
                }
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }
            if (!startLength && hooks) {
                hooks.empty.fire();
            }
        },
        _queueHooks: function (elem, type) {
            var key = type + 'queueHooks';
            return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
                empty: jQuery.Callbacks('once memory').add(function () {
                    dataPriv.remove(elem, [
                        type + 'queue',
                        key
                    ]);
                })
            });
        }
    });
    jQuery.fn.extend({
        queue: function (type, data) {
            var setter = 2;
            if (typeof type !== 'string') {
                data = type;
                type = 'fx';
                setter--;
            }
            if (arguments.length < setter) {
                return jQuery.queue(this[0], type);
            }
            return data === undefined ? this : this.each(function () {
                var queue = jQuery.queue(this, type, data);
                jQuery._queueHooks(this, type);
                if (type === 'fx' && queue[0] !== 'inprogress') {
                    jQuery.dequeue(this, type);
                }
            });
        },
        dequeue: function (type) {
            return this.each(function () {
                jQuery.dequeue(this, type);
            });
        },
        clearQueue: function (type) {
            return this.queue(type || 'fx', []);
        },
        promise: function (type, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function () {
                    if (!--count) {
                        defer.resolveWith(elements, [elements]);
                    }
                };
            if (typeof type !== 'string') {
                obj = type;
                type = undefined;
            }
            type = type || 'fx';
            while (i--) {
                tmp = dataPriv.get(elements[i], type + 'queueHooks');
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });
    var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
    var rcssNum = new RegExp('^(?:([+-])=|)(' + pnum + ')([a-z%]*)$', 'i');
    var cssExpand = [
        'Top',
        'Right',
        'Bottom',
        'Left'
    ];
    var documentElement = document.documentElement;
    var isAttached = function (elem) {
            return jQuery.contains(elem.ownerDocument, elem);
        }, composed = { composed: true };
    if (documentElement.getRootNode) {
        isAttached = function (elem) {
            return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
        };
    }
    var isHiddenWithinTree = function (elem, el) {
        elem = el || elem;
        return elem.style.display === 'none' || elem.style.display === '' && isAttached(elem) && jQuery.css(elem, 'display') === 'none';
    };
    var swap = function (elem, options, callback, args) {
        var ret, name, old = {};
        for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
        }
        ret = callback.apply(elem, args || []);
        for (name in options) {
            elem.style[name] = old[name];
        }
        return ret;
    };
    function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted, scale, maxIterations = 20, currentValue = tween ? function () {
                return tween.cur();
            } : function () {
                return jQuery.css(elem, prop, '');
            }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? '' : 'px'), initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== 'px' && +initial) && rcssNum.exec(jQuery.css(elem, prop));
        if (initialInUnit && initialInUnit[3] !== unit) {
            initial = initial / 2;
            unit = unit || initialInUnit[3];
            initialInUnit = +initial || 1;
            while (maxIterations--) {
                jQuery.style(elem, prop, initialInUnit + unit);
                if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
                    maxIterations = 0;
                }
                initialInUnit = initialInUnit / scale;
            }
            initialInUnit = initialInUnit * 2;
            jQuery.style(elem, prop, initialInUnit + unit);
            valueParts = valueParts || [];
        }
        if (valueParts) {
            initialInUnit = +initialInUnit || +initial || 0;
            adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
            if (tween) {
                tween.unit = unit;
                tween.start = initialInUnit;
                tween.end = adjusted;
            }
        }
        return adjusted;
    }
    var defaultDisplayMap = {};
    function getDefaultDisplay(elem) {
        var temp, doc = elem.ownerDocument, nodeName = elem.nodeName, display = defaultDisplayMap[nodeName];
        if (display) {
            return display;
        }
        temp = doc.body.appendChild(doc.createElement(nodeName));
        display = jQuery.css(temp, 'display');
        temp.parentNode.removeChild(temp);
        if (display === 'none') {
            display = 'block';
        }
        defaultDisplayMap[nodeName] = display;
        return display;
    }
    function showHide(elements, show) {
        var display, elem, values = [], index = 0, length = elements.length;
        for (; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            display = elem.style.display;
            if (show) {
                if (display === 'none') {
                    values[index] = dataPriv.get(elem, 'display') || null;
                    if (!values[index]) {
                        elem.style.display = '';
                    }
                }
                if (elem.style.display === '' && isHiddenWithinTree(elem)) {
                    values[index] = getDefaultDisplay(elem);
                }
            } else {
                if (display !== 'none') {
                    values[index] = 'none';
                    dataPriv.set(elem, 'display', display);
                }
            }
        }
        for (index = 0; index < length; index++) {
            if (values[index] != null) {
                elements[index].style.display = values[index];
            }
        }
        return elements;
    }
    jQuery.fn.extend({
        show: function () {
            return showHide(this, true);
        },
        hide: function () {
            return showHide(this);
        },
        toggle: function (state) {
            if (typeof state === 'boolean') {
                return state ? this.show() : this.hide();
            }
            return this.each(function () {
                if (isHiddenWithinTree(this)) {
                    jQuery(this).show();
                } else {
                    jQuery(this).hide();
                }
            });
        }
    });
    var rcheckableType = /^(?:checkbox|radio)$/i;
    var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
    var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;
    var wrapMap = {
        option: [
            1,
            '<select multiple=\'multiple\'>',
            '</select>'
        ],
        thead: [
            1,
            '<table>',
            '</table>'
        ],
        col: [
            2,
            '<table><colgroup>',
            '</colgroup></table>'
        ],
        tr: [
            2,
            '<table><tbody>',
            '</tbody></table>'
        ],
        td: [
            3,
            '<table><tbody><tr>',
            '</tr></tbody></table>'
        ],
        _default: [
            0,
            '',
            ''
        ]
    };
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    function getAll(context, tag) {
        var ret;
        if (typeof context.getElementsByTagName !== 'undefined') {
            ret = context.getElementsByTagName(tag || '*');
        } else if (typeof context.querySelectorAll !== 'undefined') {
            ret = context.querySelectorAll(tag || '*');
        } else {
            ret = [];
        }
        if (tag === undefined || tag && nodeName(context, tag)) {
            return jQuery.merge([context], ret);
        }
        return ret;
    }
    function setGlobalEval(elems, refElements) {
        var i = 0, l = elems.length;
        for (; i < l; i++) {
            dataPriv.set(elems[i], 'globalEval', !refElements || dataPriv.get(refElements[i], 'globalEval'));
        }
    }
    var rhtml = /<|&#?\w+;/;
    function buildFragment(elems, context, scripts, selection, ignored) {
        var elem, tmp, tag, wrap, attached, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
        for (; i < l; i++) {
            elem = elems[i];
            if (elem || elem === 0) {
                if (toType(elem) === 'object') {
                    jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
                } else if (!rhtml.test(elem)) {
                    nodes.push(context.createTextNode(elem));
                } else {
                    tmp = tmp || fragment.appendChild(context.createElement('div'));
                    tag = (rtagName.exec(elem) || [
                        '',
                        ''
                    ])[1].toLowerCase();
                    wrap = wrapMap[tag] || wrapMap._default;
                    tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];
                    j = wrap[0];
                    while (j--) {
                        tmp = tmp.lastChild;
                    }
                    jQuery.merge(nodes, tmp.childNodes);
                    tmp = fragment.firstChild;
                    tmp.textContent = '';
                }
            }
        }
        fragment.textContent = '';
        i = 0;
        while (elem = nodes[i++]) {
            if (selection && jQuery.inArray(elem, selection) > -1) {
                if (ignored) {
                    ignored.push(elem);
                }
                continue;
            }
            attached = isAttached(elem);
            tmp = getAll(fragment.appendChild(elem), 'script');
            if (attached) {
                setGlobalEval(tmp);
            }
            if (scripts) {
                j = 0;
                while (elem = tmp[j++]) {
                    if (rscriptType.test(elem.type || '')) {
                        scripts.push(elem);
                    }
                }
            }
        }
        return fragment;
    }
    (function () {
        var fragment = document.createDocumentFragment(), div = fragment.appendChild(document.createElement('div')), input = document.createElement('input');
        input.setAttribute('type', 'radio');
        input.setAttribute('checked', 'checked');
        input.setAttribute('name', 't');
        div.appendChild(input);
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
        div.innerHTML = '<textarea>x</textarea>';
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
    }());
    var rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/, rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
    function returnTrue() {
        return true;
    }
    function returnFalse() {
        return false;
    }
    function expectSync(elem, type) {
        return elem === safeActiveElement() === (type === 'focus');
    }
    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch (err) {
        }
    }
    function on(elem, types, selector, data, fn, one) {
        var origFn, type;
        if (typeof types === 'object') {
            if (typeof selector !== 'string') {
                data = data || selector;
                selector = undefined;
            }
            for (type in types) {
                on(elem, type, selector, data, types[type], one);
            }
            return elem;
        }
        if (data == null && fn == null) {
            fn = selector;
            data = selector = undefined;
        } else if (fn == null) {
            if (typeof selector === 'string') {
                fn = data;
                data = undefined;
            } else {
                fn = data;
                data = selector;
                selector = undefined;
            }
        }
        if (fn === false) {
            fn = returnFalse;
        } else if (!fn) {
            return elem;
        }
        if (one === 1) {
            origFn = fn;
            fn = function (event) {
                jQuery().off(event);
                return origFn.apply(this, arguments);
            };
            fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
        }
        return elem.each(function () {
            jQuery.event.add(this, types, fn, data, selector);
        });
    }
    jQuery.event = {
        global: {},
        add: function (elem, types, handler, data, selector) {
            var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.get(elem);
            if (!elemData) {
                return;
            }
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }
            if (selector) {
                jQuery.find.matchesSelector(documentElement, selector);
            }
            if (!handler.guid) {
                handler.guid = jQuery.guid++;
            }
            if (!(events = elemData.events)) {
                events = elemData.events = {};
            }
            if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function (e) {
                    return typeof jQuery !== 'undefined' && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
                };
            }
            types = (types || '').match(rnothtmlwhite) || [''];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || '').split('.').sort();
                if (!type) {
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                special = jQuery.event.special[type] || {};
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join('.')
                }, handleObjIn);
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle);
                        }
                    }
                }
                if (special.add) {
                    special.add.call(elem, handleObj);
                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid;
                    }
                }
                if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                } else {
                    handlers.push(handleObj);
                }
                jQuery.event.global[type] = true;
            }
        },
        remove: function (elem, types, handler, selector, mappedTypes) {
            var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
            if (!elemData || !(events = elemData.events)) {
                return;
            }
            types = (types || '').match(rnothtmlwhite) || [''];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || '').split('.').sort();
                if (!type) {
                    for (type in events) {
                        jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    }
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)');
                origCount = j = handlers.length;
                while (j--) {
                    handleObj = handlers[j];
                    if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === '**' && handleObj.selector)) {
                        handlers.splice(j, 1);
                        if (handleObj.selector) {
                            handlers.delegateCount--;
                        }
                        if (special.remove) {
                            special.remove.call(elem, handleObj);
                        }
                    }
                }
                if (origCount && !handlers.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                        jQuery.removeEvent(elem, type, elemData.handle);
                    }
                    delete events[type];
                }
            }
            if (jQuery.isEmptyObject(events)) {
                dataPriv.remove(elem, 'handle events');
            }
        },
        dispatch: function (nativeEvent) {
            var event = jQuery.event.fix(nativeEvent);
            var i, j, ret, matched, handleObj, handlerQueue, args = new Array(arguments.length), handlers = (dataPriv.get(this, 'events') || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
            args[0] = event;
            for (i = 1; i < arguments.length; i++) {
                args[i] = arguments[i];
            }
            event.delegateTarget = this;
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                return;
            }
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;
                j = 0;
                while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                    if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
                        event.handleObj = handleObj;
                        event.data = handleObj.data;
                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                        if (ret !== undefined) {
                            if ((event.result = ret) === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }
            if (special.postDispatch) {
                special.postDispatch.call(this, event);
            }
            return event.result;
        },
        handlers: function (event, handlers) {
            var i, handleObj, sel, matchedHandlers, matchedSelectors, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            if (delegateCount && cur.nodeType && !(event.type === 'click' && event.button >= 1)) {
                for (; cur !== this; cur = cur.parentNode || this) {
                    if (cur.nodeType === 1 && !(event.type === 'click' && cur.disabled === true)) {
                        matchedHandlers = [];
                        matchedSelectors = {};
                        for (i = 0; i < delegateCount; i++) {
                            handleObj = handlers[i];
                            sel = handleObj.selector + ' ';
                            if (matchedSelectors[sel] === undefined) {
                                matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
                            }
                            if (matchedSelectors[sel]) {
                                matchedHandlers.push(handleObj);
                            }
                        }
                        if (matchedHandlers.length) {
                            handlerQueue.push({
                                elem: cur,
                                handlers: matchedHandlers
                            });
                        }
                    }
                }
            }
            cur = this;
            if (delegateCount < handlers.length) {
                handlerQueue.push({
                    elem: cur,
                    handlers: handlers.slice(delegateCount)
                });
            }
            return handlerQueue;
        },
        addProp: function (name, hook) {
            Object.defineProperty(jQuery.Event.prototype, name, {
                enumerable: true,
                configurable: true,
                get: isFunction(hook) ? function () {
                    if (this.originalEvent) {
                        return hook(this.originalEvent);
                    }
                } : function () {
                    if (this.originalEvent) {
                        return this.originalEvent[name];
                    }
                },
                set: function (value) {
                    Object.defineProperty(this, name, {
                        enumerable: true,
                        configurable: true,
                        writable: true,
                        value: value
                    });
                }
            });
        },
        fix: function (originalEvent) {
            return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
        },
        special: {
            load: { noBubble: true },
            click: {
                setup: function (data) {
                    var el = this || data;
                    if (rcheckableType.test(el.type) && el.click && nodeName(el, 'input')) {
                        leverageNative(el, 'click', returnTrue);
                    }
                    return false;
                },
                trigger: function (data) {
                    var el = this || data;
                    if (rcheckableType.test(el.type) && el.click && nodeName(el, 'input')) {
                        leverageNative(el, 'click');
                    }
                    return true;
                },
                _default: function (event) {
                    var target = event.target;
                    return rcheckableType.test(target.type) && target.click && nodeName(target, 'input') && dataPriv.get(target, 'click') || nodeName(target, 'a');
                }
            },
            beforeunload: {
                postDispatch: function (event) {
                    if (event.result !== undefined && event.originalEvent) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        }
    };
    function leverageNative(el, type, expectSync) {
        if (!expectSync) {
            if (dataPriv.get(el, type) === undefined) {
                jQuery.event.add(el, type, returnTrue);
            }
            return;
        }
        dataPriv.set(el, type, false);
        jQuery.event.add(el, type, {
            namespace: false,
            handler: function (event) {
                var notAsync, result, saved = dataPriv.get(this, type);
                if (event.isTrigger & 1 && this[type]) {
                    if (!saved.length) {
                        saved = slice.call(arguments);
                        dataPriv.set(this, type, saved);
                        notAsync = expectSync(this, type);
                        this[type]();
                        result = dataPriv.get(this, type);
                        if (saved !== result || notAsync) {
                            dataPriv.set(this, type, false);
                        } else {
                            result = {};
                        }
                        if (saved !== result) {
                            event.stopImmediatePropagation();
                            event.preventDefault();
                            return result.value;
                        }
                    } else if ((jQuery.event.special[type] || {}).delegateType) {
                        event.stopPropagation();
                    }
                } else if (saved.length) {
                    dataPriv.set(this, type, { value: jQuery.event.trigger(jQuery.extend(saved[0], jQuery.Event.prototype), saved.slice(1), this) });
                    event.stopImmediatePropagation();
                }
            }
        });
    }
    jQuery.removeEvent = function (elem, type, handle) {
        if (elem.removeEventListener) {
            elem.removeEventListener(type, handle);
        }
    };
    jQuery.Event = function (src, props) {
        if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props);
        }
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && src.returnValue === false ? returnTrue : returnFalse;
            this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
            this.currentTarget = src.currentTarget;
            this.relatedTarget = src.relatedTarget;
        } else {
            this.type = src;
        }
        if (props) {
            jQuery.extend(this, props);
        }
        this.timeStamp = src && src.timeStamp || Date.now();
        this[jQuery.expando] = true;
    };
    jQuery.Event.prototype = {
        constructor: jQuery.Event,
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        isSimulated: false,
        preventDefault: function () {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (e && !this.isSimulated) {
                e.preventDefault();
            }
        },
        stopPropagation: function () {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (e && !this.isSimulated) {
                e.stopPropagation();
            }
        },
        stopImmediatePropagation: function () {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = returnTrue;
            if (e && !this.isSimulated) {
                e.stopImmediatePropagation();
            }
            this.stopPropagation();
        }
    };
    jQuery.each({
        altKey: true,
        bubbles: true,
        cancelable: true,
        changedTouches: true,
        ctrlKey: true,
        detail: true,
        eventPhase: true,
        metaKey: true,
        pageX: true,
        pageY: true,
        shiftKey: true,
        view: true,
        'char': true,
        code: true,
        charCode: true,
        key: true,
        keyCode: true,
        button: true,
        buttons: true,
        clientX: true,
        clientY: true,
        offsetX: true,
        offsetY: true,
        pointerId: true,
        pointerType: true,
        screenX: true,
        screenY: true,
        targetTouches: true,
        toElement: true,
        touches: true,
        which: function (event) {
            var button = event.button;
            if (event.which == null && rkeyEvent.test(event.type)) {
                return event.charCode != null ? event.charCode : event.keyCode;
            }
            if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
                if (button & 1) {
                    return 1;
                }
                if (button & 2) {
                    return 3;
                }
                if (button & 4) {
                    return 2;
                }
                return 0;
            }
            return event.which;
        }
    }, jQuery.event.addProp);
    jQuery.each({
        focus: 'focusin',
        blur: 'focusout'
    }, function (type, delegateType) {
        jQuery.event.special[type] = {
            setup: function () {
                leverageNative(this, type, expectSync);
                return false;
            },
            trigger: function () {
                leverageNative(this, type);
                return true;
            },
            delegateType: delegateType
        };
    });
    jQuery.each({
        mouseenter: 'mouseover',
        mouseleave: 'mouseout',
        pointerenter: 'pointerover',
        pointerleave: 'pointerout'
    }, function (orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function (event) {
                var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
                if (!related || related !== target && !jQuery.contains(target, related)) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });
    jQuery.fn.extend({
        on: function (types, selector, data, fn) {
            return on(this, types, selector, data, fn);
        },
        one: function (types, selector, data, fn) {
            return on(this, types, selector, data, fn, 1);
        },
        off: function (types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + '.' + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                return this;
            }
            if (typeof types === 'object') {
                for (type in types) {
                    this.off(type, selector, types[type]);
                }
                return this;
            }
            if (selector === false || typeof selector === 'function') {
                fn = selector;
                selector = undefined;
            }
            if (fn === false) {
                fn = returnFalse;
            }
            return this.each(function () {
                jQuery.event.remove(this, types, fn, selector);
            });
        }
    });
    var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi, rnoInnerhtml = /<script|<style|<link/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
    function manipulationTarget(elem, content) {
        if (nodeName(elem, 'table') && nodeName(content.nodeType !== 11 ? content : content.firstChild, 'tr')) {
            return jQuery(elem).children('tbody')[0] || elem;
        }
        return elem;
    }
    function disableScript(elem) {
        elem.type = (elem.getAttribute('type') !== null) + '/' + elem.type;
        return elem;
    }
    function restoreScript(elem) {
        if ((elem.type || '').slice(0, 5) === 'true/') {
            elem.type = elem.type.slice(5);
        } else {
            elem.removeAttribute('type');
        }
        return elem;
    }
    function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
        if (dest.nodeType !== 1) {
            return;
        }
        if (dataPriv.hasData(src)) {
            pdataOld = dataPriv.access(src);
            pdataCur = dataPriv.set(dest, pdataOld);
            events = pdataOld.events;
            if (events) {
                delete pdataCur.handle;
                pdataCur.events = {};
                for (type in events) {
                    for (i = 0, l = events[type].length; i < l; i++) {
                        jQuery.event.add(dest, type, events[type][i]);
                    }
                }
            }
        }
        if (dataUser.hasData(src)) {
            udataOld = dataUser.access(src);
            udataCur = jQuery.extend({}, udataOld);
            dataUser.set(dest, udataCur);
        }
    }
    function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase();
        if (nodeName === 'input' && rcheckableType.test(src.type)) {
            dest.checked = src.checked;
        } else if (nodeName === 'input' || nodeName === 'textarea') {
            dest.defaultValue = src.defaultValue;
        }
    }
    function domManip(collection, args, callback, ignored) {
        args = concat.apply([], args);
        var fragment, first, scripts, hasScripts, node, doc, i = 0, l = collection.length, iNoClone = l - 1, value = args[0], valueIsFunction = isFunction(value);
        if (valueIsFunction || l > 1 && typeof value === 'string' && !support.checkClone && rchecked.test(value)) {
            return collection.each(function (index) {
                var self = collection.eq(index);
                if (valueIsFunction) {
                    args[0] = value.call(this, index, self.html());
                }
                domManip(self, args, callback, ignored);
            });
        }
        if (l) {
            fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
            first = fragment.firstChild;
            if (fragment.childNodes.length === 1) {
                fragment = first;
            }
            if (first || ignored) {
                scripts = jQuery.map(getAll(fragment, 'script'), disableScript);
                hasScripts = scripts.length;
                for (; i < l; i++) {
                    node = fragment;
                    if (i !== iNoClone) {
                        node = jQuery.clone(node, true, true);
                        if (hasScripts) {
                            jQuery.merge(scripts, getAll(node, 'script'));
                        }
                    }
                    callback.call(collection[i], node, i);
                }
                if (hasScripts) {
                    doc = scripts[scripts.length - 1].ownerDocument;
                    jQuery.map(scripts, restoreScript);
                    for (i = 0; i < hasScripts; i++) {
                        node = scripts[i];
                        if (rscriptType.test(node.type || '') && !dataPriv.access(node, 'globalEval') && jQuery.contains(doc, node)) {
                            if (node.src && (node.type || '').toLowerCase() !== 'module') {
                                if (jQuery._evalUrl && !node.noModule) {
                                    jQuery._evalUrl(node.src, { nonce: node.nonce || node.getAttribute('nonce') });
                                }
                            } else {
                                DOMEval(node.textContent.replace(rcleanScript, ''), node, doc);
                            }
                        }
                    }
                }
            }
        }
        return collection;
    }
    function remove(elem, selector, keepData) {
        var node, nodes = selector ? jQuery.filter(selector, elem) : elem, i = 0;
        for (; (node = nodes[i]) != null; i++) {
            if (!keepData && node.nodeType === 1) {
                jQuery.cleanData(getAll(node));
            }
            if (node.parentNode) {
                if (keepData && isAttached(node)) {
                    setGlobalEval(getAll(node, 'script'));
                }
                node.parentNode.removeChild(node);
            }
        }
        return elem;
    }
    jQuery.extend({
        htmlPrefilter: function (html) {
            return html.replace(rxhtmlTag, '<$1></$2>');
        },
        clone: function (elem, dataAndEvents, deepDataAndEvents) {
            var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = isAttached(elem);
            if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                destElements = getAll(clone);
                srcElements = getAll(elem);
                for (i = 0, l = srcElements.length; i < l; i++) {
                    fixInput(srcElements[i], destElements[i]);
                }
            }
            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);
                    for (i = 0, l = srcElements.length; i < l; i++) {
                        cloneCopyEvent(srcElements[i], destElements[i]);
                    }
                } else {
                    cloneCopyEvent(elem, clone);
                }
            }
            destElements = getAll(clone, 'script');
            if (destElements.length > 0) {
                setGlobalEval(destElements, !inPage && getAll(elem, 'script'));
            }
            return clone;
        },
        cleanData: function (elems) {
            var data, elem, type, special = jQuery.event.special, i = 0;
            for (; (elem = elems[i]) !== undefined; i++) {
                if (acceptData(elem)) {
                    if (data = elem[dataPriv.expando]) {
                        if (data.events) {
                            for (type in data.events) {
                                if (special[type]) {
                                    jQuery.event.remove(elem, type);
                                } else {
                                    jQuery.removeEvent(elem, type, data.handle);
                                }
                            }
                        }
                        elem[dataPriv.expando] = undefined;
                    }
                    if (elem[dataUser.expando]) {
                        elem[dataUser.expando] = undefined;
                    }
                }
            }
        }
    });
    jQuery.fn.extend({
        detach: function (selector) {
            return remove(this, selector, true);
        },
        remove: function (selector) {
            return remove(this, selector);
        },
        text: function (value) {
            return access(this, function (value) {
                return value === undefined ? jQuery.text(this) : this.empty().each(function () {
                    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                        this.textContent = value;
                    }
                });
            }, null, value, arguments.length);
        },
        append: function () {
            return domManip(this, arguments, function (elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                }
            });
        },
        prepend: function () {
            return domManip(this, arguments, function (elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },
        before: function () {
            return domManip(this, arguments, function (elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this);
                }
            });
        },
        after: function () {
            return domManip(this, arguments, function (elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                }
            });
        },
        empty: function () {
            var elem, i = 0;
            for (; (elem = this[i]) != null; i++) {
                if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                    elem.textContent = '';
                }
            }
            return this;
        },
        clone: function (dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function () {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },
        html: function (value) {
            return access(this, function (value) {
                var elem = this[0] || {}, i = 0, l = this.length;
                if (value === undefined && elem.nodeType === 1) {
                    return elem.innerHTML;
                }
                if (typeof value === 'string' && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [
                        '',
                        ''
                    ])[1].toLowerCase()]) {
                    value = jQuery.htmlPrefilter(value);
                    try {
                        for (; i < l; i++) {
                            elem = this[i] || {};
                            if (elem.nodeType === 1) {
                                jQuery.cleanData(getAll(elem, false));
                                elem.innerHTML = value;
                            }
                        }
                        elem = 0;
                    } catch (e) {
                    }
                }
                if (elem) {
                    this.empty().append(value);
                }
            }, null, value, arguments.length);
        },
        replaceWith: function () {
            var ignored = [];
            return domManip(this, arguments, function (elem) {
                var parent = this.parentNode;
                if (jQuery.inArray(this, ignored) < 0) {
                    jQuery.cleanData(getAll(this));
                    if (parent) {
                        parent.replaceChild(elem, this);
                    }
                }
            }, ignored);
        }
    });
    jQuery.each({
        appendTo: 'append',
        prependTo: 'prepend',
        insertBefore: 'before',
        insertAfter: 'after',
        replaceAll: 'replaceWith'
    }, function (name, original) {
        jQuery.fn[name] = function (selector) {
            var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
            for (; i <= last; i++) {
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);
                push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
        };
    });
    var rnumnonpx = new RegExp('^(' + pnum + ')(?!px)[a-z%]+$', 'i');
    var getStyles = function (elem) {
        var view = elem.ownerDocument.defaultView;
        if (!view || !view.opener) {
            view = window;
        }
        return view.getComputedStyle(elem);
    };
    var rboxStyle = new RegExp(cssExpand.join('|'), 'i');
    (function () {
        function computeStyleTests() {
            if (!div) {
                return;
            }
            container.style.cssText = 'position:absolute;left:-11111px;width:60px;' + 'margin-top:1px;padding:0;border:0';
            div.style.cssText = 'position:relative;display:block;box-sizing:border-box;overflow:scroll;' + 'margin:auto;border:1px;padding:1px;' + 'width:60%;top:1%';
            documentElement.appendChild(container).appendChild(div);
            var divStyle = window.getComputedStyle(div);
            pixelPositionVal = divStyle.top !== '1%';
            reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;
            div.style.right = '60%';
            pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;
            boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;
            div.style.position = 'absolute';
            scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
            documentElement.removeChild(container);
            div = null;
        }
        function roundPixelMeasures(measure) {
            return Math.round(parseFloat(measure));
        }
        var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal, reliableMarginLeftVal, container = document.createElement('div'), div = document.createElement('div');
        if (!div.style) {
            return;
        }
        div.style.backgroundClip = 'content-box';
        div.cloneNode(true).style.backgroundClip = '';
        support.clearCloneStyle = div.style.backgroundClip === 'content-box';
        jQuery.extend(support, {
            boxSizingReliable: function () {
                computeStyleTests();
                return boxSizingReliableVal;
            },
            pixelBoxStyles: function () {
                computeStyleTests();
                return pixelBoxStylesVal;
            },
            pixelPosition: function () {
                computeStyleTests();
                return pixelPositionVal;
            },
            reliableMarginLeft: function () {
                computeStyleTests();
                return reliableMarginLeftVal;
            },
            scrollboxSize: function () {
                computeStyleTests();
                return scrollboxSizeVal;
            }
        });
    }());
    function curCSS(elem, name, computed) {
        var width, minWidth, maxWidth, ret, style = elem.style;
        computed = computed || getStyles(elem);
        if (computed) {
            ret = computed.getPropertyValue(name) || computed[name];
            if (ret === '' && !isAttached(elem)) {
                ret = jQuery.style(elem, name);
            }
            if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
                width = style.width;
                minWidth = style.minWidth;
                maxWidth = style.maxWidth;
                style.minWidth = style.maxWidth = style.width = ret;
                ret = computed.width;
                style.width = width;
                style.minWidth = minWidth;
                style.maxWidth = maxWidth;
            }
        }
        return ret !== undefined ? ret + '' : ret;
    }
    function addGetHookIf(conditionFn, hookFn) {
        return {
            get: function () {
                if (conditionFn()) {
                    delete this.get;
                    return;
                }
                return (this.get = hookFn).apply(this, arguments);
            }
        };
    }
    var cssPrefixes = [
            'Webkit',
            'Moz',
            'ms'
        ], emptyStyle = document.createElement('div').style, vendorProps = {};
    function vendorPropName(name) {
        var capName = name[0].toUpperCase() + name.slice(1), i = cssPrefixes.length;
        while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in emptyStyle) {
                return name;
            }
        }
    }
    function finalPropName(name) {
        var final = jQuery.cssProps[name] || vendorProps[name];
        if (final) {
            return final;
        }
        if (name in emptyStyle) {
            return name;
        }
        return vendorProps[name] = vendorPropName(name) || name;
    }
    var rdisplayswap = /^(none|table(?!-c[ea]).+)/, rcustomProp = /^--/, cssShow = {
            position: 'absolute',
            visibility: 'hidden',
            display: 'block'
        }, cssNormalTransform = {
            letterSpacing: '0',
            fontWeight: '400'
        };
    function setPositiveNumber(elem, value, subtract) {
        var matches = rcssNum.exec(value);
        return matches ? Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || 'px') : value;
    }
    function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
        var i = dimension === 'width' ? 1 : 0, extra = 0, delta = 0;
        if (box === (isBorderBox ? 'border' : 'content')) {
            return 0;
        }
        for (; i < 4; i += 2) {
            if (box === 'margin') {
                delta += jQuery.css(elem, box + cssExpand[i], true, styles);
            }
            if (!isBorderBox) {
                delta += jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
                if (box !== 'padding') {
                    delta += jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
                } else {
                    extra += jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
                }
            } else {
                if (box === 'content') {
                    delta -= jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
                }
                if (box !== 'margin') {
                    delta -= jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
                }
            }
        }
        if (!isBorderBox && computedVal >= 0) {
            delta += Math.max(0, Math.ceil(elem['offset' + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5)) || 0;
        }
        return delta;
    }
    function getWidthOrHeight(elem, dimension, extra) {
        var styles = getStyles(elem), boxSizingNeeded = !support.boxSizingReliable() || extra, isBorderBox = boxSizingNeeded && jQuery.css(elem, 'boxSizing', false, styles) === 'border-box', valueIsBorderBox = isBorderBox, val = curCSS(elem, dimension, styles), offsetProp = 'offset' + dimension[0].toUpperCase() + dimension.slice(1);
        if (rnumnonpx.test(val)) {
            if (!extra) {
                return val;
            }
            val = 'auto';
        }
        if ((!support.boxSizingReliable() && isBorderBox || val === 'auto' || !parseFloat(val) && jQuery.css(elem, 'display', false, styles) === 'inline') && elem.getClientRects().length) {
            isBorderBox = jQuery.css(elem, 'boxSizing', false, styles) === 'border-box';
            valueIsBorderBox = offsetProp in elem;
            if (valueIsBorderBox) {
                val = elem[offsetProp];
            }
        }
        val = parseFloat(val) || 0;
        return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? 'border' : 'content'), valueIsBorderBox, styles, val) + 'px';
    }
    jQuery.extend({
        cssHooks: {
            opacity: {
                get: function (elem, computed) {
                    if (computed) {
                        var ret = curCSS(elem, 'opacity');
                        return ret === '' ? '1' : ret;
                    }
                }
            }
        },
        cssNumber: {
            'animationIterationCount': true,
            'columnCount': true,
            'fillOpacity': true,
            'flexGrow': true,
            'flexShrink': true,
            'fontWeight': true,
            'gridArea': true,
            'gridColumn': true,
            'gridColumnEnd': true,
            'gridColumnStart': true,
            'gridRow': true,
            'gridRowEnd': true,
            'gridRowStart': true,
            'lineHeight': true,
            'opacity': true,
            'order': true,
            'orphans': true,
            'widows': true,
            'zIndex': true,
            'zoom': true
        },
        cssProps: {},
        style: function (elem, name, value, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return;
            }
            var ret, type, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name), style = elem.style;
            if (!isCustomProp) {
                name = finalPropName(origName);
            }
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (value !== undefined) {
                type = typeof value;
                if (type === 'string' && (ret = rcssNum.exec(value)) && ret[1]) {
                    value = adjustCSS(elem, name, ret);
                    type = 'number';
                }
                if (value == null || value !== value) {
                    return;
                }
                if (type === 'number' && !isCustomProp) {
                    value += ret && ret[3] || (jQuery.cssNumber[origName] ? '' : 'px');
                }
                if (!support.clearCloneStyle && value === '' && name.indexOf('background') === 0) {
                    style[name] = 'inherit';
                }
                if (!hooks || !('set' in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                    if (isCustomProp) {
                        style.setProperty(name, value);
                    } else {
                        style[name] = value;
                    }
                }
            } else {
                if (hooks && 'get' in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                    return ret;
                }
                return style[name];
            }
        },
        css: function (elem, name, extra, styles) {
            var val, num, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name);
            if (!isCustomProp) {
                name = finalPropName(origName);
            }
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (hooks && 'get' in hooks) {
                val = hooks.get(elem, true, extra);
            }
            if (val === undefined) {
                val = curCSS(elem, name, styles);
            }
            if (val === 'normal' && name in cssNormalTransform) {
                val = cssNormalTransform[name];
            }
            if (extra === '' || extra) {
                num = parseFloat(val);
                return extra === true || isFinite(num) ? num || 0 : val;
            }
            return val;
        }
    });
    jQuery.each([
        'height',
        'width'
    ], function (i, dimension) {
        jQuery.cssHooks[dimension] = {
            get: function (elem, computed, extra) {
                if (computed) {
                    return rdisplayswap.test(jQuery.css(elem, 'display')) && (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
                        return getWidthOrHeight(elem, dimension, extra);
                    }) : getWidthOrHeight(elem, dimension, extra);
                }
            },
            set: function (elem, value, extra) {
                var matches, styles = getStyles(elem), scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === 'absolute', boxSizingNeeded = scrollboxSizeBuggy || extra, isBorderBox = boxSizingNeeded && jQuery.css(elem, 'boxSizing', false, styles) === 'border-box', subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0;
                if (isBorderBox && scrollboxSizeBuggy) {
                    subtract -= Math.ceil(elem['offset' + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, 'border', false, styles) - 0.5);
                }
                if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || 'px') !== 'px') {
                    elem.style[dimension] = value;
                    value = jQuery.css(elem, dimension);
                }
                return setPositiveNumber(elem, value, subtract);
            }
        };
    });
    jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
        if (computed) {
            return (parseFloat(curCSS(elem, 'marginLeft')) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function () {
                return elem.getBoundingClientRect().left;
            })) + 'px';
        }
    });
    jQuery.each({
        margin: '',
        padding: '',
        border: 'Width'
    }, function (prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function (value) {
                var i = 0, expanded = {}, parts = typeof value === 'string' ? value.split(' ') : [value];
                for (; i < 4; i++) {
                    expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                }
                return expanded;
            }
        };
        if (prefix !== 'margin') {
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
    });
    jQuery.fn.extend({
        css: function (name, value) {
            return access(this, function (elem, name, value) {
                var styles, len, map = {}, i = 0;
                if (Array.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;
                    for (; i < len; i++) {
                        map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    }
                    return map;
                }
                return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
        }
    });
    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    jQuery.Tween = Tween;
    Tween.prototype = {
        constructor: Tween,
        init: function (elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || jQuery.easing._default;
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? '' : 'px');
        },
        cur: function () {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function (percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) {
                this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
            } else {
                this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
            }
            if (hooks && hooks.set) {
                hooks.set(this);
            } else {
                Tween.propHooks._default.set(this);
            }
            return this;
        }
    };
    Tween.prototype.init.prototype = Tween.prototype;
    Tween.propHooks = {
        _default: {
            get: function (tween) {
                var result;
                if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
                    return tween.elem[tween.prop];
                }
                result = jQuery.css(tween.elem, tween.prop, '');
                return !result || result === 'auto' ? 0 : result;
            },
            set: function (tween) {
                if (jQuery.fx.step[tween.prop]) {
                    jQuery.fx.step[tween.prop](tween);
                } else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
                    jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                } else {
                    tween.elem[tween.prop] = tween.now;
                }
            }
        }
    };
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function (tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
                tween.elem[tween.prop] = tween.now;
            }
        }
    };
    jQuery.easing = {
        linear: function (p) {
            return p;
        },
        swing: function (p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
        },
        _default: 'swing'
    };
    jQuery.fx = Tween.prototype.init;
    jQuery.fx.step = {};
    var fxNow, inProgress, rfxtypes = /^(?:toggle|show|hide)$/, rrun = /queueHooks$/;
    function schedule() {
        if (inProgress) {
            if (document.hidden === false && window.requestAnimationFrame) {
                window.requestAnimationFrame(schedule);
            } else {
                window.setTimeout(schedule, jQuery.fx.interval);
            }
            jQuery.fx.tick();
        }
    }
    function createFxNow() {
        window.setTimeout(function () {
            fxNow = undefined;
        });
        return fxNow = Date.now();
    }
    function genFx(type, includeWidth) {
        var which, i = 0, attrs = { height: type };
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs['margin' + which] = attrs['padding' + which] = type;
        }
        if (includeWidth) {
            attrs.opacity = attrs.width = type;
        }
        return attrs;
    }
    function createTween(value, prop, animation) {
        var tween, collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners['*']), index = 0, length = collection.length;
        for (; index < length; index++) {
            if (tween = collection[index].call(animation, prop, value)) {
                return tween;
            }
        }
    }
    function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display, isBox = 'width' in props || 'height' in props, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHiddenWithinTree(elem), dataShow = dataPriv.get(elem, 'fxshow');
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, 'fx');
            if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function () {
                    if (!hooks.unqueued) {
                        oldfire();
                    }
                };
            }
            hooks.unqueued++;
            anim.always(function () {
                anim.always(function () {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, 'fx').length) {
                        hooks.empty.fire();
                    }
                });
            });
        }
        for (prop in props) {
            value = props[prop];
            if (rfxtypes.test(value)) {
                delete props[prop];
                toggle = toggle || value === 'toggle';
                if (value === (hidden ? 'hide' : 'show')) {
                    if (value === 'show' && dataShow && dataShow[prop] !== undefined) {
                        hidden = true;
                    } else {
                        continue;
                    }
                }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            }
        }
        propTween = !jQuery.isEmptyObject(props);
        if (!propTween && jQuery.isEmptyObject(orig)) {
            return;
        }
        if (isBox && elem.nodeType === 1) {
            opts.overflow = [
                style.overflow,
                style.overflowX,
                style.overflowY
            ];
            restoreDisplay = dataShow && dataShow.display;
            if (restoreDisplay == null) {
                restoreDisplay = dataPriv.get(elem, 'display');
            }
            display = jQuery.css(elem, 'display');
            if (display === 'none') {
                if (restoreDisplay) {
                    display = restoreDisplay;
                } else {
                    showHide([elem], true);
                    restoreDisplay = elem.style.display || restoreDisplay;
                    display = jQuery.css(elem, 'display');
                    showHide([elem]);
                }
            }
            if (display === 'inline' || display === 'inline-block' && restoreDisplay != null) {
                if (jQuery.css(elem, 'float') === 'none') {
                    if (!propTween) {
                        anim.done(function () {
                            style.display = restoreDisplay;
                        });
                        if (restoreDisplay == null) {
                            display = style.display;
                            restoreDisplay = display === 'none' ? '' : display;
                        }
                    }
                    style.display = 'inline-block';
                }
            }
        }
        if (opts.overflow) {
            style.overflow = 'hidden';
            anim.always(function () {
                style.overflow = opts.overflow[0];
                style.overflowX = opts.overflow[1];
                style.overflowY = opts.overflow[2];
            });
        }
        propTween = false;
        for (prop in orig) {
            if (!propTween) {
                if (dataShow) {
                    if ('hidden' in dataShow) {
                        hidden = dataShow.hidden;
                    }
                } else {
                    dataShow = dataPriv.access(elem, 'fxshow', { display: restoreDisplay });
                }
                if (toggle) {
                    dataShow.hidden = !hidden;
                }
                if (hidden) {
                    showHide([elem], true);
                }
                anim.done(function () {
                    if (!hidden) {
                        showHide([elem]);
                    }
                    dataPriv.remove(elem, 'fxshow');
                    for (prop in orig) {
                        jQuery.style(elem, prop, orig[prop]);
                    }
                });
            }
            propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
            if (!(prop in dataShow)) {
                dataShow[prop] = propTween.start;
                if (hidden) {
                    propTween.end = propTween.start;
                    propTween.start = 0;
                }
            }
        }
    }
    function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        for (index in props) {
            name = camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (Array.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
            }
            if (index !== name) {
                props[name] = value;
                delete props[index];
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && 'expand' in hooks) {
                value = hooks.expand(value);
                delete props[name];
                for (index in value) {
                    if (!(index in props)) {
                        props[index] = value[index];
                        specialEasing[index] = easing;
                    }
                }
            } else {
                specialEasing[name] = easing;
            }
        }
    }
    function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = Animation.prefilters.length, deferred = jQuery.Deferred().always(function () {
                delete tick.elem;
            }), tick = function () {
                if (stopped) {
                    return false;
                }
                var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
                for (; index < length; index++) {
                    animation.tweens[index].run(percent);
                }
                deferred.notifyWith(elem, [
                    animation,
                    percent,
                    remaining
                ]);
                if (percent < 1 && length) {
                    return remaining;
                }
                if (!length) {
                    deferred.notifyWith(elem, [
                        animation,
                        1,
                        0
                    ]);
                }
                deferred.resolveWith(elem, [animation]);
                return false;
            }, animation = deferred.promise({
                elem: elem,
                props: jQuery.extend({}, properties),
                opts: jQuery.extend(true, {
                    specialEasing: {},
                    easing: jQuery.easing._default
                }, options),
                originalProperties: properties,
                originalOptions: options,
                startTime: fxNow || createFxNow(),
                duration: options.duration,
                tweens: [],
                createTween: function (prop, end) {
                    var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                    animation.tweens.push(tween);
                    return tween;
                },
                stop: function (gotoEnd) {
                    var index = 0, length = gotoEnd ? animation.tweens.length : 0;
                    if (stopped) {
                        return this;
                    }
                    stopped = true;
                    for (; index < length; index++) {
                        animation.tweens[index].run(1);
                    }
                    if (gotoEnd) {
                        deferred.notifyWith(elem, [
                            animation,
                            1,
                            0
                        ]);
                        deferred.resolveWith(elem, [
                            animation,
                            gotoEnd
                        ]);
                    } else {
                        deferred.rejectWith(elem, [
                            animation,
                            gotoEnd
                        ]);
                    }
                    return this;
                }
            }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (; index < length; index++) {
            result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
                if (isFunction(result.stop)) {
                    jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
                }
                return result;
            }
        }
        jQuery.map(props, createTween, animation);
        if (isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
        }
        animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
        jQuery.fx.timer(jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        }));
        return animation;
    }
    jQuery.Animation = jQuery.extend(Animation, {
        tweeners: {
            '*': [function (prop, value) {
                    var tween = this.createTween(prop, value);
                    adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
                    return tween;
                }]
        },
        tweener: function (props, callback) {
            if (isFunction(props)) {
                callback = props;
                props = ['*'];
            } else {
                props = props.match(rnothtmlwhite);
            }
            var prop, index = 0, length = props.length;
            for (; index < length; index++) {
                prop = props[index];
                Animation.tweeners[prop] = Animation.tweeners[prop] || [];
                Animation.tweeners[prop].unshift(callback);
            }
        },
        prefilters: [defaultPrefilter],
        prefilter: function (callback, prepend) {
            if (prepend) {
                Animation.prefilters.unshift(callback);
            } else {
                Animation.prefilters.push(callback);
            }
        }
    });
    jQuery.speed = function (speed, easing, fn) {
        var opt = speed && typeof speed === 'object' ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing || isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !isFunction(easing) && easing
        };
        if (jQuery.fx.off) {
            opt.duration = 0;
        } else {
            if (typeof opt.duration !== 'number') {
                if (opt.duration in jQuery.fx.speeds) {
                    opt.duration = jQuery.fx.speeds[opt.duration];
                } else {
                    opt.duration = jQuery.fx.speeds._default;
                }
            }
        }
        if (opt.queue == null || opt.queue === true) {
            opt.queue = 'fx';
        }
        opt.old = opt.complete;
        opt.complete = function () {
            if (isFunction(opt.old)) {
                opt.old.call(this);
            }
            if (opt.queue) {
                jQuery.dequeue(this, opt.queue);
            }
        };
        return opt;
    };
    jQuery.fn.extend({
        fadeTo: function (speed, to, easing, callback) {
            return this.filter(isHiddenWithinTree).css('opacity', 0).show().end().animate({ opacity: to }, speed, easing, callback);
        },
        animate: function (prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function () {
                    var anim = Animation(this, jQuery.extend({}, prop), optall);
                    if (empty || dataPriv.get(this, 'finish')) {
                        anim.stop(true);
                    }
                };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function (type, clearQueue, gotoEnd) {
            var stopQueue = function (hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };
            if (typeof type !== 'string') {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if (clearQueue && type !== false) {
                this.queue(type || 'fx', []);
            }
            return this.each(function () {
                var dequeue = true, index = type != null && type + 'queueHooks', timers = jQuery.timers, data = dataPriv.get(this);
                if (index) {
                    if (data[index] && data[index].stop) {
                        stopQueue(data[index]);
                    }
                } else {
                    for (index in data) {
                        if (data[index] && data[index].stop && rrun.test(index)) {
                            stopQueue(data[index]);
                        }
                    }
                }
                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                        timers[index].anim.stop(gotoEnd);
                        dequeue = false;
                        timers.splice(index, 1);
                    }
                }
                if (dequeue || !gotoEnd) {
                    jQuery.dequeue(this, type);
                }
            });
        },
        finish: function (type) {
            if (type !== false) {
                type = type || 'fx';
            }
            return this.each(function () {
                var index, data = dataPriv.get(this), queue = data[type + 'queue'], hooks = data[type + 'queueHooks'], timers = jQuery.timers, length = queue ? queue.length : 0;
                data.finish = true;
                jQuery.queue(this, type, []);
                if (hooks && hooks.stop) {
                    hooks.stop.call(this, true);
                }
                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && timers[index].queue === type) {
                        timers[index].anim.stop(true);
                        timers.splice(index, 1);
                    }
                }
                for (index = 0; index < length; index++) {
                    if (queue[index] && queue[index].finish) {
                        queue[index].finish.call(this);
                    }
                }
                delete data.finish;
            });
        }
    });
    jQuery.each([
        'toggle',
        'show',
        'hide'
    ], function (i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function (speed, easing, callback) {
            return speed == null || typeof speed === 'boolean' ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
    });
    jQuery.each({
        slideDown: genFx('show'),
        slideUp: genFx('hide'),
        slideToggle: genFx('toggle'),
        fadeIn: { opacity: 'show' },
        fadeOut: { opacity: 'hide' },
        fadeToggle: { opacity: 'toggle' }
    }, function (name, props) {
        jQuery.fn[name] = function (speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });
    jQuery.timers = [];
    jQuery.fx.tick = function () {
        var timer, i = 0, timers = jQuery.timers;
        fxNow = Date.now();
        for (; i < timers.length; i++) {
            timer = timers[i];
            if (!timer() && timers[i] === timer) {
                timers.splice(i--, 1);
            }
        }
        if (!timers.length) {
            jQuery.fx.stop();
        }
        fxNow = undefined;
    };
    jQuery.fx.timer = function (timer) {
        jQuery.timers.push(timer);
        jQuery.fx.start();
    };
    jQuery.fx.interval = 13;
    jQuery.fx.start = function () {
        if (inProgress) {
            return;
        }
        inProgress = true;
        schedule();
    };
    jQuery.fx.stop = function () {
        inProgress = null;
    };
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    };
    jQuery.fn.delay = function (time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || 'fx';
        return this.queue(type, function (next, hooks) {
            var timeout = window.setTimeout(next, time);
            hooks.stop = function () {
                window.clearTimeout(timeout);
            };
        });
    };
    (function () {
        var input = document.createElement('input'), select = document.createElement('select'), opt = select.appendChild(document.createElement('option'));
        input.type = 'checkbox';
        support.checkOn = input.value !== '';
        support.optSelected = opt.selected;
        input = document.createElement('input');
        input.value = 't';
        input.type = 'radio';
        support.radioValue = input.value === 't';
    }());
    var boolHook, attrHandle = jQuery.expr.attrHandle;
    jQuery.fn.extend({
        attr: function (name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function (name) {
            return this.each(function () {
                jQuery.removeAttr(this, name);
            });
        }
    });
    jQuery.extend({
        attr: function (elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            if (nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            if (typeof elem.getAttribute === 'undefined') {
                return jQuery.prop(elem, name, value);
            }
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
            }
            if (value !== undefined) {
                if (value === null) {
                    jQuery.removeAttr(elem, name);
                    return;
                }
                if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                }
                elem.setAttribute(name, value + '');
                return value;
            }
            if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            }
            ret = jQuery.find.attr(elem, name);
            return ret == null ? undefined : ret;
        },
        attrHooks: {
            type: {
                set: function (elem, value) {
                    if (!support.radioValue && value === 'radio' && nodeName(elem, 'input')) {
                        var val = elem.value;
                        elem.setAttribute('type', value);
                        if (val) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            }
        },
        removeAttr: function (elem, value) {
            var name, i = 0, attrNames = value && value.match(rnothtmlwhite);
            if (attrNames && elem.nodeType === 1) {
                while (name = attrNames[i++]) {
                    elem.removeAttribute(name);
                }
            }
        }
    });
    boolHook = {
        set: function (elem, value, name) {
            if (value === false) {
                jQuery.removeAttr(elem, name);
            } else {
                elem.setAttribute(name, name);
            }
            return name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;
        attrHandle[name] = function (elem, name, isXML) {
            var ret, handle, lowercaseName = name.toLowerCase();
            if (!isXML) {
                handle = attrHandle[lowercaseName];
                attrHandle[lowercaseName] = ret;
                ret = getter(elem, name, isXML) != null ? lowercaseName : null;
                attrHandle[lowercaseName] = handle;
            }
            return ret;
        };
    });
    var rfocusable = /^(?:input|select|textarea|button)$/i, rclickable = /^(?:a|area)$/i;
    jQuery.fn.extend({
        prop: function (name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function (name) {
            return this.each(function () {
                delete this[jQuery.propFix[name] || name];
            });
        }
    });
    jQuery.extend({
        prop: function (elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            if (nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }
            if (value !== undefined) {
                if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                }
                return elem[name] = value;
            }
            if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            }
            return elem[name];
        },
        propHooks: {
            tabIndex: {
                get: function (elem) {
                    var tabindex = jQuery.find.attr(elem, 'tabindex');
                    if (tabindex) {
                        return parseInt(tabindex, 10);
                    }
                    if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
                        return 0;
                    }
                    return -1;
                }
            }
        },
        propFix: {
            'for': 'htmlFor',
            'class': 'className'
        }
    });
    if (!support.optSelected) {
        jQuery.propHooks.selected = {
            get: function (elem) {
                var parent = elem.parentNode;
                if (parent && parent.parentNode) {
                    parent.parentNode.selectedIndex;
                }
                return null;
            },
            set: function (elem) {
                var parent = elem.parentNode;
                if (parent) {
                    parent.selectedIndex;
                    if (parent.parentNode) {
                        parent.parentNode.selectedIndex;
                    }
                }
            }
        };
    }
    jQuery.each([
        'tabIndex',
        'readOnly',
        'maxLength',
        'cellSpacing',
        'cellPadding',
        'rowSpan',
        'colSpan',
        'useMap',
        'frameBorder',
        'contentEditable'
    ], function () {
        jQuery.propFix[this.toLowerCase()] = this;
    });
    function stripAndCollapse(value) {
        var tokens = value.match(rnothtmlwhite) || [];
        return tokens.join(' ');
    }
    function getClass(elem) {
        return elem.getAttribute && elem.getAttribute('class') || '';
    }
    function classesToArray(value) {
        if (Array.isArray(value)) {
            return value;
        }
        if (typeof value === 'string') {
            return value.match(rnothtmlwhite) || [];
        }
        return [];
    }
    jQuery.fn.extend({
        addClass: function (value) {
            var classes, elem, cur, curValue, clazz, j, finalValue, i = 0;
            if (isFunction(value)) {
                return this.each(function (j) {
                    jQuery(this).addClass(value.call(this, j, getClass(this)));
                });
            }
            classes = classesToArray(value);
            if (classes.length) {
                while (elem = this[i++]) {
                    curValue = getClass(elem);
                    cur = elem.nodeType === 1 && ' ' + stripAndCollapse(curValue) + ' ';
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) {
                            if (cur.indexOf(' ' + clazz + ' ') < 0) {
                                cur += clazz + ' ';
                            }
                        }
                        finalValue = stripAndCollapse(cur);
                        if (curValue !== finalValue) {
                            elem.setAttribute('class', finalValue);
                        }
                    }
                }
            }
            return this;
        },
        removeClass: function (value) {
            var classes, elem, cur, curValue, clazz, j, finalValue, i = 0;
            if (isFunction(value)) {
                return this.each(function (j) {
                    jQuery(this).removeClass(value.call(this, j, getClass(this)));
                });
            }
            if (!arguments.length) {
                return this.attr('class', '');
            }
            classes = classesToArray(value);
            if (classes.length) {
                while (elem = this[i++]) {
                    curValue = getClass(elem);
                    cur = elem.nodeType === 1 && ' ' + stripAndCollapse(curValue) + ' ';
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) {
                            while (cur.indexOf(' ' + clazz + ' ') > -1) {
                                cur = cur.replace(' ' + clazz + ' ', ' ');
                            }
                        }
                        finalValue = stripAndCollapse(cur);
                        if (curValue !== finalValue) {
                            elem.setAttribute('class', finalValue);
                        }
                    }
                }
            }
            return this;
        },
        toggleClass: function (value, stateVal) {
            var type = typeof value, isValidValue = type === 'string' || Array.isArray(value);
            if (typeof stateVal === 'boolean' && isValidValue) {
                return stateVal ? this.addClass(value) : this.removeClass(value);
            }
            if (isFunction(value)) {
                return this.each(function (i) {
                    jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
                });
            }
            return this.each(function () {
                var className, i, self, classNames;
                if (isValidValue) {
                    i = 0;
                    self = jQuery(this);
                    classNames = classesToArray(value);
                    while (className = classNames[i++]) {
                        if (self.hasClass(className)) {
                            self.removeClass(className);
                        } else {
                            self.addClass(className);
                        }
                    }
                } else if (value === undefined || type === 'boolean') {
                    className = getClass(this);
                    if (className) {
                        dataPriv.set(this, '__className__', className);
                    }
                    if (this.setAttribute) {
                        this.setAttribute('class', className || value === false ? '' : dataPriv.get(this, '__className__') || '');
                    }
                }
            });
        },
        hasClass: function (selector) {
            var className, elem, i = 0;
            className = ' ' + selector + ' ';
            while (elem = this[i++]) {
                if (elem.nodeType === 1 && (' ' + stripAndCollapse(getClass(elem)) + ' ').indexOf(className) > -1) {
                    return true;
                }
            }
            return false;
        }
    });
    var rreturn = /\r/g;
    jQuery.fn.extend({
        val: function (value) {
            var hooks, ret, valueIsFunction, elem = this[0];
            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                    if (hooks && 'get' in hooks && (ret = hooks.get(elem, 'value')) !== undefined) {
                        return ret;
                    }
                    ret = elem.value;
                    if (typeof ret === 'string') {
                        return ret.replace(rreturn, '');
                    }
                    return ret == null ? '' : ret;
                }
                return;
            }
            valueIsFunction = isFunction(value);
            return this.each(function (i) {
                var val;
                if (this.nodeType !== 1) {
                    return;
                }
                if (valueIsFunction) {
                    val = value.call(this, i, jQuery(this).val());
                } else {
                    val = value;
                }
                if (val == null) {
                    val = '';
                } else if (typeof val === 'number') {
                    val += '';
                } else if (Array.isArray(val)) {
                    val = jQuery.map(val, function (value) {
                        return value == null ? '' : value + '';
                    });
                }
                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                if (!hooks || !('set' in hooks) || hooks.set(this, val, 'value') === undefined) {
                    this.value = val;
                }
            });
        }
    });
    jQuery.extend({
        valHooks: {
            option: {
                get: function (elem) {
                    var val = jQuery.find.attr(elem, 'value');
                    return val != null ? val : stripAndCollapse(jQuery.text(elem));
                }
            },
            select: {
                get: function (elem) {
                    var value, option, i, options = elem.options, index = elem.selectedIndex, one = elem.type === 'select-one', values = one ? null : [], max = one ? index + 1 : options.length;
                    if (index < 0) {
                        i = max;
                    } else {
                        i = one ? index : 0;
                    }
                    for (; i < max; i++) {
                        option = options[i];
                        if ((option.selected || i === index) && !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, 'optgroup'))) {
                            value = jQuery(option).val();
                            if (one) {
                                return value;
                            }
                            values.push(value);
                        }
                    }
                    return values;
                },
                set: function (elem, value) {
                    var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
                    while (i--) {
                        option = options[i];
                        if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
                            optionSet = true;
                        }
                    }
                    if (!optionSet) {
                        elem.selectedIndex = -1;
                    }
                    return values;
                }
            }
        }
    });
    jQuery.each([
        'radio',
        'checkbox'
    ], function () {
        jQuery.valHooks[this] = {
            set: function (elem, value) {
                if (Array.isArray(value)) {
                    return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
                }
            }
        };
        if (!support.checkOn) {
            jQuery.valHooks[this].get = function (elem) {
                return elem.getAttribute('value') === null ? 'on' : elem.value;
            };
        }
    });
    support.focusin = 'onfocusin' in window;
    var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, stopPropagationCallback = function (e) {
            e.stopPropagation();
        };
    jQuery.extend(jQuery.event, {
        trigger: function (event, data, elem, onlyHandlers) {
            var i, cur, tmp, bubbleType, ontype, handle, special, lastElement, eventPath = [elem || document], type = hasOwn.call(event, 'type') ? event.type : event, namespaces = hasOwn.call(event, 'namespace') ? event.namespace.split('.') : [];
            cur = lastElement = tmp = elem = elem || document;
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
            }
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
            }
            if (type.indexOf('.') > -1) {
                namespaces = type.split('.');
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(':') < 0 && 'on' + type;
            event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === 'object' && event);
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join('.');
            event.rnamespace = event.namespace ? new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)') : null;
            event.result = undefined;
            if (!event.target) {
                event.target = elem;
            }
            data = data == null ? [event] : jQuery.makeArray(data, [event]);
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                return;
            }
            if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) {
                    cur = cur.parentNode;
                }
                for (; cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                }
                if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                }
            }
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                lastElement = cur;
                event.type = i > 1 ? bubbleType : special.bindType || type;
                handle = (dataPriv.get(cur, 'events') || {})[event.type] && dataPriv.get(cur, 'handle');
                if (handle) {
                    handle.apply(cur, data);
                }
                handle = ontype && cur[ontype];
                if (handle && handle.apply && acceptData(cur)) {
                    event.result = handle.apply(cur, data);
                    if (event.result === false) {
                        event.preventDefault();
                    }
                }
            }
            event.type = type;
            if (!onlyHandlers && !event.isDefaultPrevented()) {
                if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
                    if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
                        tmp = elem[ontype];
                        if (tmp) {
                            elem[ontype] = null;
                        }
                        jQuery.event.triggered = type;
                        if (event.isPropagationStopped()) {
                            lastElement.addEventListener(type, stopPropagationCallback);
                        }
                        elem[type]();
                        if (event.isPropagationStopped()) {
                            lastElement.removeEventListener(type, stopPropagationCallback);
                        }
                        jQuery.event.triggered = undefined;
                        if (tmp) {
                            elem[ontype] = tmp;
                        }
                    }
                }
            }
            return event.result;
        },
        simulate: function (type, elem, event) {
            var e = jQuery.extend(new jQuery.Event(), event, {
                type: type,
                isSimulated: true
            });
            jQuery.event.trigger(e, null, elem);
        }
    });
    jQuery.fn.extend({
        trigger: function (type, data) {
            return this.each(function () {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function (type, data) {
            var elem = this[0];
            if (elem) {
                return jQuery.event.trigger(type, data, elem, true);
            }
        }
    });
    if (!support.focusin) {
        jQuery.each({
            focus: 'focusin',
            blur: 'focusout'
        }, function (orig, fix) {
            var handler = function (event) {
                jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
            };
            jQuery.event.special[fix] = {
                setup: function () {
                    var doc = this.ownerDocument || this, attaches = dataPriv.access(doc, fix);
                    if (!attaches) {
                        doc.addEventListener(orig, handler, true);
                    }
                    dataPriv.access(doc, fix, (attaches || 0) + 1);
                },
                teardown: function () {
                    var doc = this.ownerDocument || this, attaches = dataPriv.access(doc, fix) - 1;
                    if (!attaches) {
                        doc.removeEventListener(orig, handler, true);
                        dataPriv.remove(doc, fix);
                    } else {
                        dataPriv.access(doc, fix, attaches);
                    }
                }
            };
        });
    }
    var location = window.location;
    var nonce = Date.now();
    var rquery = /\?/;
    jQuery.parseXML = function (data) {
        var xml;
        if (!data || typeof data !== 'string') {
            return null;
        }
        try {
            xml = new window.DOMParser().parseFromString(data, 'text/xml');
        } catch (e) {
            xml = undefined;
        }
        if (!xml || xml.getElementsByTagName('parsererror').length) {
            jQuery.error('Invalid XML: ' + data);
        }
        return xml;
    };
    var rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
    function buildParams(prefix, obj, traditional, add) {
        var name;
        if (Array.isArray(obj)) {
            jQuery.each(obj, function (i, v) {
                if (traditional || rbracket.test(prefix)) {
                    add(prefix, v);
                } else {
                    buildParams(prefix + '[' + (typeof v === 'object' && v != null ? i : '') + ']', v, traditional, add);
                }
            });
        } else if (!traditional && toType(obj) === 'object') {
            for (name in obj) {
                buildParams(prefix + '[' + name + ']', obj[name], traditional, add);
            }
        } else {
            add(prefix, obj);
        }
    }
    jQuery.param = function (a, traditional) {
        var prefix, s = [], add = function (key, valueOrFunction) {
                var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
                s[s.length] = encodeURIComponent(key) + '=' + encodeURIComponent(value == null ? '' : value);
            };
        if (a == null) {
            return '';
        }
        if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
            jQuery.each(a, function () {
                add(this.name, this.value);
            });
        } else {
            for (prefix in a) {
                buildParams(prefix, a[prefix], traditional, add);
            }
        }
        return s.join('&');
    };
    jQuery.fn.extend({
        serialize: function () {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function () {
            return this.map(function () {
                var elements = jQuery.prop(this, 'elements');
                return elements ? jQuery.makeArray(elements) : this;
            }).filter(function () {
                var type = this.type;
                return this.name && !jQuery(this).is(':disabled') && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function (i, elem) {
                var val = jQuery(this).val();
                if (val == null) {
                    return null;
                }
                if (Array.isArray(val)) {
                    return jQuery.map(val, function (val) {
                        return {
                            name: elem.name,
                            value: val.replace(rCRLF, '\r\n')
                        };
                    });
                }
                return {
                    name: elem.name,
                    value: val.replace(rCRLF, '\r\n')
                };
            }).get();
        }
    });
    var r20 = /%20/g, rhash = /#.*$/, rantiCache = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, prefilters = {}, transports = {}, allTypes = '*/'.concat('*'), originAnchor = document.createElement('a');
    originAnchor.href = location.href;
    function addToPrefiltersOrTransports(structure) {
        return function (dataTypeExpression, func) {
            if (typeof dataTypeExpression !== 'string') {
                func = dataTypeExpression;
                dataTypeExpression = '*';
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
            if (isFunction(func)) {
                while (dataType = dataTypes[i++]) {
                    if (dataType[0] === '+') {
                        dataType = dataType.slice(1) || '*';
                        (structure[dataType] = structure[dataType] || []).unshift(func);
                    } else {
                        (structure[dataType] = structure[dataType] || []).push(func);
                    }
                }
            }
        };
    }
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;
        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if (typeof dataTypeOrTransport === 'string' && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                } else if (seekingTransport) {
                    return !(selected = dataTypeOrTransport);
                }
            });
            return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected['*'] && inspect('*');
    }
    function ajaxExtend(target, src) {
        var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
            if (src[key] !== undefined) {
                (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
            }
        }
        if (deep) {
            jQuery.extend(true, target, deep);
        }
        return target;
    }
    function ajaxHandleResponses(s, jqXHR, responses) {
        var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
        while (dataTypes[0] === '*') {
            dataTypes.shift();
            if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader('Content-Type');
            }
        }
        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }
        if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
        } else {
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + ' ' + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) {
                    firstDataType = type;
                }
            }
            finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
        }
    }
    function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
        if (dataTypes[1]) {
            for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
            }
        }
        current = dataTypes.shift();
        while (current) {
            if (s.responseFields[current]) {
                jqXHR[s.responseFields[current]] = response;
            }
            if (!prev && isSuccess && s.dataFilter) {
                response = s.dataFilter(response, s.dataType);
            }
            prev = current;
            current = dataTypes.shift();
            if (current) {
                if (current === '*') {
                    current = prev;
                } else if (prev !== '*' && prev !== current) {
                    conv = converters[prev + ' ' + current] || converters['* ' + current];
                    if (!conv) {
                        for (conv2 in converters) {
                            tmp = conv2.split(' ');
                            if (tmp[1] === current) {
                                conv = converters[prev + ' ' + tmp[0]] || converters['* ' + tmp[0]];
                                if (conv) {
                                    if (conv === true) {
                                        conv = converters[conv2];
                                    } else if (converters[conv2] !== true) {
                                        current = tmp[0];
                                        dataTypes.unshift(tmp[1]);
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    if (conv !== true) {
                        if (conv && s.throws) {
                            response = conv(response);
                        } else {
                            try {
                                response = conv(response);
                            } catch (e) {
                                return {
                                    state: 'parsererror',
                                    error: conv ? e : 'No conversion from ' + prev + ' to ' + current
                                };
                            }
                        }
                    }
                }
            }
        }
        return {
            state: 'success',
            data: response
        };
    }
    jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: location.href,
            type: 'GET',
            isLocal: rlocalProtocol.test(location.protocol),
            global: true,
            processData: true,
            async: true,
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            accepts: {
                '*': allTypes,
                text: 'text/plain',
                html: 'text/html',
                xml: 'application/xml, text/xml',
                json: 'application/json, text/javascript'
            },
            contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/
            },
            responseFields: {
                xml: 'responseXML',
                text: 'responseText',
                json: 'responseJSON'
            },
            converters: {
                '* text': String,
                'text html': true,
                'text json': JSON.parse,
                'text xml': jQuery.parseXML
            },
            flatOptions: {
                url: true,
                context: true
            }
        },
        ajaxSetup: function (target, settings) {
            return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function (url, options) {
            if (typeof url === 'object') {
                options = url;
                url = undefined;
            }
            options = options || {};
            var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, urlAnchor, completed, fireGlobals, i, uncached, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks('once memory'), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, strAbort = 'canceled', jqXHR = {
                    readyState: 0,
                    getResponseHeader: function (key) {
                        var match;
                        if (completed) {
                            if (!responseHeaders) {
                                responseHeaders = {};
                                while (match = rheaders.exec(responseHeadersString)) {
                                    responseHeaders[match[1].toLowerCase() + ' '] = (responseHeaders[match[1].toLowerCase() + ' '] || []).concat(match[2]);
                                }
                            }
                            match = responseHeaders[key.toLowerCase() + ' '];
                        }
                        return match == null ? null : match.join(', ');
                    },
                    getAllResponseHeaders: function () {
                        return completed ? responseHeadersString : null;
                    },
                    setRequestHeader: function (name, value) {
                        if (completed == null) {
                            name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                            requestHeaders[name] = value;
                        }
                        return this;
                    },
                    overrideMimeType: function (type) {
                        if (completed == null) {
                            s.mimeType = type;
                        }
                        return this;
                    },
                    statusCode: function (map) {
                        var code;
                        if (map) {
                            if (completed) {
                                jqXHR.always(map[jqXHR.status]);
                            } else {
                                for (code in map) {
                                    statusCode[code] = [
                                        statusCode[code],
                                        map[code]
                                    ];
                                }
                            }
                        }
                        return this;
                    },
                    abort: function (statusText) {
                        var finalText = statusText || strAbort;
                        if (transport) {
                            transport.abort(finalText);
                        }
                        done(0, finalText);
                        return this;
                    }
                };
            deferred.promise(jqXHR);
            s.url = ((url || s.url || location.href) + '').replace(rprotocol, location.protocol + '//');
            s.type = options.method || options.type || s.method || s.type;
            s.dataTypes = (s.dataType || '*').toLowerCase().match(rnothtmlwhite) || [''];
            if (s.crossDomain == null) {
                urlAnchor = document.createElement('a');
                try {
                    urlAnchor.href = s.url;
                    urlAnchor.href = urlAnchor.href;
                    s.crossDomain = originAnchor.protocol + '//' + originAnchor.host !== urlAnchor.protocol + '//' + urlAnchor.host;
                } catch (e) {
                    s.crossDomain = true;
                }
            }
            if (s.data && s.processData && typeof s.data !== 'string') {
                s.data = jQuery.param(s.data, s.traditional);
            }
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            if (completed) {
                return jqXHR;
            }
            fireGlobals = jQuery.event && s.global;
            if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger('ajaxStart');
            }
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            cacheURL = s.url.replace(rhash, '');
            if (!s.hasContent) {
                uncached = s.url.slice(cacheURL.length);
                if (s.data && (s.processData || typeof s.data === 'string')) {
                    cacheURL += (rquery.test(cacheURL) ? '&' : '?') + s.data;
                    delete s.data;
                }
                if (s.cache === false) {
                    cacheURL = cacheURL.replace(rantiCache, '$1');
                    uncached = (rquery.test(cacheURL) ? '&' : '?') + '_=' + nonce++ + uncached;
                }
                s.url = cacheURL + uncached;
            } else if (s.data && s.processData && (s.contentType || '').indexOf('application/x-www-form-urlencoded') === 0) {
                s.data = s.data.replace(r20, '+');
            }
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) {
                    jqXHR.setRequestHeader('If-Modified-Since', jQuery.lastModified[cacheURL]);
                }
                if (jQuery.etag[cacheURL]) {
                    jqXHR.setRequestHeader('If-None-Match', jQuery.etag[cacheURL]);
                }
            }
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                jqXHR.setRequestHeader('Content-Type', s.contentType);
            }
            jqXHR.setRequestHeader('Accept', s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== '*' ? ', ' + allTypes + '; q=0.01' : '') : s.accepts['*']);
            for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
            }
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {
                return jqXHR.abort();
            }
            strAbort = 'abort';
            completeDeferred.add(s.complete);
            jqXHR.done(s.success);
            jqXHR.fail(s.error);
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            if (!transport) {
                done(-1, 'No Transport');
            } else {
                jqXHR.readyState = 1;
                if (fireGlobals) {
                    globalEventContext.trigger('ajaxSend', [
                        jqXHR,
                        s
                    ]);
                }
                if (completed) {
                    return jqXHR;
                }
                if (s.async && s.timeout > 0) {
                    timeoutTimer = window.setTimeout(function () {
                        jqXHR.abort('timeout');
                    }, s.timeout);
                }
                try {
                    completed = false;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    if (completed) {
                        throw e;
                    }
                    done(-1, e);
                }
            }
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                if (completed) {
                    return;
                }
                completed = true;
                if (timeoutTimer) {
                    window.clearTimeout(timeoutTimer);
                }
                transport = undefined;
                responseHeadersString = headers || '';
                jqXHR.readyState = status > 0 ? 4 : 0;
                isSuccess = status >= 200 && status < 300 || status === 304;
                if (responses) {
                    response = ajaxHandleResponses(s, jqXHR, responses);
                }
                response = ajaxConvert(s, response, jqXHR, isSuccess);
                if (isSuccess) {
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader('Last-Modified');
                        if (modified) {
                            jQuery.lastModified[cacheURL] = modified;
                        }
                        modified = jqXHR.getResponseHeader('etag');
                        if (modified) {
                            jQuery.etag[cacheURL] = modified;
                        }
                    }
                    if (status === 204 || s.type === 'HEAD') {
                        statusText = 'nocontent';
                    } else if (status === 304) {
                        statusText = 'notmodified';
                    } else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                } else {
                    error = statusText;
                    if (status || !statusText) {
                        statusText = 'error';
                        if (status < 0) {
                            status = 0;
                        }
                    }
                }
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + '';
                if (isSuccess) {
                    deferred.resolveWith(callbackContext, [
                        success,
                        statusText,
                        jqXHR
                    ]);
                } else {
                    deferred.rejectWith(callbackContext, [
                        jqXHR,
                        statusText,
                        error
                    ]);
                }
                jqXHR.statusCode(statusCode);
                statusCode = undefined;
                if (fireGlobals) {
                    globalEventContext.trigger(isSuccess ? 'ajaxSuccess' : 'ajaxError', [
                        jqXHR,
                        s,
                        isSuccess ? success : error
                    ]);
                }
                completeDeferred.fireWith(callbackContext, [
                    jqXHR,
                    statusText
                ]);
                if (fireGlobals) {
                    globalEventContext.trigger('ajaxComplete', [
                        jqXHR,
                        s
                    ]);
                    if (!--jQuery.active) {
                        jQuery.event.trigger('ajaxStop');
                    }
                }
            }
            return jqXHR;
        },
        getJSON: function (url, data, callback) {
            return jQuery.get(url, data, callback, 'json');
        },
        getScript: function (url, callback) {
            return jQuery.get(url, undefined, callback, 'script');
        }
    });
    jQuery.each([
        'get',
        'post'
    ], function (i, method) {
        jQuery[method] = function (url, data, callback, type) {
            if (isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }
            return jQuery.ajax(jQuery.extend({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            }, jQuery.isPlainObject(url) && url));
        };
    });
    jQuery._evalUrl = function (url, options) {
        return jQuery.ajax({
            url: url,
            type: 'GET',
            dataType: 'script',
            cache: true,
            async: false,
            global: false,
            converters: {
                'text script': function () {
                }
            },
            dataFilter: function (response) {
                jQuery.globalEval(response, options);
            }
        });
    };
    jQuery.fn.extend({
        wrapAll: function (html) {
            var wrap;
            if (this[0]) {
                if (isFunction(html)) {
                    html = html.call(this[0]);
                }
                wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) {
                    wrap.insertBefore(this[0]);
                }
                wrap.map(function () {
                    var elem = this;
                    while (elem.firstElementChild) {
                        elem = elem.firstElementChild;
                    }
                    return elem;
                }).append(this);
            }
            return this;
        },
        wrapInner: function (html) {
            if (isFunction(html)) {
                return this.each(function (i) {
                    jQuery(this).wrapInner(html.call(this, i));
                });
            }
            return this.each(function () {
                var self = jQuery(this), contents = self.contents();
                if (contents.length) {
                    contents.wrapAll(html);
                } else {
                    self.append(html);
                }
            });
        },
        wrap: function (html) {
            var htmlIsFunction = isFunction(html);
            return this.each(function (i) {
                jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
            });
        },
        unwrap: function (selector) {
            this.parent(selector).not('body').each(function () {
                jQuery(this).replaceWith(this.childNodes);
            });
            return this;
        }
    });
    jQuery.expr.pseudos.hidden = function (elem) {
        return !jQuery.expr.pseudos.visible(elem);
    };
    jQuery.expr.pseudos.visible = function (elem) {
        return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
    };
    jQuery.ajaxSettings.xhr = function () {
        try {
            return new window.XMLHttpRequest();
        } catch (e) {
        }
    };
    var xhrSuccessStatus = {
            0: 200,
            1223: 204
        }, xhrSupported = jQuery.ajaxSettings.xhr();
    support.cors = !!xhrSupported && 'withCredentials' in xhrSupported;
    support.ajax = xhrSupported = !!xhrSupported;
    jQuery.ajaxTransport(function (options) {
        var callback, errorCallback;
        if (support.cors || xhrSupported && !options.crossDomain) {
            return {
                send: function (headers, complete) {
                    var i, xhr = options.xhr();
                    xhr.open(options.type, options.url, options.async, options.username, options.password);
                    if (options.xhrFields) {
                        for (i in options.xhrFields) {
                            xhr[i] = options.xhrFields[i];
                        }
                    }
                    if (options.mimeType && xhr.overrideMimeType) {
                        xhr.overrideMimeType(options.mimeType);
                    }
                    if (!options.crossDomain && !headers['X-Requested-With']) {
                        headers['X-Requested-With'] = 'XMLHttpRequest';
                    }
                    for (i in headers) {
                        xhr.setRequestHeader(i, headers[i]);
                    }
                    callback = function (type) {
                        return function () {
                            if (callback) {
                                callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;
                                if (type === 'abort') {
                                    xhr.abort();
                                } else if (type === 'error') {
                                    if (typeof xhr.status !== 'number') {
                                        complete(0, 'error');
                                    } else {
                                        complete(xhr.status, xhr.statusText);
                                    }
                                } else {
                                    complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, (xhr.responseType || 'text') !== 'text' || typeof xhr.responseText !== 'string' ? { binary: xhr.response } : { text: xhr.responseText }, xhr.getAllResponseHeaders());
                                }
                            }
                        };
                    };
                    xhr.onload = callback();
                    errorCallback = xhr.onerror = xhr.ontimeout = callback('error');
                    if (xhr.onabort !== undefined) {
                        xhr.onabort = errorCallback;
                    } else {
                        xhr.onreadystatechange = function () {
                            if (xhr.readyState === 4) {
                                window.setTimeout(function () {
                                    if (callback) {
                                        errorCallback();
                                    }
                                });
                            }
                        };
                    }
                    callback = callback('abort');
                    try {
                        xhr.send(options.hasContent && options.data || null);
                    } catch (e) {
                        if (callback) {
                            throw e;
                        }
                    }
                },
                abort: function () {
                    if (callback) {
                        callback();
                    }
                }
            };
        }
    });
    jQuery.ajaxPrefilter(function (s) {
        if (s.crossDomain) {
            s.contents.script = false;
        }
    });
    jQuery.ajaxSetup({
        accepts: { script: 'text/javascript, application/javascript, ' + 'application/ecmascript, application/x-ecmascript' },
        contents: { script: /\b(?:java|ecma)script\b/ },
        converters: {
            'text script': function (text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });
    jQuery.ajaxPrefilter('script', function (s) {
        if (s.cache === undefined) {
            s.cache = false;
        }
        if (s.crossDomain) {
            s.type = 'GET';
        }
    });
    jQuery.ajaxTransport('script', function (s) {
        if (s.crossDomain || s.scriptAttrs) {
            var script, callback;
            return {
                send: function (_, complete) {
                    script = jQuery('<script>').attr(s.scriptAttrs || {}).prop({
                        charset: s.scriptCharset,
                        src: s.url
                    }).on('load error', callback = function (evt) {
                        script.remove();
                        callback = null;
                        if (evt) {
                            complete(evt.type === 'error' ? 404 : 200, evt.type);
                        }
                    });
                    document.head.appendChild(script[0]);
                },
                abort: function () {
                    if (callback) {
                        callback();
                    }
                }
            };
        }
    });
    var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
    jQuery.ajaxSetup({
        jsonp: 'callback',
        jsonpCallback: function () {
            var callback = oldCallbacks.pop() || jQuery.expando + '_' + nonce++;
            this[callback] = true;
            return callback;
        }
    });
    jQuery.ajaxPrefilter('json jsonp', function (s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? 'url' : typeof s.data === 'string' && (s.contentType || '').indexOf('application/x-www-form-urlencoded') === 0 && rjsonp.test(s.data) && 'data');
        if (jsonProp || s.dataTypes[0] === 'jsonp') {
            callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            if (jsonProp) {
                s[jsonProp] = s[jsonProp].replace(rjsonp, '$1' + callbackName);
            } else if (s.jsonp !== false) {
                s.url += (rquery.test(s.url) ? '&' : '?') + s.jsonp + '=' + callbackName;
            }
            s.converters['script json'] = function () {
                if (!responseContainer) {
                    jQuery.error(callbackName + ' was not called');
                }
                return responseContainer[0];
            };
            s.dataTypes[0] = 'json';
            overwritten = window[callbackName];
            window[callbackName] = function () {
                responseContainer = arguments;
            };
            jqXHR.always(function () {
                if (overwritten === undefined) {
                    jQuery(window).removeProp(callbackName);
                } else {
                    window[callbackName] = overwritten;
                }
                if (s[callbackName]) {
                    s.jsonpCallback = originalSettings.jsonpCallback;
                    oldCallbacks.push(callbackName);
                }
                if (responseContainer && isFunction(overwritten)) {
                    overwritten(responseContainer[0]);
                }
                responseContainer = overwritten = undefined;
            });
            return 'script';
        }
    });
    support.createHTMLDocument = function () {
        var body = document.implementation.createHTMLDocument('').body;
        body.innerHTML = '<form></form><form></form>';
        return body.childNodes.length === 2;
    }();
    jQuery.parseHTML = function (data, context, keepScripts) {
        if (typeof data !== 'string') {
            return [];
        }
        if (typeof context === 'boolean') {
            keepScripts = context;
            context = false;
        }
        var base, parsed, scripts;
        if (!context) {
            if (support.createHTMLDocument) {
                context = document.implementation.createHTMLDocument('');
                base = context.createElement('base');
                base.href = document.location.href;
                context.head.appendChild(base);
            } else {
                context = document;
            }
        }
        parsed = rsingleTag.exec(data);
        scripts = !keepScripts && [];
        if (parsed) {
            return [context.createElement(parsed[1])];
        }
        parsed = buildFragment([data], context, scripts);
        if (scripts && scripts.length) {
            jQuery(scripts).remove();
        }
        return jQuery.merge([], parsed.childNodes);
    };
    jQuery.fn.load = function (url, params, callback) {
        var selector, type, response, self = this, off = url.indexOf(' ');
        if (off > -1) {
            selector = stripAndCollapse(url.slice(off));
            url = url.slice(0, off);
        }
        if (isFunction(params)) {
            callback = params;
            params = undefined;
        } else if (params && typeof params === 'object') {
            type = 'POST';
        }
        if (self.length > 0) {
            jQuery.ajax({
                url: url,
                type: type || 'GET',
                dataType: 'html',
                data: params
            }).done(function (responseText) {
                response = arguments;
                self.html(selector ? jQuery('<div>').append(jQuery.parseHTML(responseText)).find(selector) : responseText);
            }).always(callback && function (jqXHR, status) {
                self.each(function () {
                    callback.apply(this, response || [
                        jqXHR.responseText,
                        status,
                        jqXHR
                    ]);
                });
            });
        }
        return this;
    };
    jQuery.each([
        'ajaxStart',
        'ajaxStop',
        'ajaxComplete',
        'ajaxError',
        'ajaxSuccess',
        'ajaxSend'
    ], function (i, type) {
        jQuery.fn[type] = function (fn) {
            return this.on(type, fn);
        };
    });
    jQuery.expr.pseudos.animated = function (elem) {
        return jQuery.grep(jQuery.timers, function (fn) {
            return elem === fn.elem;
        }).length;
    };
    jQuery.offset = {
        setOffset: function (elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, 'position'), curElem = jQuery(elem), props = {};
            if (position === 'static') {
                elem.style.position = 'relative';
            }
            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, 'top');
            curCSSLeft = jQuery.css(elem, 'left');
            calculatePosition = (position === 'absolute' || position === 'fixed') && (curCSSTop + curCSSLeft).indexOf('auto') > -1;
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (isFunction(options)) {
                options = options.call(elem, i, jQuery.extend({}, curOffset));
            }
            if (options.top != null) {
                props.top = options.top - curOffset.top + curTop;
            }
            if (options.left != null) {
                props.left = options.left - curOffset.left + curLeft;
            }
            if ('using' in options) {
                options.using.call(elem, props);
            } else {
                curElem.css(props);
            }
        }
    };
    jQuery.fn.extend({
        offset: function (options) {
            if (arguments.length) {
                return options === undefined ? this : this.each(function (i) {
                    jQuery.offset.setOffset(this, options, i);
                });
            }
            var rect, win, elem = this[0];
            if (!elem) {
                return;
            }
            if (!elem.getClientRects().length) {
                return {
                    top: 0,
                    left: 0
                };
            }
            rect = elem.getBoundingClientRect();
            win = elem.ownerDocument.defaultView;
            return {
                top: rect.top + win.pageYOffset,
                left: rect.left + win.pageXOffset
            };
        },
        position: function () {
            if (!this[0]) {
                return;
            }
            var offsetParent, offset, doc, elem = this[0], parentOffset = {
                    top: 0,
                    left: 0
                };
            if (jQuery.css(elem, 'position') === 'fixed') {
                offset = elem.getBoundingClientRect();
            } else {
                offset = this.offset();
                doc = elem.ownerDocument;
                offsetParent = elem.offsetParent || doc.documentElement;
                while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, 'position') === 'static') {
                    offsetParent = offsetParent.parentNode;
                }
                if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
                    parentOffset = jQuery(offsetParent).offset();
                    parentOffset.top += jQuery.css(offsetParent, 'borderTopWidth', true);
                    parentOffset.left += jQuery.css(offsetParent, 'borderLeftWidth', true);
                }
            }
            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, 'marginTop', true),
                left: offset.left - parentOffset.left - jQuery.css(elem, 'marginLeft', true)
            };
        },
        offsetParent: function () {
            return this.map(function () {
                var offsetParent = this.offsetParent;
                while (offsetParent && jQuery.css(offsetParent, 'position') === 'static') {
                    offsetParent = offsetParent.offsetParent;
                }
                return offsetParent || documentElement;
            });
        }
    });
    jQuery.each({
        scrollLeft: 'pageXOffset',
        scrollTop: 'pageYOffset'
    }, function (method, prop) {
        var top = 'pageYOffset' === prop;
        jQuery.fn[method] = function (val) {
            return access(this, function (elem, method, val) {
                var win;
                if (isWindow(elem)) {
                    win = elem;
                } else if (elem.nodeType === 9) {
                    win = elem.defaultView;
                }
                if (val === undefined) {
                    return win ? win[prop] : elem[method];
                }
                if (win) {
                    win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
                } else {
                    elem[method] = val;
                }
            }, method, val, arguments.length);
        };
    });
    jQuery.each([
        'top',
        'left'
    ], function (i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
            if (computed) {
                computed = curCSS(elem, prop);
                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + 'px' : computed;
            }
        });
    });
    jQuery.each({
        Height: 'height',
        Width: 'width'
    }, function (name, type) {
        jQuery.each({
            padding: 'inner' + name,
            content: type,
            '': 'outer' + name
        }, function (defaultExtra, funcName) {
            jQuery.fn[funcName] = function (margin, value) {
                var chainable = arguments.length && (defaultExtra || typeof margin !== 'boolean'), extra = defaultExtra || (margin === true || value === true ? 'margin' : 'border');
                return access(this, function (elem, type, value) {
                    var doc;
                    if (isWindow(elem)) {
                        return funcName.indexOf('outer') === 0 ? elem['inner' + name] : elem.document.documentElement['client' + name];
                    }
                    if (elem.nodeType === 9) {
                        doc = elem.documentElement;
                        return Math.max(elem.body['scroll' + name], doc['scroll' + name], elem.body['offset' + name], doc['offset' + name], doc['client' + name]);
                    }
                    return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
                }, type, chainable ? margin : undefined, chainable);
            };
        });
    });
    jQuery.each(('blur focus focusin focusout resize scroll click dblclick ' + 'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' + 'change select submit keydown keypress keyup contextmenu').split(' '), function (i, name) {
        jQuery.fn[name] = function (data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
    });
    jQuery.fn.extend({
        hover: function (fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        }
    });
    jQuery.fn.extend({
        bind: function (types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function (types, fn) {
            return this.off(types, null, fn);
        },
        delegate: function (selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function (selector, types, fn) {
            return arguments.length === 1 ? this.off(selector, '**') : this.off(types, selector || '**', fn);
        }
    });
    jQuery.proxy = function (fn, context) {
        var tmp, args, proxy;
        if (typeof context === 'string') {
            tmp = fn[context];
            context = fn;
            fn = tmp;
        }
        if (!isFunction(fn)) {
            return undefined;
        }
        args = slice.call(arguments, 2);
        proxy = function () {
            return fn.apply(context || this, args.concat(slice.call(arguments)));
        };
        proxy.guid = fn.guid = fn.guid || jQuery.guid++;
        return proxy;
    };
    jQuery.holdReady = function (hold) {
        if (hold) {
            jQuery.readyWait++;
        } else {
            jQuery.ready(true);
        }
    };
    jQuery.isArray = Array.isArray;
    jQuery.parseJSON = JSON.parse;
    jQuery.nodeName = nodeName;
    jQuery.isFunction = isFunction;
    jQuery.isWindow = isWindow;
    jQuery.camelCase = camelCase;
    jQuery.type = toType;
    jQuery.now = Date.now;
    jQuery.isNumeric = function (obj) {
        var type = jQuery.type(obj);
        return (type === 'number' || type === 'string') && !isNaN(obj - parseFloat(obj));
    };
    if (typeof define === 'function' && define.amd) {
        define('jquery@3.4.1#dist/jquery', [], function () {
            return jQuery;
        });
    }
    var _jQuery = window.jQuery, _$ = window.$;
    jQuery.noConflict = function (deep) {
        if (window.$ === jQuery) {
            window.$ = _$;
        }
        if (deep && window.jQuery === jQuery) {
            window.jQuery = _jQuery;
        }
        return jQuery;
    };
    if (!noGlobal) {
        window.jQuery = window.$ = jQuery;
    }
    return jQuery;
}));
/*shuttle-can-api@1.1.2#shuttle-can-api*/
define('shuttle-can-api@1.1.2#shuttle-can-api', [
    'exports',
    'jquery',
    'can',
    'shuttle-guard'
], function (exports, _jquery, _can, _shuttleGuard) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.options = exports.Options = exports.ValueMap = undefined;
    var _jquery2 = _interopRequireDefault(_jquery);
    var _shuttleGuard2 = _interopRequireDefault(_shuttleGuard);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
    };
    var _templateObject = _taggedTemplateLiteral(['Endpoint \'{endpoint}\' contains parameter \'{name}\' that is not at least 3 characters in length.'], ['Endpoint \'{endpoint}\' contains parameter \'{name}\' that is not at least 3 characters in length.']);
    function _taggedTemplateLiteral(strings, raw) {
        return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
    }
    var ValueMap = exports.ValueMap = _can.DefineMap.extend({ value: { type: '*' } });
    var Options = exports.Options = _can.DefineMap.extend({
        url: {
            type: 'string',
            default: '',
            get: function get(value) {
                if (!value) {
                    throw new Error('Use `import {options} from \'shuttle-can-api\';` to get the options and then set the api endpoint url `options.url = \'http://server-endpoint\';`.');
                }
                return value + (!value.endsWith('/') ? '/' : '');
            }
        }
    });
    var options = exports.options = new Options({});
    var parameterExpression = /\{.*?\}/g;
    var Api = _can.DefineMap.extend('Api', {
        endpoint: {
            type: 'string',
            default: ''
        },
        cache: {
            type: 'boolean',
            default: false
        },
        Map: { type: '*' },
        List: { type: '*' },
        _call: function _call(options) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                try {
                    var o = options || {};
                    var parsedEndpoint = _this.parseEndpoint(_this.endpoint, o.parameters);
                    var ajax = {
                        url: parsedEndpoint.url,
                        type: o.method,
                        async: true,
                        beforeSend: o.beforeSend,
                        timeout: o.timeout || 60000
                    };
                    if (o.method.toLowerCase() === 'get') {
                        ajax.cache = _this.cache;
                    }
                    if (!!o.data) {
                        ajax.data = JSON.stringify(o.data || {});
                        ajax.contentType = 'application/json';
                    }
                    _jquery2.default.ajax(ajax).done(function (response) {
                        resolve(typeof response === 'string' ? response.trim() !== '' ? eval('(' + response + ')') : undefined : response);
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                        reject(new Error(errorThrown));
                    });
                } catch (e) {
                    reject(e);
                }
            });
        },
        parseEndpoint: function parseEndpoint(endpoint, parameters) {
            _shuttleGuard2.default.againstUndefined(endpoint, 'endpoint');
            var p = parameters || {};
            var params = [];
            var match = void 0;
            do {
                match = parameterExpression.exec(endpoint);
                if (match) {
                    var name = match[0];
                    if (name.length < 3) {
                        throw new Error((0, _jquery2.default)(_templateObject));
                    }
                    params.push({
                        name: name.substr(1, name.length - 2),
                        index: match.index
                    });
                }
            } while (match);
            var url;
            if (endpoint.indexOf('http') < 0) {
                if (!this.endpoint) {
                    throw new Error('No \'endpoint\' has been specified.  You either need to use a full url (starting with http/https) or specify the endpoint when instantiating the api: new Api({ endpoint: \'users\' });');
                }
                url = options.url + endpoint;
            } else {
                url = endpoint;
            }
            _can.Reflect.each(params, function (param) {
                url = url.replace('{' + param.name + '}', !!p[param.name] ? p[param.name] : '');
            });
            return {
                url: url,
                parameters: params
            };
        },
        post: function post(data, parameters) {
            var _this2 = this;
            _shuttleGuard2.default.againstUndefined(data, 'data');
            return new Promise(function (resolve, reject) {
                try {
                    var self = _this2;
                    _this2._call({
                        data: data,
                        parameters: parameters,
                        method: 'POST'
                    }).then(function (response) {
                        resolve(response);
                    }, function (error) {
                        reject(new Error(error));
                    });
                } catch (e) {
                    reject(e);
                }
            });
        },
        put: function put(data, parameters) {
            var _this3 = this;
            _shuttleGuard2.default.againstUndefined(data, 'data');
            return new Promise(function (resolve, reject) {
                try {
                    var self = _this3;
                    _this3._call({
                        data: data,
                        parameters: parameters,
                        method: 'PUT'
                    }).then(function (response) {
                        resolve(response);
                    }).catch(function (error) {
                        reject(new Error(error));
                    });
                } catch (e) {
                    reject(e);
                }
            });
        },
        map: function map(parameters) {
            var _this4 = this;
            var self = this;
            return new Promise(function (resolve, reject) {
                try {
                    var _self = _this4;
                    _this4._call({
                        method: 'GET',
                        parameters: parameters
                    }).then(function (response) {
                        var data;
                        var result;
                        if (!response) {
                            reject(new Error('No response received.'));
                            return;
                        }
                        data = response.data || response;
                        if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) == 'object') {
                            result = !!_self.Map ? new _self.Map(data) : new _can.DefineMap(data);
                        } else {
                            result = new ValueMap({ value: data });
                        }
                        resolve(result);
                    }).catch(function (error) {
                        reject(new Error(error));
                    });
                } catch (e) {
                    reject(e);
                }
            });
        },
        list: function list(parameters, options) {
            var _this5 = this;
            var o = options || {};
            return new Promise(function (resolve, reject) {
                try {
                    var self = _this5;
                    var callOptions = !!o.post ? {
                        method: 'POST',
                        data: parameters,
                        parameters: o.parameters
                    } : {
                        method: 'GET',
                        parameters: parameters
                    };
                    _this5._call(callOptions).then(function (response) {
                        if (!response) {
                            reject(new Error('No response received.'));
                            return;
                        }
                        var data = response.data || response;
                        var result;
                        if (!!self.List) {
                            result = new self.List(data);
                        } else {
                            result = new _can.DefineList();
                            _can.Reflect.each(data, function (item) {
                                result.push(!!self.Map ? new self.Map(item) : new _can.DefineMap(item));
                            });
                        }
                        resolve(result);
                    }).catch(function (error) {
                        reject(new Error(error));
                    });
                } catch (e) {
                    reject(e);
                }
            });
        },
        'delete': function _delete(parameters, data) {
            var _this6 = this;
            return new Promise(function (resolve, reject) {
                try {
                    var self = _this6;
                    _this6._call({
                        method: 'DELETE',
                        parameters: parameters,
                        data: data
                    }).then(function (response) {
                        resolve(response);
                    }).catch(function (error) {
                        reject(new Error(error));
                    });
                } catch (e) {
                    reject(e);
                }
            });
        }
    });
    exports.default = Api;
});
/*shuttle-canstrap@1.2.1#infrastructure/validation*/
define('shuttle-canstrap@1.2.1#infrastructure/validation', [
    'exports',
    'can'
], function (exports, _can) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ErrorList = exports.ErrorMap = undefined;
    var ErrorMap = exports.ErrorMap = _can.DefineMap.extend({
        message: {
            type: 'string',
            default: ''
        },
        related: { Default: _can.DefineList }
    });
    var ErrorList = exports.ErrorList = _can.DefineList.extend({ '#': ErrorMap });
});
/*shuttle-canstrap@1.2.1#infrastructure/component-view-model*/
define('shuttle-canstrap@1.2.1#infrastructure/component-view-model', [
    'exports',
    'can',
    './options',
    './security',
    './click',
    './i18n',
    './validation'
], function (exports, _can, _options, _security, _click2, _i18n, _validation) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _options2 = _interopRequireDefault(_options);
    var _security2 = _interopRequireDefault(_security);
    var _click3 = _interopRequireDefault(_click2);
    var _i18n2 = _interopRequireDefault(_i18n);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = _can.DefineMap.extend({
        placeholder: {
            type: 'string',
            default: '',
            get: function get(value) {
                return _i18n2.default.value(value);
            }
        },
        focus: {
            type: 'boolean',
            default: false
        },
        click: { type: 'observable' },
        checked: { type: 'boolean' },
        value: { type: '*' },
        label: {
            type: 'string',
            get: function get(value) {
                return _i18n2.default.value(value);
            }
        },
        errorAttribute: {
            type: 'string',
            default: ''
        },
        errors: { Type: _validation.ErrorList },
        validationMessage: {
            type: 'string',
            default: '',
            get: function get(value) {
                var self = this;
                var message = undefined;
                if (this.errors) {
                    _can.Reflect.each(this.errors, function (error) {
                        if (error.related.indexOf(self.errorAttribute) > -1) {
                            message = error.message;
                            return false;
                        }
                        return true;
                    });
                }
                return message || value;
            }
        },
        working: { type: 'boolean' },
        permission: {
            type: 'string',
            default: ''
        },
        context: { type: '*' },
        elementClass: {
            type: 'string',
            default: ''
        },
        visible: {
            type: 'boolean',
            default: true
        },
        visibilityClass: {
            get: function get() {
                var visible = this.visible;
                return visible != undefined && !visible ? 'invisible' : '';
            }
        },
        iconClass: {
            type: 'string',
            default: '',
            get: function get(value) {
                return value || _options2.default.iconClass || 'fa';
            }
        },
        iconNameClass: {
            type: 'string',
            default: '',
            get: function get(value) {
                return value || '';
            }
        },
        iconSpacingClass: {
            type: 'string',
            get: function get(value) {
                return value || _options2.default.iconSpacingClass;
            }
        },
        formGroupClass: { type: 'string' },
        text: {
            type: 'string',
            default: '',
            get: function get(value) {
                return _i18n2.default.value(value);
            }
        },
        disabled: {
            get: function get(value) {
                var disabled = !!value || !!this.working;
                if (this.permission && !disabled) {
                    disabled = !_security2.default.hasPermission(this.permission);
                }
                return disabled;
            }
        },
        isDisabled: function isDisabled() {
            var result = this.disabled || !!this.working;
            if (this.permission && !result) {
                result = !_security2.default.hasPermission(this.permission);
            }
            return result;
        },
        required: {
            type: 'boolean',
            default: false
        },
        hasErrors: function hasErrors() {
            if (!this.errors) {
                return false;
            }
            return !!this.errors();
        },
        _click: function _click(ev) {
            return _click3.default.on(this, ev);
        }
    });
});
/*shuttle-canstrap@1.2.1#autocomplete/autocomplete*/
define('shuttle-canstrap@1.2.1#autocomplete/autocomplete', [
    'exports',
    'can',
    './autocomplete.stache!',
    'shuttle-can-api',
    '../infrastructure/component-view-model',
    'shuttle-guard',
    '../infrastructure/i18n'
], function (exports, _can, _autocomplete, _shuttleCanApi, _componentViewModel, _shuttleGuard, _i18n) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _autocomplete2 = _interopRequireDefault(_autocomplete);
    var _shuttleCanApi2 = _interopRequireDefault(_shuttleCanApi);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _shuttleGuard2 = _interopRequireDefault(_shuttleGuard);
    var _i18n2 = _interopRequireDefault(_i18n);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        _api: {},
        text: {
            type: 'string',
            default: ''
        },
        getText: function getText(map) {
            if (!map) {
                return '';
            }
            var text = map[this.textAttribute];
            if (text == undefined) {
                return '[\'undefined\' returned from \'textAttribute\' with name \'' + this.textAttribute + '\']';
            }
            return typeof text === 'function' ? text() : text;
        },
        parameters: {
            type: '*',
            get: function get(value) {
                var result = typeof value === 'function' ? value() : value;
                return typeof result === 'string' ? eval('(' + result + ')') : result;
            }
        },
        loadingText: {
            type: 'string',
            default: 'autocomplete-loading',
            get: function get(value) {
                return _i18n2.default.value(value);
            }
        },
        emptyText: {
            type: 'string',
            default: 'autocomplete-empty',
            get: function get(value) {
                return _i18n2.default.value(value);
            }
        },
        map: {
            Type: _can.DefineMap,
            set: function set(value) {
                if (!!value) {
                    this.text = this.getText(value);
                    return value;
                } else {
                    this.text = '';
                }
            }
        },
        mapper: {
            type: 'compute',
            default: undefined
        },
        method: {
            type: 'string',
            default: 'post',
            set: function set(value) {
                _shuttleGuard2.default.againstUndefined(value, 'value');
                return value.toLowerCase() === 'post' ? 'post' : 'get';
            }
        },
        searchAttribute: {
            type: 'string',
            default: 'search'
        },
        textAttribute: {
            type: 'string',
            default: 'text'
        },
        endpoint: {
            type: 'string',
            set: function set(value) {
                _shuttleGuard2.default.againstUndefined(value, 'value');
                this._api = new _shuttleCanApi2.default({ endpoint: value });
                return value;
            }
        },
        searchValue: {
            type: 'string',
            default: ''
        },
        get searchPromise() {
            var self = this;
            var promise;
            var data;
            var parameters;
            if (!this.searchValue) {
                return Promise.resolve([]);
            }
            parameters = this.parameters || {};
            parameters[this.searchAttribute] = encodeURIComponent(this.searchValue);
            return this._api.list(parameters, { post: this.method.toLowerCase() === 'post' }).then(function (response) {
                if (!self.mapper) {
                    return response;
                }
                var result = new _can.DefineList();
                _can.Reflect.each(response, function (item) {
                    _shuttleGuard2.default.againstUndefined(item, 'item');
                    var mapped = self.mapper.call(self, item);
                    if (!mapped) {
                        throw new Error('The mapper returned an undefined object.');
                    }
                    result.push(mapped);
                });
                return result;
            });
        },
        search: function search(el) {
            if (this.searchValue != el.value) {
                this.searchValue = el.value;
                this.map = undefined;
            }
            if (this.dropdownState !== 'show' && this.dropdownState !== 'shown') {
                $(el).dropdown('toggle');
            }
        },
        select: function select(map) {
            this.map = map;
            this.searchValue = this.getText(map);
        },
        dropdownState: {
            type: 'string',
            default: 'hidden'
        },
        connectedCallback: function connectedCallback(el) {
            var self = this;
            var input = $(el);
            input.on('show.bs.dropdown', function () {
                self.dropdownState = 'show';
            });
            input.on('shown.bs.dropdown', function () {
                self.dropdownState = 'shown';
            });
            input.on('hide.bs.dropdown', function () {
                self.dropdownState = 'hide';
            });
            input.on('hidden.bs.dropdown', function () {
                self.dropdownState = 'hidden';
            });
        }
    });
    exports.default = _can.Component.extend({
        tag: 'cs-autocomplete',
        ViewModel: ViewModel,
        view: _autocomplete2.default
    });
});
/*shuttle-canstrap@1.2.1#button/button.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#button/button.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('button/button.stache', [
        {
            'tokenType': 'chars',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(hasActions)',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'btn-group',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'disabled:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'isDisabled()',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'disabled:from',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'button',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'buttonClass',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-toggle',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dropdown',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-toggle',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-haspopup',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-haspopup',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-expanded',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'false',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-expanded',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'disabled:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'isDisabled()',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'disabled:from',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'button',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(iconNameClass)',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'buttonIconClass',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'text',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'caret',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'button',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dropdown-menu',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#for(action of actions)',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                9
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(action.isSeparator)',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                    ',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dropdown-divider',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                11
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'else',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                    ',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dropdown-item',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'action.click()',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'text',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                14
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/for',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                17
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'else',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                18
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'button',
                false,
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'buttonClass',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '_click(scope.event)',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'disabled:from',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'isDisabled()',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'disabled:from',
                19
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'button',
                false,
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                19
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(iconNameClass)',
                20
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'buttonIconClass',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                20
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                20
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                20
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                20
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'text',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                20
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'button',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                21
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                22
            ]
        },
        {
            'tokenType': 'done',
            'args': [22]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#button/button*/
define('shuttle-canstrap@1.2.1#button/button', [
    'exports',
    'can',
    './button.stache!',
    '../infrastructure/component-view-model'
], function (exports, _can, _button, _componentViewModel) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = exports.ActionList = exports.ActionMap = undefined;
    var _button2 = _interopRequireDefault(_button);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ActionMap = exports.ActionMap = _componentViewModel2.default.extend({
        isSeparator: {
            type: 'boolean',
            default: false
        }
    });
    var ActionList = exports.ActionList = _can.DefineList.extend({ '#': ActionMap });
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        hasActions: {
            get: function get() {
                return this.actions && this.actions.length > 0;
            }
        },
        actions: { Type: ActionList },
        elementClass: { default: 'btn-primary' },
        buttonClass: {
            get: function get() {
                return 'btn ' + (this.hasActions ? 'dropdown-toggle' : '') + ' ' + this.elementClass + ' ' + this.visibilityClass;
            }
        },
        buttonIconClass: {
            get: function get() {
                return this.iconClass + ' ' + this.iconNameClass + (!!this.text ? ' ' + this.iconSpacingClass : '');
            }
        }
    });
    exports.default = _can.Component.extend({
        tag: 'cs-button',
        view: _button2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.2.1#button-back/button-back.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#button-back/button-back.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('button-back/button-back.stache', [
        {
            'tokenType': 'chars',
            'args': [
                '\uFEFF',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'button',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'buttonClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'back()',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'button',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'buttonIconClass',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'text',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'button',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                3
            ]
        },
        {
            'tokenType': 'done',
            'args': [4]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#button-back/button-back*/
define('shuttle-canstrap@1.2.1#button-back/button-back', [
    'exports',
    'can',
    '../infrastructure/component-view-model',
    '../infrastructure/options',
    './button-back.stache!'
], function (exports, _can, _componentViewModel, _options, _buttonBack) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _options2 = _interopRequireDefault(_options);
    var _buttonBack2 = _interopRequireDefault(_buttonBack);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        back: function back() {
            window.history.back();
        },
        iconNameClass: {
            type: 'string',
            default: '',
            get: function get(value) {
                return value || _options2.default.button.back.iconNameClass;
            }
        },
        elementClass: { default: 'btn-primary' },
        buttonClass: {
            get: function get() {
                return 'btn ' + this.elementClass + ' ' + this.visibilityClass;
            }
        },
        buttonIconClass: {
            get: function get() {
                return this.iconClass + ' ' + this.iconNameClass + (!!this.text ? ' ' + this.iconSpacingClass : '');
            }
        }
    });
    exports.default = _can.Component.extend({
        tag: 'cs-button-back',
        view: _buttonBack2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.2.1#button-group/button-group.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#button-group/button-group.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('button-group/button-group.stache', [
        {
            'tokenType': 'chars',
            'args': [
                '\uFEFF',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'btn-group',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'group',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#for(button of buttons)',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'button',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button.type',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'btn ',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'button.elementClass',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'button.visibilityClass',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '_click(scope.event)',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'disabled:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button.isDisabled()',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'disabled:from',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'button',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(button.iconNameClass)',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'button.iconClass',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'button.iconNameClass',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(button.text)',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'button.iconSpacingClass',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'button.text',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'button',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/for',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n\n',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'done',
            'args': [8]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#button-group/button-group*/
define('shuttle-canstrap@1.2.1#button-group/button-group', [
    'exports',
    'can',
    './button-group.stache!',
    '../infrastructure/component-view-model'
], function (exports, _can, _buttonGroup, _componentViewModel) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = exports.ButtonList = exports.ButtonMap = undefined;
    var _buttonGroup2 = _interopRequireDefault(_buttonGroup);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ButtonMap = exports.ButtonMap = _componentViewModel2.default.extend({
        type: {
            get: function get(type) {
                return type || 'button';
            }
        }
    });
    var ButtonList = exports.ButtonList = _can.DefineList.extend({ '#': ButtonMap });
    var ViewModel = exports.ViewModel = _can.DefineMap.extend({ buttons: { Type: ButtonList } });
    exports.default = _can.Component.extend({
        tag: 'cs-button-group',
        view: _buttonGroup2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.2.1#button-refresh/button-refresh.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#button-refresh/button-refresh.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('button-refresh/button-refresh.stache', [
        {
            'tokenType': 'chars',
            'args': [
                '\uFEFF',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'button',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'buttonClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '_click(scope.event)',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'disabled:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'isDisabled()',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'disabled:from',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'button',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'buttonIconClass',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'text',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'button',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                3
            ]
        },
        {
            'tokenType': 'done',
            'args': [4]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#button-refresh/button-refresh*/
define('shuttle-canstrap@1.2.1#button-refresh/button-refresh', [
    'exports',
    'can',
    './button-refresh.stache!',
    '../infrastructure/component-view-model',
    '../infrastructure/options'
], function (exports, _can, _buttonRefresh, _componentViewModel, _options) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _buttonRefresh2 = _interopRequireDefault(_buttonRefresh);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _options2 = _interopRequireDefault(_options);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        iconNameClass: {
            type: 'string',
            default: '',
            get: function get(value) {
                return value || _options2.default.button.refresh.iconNameClass;
            }
        },
        elementClass: { default: 'btn-primary' },
        buttonClass: {
            get: function get() {
                return 'btn ' + this.elementClass + ' ' + this.visibilityClass;
            }
        },
        buttonIconClass: {
            get: function get() {
                return this.iconClass + ' ' + this.iconNameClass + (!!this.text ? ' ' + this.iconSpacingClass : '');
            }
        }
    });
    exports.default = _can.Component.extend({
        tag: 'cs-button-refresh',
        ViewModel: ViewModel,
        view: _buttonRefresh2.default
    });
});
/*shuttle-canstrap@1.2.1#button-remove/button-remove.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#button-remove/button-remove.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('button-remove/button-remove.stache', [
        {
            'tokenType': 'chars',
            'args': [
                '\uFEFF',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'button',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'btn ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'elementClass',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'visibilityClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '_click(scope.event)',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'disabled:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'isDisabled()',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'disabled:from',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'button',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'iconClass',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'iconNameClass',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(text)',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'iconSpacingClass',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'text',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'button',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                3
            ]
        },
        {
            'tokenType': 'done',
            'args': [4]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#button-remove/button-remove*/
define('shuttle-canstrap@1.2.1#button-remove/button-remove', [
    'exports',
    'can',
    './button-remove.stache!',
    '../infrastructure/component-view-model',
    '../infrastructure/i18n',
    '../infrastructure/options',
    '../infrastructure/click'
], function (exports, _can, _buttonRemove, _componentViewModel, _i18n, _options, _click2) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _buttonRemove2 = _interopRequireDefault(_buttonRemove);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _options2 = _interopRequireDefault(_options);
    var _click3 = _interopRequireDefault(_click2);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        elementClass: { default: 'btn-primary' },
        iconNameClass: {
            type: 'string',
            default: '',
            get: function get(value) {
                return value || _options2.default.button.remove.iconNameClass;
            }
        },
        _click: function _click(ev) {
            var self = this;
            var useDefault = true;
            var itemName = this.itemName;
            var message = !itemName ? _i18n2.default.value(_options2.default.button.remove.i18n.removeItemConfirmation) : _i18n2.default.value(_options2.default.button.remove.i18n.removeItemConfirmationNamed, { itemName: _i18n2.default.value(itemName) });
            ev.stopPropagation();
            if (!!_options2.default.button.remove.confirmation) {
                _options2.default.button.remove.confirmation.call(self, {
                    message: message,
                    primaryClick: function primaryClick() {
                        _click3.default.on(self);
                    }
                });
                useDefault = false;
            }
            if (useDefault && confirm(message)) {
                _click3.default.on(this);
            }
        }
    });
    exports.default = _can.Component.extend({
        tag: 'cs-button-remove',
        ViewModel: ViewModel,
        view: _buttonRemove2.default
    });
});
/*shuttle-canstrap@1.2.1#button-submit/button-submit.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#button-submit/button-submit.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('button-submit/button-submit.stache', [
        {
            'tokenType': 'chars',
            'args': [
                '\uFEFF',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'button',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'submit',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'buttonClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '_click(scope.event)',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'disabled:bind',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'disabled',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'disabled:bind',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'button',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(iconNameClass)',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'buttonIconClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'text',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n\n',
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'button',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                3
            ]
        },
        {
            'tokenType': 'done',
            'args': [4]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#button-submit/button-submit*/
define('shuttle-canstrap@1.2.1#button-submit/button-submit', [
    'exports',
    'can',
    '../infrastructure/component-view-model',
    '../infrastructure/options',
    './button-submit.stache!'
], function (exports, _can, _componentViewModel, _options, _buttonSubmit) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _options2 = _interopRequireDefault(_options);
    var _buttonSubmit2 = _interopRequireDefault(_buttonSubmit);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        elementClass: { default: 'btn-primary' },
        iconNameClass: {
            type: 'string',
            default: '',
            get: function get(value) {
                return value || _options2.default.button.submit.iconNameClass;
            }
        },
        buttonClass: {
            get: function get() {
                return 'btn ' + this.elementClass + ' ' + this.visibilityClass;
            }
        },
        buttonIconClass: {
            get: function get() {
                return this.iconClass + ' ' + this.iconNameClass + (!!this.text ? ' ' + this.iconSpacingClass : '');
            }
        }
    });
    exports.default = _can.Component.extend({
        tag: 'cs-button-submit',
        view: _buttonSubmit2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.2.1#checkbox/checkbox.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#checkbox/checkbox.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('checkbox/checkbox.stache', [
        {
            'tokenType': 'chars',
            'args': [
                '\uFEFF',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '_click(scope.event)',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'checkboxIconClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n\r\n',
                1
            ]
        },
        {
            'tokenType': 'done',
            'args': [3]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#checkbox/checkbox*/
define('shuttle-canstrap@1.2.1#checkbox/checkbox', [
    'exports',
    'can',
    '../infrastructure/component-view-model',
    './checkbox.stache!'
], function (exports, _can, _componentViewModel, _checkbox) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _checkbox2 = _interopRequireDefault(_checkbox);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        checkedIconClass: {
            type: 'string',
            default: 'fa-check-square'
        },
        uncheckedIconClass: {
            type: 'string',
            default: 'fa-square'
        },
        checkboxIconClass: {
            get: function get() {
                return this.iconClass + ' ' + (!!this.checked ? this.checkedIconClass : this.uncheckedIconClass);
            }
        },
        click: function click() {
            this.checked = !this.checked;
        }
    });
    exports.default = _can.Component.extend({
        tag: 'cs-checkbox',
        ViewModel: ViewModel,
        view: _checkbox2.default
    });
});
/*shuttle-canstrap@1.2.1#collapse/collapse.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#collapse/collapse.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('collapse/collapse.stache', [
        {
            'tokenType': 'chars',
            'args': [
                '\uFEFF',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'card ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'elementClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'card-header',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'collapseId',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '-header',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-toggle',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'collapse',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-toggle',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-target',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '#',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'collapseId',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-target',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-expanded',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-expanded',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-controls',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'collapseId',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-controls',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h5',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'mb-0',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h5',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'text',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'collapseIconClass',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h5',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n\r\n    ',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'collapseId',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'collapse ',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(collapsed)',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'hide',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'else',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'show',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-labelledby',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'collapseId',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '-header',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-labelledby',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(accordionId)',
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-parent',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '#',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'accordionId',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-parent',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'card-body',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'content',
                true,
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'content',
                true,
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                16
            ]
        },
        {
            'tokenType': 'done',
            'args': [16]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#infrastructure/id-generator*/
define('shuttle-canstrap@1.2.1#infrastructure/id-generator', ['exports'], function (exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _id = 1;
    var generator = function generator() {
        return _id++;
    };
    exports.default = generator;
});
/*shuttle-canstrap@1.2.1#collapse/collapse*/
define('shuttle-canstrap@1.2.1#collapse/collapse', [
    'exports',
    'can',
    './collapse.stache!',
    '../infrastructure/component-view-model',
    '../infrastructure/id-generator',
    'jquery'
], function (exports, _can, _collapse, _componentViewModel, _idGenerator, _jquery) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _collapse2 = _interopRequireDefault(_collapse);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _idGenerator2 = _interopRequireDefault(_idGenerator);
    var _jquery2 = _interopRequireDefault(_jquery);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        init: function init() {
            this.collapseId = 'collapse-' + (0, _idGenerator2.default)().toString();
        },
        collapseId: { type: 'string' },
        accordionId: { type: 'string' },
        hasAccordionId: {
            type: 'boolean',
            get: function get() {
                return !!this.accordionId;
            }
        },
        expandedIconClass: {
            type: 'string',
            default: 'fa-chevron-right'
        },
        collapsedIconClass: {
            type: 'string',
            default: 'fa-chevron-down'
        },
        collapsed: {
            type: 'boolean',
            default: function _default() {
                return !!this.accordionId;
            }
        },
        collapseIconClass: {
            get: function get() {
                return 'float-right ' + this.iconClass + ' ' + (!!this.collapsed ? this.collapsedIconClass : this.expandedIconClass);
            }
        },
        connectedCallback: function connectedCallback() {
            var self = this;
            var el = (0, _jquery2.default)('#' + this.collapseId);
            el.on('hidden.bs.collapse', function () {
                self.collapsed = true;
            });
            el.on('shown.bs.collapse', function () {
                self.collapsed = false;
            });
        }
    });
    exports.default = _can.Component.extend({
        tag: 'cs-collapse',
        view: _collapse2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.2.1#fetching/fetching.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#fetching/fetching.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('fetching/fetching.stache', [
        {
            'tokenType': 'chars',
            'args': [
                '\uFEFF',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'card',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n  ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'card-header',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'panel-title',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'title',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n  ',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n  ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'card-body',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'progress',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n      ',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'progress-bar progress-bar-striped progress-bar-animated',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'progressbar',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-valuenow',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '100',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-valuenow',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-valuemin',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '0',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-valuemin',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-valuemax',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '100',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-valuemax',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'style',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'width: 100%;',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'style',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n      ',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n  ',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                11
            ]
        },
        {
            'tokenType': 'done',
            'args': [11]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#fetching/fetching*/
define('shuttle-canstrap@1.2.1#fetching/fetching', [
    'exports',
    'can',
    '../infrastructure/component-view-model',
    './fetching.stache!',
    '../infrastructure/i18n'
], function (exports, _can, _componentViewModel, _fetching, _i18n) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _fetching2 = _interopRequireDefault(_fetching);
    var _i18n2 = _interopRequireDefault(_i18n);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        title: {
            type: 'string',
            default: '',
            get: function get(value) {
                return _i18n2.default.value(value);
            }
        }
    });
    exports.default = _can.Component.extend({
        tag: 'cs-fetching',
        view: _fetching2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.2.1#form/form.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#form/form.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('form/form.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'cs-form ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'elementClass',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'visibilityClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'form',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'onsubmit',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'return false;',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'onsubmit',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'form',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(title)',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'cs-form-heading',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h2',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'cs-form-title',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h2',
                false,
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'title',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h2',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                6
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'cs-form-body',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'content',
                false,
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'content',
                false,
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'content',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'form',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                12
            ]
        },
        {
            'tokenType': 'done',
            'args': [13]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#form/form*/
define('shuttle-canstrap@1.2.1#form/form', [
    'exports',
    'can',
    '../infrastructure/component-view-model',
    './form.stache',
    '../infrastructure/i18n',
    '../infrastructure/options'
], function (exports, _can, _componentViewModel, _form, _i18n, _options) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _form2 = _interopRequireDefault(_form);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _options2 = _interopRequireDefault(_options);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        title: {
            type: 'string',
            default: '',
            get: function get(title) {
                return _i18n2.default.value(title);
            }
        },
        elementClass: {
            type: 'string',
            get: function get(value) {
                return value || _options2.default.form.elementClass;
            }
        }
    });
    exports.default = _can.Component.extend({
        tag: 'cs-form',
        view: _form2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.2.1#form-autocomplete/form-autocomplete.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#form-autocomplete/form-autocomplete.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('form-autocomplete/form-autocomplete.stache', [
        {
            'tokenType': 'start',
            'args': [
                'cs-form-group',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'validation:u:message:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'validationMessage',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'validation:u:message:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'element:u:class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'formGroupClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'element:u:class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'visible:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visible',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'visible:from',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-form-group',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-label',
                true,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'label:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'label:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'required:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'required:from',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-label',
                true,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-autocomplete',
                true,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'parameters:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'parameters',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'parameters:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'mapper:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'mapper',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'mapper:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'loading:u:text:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'loadingText',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'loading:u:text:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'empty:u:text:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'emptyText',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'empty:u:text:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'map:bind',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'map',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'map:bind',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'method:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'method',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'method:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'search:u:attribute:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'searchAttribute',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'search:u:attribute:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'text:u:attribute:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'textAttribute',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'text:u:attribute:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'endpoint:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'endpoint',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'endpoint:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'search:u:value:bind',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'searchValue',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'search:u:value:bind',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-autocomplete',
                true,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'cs-form-group',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                6
            ]
        },
        {
            'tokenType': 'done',
            'args': [7]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#form-autocomplete/form-autocomplete*/
define('shuttle-canstrap@1.2.1#form-autocomplete/form-autocomplete', [
    'exports',
    'can',
    '../autocomplete/',
    './form-autocomplete.stache!'
], function (exports, _can, _autocomplete, _formAutocomplete) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _formAutocomplete2 = _interopRequireDefault(_formAutocomplete);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = _can.Component.extend({
        tag: 'cs-form-autocomplete',
        ViewModel: _autocomplete.ViewModel,
        view: _formAutocomplete2.default
    });
});
/*shuttle-canstrap@1.2.1#form-checkbox/form-checkbox.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#form-checkbox/form-checkbox.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('form-checkbox/form-checkbox.stache', [
        {
            'tokenType': 'chars',
            'args': [
                '\uFEFF',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-form-group',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'validation:u:message:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'validationMessage',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'validation:u:message:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'element:u:class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'formGroupClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'element:u:class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'visible:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visible',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'visible:from',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-form-group',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-checkbox',
                true,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'focus:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'focus',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'focus:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'checked:bind',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'checked',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'checked:bind',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'element:u:class:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'elementClass',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'element:u:class:from',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-checkbox',
                true,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-label',
                true,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'label:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'label:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'required:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'required:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'click:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'click',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'click:from',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-label',
                true,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'cs-form-group',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                4
            ]
        },
        {
            'tokenType': 'done',
            'args': [5]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#form-checkbox/form-checkbox*/
define('shuttle-canstrap@1.2.1#form-checkbox/form-checkbox', [
    'exports',
    'can',
    '../infrastructure/component-view-model',
    './form-checkbox.stache!'
], function (exports, _can, _componentViewModel, _formCheckbox) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _formCheckbox2 = _interopRequireDefault(_formCheckbox);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        click: function click() {
            this.checked = !this.checked;
        }
    });
    exports.default = _can.Component.extend({
        tag: 'cs-form-checkbox',
        ViewModel: ViewModel,
        view: _formCheckbox2.default
    });
});
/*shuttle-canstrap@1.2.1#form-group/form-group.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#form-group/form-group.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('form-group/form-group.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'cs-form-group ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'elementClass',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'visibilityClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'content',
                true,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'content',
                true,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-validation',
                true,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'message:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'validationMessage',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'message:from',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-validation',
                true,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                4
            ]
        },
        {
            'tokenType': 'done',
            'args': [4]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#form-group/form-group*/
define('shuttle-canstrap@1.2.1#form-group/form-group', [
    'exports',
    'can',
    '../infrastructure/component-view-model',
    './form-group.stache!',
    '../infrastructure/options'
], function (exports, _can, _componentViewModel, _formGroup, _options) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _formGroup2 = _interopRequireDefault(_formGroup);
    var _options2 = _interopRequireDefault(_options);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        elementClass: {
            type: 'string',
            get: function get(value) {
                return value || _options2.default.formGroup.elementClass;
            }
        }
    });
    exports.default = _can.Component.extend({
        tag: 'cs-form-group',
        ViewModel: ViewModel,
        view: _formGroup2.default
    });
});
/*shuttle-canstrap@1.2.1#form-input/form-input.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#form-input/form-input.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('form-input/form-input.stache', [
        {
            'tokenType': 'start',
            'args': [
                'cs-form-group',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'validation:u:message:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'validationMessage',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'validation:u:message:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'element:u:class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'formGroupClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'element:u:class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'visible:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visible',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'visible:from',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-form-group',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-label',
                true,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'label:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'label:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'required:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'required:from',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-label',
                true,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-input',
                true,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'focus:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'focus',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'focus:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value:bind',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value:bind',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'element:u:class:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'elementClass',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'element:u:class:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'type',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type:from',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-input',
                true,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'cs-form-group',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                4
            ]
        },
        {
            'tokenType': 'done',
            'args': [5]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#form-input/form-input*/
define('shuttle-canstrap@1.2.1#form-input/form-input', [
    'exports',
    'can',
    '../infrastructure/component-view-model',
    './form-input.stache!'
], function (exports, _can, _componentViewModel, _formInput) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _formInput2 = _interopRequireDefault(_formInput);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        type: {
            get: function get(type) {
                return type || 'text';
            }
        }
    });
    exports.default = _can.Component.extend({
        tag: 'cs-form-input',
        ViewModel: ViewModel,
        view: _formInput2.default
    });
});
/*shuttle-canstrap@1.2.1#input-datetime/input-datetime.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#input-datetime/input-datetime.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('input-datetime/input-datetime.stache', [
        {
            'tokenType': 'chars',
            'args': [
                '\uFEFF',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'position-relative ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'containerClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value:bind',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value:bind',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'inputClass',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'placeholder',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'focused:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'focus',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'focused:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-toggle',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'datetimepicker',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-toggle',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-target',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '#',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-target',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                4
            ]
        },
        {
            'tokenType': 'done',
            'args': [4]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*moment@2.24.0#moment*/
;
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define('moment@2.24.0#moment', factory) : global.moment = factory();
}(this, function () {
    'use strict';
    var hookCallback;
    function hooks() {
        return hookCallback.apply(null, arguments);
    }
    function setHookCallback(callback) {
        hookCallback = callback;
    }
    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }
    function isObject(input) {
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }
    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return Object.getOwnPropertyNames(obj).length === 0;
        } else {
            var k;
            for (k in obj) {
                if (obj.hasOwnProperty(k)) {
                    return false;
                }
            }
            return true;
        }
    }
    function isUndefined(input) {
        return input === void 0;
    }
    function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
    }
    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }
    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }
    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }
    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }
        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }
        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }
        return a;
    }
    function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }
    function defaultParsingFlags() {
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            meridiem: null,
            rfc2822: false,
            weekdayMismatch: false
        };
    }
    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }
    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this);
            var len = t.length >>> 0;
            for (var i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }
            return false;
        };
    }
    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            var parsedParts = some.call(flags.parsedDateParts, function (i) {
                return i != null;
            });
            var isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
            if (m._strict) {
                isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
            }
            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            } else {
                return isNowValid;
            }
        }
        return m._isValid;
    }
    function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        } else {
            getParsingFlags(m).userInvalidated = true;
        }
        return m;
    }
    var momentProperties = hooks.momentProperties = [];
    function copyConfig(to, from) {
        var i, prop, val;
        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }
        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }
        return to;
    }
    var updateInProgress = false;
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }
    function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
    }
    function absFloor(number) {
        if (number < 0) {
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }
    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion, value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }
        return value;
    }
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
        for (i = 0; i < len; i++) {
            if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }
    function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }
    function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [];
                var arg;
                for (var i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (var key in arguments[0]) {
                            arg += key + ': ' + arguments[0][key] + ', ';
                        }
                        arg = arg.slice(0, -2);
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }
    var deprecations = {};
    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }
    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;
    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }
    function set(config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        this._config = config;
        this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
    }
    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }
    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }
    var keys;
    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i, res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }
    var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L'
    };
    function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }
    var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A'
    };
    function longDateFormat(key) {
        var format = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
        if (format || !formatUpper) {
            return format;
        }
        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });
        return this._longDateFormat[key];
    }
    var defaultInvalidDate = 'Invalid date';
    function invalidDate() {
        return this._invalidDate;
    }
    var defaultOrdinal = '%d';
    var defaultDayOfMonthOrdinalParse = /\d{1,2}/;
    function ordinal(number) {
        return this._ordinal.replace('%d', number);
    }
    var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years'
    };
    function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
    }
    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }
    var aliases = {};
    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }
    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }
    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {}, normalizedProp, prop;
        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }
        return normalizedInput;
    }
    var priorities = {};
    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }
    function getPrioritizedUnits(unitsObj) {
        var units = [];
        for (var u in unitsObj) {
            units.push({
                unit: u,
                priority: priorities[u]
            });
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }
    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign = number >= 0;
        return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }
    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
    var formatFunctions = {};
    var formatTokenFunctions = {};
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }
    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }
    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;
        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }
        return function (mom) {
            var output = '', i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }
        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
        return formatFunctions[format](m);
    }
    function expandFormat(format, locale) {
        var i = 5;
        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }
        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }
        return format;
    }
    var match1 = /\d/;
    var match2 = /\d\d/;
    var match3 = /\d{3}/;
    var match4 = /\d{4}/;
    var match6 = /[+-]?\d{6}/;
    var match1to2 = /\d\d?/;
    var match3to4 = /\d\d\d\d?/;
    var match5to6 = /\d\d\d\d\d\d?/;
    var match1to3 = /\d{1,3}/;
    var match1to4 = /\d{1,4}/;
    var match1to6 = /[+-]?\d{1,6}/;
    var matchUnsigned = /\d+/;
    var matchSigned = /[+-]?\d+/;
    var matchOffset = /Z|[+-]\d\d:?\d\d/gi;
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi;
    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/;
    var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;
    var regexes = {};
    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
            return isStrict && strictRegex ? strictRegex : regex;
        };
    }
    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }
        return regexes[token](config._strict, config._locale);
    }
    function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }
    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }
    var tokens = {};
    function addParseToken(token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }
    function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }
    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }
    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;
    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
    });
    addFormatToken(0, [
        'YY',
        2
    ], 0, function () {
        return this.year() % 100;
    });
    addFormatToken(0, [
        'YYYY',
        4
    ], 0, 'year');
    addFormatToken(0, [
        'YYYYY',
        5
    ], 0, 'year');
    addFormatToken(0, [
        'YYYYYY',
        6,
        true
    ], 0, 'year');
    addUnitAlias('year', 'y');
    addUnitPriority('year', 1);
    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);
    addParseToken([
        'YYYYY',
        'YYYYYY'
    ], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });
    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }
    function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    }
    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };
    var getSetYear = makeGetSet('FullYear', true);
    function getIsLeapYear() {
        return isLeapYear(this.year());
    }
    function makeGetSet(unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }
    function get(mom, unit) {
        return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
    }
    function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
            } else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }
    function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }
    function stringSet(units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units);
            for (var i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }
    function mod(n, x) {
        return (n % x + x) % x;
    }
    var indexOf;
    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }
    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
    }
    addFormatToken('M', [
        'MM',
        2
    ], 'Mo', function () {
        return this.month() + 1;
    });
    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });
    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });
    addUnitAlias('month', 'M');
    addUnitPriority('month', 8);
    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });
    addParseToken([
        'M',
        'MM'
    ], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });
    addParseToken([
        'MMM',
        'MMMM'
    ], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });
    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths(m, format) {
        if (!m) {
            return isArray(this._months) ? this._months : this._months['standalone'];
        }
        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }
    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort(m, format) {
        if (!m) {
            return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }
    function handleStrictParse(monthName, format, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([
                    2000,
                    i
                ]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }
        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }
    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;
        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }
        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }
        for (i = 0; i < 12; i++) {
            mom = createUTC([
                2000,
                i
            ]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }
    function setMonth(mom, value) {
        var dayOfMonth;
        if (!mom.isValid()) {
            return mom;
        }
        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }
        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }
    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }
    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }
    var defaultMonthsShortRegex = matchWord;
    function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }
    var defaultMonthsRegex = matchWord;
    function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
    }
    function computeMonthsParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }
        var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
        for (i = 0; i < 12; i++) {
            mom = createUTC([
                2000,
                i
            ]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }
        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }
    function createDate(y, m, d, h, M, s, ms) {
        var date;
        if (y < 100 && y >= 0) {
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }
        } else {
            date = new Date(y, m, d, h, M, s, ms);
        }
        return date;
    }
    function createUTCDate(y) {
        var date;
        if (y < 100 && y >= 0) {
            var args = Array.prototype.slice.call(arguments);
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }
        } else {
            date = new Date(Date.UTC.apply(null, arguments));
        }
        return date;
    }
    function firstWeekOffset(year, dow, doy) {
        var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
    }
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }
        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }
    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }
        return {
            week: resWeek,
            year: resYear
        };
    }
    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }
    addFormatToken('w', [
        'ww',
        2
    ], 'wo', 'week');
    addFormatToken('W', [
        'WW',
        2
    ], 'Wo', 'isoWeek');
    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');
    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);
    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);
    addWeekParseToken([
        'w',
        'ww',
        'W',
        'WW'
    ], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });
    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }
    var defaultLocaleWeek = {
        dow: 0,
        doy: 6
    };
    function localeFirstDayOfWeek() {
        return this._week.dow;
    }
    function localeFirstDayOfYear() {
        return this._week.doy;
    }
    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }
    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }
    addFormatToken('d', 0, 'do', 'day');
    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });
    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });
    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });
    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');
    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);
    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });
    addWeekParseToken([
        'dd',
        'ddd',
        'dddd'
    ], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });
    addWeekParseToken([
        'd',
        'e',
        'E'
    ], function (input, week, config, token) {
        week[token] = toInt(input);
    });
    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }
        if (!isNaN(input)) {
            return parseInt(input, 10);
        }
        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }
        return null;
    }
    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }
    function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }
    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays(m, format) {
        var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format) ? 'format' : 'standalone'];
        return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
    }
    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort(m) {
        return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }
    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin(m) {
        return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }
    function handleStrictParse$1(weekdayName, format, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];
            for (i = 0; i < 7; ++i) {
                mom = createUTC([
                    2000,
                    1
                ]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }
        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }
    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;
        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }
        for (i = 0; i < 7; i++) {
            mom = createUTC([
                2000,
                1
            ]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }
    function getSetDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }
    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }
    function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }
    var defaultWeekdaysRegex = matchWord;
    function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }
    var defaultWeekdaysShortRegex = matchWord;
    function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }
    var defaultWeekdaysMinRegex = matchWord;
    function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }
    function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }
        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
            mom = createUTC([
                2000,
                1
            ]).day(i);
            minp = this.weekdaysMin(mom, '');
            shortp = this.weekdaysShort(mom, '');
            longp = this.weekdays(mom, '');
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 7; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }
        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }
    function hFormat() {
        return this.hours() % 12 || 12;
    }
    function kFormat() {
        return this.hours() || 24;
    }
    addFormatToken('H', [
        'HH',
        2
    ], 0, 'hour');
    addFormatToken('h', [
        'hh',
        2
    ], 0, hFormat);
    addFormatToken('k', [
        'kk',
        2
    ], 0, kFormat);
    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });
    addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });
    addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }
    meridiem('a', true);
    meridiem('A', false);
    addUnitAlias('hour', 'h');
    addUnitPriority('hour', 13);
    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }
    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('k', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);
    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);
    addParseToken([
        'H',
        'HH'
    ], HOUR);
    addParseToken([
        'k',
        'kk'
    ], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken([
        'a',
        'A'
    ], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken([
        'h',
        'hh'
    ], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });
    function localeIsPM(input) {
        return (input + '').toLowerCase().charAt(0) === 'p';
    }
    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }
    var getSetHour = makeGetSet('Hours', true);
    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
    };
    var locales = {};
    var localeFamilies = {};
    var globalLocale;
    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;
        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }
    function loadLocale(name) {
        var oldLocale = null;
        if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                var aliasedRequire = require;
                aliasedRequire('./locale/' + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {
            }
        }
        return locales[name];
    }
    function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            } else {
                data = defineLocale(key, values);
            }
            if (data) {
                globalLocale = data;
            } else {
                if (typeof console !== 'undefined' && console.warn) {
                    console.warn('Locale ' + key + ' not found. Did you forget to load it?');
                }
            }
        }
        return globalLocale._abbr;
    }
    function defineLocale(name, config) {
        if (config !== null) {
            var locale, parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));
            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }
            getSetGlobalLocale(name);
            return locales[name];
        } else {
            delete locales[name];
            return null;
        }
    }
    function updateLocale(name, config) {
        if (config != null) {
            var locale, tmpLocale, parentConfig = baseConfig;
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
                parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;
            getSetGlobalLocale(name);
        } else {
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }
    function getLocale(key) {
        var locale;
        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }
        if (!key) {
            return globalLocale;
        }
        if (!isArray(key)) {
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }
        return chooseLocale(key);
    }
    function listLocales() {
        return keys(locales);
    }
    function checkOverflow(m) {
        var overflow;
        var a = m._a;
        if (a && getParsingFlags(m).overflow === -2) {
            overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }
            getParsingFlags(m).overflow = overflow;
        }
        return m;
    }
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }
    function currentDateArray(config) {
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [
                nowValue.getUTCFullYear(),
                nowValue.getUTCMonth(),
                nowValue.getUTCDate()
            ];
        }
        return [
            nowValue.getFullYear(),
            nowValue.getMonth(),
            nowValue.getDate()
        ];
    }
    function configFromArray(config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;
        if (config._d) {
            return;
        }
        currentDate = currentDateArray(config);
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }
            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }
        for (; i < 7; i++) {
            config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        }
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }
        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }
        if (config._nextDay) {
            config._a[HOUR] = 24;
        }
        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }
    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;
            var curWeek = weekOfYear(createLocal(), dow, doy);
            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
            week = defaults(w.w, curWeek.week);
            if (w.d != null) {
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
    var isoDates = [
        [
            'YYYYYY-MM-DD',
            /[+-]\d{6}-\d\d-\d\d/
        ],
        [
            'YYYY-MM-DD',
            /\d{4}-\d\d-\d\d/
        ],
        [
            'GGGG-[W]WW-E',
            /\d{4}-W\d\d-\d/
        ],
        [
            'GGGG-[W]WW',
            /\d{4}-W\d\d/,
            false
        ],
        [
            'YYYY-DDD',
            /\d{4}-\d{3}/
        ],
        [
            'YYYY-MM',
            /\d{4}-\d\d/,
            false
        ],
        [
            'YYYYYYMMDD',
            /[+-]\d{10}/
        ],
        [
            'YYYYMMDD',
            /\d{8}/
        ],
        [
            'GGGG[W]WWE',
            /\d{4}W\d{3}/
        ],
        [
            'GGGG[W]WW',
            /\d{4}W\d{2}/,
            false
        ],
        [
            'YYYYDDD',
            /\d{7}/
        ]
    ];
    var isoTimes = [
        [
            'HH:mm:ss.SSSS',
            /\d\d:\d\d:\d\d\.\d+/
        ],
        [
            'HH:mm:ss,SSSS',
            /\d\d:\d\d:\d\d,\d+/
        ],
        [
            'HH:mm:ss',
            /\d\d:\d\d:\d\d/
        ],
        [
            'HH:mm',
            /\d\d:\d\d/
        ],
        [
            'HHmmss.SSSS',
            /\d\d\d\d\d\d\.\d+/
        ],
        [
            'HHmmss,SSSS',
            /\d\d\d\d\d\d,\d+/
        ],
        [
            'HHmmss',
            /\d\d\d\d\d\d/
        ],
        [
            'HHmm',
            /\d\d\d\d/
        ],
        [
            'HH',
            /\d\d/
        ]
    ];
    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;
    function configFromISO(config) {
        var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat;
        if (match) {
            getParsingFlags(config).iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }
    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;
    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10)
        ];
        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }
        return result;
    }
    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }
    function preprocessRFC2822(s) {
        return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    }
    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }
    var obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
    };
    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            return 0;
        } else {
            var hm = parseInt(numOffset, 10);
            var m = hm % 100, h = (hm - m) / 100;
            return h * 60 + m;
        }
    }
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i));
        if (match) {
            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }
            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);
            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }
        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }
        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }
        hooks.createFromInputFallback(config);
    }
    hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged and will be removed in an upcoming major release. Please refer to ' + 'http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    });
    hooks.ISO_8601 = function () {
    };
    hooks.RFC_2822 = function () {
    };
    function configFromStringAndFormat(config) {
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;
        var string = '' + config._i, i, parsedInput, tokens, token, skipped, stringLength = string.length, totalParsedInputLength = 0;
        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                } else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }
        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }
        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
        configFromArray(config);
        checkOverflow(config);
    }
    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;
        if (meridiem == null) {
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            return hour;
        }
    }
    function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore;
        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }
        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);
            if (!isValid(tempConfig)) {
                continue;
            }
            currentScore += getParsingFlags(tempConfig).charsLeftOver;
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
            getParsingFlags(tempConfig).score = currentScore;
            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }
        extend(config, bestMoment || tempConfig);
    }
    function configFromObject(config) {
        if (config._d) {
            return;
        }
        var i = normalizeObjectUnits(config._i);
        config._a = map([
            i.year,
            i.month,
            i.day || i.date,
            i.hour,
            i.minute,
            i.second,
            i.millisecond
        ], function (obj) {
            return obj && parseInt(obj, 10);
        });
        configFromArray(config);
    }
    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            res.add(1, 'd');
            res._nextDay = undefined;
        }
        return res;
    }
    function prepareConfig(config) {
        var input = config._i, format = config._f;
        config._locale = config._locale || getLocale(config._l);
        if (input === null || format === undefined && input === '') {
            return createInvalid({ nullInput: true });
        }
        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }
        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else {
            configFromInput(config);
        }
        if (!isValid(config)) {
            config._d = null;
        }
        return config;
    }
    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }
    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};
        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }
        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
            input = undefined;
        }
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
        return createFromConfig(c);
    }
    function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }
    var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
        } else {
            return createInvalid();
        }
    });
    var prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
        } else {
            return createInvalid();
        }
    });
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }
    function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isBefore', args);
    }
    function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isAfter', args);
    }
    var now = function () {
        return Date.now ? Date.now() : +new Date();
    };
    var ordering = [
        'year',
        'quarter',
        'month',
        'week',
        'day',
        'hour',
        'minute',
        'second',
        'millisecond'
    ];
    function isDurationValid(m) {
        for (var key in m) {
            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                return false;
            }
        }
        var unitHasDecimal = false;
        for (var i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false;
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }
        return true;
    }
    function isValid$1() {
        return this._isValid;
    }
    function createInvalid$1() {
        return createDuration(NaN);
    }
    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration), years = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months = normalizedInput.month || 0, weeks = normalizedInput.week || normalizedInput.isoWeek || 0, days = normalizedInput.day || 0, hours = normalizedInput.hour || 0, minutes = normalizedInput.minute || 0, seconds = normalizedInput.second || 0, milliseconds = normalizedInput.millisecond || 0;
        this._isValid = isDurationValid(normalizedInput);
        this._milliseconds = +milliseconds + seconds * 1000 + minutes * 60000 + hours * 1000 * 60 * 60;
        this._days = +days + weeks * 7;
        this._months = +months + quarters * 3 + years * 12;
        this._data = {};
        this._locale = getLocale();
        this._bubble();
    }
    function isDuration(obj) {
        return obj instanceof Duration;
    }
    function absRound(number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }
    function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
        });
    }
    offset('Z', ':');
    offset('ZZ', '');
    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken([
        'Z',
        'ZZ'
    ], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });
    var chunkOffset = /([\+\-]|\d\d)/gi;
    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher);
        if (matches === null) {
            return null;
        }
        var chunk = matches[matches.length - 1] || [];
        var parts = (chunk + '').match(chunkOffset) || [
            '-',
            0,
            0
        ];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);
        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
    }
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }
    function getDateOffset(m) {
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }
    hooks.updateOffset = function () {
    };
    function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0, localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }
    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }
            this.utcOffset(input, keepLocalTime);
            return this;
        } else {
            return -this.utcOffset();
        }
    }
    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }
    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;
            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }
    function setOffsetToParsedOffset() {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            } else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }
    function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
    }
    function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
    }
    function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }
        var c = {};
        copyConfig(c, this);
        c = prepareConfig(c);
        if (c._a) {
            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }
        return this._isDSTShifted;
    }
    function isLocal() {
        return this.isValid() ? !this._isUTC : false;
    }
    function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
    }
    function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }
    var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;
    var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
    function createDuration(input, key) {
        var duration = input, match = null, sign, ret, diffRes;
        if (isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
            };
        } else if (isNumber(input)) {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign
            };
        } else if (!!(match = isoRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign)
            };
        } else if (duration == null) {
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }
        ret = new Duration(duration);
        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }
        return ret;
    }
    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;
    function parseIso(inp, sign) {
        var res = inp && parseFloat(inp.replace(',', '.'));
        return (isNaN(res) ? 0 : res) * sign;
    }
    function positiveMomentsDifference(base, other) {
        var res = {};
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }
        res.milliseconds = +other - +base.clone().add(res.months, 'M');
        return res;
    }
    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return {
                milliseconds: 0,
                months: 0
            };
        }
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }
        return res;
    }
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val;
                val = period;
                period = tmp;
            }
            val = typeof val === 'string' ? +val : val;
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }
    function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds, days = absRound(duration._days), months = absRound(duration._months);
        if (!mom.isValid()) {
            return;
        }
        updateOffset = updateOffset == null ? true : updateOffset;
        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }
    var add = createAdder(1, 'add');
    var subtract = createAdder(-1, 'subtract');
    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
    }
    function calendar$1(time, formats) {
        var now = time || createLocal(), sod = cloneWithOffset(now, this).startOf('day'), format = hooks.calendarFormat(this, sod) || 'sameElse';
        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    }
    function clone() {
        return new Moment(this);
    }
    function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }
    function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }
    function isBetween(from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from), localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
        }
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    }
    function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input), inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }
    function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }
    function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }
    function diff(input, units, asFloat) {
        var that, zoneDelta, output;
        if (!this.isValid()) {
            return NaN;
        }
        that = cloneWithOffset(input, this);
        if (!that.isValid()) {
            return NaN;
        }
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 60000;
        units = normalizeUnits(units);
        switch (units) {
        case 'year':
            output = monthDiff(this, that) / 12;
            break;
        case 'month':
            output = monthDiff(this, that);
            break;
        case 'quarter':
            output = monthDiff(this, that) / 3;
            break;
        case 'second':
            output = (this - that) / 1000;
            break;
        case 'minute':
            output = (this - that) / 60000;
            break;
        case 'hour':
            output = (this - that) / 3600000;
            break;
        case 'day':
            output = (this - that - zoneDelta) / 86400000;
            break;
        case 'week':
            output = (this - that - zoneDelta) / 604800000;
            break;
        default:
            output = this - that;
        }
        return asFloat ? output : absFloor(output);
    }
    function monthDiff(a, b) {
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, 'months'), anchor2, adjust;
        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            adjust = (b - anchor) / (anchor2 - anchor);
        }
        return -(wholeMonthDiff + adjust) || 0;
    }
    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
    function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }
    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true;
        var m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }
        if (isFunction(Date.prototype.toISOString)) {
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }
    function inspect() {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment';
        var zone = '';
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        var prefix = '[' + func + '("]';
        var year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
        var suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix);
    }
    function format(inputString) {
        if (!inputString) {
            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }
    function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
            return createDuration({
                to: this,
                from: time
            }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }
    function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }
    function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
            return createDuration({
                from: this,
                to: time
            }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }
    function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }
    function locale(key) {
        var newLocaleData;
        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }
    var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
        if (key === undefined) {
            return this.localeData();
        } else {
            return this.locale(key);
        }
    });
    function localeData() {
        return this._locale;
    }
    var MS_PER_SECOND = 1000;
    var MS_PER_MINUTE = 60 * MS_PER_SECOND;
    var MS_PER_HOUR = 60 * MS_PER_MINUTE;
    var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
    function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
    }
    function localStartOfDate(y, m, d) {
        if (y < 100 && y >= 0) {
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }
    function utcStartOfDate(y, m, d) {
        if (y < 100 && y >= 0) {
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }
    function startOf(units) {
        var time;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }
        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
        case 'year':
            time = startOfDate(this.year(), 0, 1);
            break;
        case 'quarter':
            time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
            break;
        case 'month':
            time = startOfDate(this.year(), this.month(), 1);
            break;
        case 'week':
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
            break;
        case 'isoWeek':
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
            break;
        case 'day':
        case 'date':
            time = startOfDate(this.year(), this.month(), this.date());
            break;
        case 'hour':
            time = this._d.valueOf();
            time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
            break;
        case 'minute':
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_MINUTE);
            break;
        case 'second':
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_SECOND);
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }
    function endOf(units) {
        var time;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }
        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
        case 'year':
            time = startOfDate(this.year() + 1, 0, 1) - 1;
            break;
        case 'quarter':
            time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
            break;
        case 'month':
            time = startOfDate(this.year(), this.month() + 1, 1) - 1;
            break;
        case 'week':
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
            break;
        case 'isoWeek':
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
            break;
        case 'day':
        case 'date':
            time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
            break;
        case 'hour':
            time = this._d.valueOf();
            time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
            break;
        case 'minute':
            time = this._d.valueOf();
            time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
            break;
        case 'second':
            time = this._d.valueOf();
            time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }
    function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
    }
    function unix() {
        return Math.floor(this.valueOf() / 1000);
    }
    function toDate() {
        return new Date(this.valueOf());
    }
    function toArray() {
        var m = this;
        return [
            m.year(),
            m.month(),
            m.date(),
            m.hour(),
            m.minute(),
            m.second(),
            m.millisecond()
        ];
    }
    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }
    function toJSON() {
        return this.isValid() ? this.toISOString() : null;
    }
    function isValid$2() {
        return isValid(this);
    }
    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }
    function invalidAt() {
        return getParsingFlags(this).overflow;
    }
    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }
    addFormatToken(0, [
        'gg',
        2
    ], 0, function () {
        return this.weekYear() % 100;
    });
    addFormatToken(0, [
        'GG',
        2
    ], 0, function () {
        return this.isoWeekYear() % 100;
    });
    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [
            token,
            token.length
        ], 0, getter);
    }
    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');
    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');
    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);
    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);
    addWeekParseToken([
        'gggg',
        'ggggg',
        'GGGG',
        'GGGGG'
    ], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });
    addWeekParseToken([
        'gg',
        'GG'
    ], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });
    function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
    }
    function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }
    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }
    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }
    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }
    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }
    addFormatToken('Q', 0, 'Qo', 'quarter');
    addUnitAlias('quarter', 'Q');
    addUnitPriority('quarter', 7);
    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });
    function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }
    addFormatToken('D', [
        'DD',
        2
    ], 'Do', 'date');
    addUnitAlias('date', 'D');
    addUnitPriority('date', 9);
    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
    });
    addParseToken([
        'D',
        'DD'
    ], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });
    var getSetDayOfMonth = makeGetSet('Date', true);
    addFormatToken('DDD', [
        'DDDD',
        3
    ], 'DDDo', 'dayOfYear');
    addUnitAlias('dayOfYear', 'DDD');
    addUnitPriority('dayOfYear', 4);
    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken([
        'DDD',
        'DDDD'
    ], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });
    function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 86400000) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }
    addFormatToken('m', [
        'mm',
        2
    ], 0, 'minute');
    addUnitAlias('minute', 'm');
    addUnitPriority('minute', 14);
    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken([
        'm',
        'mm'
    ], MINUTE);
    var getSetMinute = makeGetSet('Minutes', false);
    addFormatToken('s', [
        'ss',
        2
    ], 0, 'second');
    addUnitAlias('second', 's');
    addUnitPriority('second', 15);
    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken([
        's',
        'ss'
    ], SECOND);
    var getSetSecond = makeGetSet('Seconds', false);
    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });
    addFormatToken(0, [
        'SS',
        2
    ], 0, function () {
        return ~~(this.millisecond() / 10);
    });
    addFormatToken(0, [
        'SSS',
        3
    ], 0, 'millisecond');
    addFormatToken(0, [
        'SSSS',
        4
    ], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, [
        'SSSSS',
        5
    ], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, [
        'SSSSSS',
        6
    ], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, [
        'SSSSSSS',
        7
    ], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, [
        'SSSSSSSS',
        8
    ], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, [
        'SSSSSSSSS',
        9
    ], 0, function () {
        return this.millisecond() * 1000000;
    });
    addUnitAlias('millisecond', 'ms');
    addUnitPriority('millisecond', 16);
    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);
    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }
    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }
    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    var getSetMillisecond = makeGetSet('Milliseconds', false);
    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');
    function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
    }
    function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }
    var proto = Moment.prototype;
    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
    function createUnix(input) {
        return createLocal(input * 1000);
    }
    function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
    }
    function preParsePostFormat(string) {
        return string;
    }
    var proto$1 = Locale.prototype;
    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;
    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;
    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;
    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;
    function get$1(format, index, field, setter) {
        var locale = getLocale();
        var utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }
    function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }
        format = format || '';
        if (index != null) {
            return get$1(format, index, field, 'month');
        }
        var i;
        var out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }
    function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }
            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }
            format = format || '';
        }
        var locale = getLocale(), shift = localeSorted ? locale._week.dow : 0;
        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }
        var i;
        var out = [];
        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }
    function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
    }
    function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }
    function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }
    function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }
    function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }
    getSetGlobalLocale('en', {
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
            var b = number % 10, output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
        }
    });
    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
    var mathAbs = Math.abs;
    function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
    }
    function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
    }
    function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
    }
    function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
    }
    function absCeil(number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }
    function bubble() {
        var milliseconds = this._milliseconds;
        var days = this._days;
        var months = this._months;
        var data = this._data;
        var seconds, minutes, hours, years, monthsFromDays;
        if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
            milliseconds += absCeil(monthsToDays(months) + days) * 86400000;
            days = 0;
            months = 0;
        }
        data.milliseconds = milliseconds % 1000;
        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;
        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;
        hours = absFloor(minutes / 60);
        data.hours = hours % 24;
        days += absFloor(hours / 24);
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));
        years = absFloor(months / 12);
        months %= 12;
        data.days = days;
        data.months = months;
        data.years = years;
        return this;
    }
    function daysToMonths(days) {
        return days * 4800 / 146097;
    }
    function monthsToDays(months) {
        return months * 146097 / 4800;
    }
    function as(units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days;
        var months;
        var milliseconds = this._milliseconds;
        units = normalizeUnits(units);
        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 86400000;
            months = this._months + daysToMonths(days);
            switch (units) {
            case 'month':
                return months;
            case 'quarter':
                return months / 3;
            case 'year':
                return months / 12;
            }
        } else {
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
            case 'week':
                return days / 7 + milliseconds / 604800000;
            case 'day':
                return days + milliseconds / 86400000;
            case 'hour':
                return days * 24 + milliseconds / 3600000;
            case 'minute':
                return days * 1440 + milliseconds / 60000;
            case 'second':
                return days * 86400 + milliseconds / 1000;
            case 'millisecond':
                return Math.floor(days * 86400000) + milliseconds;
            default:
                throw new Error('Unknown unit ' + units);
            }
        }
    }
    function valueOf$1() {
        if (!this.isValid()) {
            return NaN;
        }
        return this._milliseconds + this._days * 86400000 + this._months % 12 * 2592000000 + toInt(this._months / 12) * 31536000000;
    }
    function makeAs(alias) {
        return function () {
            return this.as(alias);
        };
    }
    var asMilliseconds = makeAs('ms');
    var asSeconds = makeAs('s');
    var asMinutes = makeAs('m');
    var asHours = makeAs('h');
    var asDays = makeAs('d');
    var asWeeks = makeAs('w');
    var asMonths = makeAs('M');
    var asQuarters = makeAs('Q');
    var asYears = makeAs('y');
    function clone$1() {
        return createDuration(this);
    }
    function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }
    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }
    var milliseconds = makeGetter('milliseconds');
    var seconds = makeGetter('seconds');
    var minutes = makeGetter('minutes');
    var hours = makeGetter('hours');
    var days = makeGetter('days');
    var months = makeGetter('months');
    var years = makeGetter('years');
    function weeks() {
        return absFloor(this.days() / 7);
    }
    var round = Math.round;
    var thresholds = {
        ss: 44,
        s: 45,
        m: 45,
        h: 22,
        d: 26,
        M: 11
    };
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }
    function relativeTime$1(posNegDuration, withoutSuffix, locale) {
        var duration = createDuration(posNegDuration).abs();
        var seconds = round(duration.as('s'));
        var minutes = round(duration.as('m'));
        var hours = round(duration.as('h'));
        var days = round(duration.as('d'));
        var months = round(duration.as('M'));
        var years = round(duration.as('y'));
        var a = seconds <= thresholds.ss && [
            's',
            seconds
        ] || seconds < thresholds.s && [
            'ss',
            seconds
        ] || minutes <= 1 && ['m'] || minutes < thresholds.m && [
            'mm',
            minutes
        ] || hours <= 1 && ['h'] || hours < thresholds.h && [
            'hh',
            hours
        ] || days <= 1 && ['d'] || days < thresholds.d && [
            'dd',
            days
        ] || months <= 1 && ['M'] || months < thresholds.M && [
            'MM',
            months
        ] || years <= 1 && ['y'] || [
            'yy',
            years
        ];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }
    function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof roundingFunction === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }
    function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }
    function humanize(withSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        var locale = this.localeData();
        var output = relativeTime$1(this, !withSuffix, locale);
        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }
        return locale.postformat(output);
    }
    var abs$1 = Math.abs;
    function sign(x) {
        return (x > 0) - (x < 0) || +x;
    }
    function toISOString$1() {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        var seconds = abs$1(this._milliseconds) / 1000;
        var days = abs$1(this._days);
        var months = abs$1(this._months);
        var minutes, hours, years;
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;
        years = absFloor(months / 12);
        months %= 12;
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
        var total = this.asSeconds();
        if (!total) {
            return 'P0D';
        }
        var totalSign = total < 0 ? '-' : '';
        var ymSign = sign(this._months) !== sign(total) ? '-' : '';
        var daysSign = sign(this._days) !== sign(total) ? '-' : '';
        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
        return totalSign + 'P' + (Y ? ymSign + Y + 'Y' : '') + (M ? ymSign + M + 'M' : '') + (D ? daysSign + D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? hmsSign + h + 'H' : '') + (m ? hmsSign + m + 'M' : '') + (s ? hmsSign + s + 'S' : '');
    }
    var proto$2 = Duration.prototype;
    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;
    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
    proto$2.lang = lang;
    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');
    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });
    hooks.version = '2.24.0';
    setHookCallback(createLocal);
    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
        DATE: 'YYYY-MM-DD',
        TIME: 'HH:mm',
        TIME_SECONDS: 'HH:mm:ss',
        TIME_MS: 'HH:mm:ss.SSS',
        WEEK: 'GGGG-[W]WW',
        MONTH: 'YYYY-MM'
    };
    return hooks;
}));
/*shuttle-canstrap@1.2.1#input-datetime/input-datetime*/
define('shuttle-canstrap@1.2.1#input-datetime/input-datetime', [
    'exports',
    'can',
    '../infrastructure/component-view-model',
    './input-datetime.stache!',
    '../infrastructure/id-generator',
    '../infrastructure/options',
    'moment'
], function (exports, _can, _componentViewModel, _inputDatetime, _idGenerator, _options, _moment) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _inputDatetime2 = _interopRequireDefault(_inputDatetime);
    var _idGenerator2 = _interopRequireDefault(_idGenerator);
    var _options2 = _interopRequireDefault(_options);
    var _moment2 = _interopRequireDefault(_moment);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        init: function init() {
            this.id = 'input-' + (0, _idGenerator2.default)().toString();
        },
        id: { type: 'string' },
        showFormat: {
            type: 'boolean',
            get: function get(value) {
                return value || _options2.default.datetime.showFormat;
            }
        },
        placeholder: {
            type: 'string',
            get: function get(value) {
                var format = this.showFormat ? this.format : '';
                return !!value ? value + ' (' + format + ')' : format;
            }
        },
        settingText: {
            type: 'boolean',
            default: false
        },
        text: {
            type: 'string',
            set: function set(value) {
                this.settingText = true;
                var m = (0, _moment2.default)(value, this.format);
                if (!this.settingValue) {
                    this.value = m.isValid() ? m.toDate() : undefined;
                }
                this.settingText = false;
                return value;
            }
        },
        settingValue: {
            type: 'boolean',
            default: false
        },
        value: {
            type: 'date',
            set: function set(value) {
                this.settingValue = true;
                if (!this.settingText) {
                    this.text = !!value ? (0, _moment2.default)(value).format(this.format) : '';
                }
                this.settingValue = false;
                return value;
            }
        },
        type: {
            type: 'string',
            default: 'datetime',
            set: function set(value) {
                return value === 'datetime' || value === 'date' || value === 'time' ? value : 'datetime';
            }
        },
        format: {
            type: 'string',
            get: function get(value) {
                if (!!value) {
                    return value;
                }
                switch (this.type) {
                case 'date': {
                        return _options2.default.datetime.dateFormat;
                    }
                case 'datetime': {
                        return _options2.default.datetime.format;
                    }
                case 'time': {
                        return _options2.default.datetime.timeFormat;
                    }
                default: {
                        return false;
                    }
                }
            }
        },
        datetimeClass: {
            type: 'string',
            get: function get(value) {
                return !!value ? value : _options2.default.datetime.datetimeClass;
            }
        },
        containerClass: { type: 'string' },
        inputClass: {
            type: 'string',
            get: function get() {
                return 'form-control ' + this.datetimeClass + ' ' + this.elementClass;
            }
        },
        minDate: {
            type: 'date',
            set: function set(value) {
                if (!!this.value && value > this.value) {
                    value = this.value;
                }
                if (!!this.maxDate && value > this.maxDate) {
                    value = this.maxDate;
                }
                if (!!value) {
                    value = (0, _moment2.default)(value);
                }
                this._setDateTimeOption('minDate', value || false);
                return value;
            }
        },
        maxDate: {
            type: 'date',
            set: function set(value) {
                if (!!this.value && value < this.value) {
                    value = this.value;
                }
                if (!!this.minDate && value < this.minDate) {
                    value = this.minDate;
                }
                this._setDateTimeOption('maxDate', value || false);
                return value;
            }
        },
        _setDateTimeOption: function _setDateTimeOption(name, value) {
            return;
            var el = $('#' + this.id);
            if (!el.length) {
                return;
            }
            el.datetimepicker(name, value);
        },
        connectedCallback: function connectedCallback() {
            var self = this;
            var el = $('#' + this.id);
            try {
                el.datetimepicker({ format: this.format });
                el.on('change.datetimepicker', function (e) {
                    self.value = !!e.date ? e.date.toDate() : undefined;
                });
            } catch (e) {
                if (!!console.warn) {
                    console.warn('The \'cs-input\' component makes use of https://tempusdominus.github.io/bootstrap-4/Installing/');
                    console.warn('$ npm install tempusdominus-bootstrap-4');
                }
                throw new Error('Could not call \'$.datetimepicker\'.');
            }
        }
    });
    exports.default = _can.Component.extend({
        tag: 'cs-input-datetime',
        view: _inputDatetime2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.2.1#form-input-datetime/form-input-datetime.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#form-input-datetime/form-input-datetime.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('form-input-datetime/form-input-datetime.stache', [
        {
            'tokenType': 'start',
            'args': [
                'cs-form-group',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'validation:u:message:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'validationMessage',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'validation:u:message:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'element:u:class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'formGroupClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'element:u:class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'visible:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visible',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'visible:from',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-form-group',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-label',
                true,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'label:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'label:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'required:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'required:from',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-label',
                true,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-input-datetime',
                true,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'focus:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'focus',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'focus:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value:bind',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value:bind',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'element:u:class:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'elementClass',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'element:u:class:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'type',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'min:u:date:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'minDate',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'min:u:date:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'max:u:date:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'maxDate',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'max:u:date:from',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-input-datetime',
                true,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'cs-form-group',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                5
            ]
        },
        {
            'tokenType': 'done',
            'args': [6]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#form-input-datetime/form-input-datetime*/
define('shuttle-canstrap@1.2.1#form-input-datetime/form-input-datetime', [
    'exports',
    'can',
    '../input-datetime/input-datetime',
    './form-input-datetime.stache!'
], function (exports, _can, _inputDatetime, _formInputDatetime) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _formInputDatetime2 = _interopRequireDefault(_formInputDatetime);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = _can.Component.extend({
        tag: 'cs-form-input-datetime',
        ViewModel: _inputDatetime.ViewModel,
        view: _formInputDatetime2.default
    });
});
/*shuttle-canstrap@1.2.1#select/select.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#select/select.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('select/select.stache', [
        {
            'tokenType': 'chars',
            'args': [
                '\uFEFF',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'select',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value:bind',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value:bind',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'selectClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'select',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#for(option of options)',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'option',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'option.value',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value:from',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'option',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'option.label',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'option',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n\t',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/for',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'select',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                5
            ]
        },
        {
            'tokenType': 'done',
            'args': [6]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#select/select*/
define('shuttle-canstrap@1.2.1#select/select', [
    'exports',
    'can',
    '../infrastructure/component-view-model',
    './select.stache!'
], function (exports, _can, _componentViewModel, _select) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = exports.OptionList = exports.OptionMap = undefined;
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _select2 = _interopRequireDefault(_select);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var OptionMap = exports.OptionMap = _componentViewModel2.default.extend({
        value: {
            type: 'string',
            default: ''
        },
        label: {
            type: 'string',
            default: ''
        }
    });
    var OptionList = exports.OptionList = _can.DefineList.extend({ '#': OptionMap });
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        options: { Type: OptionList },
        selectClass: {
            get: function get() {
                return 'form-control ' + this.elementClass;
            }
        }
    });
    exports.default = _can.Component.extend({
        tag: 'cs-select',
        ViewModel: ViewModel,
        view: _select2.default
    });
});
/*shuttle-canstrap@1.2.1#form-select/form-select.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#form-select/form-select.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('form-select/form-select.stache', [
        {
            'tokenType': 'chars',
            'args': [
                '\uFEFF',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-form-group',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'validation:u:message:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'validationMessage',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'validation:u:message:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'element:u:class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'formGroupClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'element:u:class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'visible:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visible',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'visible:from',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-form-group',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-label',
                true,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'label:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'label:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'required:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'required:from',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-label',
                true,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-select',
                true,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'focus:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'focus',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'focus:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value:bind',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value:bind',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'options:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'options',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'options:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'element:u:class:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'elementClass',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'element:u:class:from',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-select',
                true,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'cs-form-group',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                4
            ]
        },
        {
            'tokenType': 'done',
            'args': [5]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#form-select/form-select*/
define('shuttle-canstrap@1.2.1#form-select/form-select', [
    'exports',
    'can',
    '../select/',
    './form-select.stache!'
], function (exports, _can, _select, _formSelect) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _formSelect2 = _interopRequireDefault(_formSelect);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = _can.Component.extend({
        tag: 'cs-form-select',
        ViewModel: _select.ViewModel,
        view: _formSelect2.default
    });
});
/*shuttle-canstrap@1.2.1#textarea/textarea.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#textarea/textarea.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('textarea/textarea.stache', [
        {
            'tokenType': 'chars',
            'args': [
                '\uFEFF',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'textarea',
                true,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value:bind',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value:bind',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'textareaClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'placeholder',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'focused:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'focus',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'focused:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'rows:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'rows',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'rows:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'cols:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'columns',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'cols:from',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'textarea',
                true,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                2
            ]
        },
        {
            'tokenType': 'done',
            'args': [3]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#textarea/textarea*/
define('shuttle-canstrap@1.2.1#textarea/textarea', [
    'exports',
    'can',
    '../infrastructure/component-view-model',
    './textarea.stache!'
], function (exports, _can, _componentViewModel, _textarea) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _textarea2 = _interopRequireDefault(_textarea);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        rows: {
            type: 'number',
            default: 3
        },
        columns: {
            type: 'number',
            default: 80
        },
        value: {
            type: 'string',
            default: ''
        },
        textareaClass: {
            get: function get() {
                return 'form-control ' + this.elementClass + ' ' + this.visibilityClass;
            }
        }
    });
    exports.default = _can.Component.extend({
        tag: 'cs-textarea',
        ViewModel: ViewModel,
        view: _textarea2.default
    });
});
/*shuttle-canstrap@1.2.1#form-textarea/form-textarea.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#form-textarea/form-textarea.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('form-textarea/form-textarea.stache', [
        {
            'tokenType': 'chars',
            'args': [
                '\uFEFF',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-form-group',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'validation:u:message:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'validationMessage',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'validation:u:message:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'element:u:class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'formGroupClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'element:u:class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'visible:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visible',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'visible:from',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-form-group',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-label',
                true,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'label:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'label:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'required:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'required:from',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-label',
                true,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'textarea',
                true,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value:bind',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value:bind',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form-control ',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'elementClass',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'placeholder',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'focused:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'focus',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'focused:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'rows:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'rows',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'rows:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'cols:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'columns',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'cols:from',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'textarea',
                true,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'cs-form-group',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                5
            ]
        },
        {
            'tokenType': 'done',
            'args': [6]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#form-textarea/form-textarea*/
define('shuttle-canstrap@1.2.1#form-textarea/form-textarea', [
    'exports',
    'can',
    '../textarea/',
    './form-textarea.stache!'
], function (exports, _can, _textarea, _formTextarea) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _formTextarea2 = _interopRequireDefault(_formTextarea);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = _can.Component.extend({
        tag: 'cs-form-textarea',
        ViewModel: _textarea.ViewModel,
        view: _formTextarea2.default
    });
});
/*shuttle-canstrap@1.2.1#input/input.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#input/input.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('input/input.stache', [
        {
            'tokenType': 'chars',
            'args': [
                '\uFEFF',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'position-relative',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'type',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value:bind',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value:bind',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'inputClass',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'placeholder',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'focused:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'focus',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'focused:from',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                4
            ]
        },
        {
            'tokenType': 'done',
            'args': [4]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#input/input*/
define('shuttle-canstrap@1.2.1#input/input', [
    'exports',
    'can',
    '../infrastructure/component-view-model',
    './input.stache!'
], function (exports, _can, _componentViewModel, _input) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _input2 = _interopRequireDefault(_input);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        type: {
            type: 'string',
            default: 'input'
        },
        inputClass: {
            type: 'string',
            get: function get() {
                return 'form-control ' + this.elementClass;
            }
        }
    });
    exports.default = _can.Component.extend({
        tag: 'cs-input',
        view: _input2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.2.1#label/label.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#label/label.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('label/label.stache', [
        {
            'tokenType': 'chars',
            'args': [
                '\uFEFF',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'elementClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '_click(scope.event)',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '    ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'label',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(required)',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'labelClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n\n',
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                3
            ]
        },
        {
            'tokenType': 'done',
            'args': [3]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#label/label*/
define('shuttle-canstrap@1.2.1#label/label', [
    'exports',
    'can',
    './label.stache!',
    '../infrastructure/component-view-model'
], function (exports, _can, _label, _componentViewModel) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _label2 = _interopRequireDefault(_label);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        requiredClass: {
            type: 'string',
            default: 'fa-asterisk'
        },
        labelClass: {
            get: function get() {
                return this.iconClass + ' ' + this.requiredClass;
            }
        }
    });
    exports.default = _can.Component.extend({
        tag: 'cs-label',
        view: _label2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.2.1#modal/modal.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#modal/modal.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('modal/modal.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modalClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modalId',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'tabindex',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '-1',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'tabindex',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dialog',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-labelledby:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modalTitleId',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-labelledby:from',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modal-dialog',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'document',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modal-content',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modal-header',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h5',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modal-title text:from-textType',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id:from',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modalTitleId',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id:from',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h5',
                false,
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'title',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h5',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'button',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'close',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-dismiss',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modal',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-dismiss',
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-label',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'Close',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-label',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'button',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                    ',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dismissButtonClass',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'button',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modal-body',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(hasMessage)',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                    ',
                11
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'message',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                12
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'else',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                    ',
                13
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'content',
                true,
                14
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'content',
                true,
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                14
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                16
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                17
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modal-footer',
                17
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                17
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'button',
                false,
                18
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                18
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                18
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                18
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                18
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'btn btn-secondary',
                18
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                18
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-dismiss',
                18
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modal',
                18
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-dismiss',
                18
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'button',
                false,
                18
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'dismissText',
                18
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'button',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                18
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(hasPrimary)',
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                    ',
                19
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'button',
                false,
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'btn btn-primary',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '_primaryClick()',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                20
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'button',
                false,
                20
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'primaryText',
                20
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'button',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                20
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                21
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                22
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                23
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                24
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n\r\n',
                25
            ]
        },
        {
            'tokenType': 'done',
            'args': [27]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#modal/modal*/
define('shuttle-canstrap@1.2.1#modal/modal', [
    'exports',
    'jquery',
    'can',
    '../infrastructure/component-view-model',
    './modal.stache!',
    '../infrastructure/i18n',
    '../infrastructure/options'
], function (exports, _jquery, _can, _componentViewModel, _modal, _i18n, _options) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _jquery2 = _interopRequireDefault(_jquery);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _modal2 = _interopRequireDefault(_modal);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _options2 = _interopRequireDefault(_options);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        primaryClick: { type: 'observable' },
        modalType: {
            type: 'string',
            default: 'fade'
        },
        modalClass: {
            get: function get() {
                return 'modal ' + this.modalType;
            }
        },
        title: {
            type: 'string',
            default: '',
            get: function get(value) {
                return _i18n2.default.value(value);
            }
        },
        hasPrimary: {
            type: 'boolean',
            get: function get() {
                return !!this.primaryText;
            }
        },
        primaryText: {
            type: 'string',
            default: '',
            get: function get(value) {
                return _i18n2.default.value(value);
            }
        },
        dismissText: {
            type: 'string',
            default: '',
            get: function get(value) {
                return _i18n2.default.value(value);
            }
        },
        dismissButtonIconClass: {
            type: 'string',
            default: '',
            get: function get(value) {
                return value || this.iconClass;
            }
        },
        dismissButtonIconNameClass: {
            type: 'string',
            default: '',
            get: function get(value) {
                return value || _options2.default.button.close.iconNameClass;
            }
        },
        dismissButtonClass: {
            get: function get() {
                return this.dismissButtonIconClass + ' ' + this.dismissButtonIconNameClass + (!!this.text ? ' ' + this.iconSpacingClass : '');
            }
        },
        textType: {
            type: 'string',
            default: 'primary'
        },
        message: {
            type: 'string',
            default: ''
        },
        hasMessage: {
            type: 'boolean',
            get: function get() {
                return !!this.message;
            }
        },
        modalTitleId: {
            get: function get() {
                return this.modalId + '-title';
            }
        },
        _primaryClick: function _primaryClick() {
            var modalElement = (0, _jquery2.default)('#' + this.modalId);
            if (modalElement) {
                modalElement.modal('hide');
            }
            if (!!this.primaryClick) {
                this.primaryClick(arguments);
            } else {
                throw new Error('No primary click function has been assigned.');
            }
        }
    });
    exports.default = _can.Component.extend({
        tag: 'cs-modal',
        view: _modal2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.2.1#nav-dropdown/nav-dropdown.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#nav-dropdown/nav-dropdown.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('nav-dropdown/nav-dropdown.stache', [
        {
            'tokenType': 'special',
            'args': [
                '#if(href)',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'nav-item',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'nav-link',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'href:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'href',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'href:from',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'text',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'else',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'nav-item dropdown',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'nav-link dropdown-toggle',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'navbarDropdown',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-toggle',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dropdown',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-toggle',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-haspopup',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-haspopup',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-expanded',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'false',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-expanded',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'text',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dropdown-menu',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-labelledby',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'navbarDropdown',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-labelledby',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                11
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#for(item of list)',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dropdown-item',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'href:from',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'item.href',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'href:from',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'item.text',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/for',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                16
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                17
            ]
        },
        {
            'tokenType': 'done',
            'args': [17]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#nav-dropdown/nav-dropdown*/
define('shuttle-canstrap@1.2.1#nav-dropdown/nav-dropdown', [
    'exports',
    'can',
    './nav-dropdown.stache',
    '../infrastructure/i18n'
], function (exports, _can, _navDropdown, _i18n) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DropdownList = exports.DropdownMap = undefined;
    var _navDropdown2 = _interopRequireDefault(_navDropdown);
    var _i18n2 = _interopRequireDefault(_i18n);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var DropdownMap = exports.DropdownMap = _can.DefineMap.extend({
        href: {
            type: 'string',
            default: ''
        },
        text: {
            type: 'string',
            default: '',
            get: function get(value) {
                return _i18n2.default.value(value);
            }
        }
    });
    var DropdownList = exports.DropdownList = _can.DefineList.extend({ '#': DropdownMap });
    var ViewModel = _can.DefineMap.extend({
        href: {
            type: 'string',
            default: '',
            set: function set(value) {
                if (!!this.list && !!this.list.length) {
                    throw new Error('Cannot set \'href\' when a \'list\' has been set.');
                }
                return value;
            }
        },
        text: {
            type: 'string',
            default: '',
            get: function get(value) {
                return _i18n2.default.value(value);
            }
        },
        list: {
            Default: DropdownList,
            set: function set(value) {
                if (!!value.length && !!this.href) {
                    throw new Error('Cannot set \'list\' when a \'href\' has been set.');
                }
                return value;
            }
        }
    });
    exports.default = _can.Component.extend({
        tag: 'cs-nav-dropdown',
        view: _navDropdown2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.2.1#page-title/page-title.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#page-title/page-title.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('page-title/page-title.stache', [
        {
            'tokenType': 'chars',
            'args': [
                '\uFEFF',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'title',
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                1
            ]
        },
        {
            'tokenType': 'done',
            'args': [2]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#page-title/page-title*/
define('shuttle-canstrap@1.2.1#page-title/page-title', [
    'exports',
    'can',
    './page-title.stache!',
    '../infrastructure/i18n'
], function (exports, _can, _pageTitle, _i18n) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _pageTitle2 = _interopRequireDefault(_pageTitle);
    var _i18n2 = _interopRequireDefault(_i18n);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _can.DefineMap.extend({
        localize: {
            type: 'boolean',
            default: true
        },
        title: {
            type: 'string',
            default: '',
            get: function get(value) {
                return this.localize ? _i18n2.default.value(value) : value;
            }
        }
    });
    exports.default = _can.Component.extend({
        tag: 'cs-page-title',
        view: _pageTitle2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.2.1#sidebar/sidebar.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#sidebar/sidebar.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('sidebar/sidebar.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'cs-sidebar list-group border-0 text-left',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id:from',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#for(item of list)',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-sidebar-item',
                true,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'href:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'item.href',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'href:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'text:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'item.text',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'text:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'list:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'item.list',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'list:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'parent:u:id:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'parent:u:id:from',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-sidebar-item',
                true,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/for',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                5
            ]
        },
        {
            'tokenType': 'done',
            'args': [6]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#sidebar/sidebar*/
define('shuttle-canstrap@1.2.1#sidebar/sidebar', [
    'exports',
    'can',
    './sidebar.stache',
    '../infrastructure/i18n',
    '../infrastructure/id-generator',
    '../infrastructure/component-view-model'
], function (exports, _can, _sidebar, _i18n, _idGenerator, _componentViewModel) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ItemList = exports.ItemMap = undefined;
    var _sidebar2 = _interopRequireDefault(_sidebar);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _idGenerator2 = _interopRequireDefault(_idGenerator);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ItemMap = exports.ItemMap = _componentViewModel2.default.extend({
        init: function init() {
            this.id = 'sidebar-item-' + (0, _idGenerator2.default)().toString();
        },
        id: {
            type: 'string',
            default: ''
        },
        parentId: {
            type: 'string',
            get: function get(value) {
                return '#' + value;
            }
        },
        href: {
            type: 'string',
            default: ''
        },
        text: {
            type: 'string',
            default: '',
            get: function get(value) {
                return _i18n2.default.value(value);
            }
        },
        list: {
            Default: ItemList,
            set: function set(value) {
                if (!!value.length && !!this.href) {
                    throw new Error('Cannot set \'list\' when a \'href\' has been set.');
                }
                return value;
            }
        },
        expandedIconClass: {
            type: 'string',
            default: 'fa-chevron-right'
        },
        collapsedIconClass: {
            type: 'string',
            default: 'fa-chevron-down'
        },
        collapsed: {
            type: 'boolean',
            default: true
        },
        collapseIconClass: {
            get: function get() {
                return 'float-right ' + this.iconClass + ' ' + (!!this.collapsed ? this.collapsedIconClass : this.expandedIconClass);
            }
        },
        connectedCallback: function connectedCallback() {
            var self = this;
            var el = $('#' + this.id);
            el.on('hidden.bs.collapse', function () {
                self.collapsed = true;
            });
            el.on('shown.bs.collapse', function () {
                self.collapsed = false;
            });
        }
    });
    var ItemList = exports.ItemList = _can.DefineList.extend({ '#': ItemMap });
    var ViewModel = _componentViewModel2.default.extend({
        init: function init() {
            this.id = this.id || 'sidebar-' + (0, _idGenerator2.default)().toString();
        },
        id: { type: 'string' },
        list: { Type: ItemList },
        connectedCallback: function connectedCallback() {
            if (!this.togglerId) {
                return;
            }
            var toggler = $('#' + this.togglerId);
            var sidebar = $('#' + this.id);
            if (!toggler.length || !sidebar.length) {
                return;
            }
            $(window).resize(function () {
                if (!toggler.is(':visible') && !sidebar.is(':visible')) {
                    toggler.click();
                }
            });
        }
    });
    exports.default = _can.Component.extend({
        tag: 'cs-sidebar',
        view: _sidebar2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.2.1#sidebar/sidebar-item.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#sidebar/sidebar-item.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('sidebar/sidebar-item.stache', [
        {
            'tokenType': 'special',
            'args': [
                '#if(href)',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'href:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'href',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'href:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'list-group-item',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'text',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'else',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'href',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '#',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'id',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'href',
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'list-group-item d-inline-block collapsed',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-toggle',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'collapse',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-toggle',
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-expanded',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'false',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-expanded',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'text',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'collapseIconClass',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'collapse',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id:from',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'id',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id:from',
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-parent:from',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'parentId',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-parent:from',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#for(item of list)',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-sidebar-item',
                true,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'href:from',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'item.href',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'href:from',
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'text:from',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'item.text',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'text:from',
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'list:from',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'item.list',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'list:from',
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'parent:u:id:from',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'id',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'parent:u:id:from',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-sidebar-item',
                true,
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/for',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                12
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                13
            ]
        },
        {
            'tokenType': 'done',
            'args': [13]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#sidebar/sidebar-item*/
define('shuttle-canstrap@1.2.1#sidebar/sidebar-item', [
    'exports',
    'can',
    './sidebar',
    './sidebar-item.stache'
], function (exports, _can, _sidebar, _sidebarItem) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _sidebarItem2 = _interopRequireDefault(_sidebarItem);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = _can.Component.extend({
        tag: 'cs-sidebar-item',
        view: _sidebarItem2.default,
        ViewModel: _sidebar.ItemMap
    });
});
/*shuttle-canstrap@1.2.1#table/table.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#table/table.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('table/table.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'containerClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(shouldShowEmptyMessage)',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'alert alert-info',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'alert',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'emptyMessage',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'else',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'table',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'table ',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'tableClass',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'table',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'thead',
                false,
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'thead',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'tr',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'row',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tr',
                false,
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                7
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#for(column of columns)',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                    ',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'th',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'column.columnClass',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                9
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'column.headerClass',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'th',
                false,
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                    ',
                9
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(column.hasHeaderView)',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                        ',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'scope.vm.getHeaderView(column, scope.vm',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                    ',
                11
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'else',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                        ',
                12
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'column.columnTitle',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                    ',
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                    ',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'th',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                15
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/for',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tr',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'thead',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                18
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'tbody',
                false,
                19
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tbody',
                false,
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                19
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#for(row of rows)',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                20
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'tr',
                false,
                21
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                21
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'row ',
                21
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'scope.vm.getRowClass (row)',
                21
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                21
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                21
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'scope.vm._rowClick(row)',
                21
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                21
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tr',
                false,
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                    ',
                21
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#for(column of scope.vm.columns)',
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                        ',
                22
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                23
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-title',
                23
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'column.columnTitle',
                23
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-title',
                23
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'column.columnClass',
                23
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                23
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'column.dataClass',
                23
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                            ',
                23
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(column.hasView)',
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                                ',
                24
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'scope.vm.getView(row, column',
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                            ',
                25
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'else',
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                                ',
                26
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'scope.vm.getColumnValue(row, column)',
                27
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                            ',
                27
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                28
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                        ',
                28
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                29
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                    ',
                29
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/for',
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                30
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tr',
                31
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                31
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/for',
                32
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                32
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tbody',
                33
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                33
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'table',
                34
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                34
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                35
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                35
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                36
            ]
        },
        {
            'tokenType': 'done',
            'args': [36]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#table/table*/
define('shuttle-canstrap@1.2.1#table/table', [
    'exports',
    'can',
    '../infrastructure/component-view-model',
    'can-stache/',
    './table.stache!',
    '../infrastructure/i18n',
    '../infrastructure/click',
    '../infrastructure/options'
], function (exports, _can, _componentViewModel, _canStache, _table, _i18n, _click, _options) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = exports.ColumnList = exports.ColumnMap = undefined;
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _canStache2 = _interopRequireDefault(_canStache);
    var _table2 = _interopRequireDefault(_table);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _click2 = _interopRequireDefault(_click);
    var _options2 = _interopRequireDefault(_options);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ColumnMap = exports.ColumnMap = _componentViewModel2.default.extend({
        columnTitle: {
            type: 'string',
            default: '(column)',
            get: function get(value) {
                return _i18n2.default.value(value || '');
            }
        },
        headerStache: { type: 'any' },
        headerView: {
            type: 'any',
            set: function set(value) {
                if (typeof value !== 'function') {
                    throw new Error('Attribute "headerView" must be a function that returns a view instance.');
                }
                return value;
            }
        },
        hasHeaderView: {
            get: function get() {
                return !!this.headerView || !!this.headerStache;
            }
        },
        columnClass: {
            type: 'string',
            default: ''
        },
        headerClass: {
            type: 'string',
            default: ''
        },
        dataClass: {
            type: 'string',
            default: ''
        },
        stache: { type: 'any' },
        view: {
            type: 'any',
            set: function set(value) {
                if (typeof value !== 'function') {
                    throw new Error('Attribute "view" must be a function that returns a view instance.');
                }
                return value;
            }
        },
        hasView: {
            get: function get() {
                return !!this.view || !!this.stache;
            }
        }
    });
    var ColumnList = exports.ColumnList = _can.DefineList.extend({ '#': ColumnMap });
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        rowClick: { type: '*' },
        emptyMessage: {
            get: function get() {
                return _i18n2.default.value(this.emptyMessage || 'table-empty-message');
            }
        },
        tableClass: {
            type: 'string',
            default: '',
            get: function get(value) {
                return value || _options2.default.table.tableClass;
            }
        },
        containerClass: {
            type: 'string',
            default: '',
            get: function get(value) {
                return value || _options2.default.table.containerClass || '';
            }
        },
        columns: { Type: ColumnList },
        rows: { Type: _can.DefineList },
        shouldShowEmptyMessage: {
            get: function get() {
                return !!this.rows && this.rows.length === 0 && !!this.emptyMessage;
            }
        },
        _rowClick: function _rowClick(row) {
            if (!!row.click) {
                _click2.default.on(row);
            } else if (!!this.rowClick && typeof this.rowClick === 'function') {
                this.rowClick(row);
            }
        },
        getColumnValue: function getColumnValue(row, column) {
            if (!column.attributeName) {
                throw new Error('The column requires an \'attributeName\'');
            }
            var value = row[column.attributeName];
            return typeof value === 'function' ? value(column.attributeName) : value;
        },
        getView: function getView(row, column) {
            if (column.view) {
                return column.view(row, column);
            }
            var stacheTemplate = column.stache;
            if (!stacheTemplate) {
                throw new Error('Specify a \'stache\' or \'view\' for the column.');
            }
            return (0, _canStache2.default)(stacheTemplate)(row.data || row);
        },
        getHeaderView: function getHeaderView(column, vm) {
            if (!!column.headerView) {
                return column.headerView(column, vm);
            }
            var stacheTemplate = column.headerStache;
            if (!stacheTemplate) {
                throw new Error('Specify a \'headerStache\' or \'headerView\' for the column.');
            }
            return (0, _canStache2.default)(stacheTemplate)(column.data || vm);
        },
        getRowClass: function getRowClass(row) {
            return row['rowClass'];
        }
    });
    exports.default = _can.Component.extend({
        tag: 'cs-table',
        view: _table2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.2.1#validation/validation.stache!steal-stache@4.1.5#steal-stache*/
define('shuttle-canstrap@1.2.1#validation/validation.stache!steal-stache@4.1.5#steal-stache', [
    'module',
    'can-assign',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.2#can-view-import',
    'can-stache-bindings@4.10.9#can-stache-bindings'
], function (module, assign, stache, mustacheCore) {
    var renderer = stache('validation/validation.stache', [
        {
            'tokenType': 'chars',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(message)',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text-warning',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'message',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                3
            ]
        },
        {
            'tokenType': 'done',
            'args': [3]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.2.1#validation/validation*/
define('shuttle-canstrap@1.2.1#validation/validation', [
    'exports',
    'can',
    '../infrastructure/component-view-model',
    './validation.stache!'
], function (exports, _can, _componentViewModel, _validation) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _validation2 = _interopRequireDefault(_validation);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        message: {
            type: 'string',
            default: ''
        }
    });
    exports.default = _can.Component.extend({
        tag: 'cs-validation',
        ViewModel: ViewModel,
        view: _validation2.default
    });
});
/*shuttle-canstrap@1.2.1#shuttle-canstrap*/
define('shuttle-canstrap@1.2.1#shuttle-canstrap', [
    'exports',
    './infrastructure/options.js',
    './canstrap.css',
    './infrastructure/security.js',
    './infrastructure/click.js',
    './infrastructure/i18n.js',
    './alerts/alerts.js',
    './autocomplete/autocomplete.js',
    './button/button.js',
    './button-back/button-back.js',
    './button-group/button-group.js',
    './button-refresh/button-refresh.js',
    './button-remove/button-remove.js',
    './button-submit/button-submit.js',
    './checkbox/checkbox.js',
    './collapse/collapse.js',
    './fetching/fetching.js',
    './form/form.js',
    './form-autocomplete/form-autocomplete.js',
    './form-checkbox/form-checkbox.js',
    './form-group/form-group.js',
    './form-input/form-input.js',
    './form-input-datetime/form-input-datetime.js',
    './form-select/form-select.js',
    './form-textarea/form-textarea.js',
    './input/input.js',
    './input-datetime/input-datetime.js',
    './label/label.js',
    './modal/modal.js',
    './nav-dropdown/nav-dropdown.js',
    './page-title/page-title.js',
    './select/select.js',
    './sidebar/sidebar.js',
    './sidebar/sidebar-item.js',
    './table/table.js',
    './textarea/textarea.js',
    './validation/validation.js'
], function (exports, _options) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _options2 = _interopRequireDefault(_options);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = _options2.default;
});
/*@fortawesome/fontawesome-svg-core@1.2.21#index*/
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define('@fortawesome/fontawesome-svg-core@1.2.21#index', ['exports'], factory) : factory(global['fontawesome-svg-core'] = {});
}(this, function (exports) {
    'use strict';
    function _typeof(obj) {
        if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
            _typeof = function (obj) {
                return typeof obj;
            };
        } else {
            _typeof = function (obj) {
                return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
            };
        }
        return _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor)
                descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
            _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
            _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    function _defineProperty(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === 'function') {
                ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
                    return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                }));
            }
            ownKeys.forEach(function (key) {
                _defineProperty(target, key, source[key]);
            });
        }
        return target;
    }
    function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
    }
    function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
    }
    function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) {
            for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++)
                arr2[i] = arr[i];
            return arr2;
        }
    }
    function _arrayWithHoles(arr) {
        if (Array.isArray(arr))
            return arr;
    }
    function _iterableToArray(iter) {
        if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === '[object Arguments]')
            return Array.from(iter);
    }
    function _iterableToArrayLimit(arr, i) {
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;
        try {
            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i && _arr.length === i)
                    break;
            }
        } catch (err) {
            _d = true;
            _e = err;
        } finally {
            try {
                if (!_n && _i['return'] != null)
                    _i['return']();
            } finally {
                if (_d)
                    throw _e;
            }
        }
        return _arr;
    }
    function _nonIterableSpread() {
        throw new TypeError('Invalid attempt to spread non-iterable instance');
    }
    function _nonIterableRest() {
        throw new TypeError('Invalid attempt to destructure non-iterable instance');
    }
    var noop = function noop() {
    };
    var _WINDOW = {};
    var _DOCUMENT = {};
    var _MUTATION_OBSERVER = null;
    var _PERFORMANCE = {
        mark: noop,
        measure: noop
    };
    try {
        if (typeof window !== 'undefined')
            _WINDOW = window;
        if (typeof document !== 'undefined')
            _DOCUMENT = document;
        if (typeof MutationObserver !== 'undefined')
            _MUTATION_OBSERVER = MutationObserver;
        if (typeof performance !== 'undefined')
            _PERFORMANCE = performance;
    } catch (e) {
    }
    var _ref = _WINDOW.navigator || {}, _ref$userAgent = _ref.userAgent, userAgent = _ref$userAgent === void 0 ? '' : _ref$userAgent;
    var WINDOW = _WINDOW;
    var DOCUMENT = _DOCUMENT;
    var MUTATION_OBSERVER = _MUTATION_OBSERVER;
    var PERFORMANCE = _PERFORMANCE;
    var IS_BROWSER = !!WINDOW.document;
    var IS_DOM = !!DOCUMENT.documentElement && !!DOCUMENT.head && typeof DOCUMENT.addEventListener === 'function' && typeof DOCUMENT.createElement === 'function';
    var IS_IE = ~userAgent.indexOf('MSIE') || ~userAgent.indexOf('Trident/');
    var NAMESPACE_IDENTIFIER = '___FONT_AWESOME___';
    var UNITS_IN_GRID = 16;
    var DEFAULT_FAMILY_PREFIX = 'fa';
    var DEFAULT_REPLACEMENT_CLASS = 'svg-inline--fa';
    var DATA_FA_I2SVG = 'data-fa-i2svg';
    var DATA_FA_PSEUDO_ELEMENT = 'data-fa-pseudo-element';
    var DATA_FA_PSEUDO_ELEMENT_PENDING = 'data-fa-pseudo-element-pending';
    var DATA_PREFIX = 'data-prefix';
    var DATA_ICON = 'data-icon';
    var HTML_CLASS_I2SVG_BASE_CLASS = 'fontawesome-i2svg';
    var MUTATION_APPROACH_ASYNC = 'async';
    var TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS = [
        'HTML',
        'HEAD',
        'STYLE',
        'SCRIPT'
    ];
    var PRODUCTION = function () {
        try {
            return process.env.NODE_ENV === 'production';
        } catch (e) {
            return false;
        }
    }();
    var PREFIX_TO_STYLE = {
        'fas': 'solid',
        'far': 'regular',
        'fal': 'light',
        'fad': 'duotone',
        'fab': 'brands',
        'fa': 'solid'
    };
    var STYLE_TO_PREFIX = {
        'solid': 'fas',
        'regular': 'far',
        'light': 'fal',
        'duotone': 'fad',
        'brands': 'fab'
    };
    var LAYERS_TEXT_CLASSNAME = 'fa-layers-text';
    var FONT_FAMILY_PATTERN = /Font Awesome 5 (Solid|Regular|Light|Duotone|Brands|Free|Pro)/;
    var FONT_WEIGHT_TO_PREFIX = {
        '900': 'fas',
        '400': 'far',
        'normal': 'far',
        '300': 'fal'
    };
    var oneToTen = [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
    ];
    var oneToTwenty = oneToTen.concat([
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20
    ]);
    var ATTRIBUTES_WATCHED_FOR_MUTATION = [
        'class',
        'data-prefix',
        'data-icon',
        'data-fa-transform',
        'data-fa-mask'
    ];
    var DUOTONE_CLASSES = {
        GROUP: 'group',
        SWAP_OPACITY: 'swap-opacity',
        PRIMARY: 'primary',
        SECONDARY: 'secondary'
    };
    var RESERVED_CLASSES = [
        'xs',
        'sm',
        'lg',
        'fw',
        'ul',
        'li',
        'border',
        'pull-left',
        'pull-right',
        'spin',
        'pulse',
        'rotate-90',
        'rotate-180',
        'rotate-270',
        'flip-horizontal',
        'flip-vertical',
        'flip-both',
        'stack',
        'stack-1x',
        'stack-2x',
        'inverse',
        'layers',
        'layers-text',
        'layers-counter',
        DUOTONE_CLASSES.GROUP,
        DUOTONE_CLASSES.SWAP_OPACITY,
        DUOTONE_CLASSES.PRIMARY,
        DUOTONE_CLASSES.SECONDARY
    ].concat(oneToTen.map(function (n) {
        return ''.concat(n, 'x');
    })).concat(oneToTwenty.map(function (n) {
        return 'w-'.concat(n);
    }));
    var initial = WINDOW.FontAwesomeConfig || {};
    function getAttrConfig(attr) {
        var element = DOCUMENT.querySelector('script[' + attr + ']');
        if (element) {
            return element.getAttribute(attr);
        }
    }
    function coerce(val) {
        if (val === '')
            return true;
        if (val === 'false')
            return false;
        if (val === 'true')
            return true;
        return val;
    }
    if (DOCUMENT && typeof DOCUMENT.querySelector === 'function') {
        var attrs = [
            [
                'data-family-prefix',
                'familyPrefix'
            ],
            [
                'data-replacement-class',
                'replacementClass'
            ],
            [
                'data-auto-replace-svg',
                'autoReplaceSvg'
            ],
            [
                'data-auto-add-css',
                'autoAddCss'
            ],
            [
                'data-auto-a11y',
                'autoA11y'
            ],
            [
                'data-search-pseudo-elements',
                'searchPseudoElements'
            ],
            [
                'data-observe-mutations',
                'observeMutations'
            ],
            [
                'data-mutate-approach',
                'mutateApproach'
            ],
            [
                'data-keep-original-source',
                'keepOriginalSource'
            ],
            [
                'data-measure-performance',
                'measurePerformance'
            ],
            [
                'data-show-missing-icons',
                'showMissingIcons'
            ]
        ];
        attrs.forEach(function (_ref) {
            var _ref2 = _slicedToArray(_ref, 2), attr = _ref2[0], key = _ref2[1];
            var val = coerce(getAttrConfig(attr));
            if (val !== undefined && val !== null) {
                initial[key] = val;
            }
        });
    }
    var _default = {
        familyPrefix: DEFAULT_FAMILY_PREFIX,
        replacementClass: DEFAULT_REPLACEMENT_CLASS,
        autoReplaceSvg: true,
        autoAddCss: true,
        autoA11y: true,
        searchPseudoElements: false,
        observeMutations: true,
        mutateApproach: 'async',
        keepOriginalSource: true,
        measurePerformance: false,
        showMissingIcons: true
    };
    var _config = _objectSpread({}, _default, initial);
    if (!_config.autoReplaceSvg)
        _config.observeMutations = false;
    var config = _objectSpread({}, _config);
    WINDOW.FontAwesomeConfig = config;
    var w = WINDOW || {};
    if (!w[NAMESPACE_IDENTIFIER])
        w[NAMESPACE_IDENTIFIER] = {};
    if (!w[NAMESPACE_IDENTIFIER].styles)
        w[NAMESPACE_IDENTIFIER].styles = {};
    if (!w[NAMESPACE_IDENTIFIER].hooks)
        w[NAMESPACE_IDENTIFIER].hooks = {};
    if (!w[NAMESPACE_IDENTIFIER].shims)
        w[NAMESPACE_IDENTIFIER].shims = [];
    var namespace = w[NAMESPACE_IDENTIFIER];
    var functions = [];
    var listener = function listener() {
        DOCUMENT.removeEventListener('DOMContentLoaded', listener);
        loaded = 1;
        functions.map(function (fn) {
            return fn();
        });
    };
    var loaded = false;
    if (IS_DOM) {
        loaded = (DOCUMENT.documentElement.doScroll ? /^loaded|^c/ : /^loaded|^i|^c/).test(DOCUMENT.readyState);
        if (!loaded)
            DOCUMENT.addEventListener('DOMContentLoaded', listener);
    }
    function domready(fn) {
        if (!IS_DOM)
            return;
        loaded ? setTimeout(fn, 0) : functions.push(fn);
    }
    var PENDING = 'pending';
    var SETTLED = 'settled';
    var FULFILLED = 'fulfilled';
    var REJECTED = 'rejected';
    var NOOP = function NOOP() {
    };
    var isNode = typeof global !== 'undefined' && typeof global.process !== 'undefined' && typeof global.process.emit === 'function';
    var asyncSetTimer = typeof setImmediate === 'undefined' ? setTimeout : setImmediate;
    var asyncQueue = [];
    var asyncTimer;
    function asyncFlush() {
        for (var i = 0; i < asyncQueue.length; i++) {
            asyncQueue[i][0](asyncQueue[i][1]);
        }
        asyncQueue = [];
        asyncTimer = false;
    }
    function asyncCall(callback, arg) {
        asyncQueue.push([
            callback,
            arg
        ]);
        if (!asyncTimer) {
            asyncTimer = true;
            asyncSetTimer(asyncFlush, 0);
        }
    }
    function invokeResolver(resolver, promise) {
        function resolvePromise(value) {
            resolve(promise, value);
        }
        function rejectPromise(reason) {
            reject(promise, reason);
        }
        try {
            resolver(resolvePromise, rejectPromise);
        } catch (e) {
            rejectPromise(e);
        }
    }
    function invokeCallback(subscriber) {
        var owner = subscriber.owner;
        var settled = owner._state;
        var value = owner._data;
        var callback = subscriber[settled];
        var promise = subscriber.then;
        if (typeof callback === 'function') {
            settled = FULFILLED;
            try {
                value = callback(value);
            } catch (e) {
                reject(promise, e);
            }
        }
        if (!handleThenable(promise, value)) {
            if (settled === FULFILLED) {
                resolve(promise, value);
            }
            if (settled === REJECTED) {
                reject(promise, value);
            }
        }
    }
    function handleThenable(promise, value) {
        var resolved;
        try {
            if (promise === value) {
                throw new TypeError('A promises callback cannot return that same promise.');
            }
            if (value && (typeof value === 'function' || _typeof(value) === 'object')) {
                var then = value.then;
                if (typeof then === 'function') {
                    then.call(value, function (val) {
                        if (!resolved) {
                            resolved = true;
                            if (value === val) {
                                fulfill(promise, val);
                            } else {
                                resolve(promise, val);
                            }
                        }
                    }, function (reason) {
                        if (!resolved) {
                            resolved = true;
                            reject(promise, reason);
                        }
                    });
                    return true;
                }
            }
        } catch (e) {
            if (!resolved) {
                reject(promise, e);
            }
            return true;
        }
        return false;
    }
    function resolve(promise, value) {
        if (promise === value || !handleThenable(promise, value)) {
            fulfill(promise, value);
        }
    }
    function fulfill(promise, value) {
        if (promise._state === PENDING) {
            promise._state = SETTLED;
            promise._data = value;
            asyncCall(publishFulfillment, promise);
        }
    }
    function reject(promise, reason) {
        if (promise._state === PENDING) {
            promise._state = SETTLED;
            promise._data = reason;
            asyncCall(publishRejection, promise);
        }
    }
    function publish(promise) {
        promise._then = promise._then.forEach(invokeCallback);
    }
    function publishFulfillment(promise) {
        promise._state = FULFILLED;
        publish(promise);
    }
    function publishRejection(promise) {
        promise._state = REJECTED;
        publish(promise);
        if (!promise._handled && isNode) {
            global.process.emit('unhandledRejection', promise._data, promise);
        }
    }
    function notifyRejectionHandled(promise) {
        global.process.emit('rejectionHandled', promise);
    }
    function P(resolver) {
        if (typeof resolver !== 'function') {
            throw new TypeError('Promise resolver ' + resolver + ' is not a function');
        }
        if (this instanceof P === false) {
            throw new TypeError('Failed to construct \'Promise\': Please use the \'new\' operator, this object constructor cannot be called as a function.');
        }
        this._then = [];
        invokeResolver(resolver, this);
    }
    P.prototype = {
        constructor: P,
        _state: PENDING,
        _then: null,
        _data: undefined,
        _handled: false,
        then: function then(onFulfillment, onRejection) {
            var subscriber = {
                owner: this,
                then: new this.constructor(NOOP),
                fulfilled: onFulfillment,
                rejected: onRejection
            };
            if ((onRejection || onFulfillment) && !this._handled) {
                this._handled = true;
                if (this._state === REJECTED && isNode) {
                    asyncCall(notifyRejectionHandled, this);
                }
            }
            if (this._state === FULFILLED || this._state === REJECTED) {
                asyncCall(invokeCallback, subscriber);
            } else {
                this._then.push(subscriber);
            }
            return subscriber.then;
        },
        catch: function _catch(onRejection) {
            return this.then(null, onRejection);
        }
    };
    P.all = function (promises) {
        if (!Array.isArray(promises)) {
            throw new TypeError('You must pass an array to Promise.all().');
        }
        return new P(function (resolve, reject) {
            var results = [];
            var remaining = 0;
            function resolver(index) {
                remaining++;
                return function (value) {
                    results[index] = value;
                    if (!--remaining) {
                        resolve(results);
                    }
                };
            }
            for (var i = 0, promise; i < promises.length; i++) {
                promise = promises[i];
                if (promise && typeof promise.then === 'function') {
                    promise.then(resolver(i), reject);
                } else {
                    results[i] = promise;
                }
            }
            if (!remaining) {
                resolve(results);
            }
        });
    };
    P.race = function (promises) {
        if (!Array.isArray(promises)) {
            throw new TypeError('You must pass an array to Promise.race().');
        }
        return new P(function (resolve, reject) {
            for (var i = 0, promise; i < promises.length; i++) {
                promise = promises[i];
                if (promise && typeof promise.then === 'function') {
                    promise.then(resolve, reject);
                } else {
                    resolve(promise);
                }
            }
        });
    };
    P.resolve = function (value) {
        if (value && _typeof(value) === 'object' && value.constructor === P) {
            return value;
        }
        return new P(function (resolve) {
            resolve(value);
        });
    };
    P.reject = function (reason) {
        return new P(function (resolve, reject) {
            reject(reason);
        });
    };
    var picked = typeof Promise === 'function' ? Promise : P;
    var d = UNITS_IN_GRID;
    var meaninglessTransform = {
        size: 16,
        x: 0,
        y: 0,
        rotate: 0,
        flipX: false,
        flipY: false
    };
    function isReserved(name) {
        return ~RESERVED_CLASSES.indexOf(name);
    }
    function insertCss(css) {
        if (!css || !IS_DOM) {
            return;
        }
        var style = DOCUMENT.createElement('style');
        style.setAttribute('type', 'text/css');
        style.innerHTML = css;
        var headChildren = DOCUMENT.head.childNodes;
        var beforeChild = null;
        for (var i = headChildren.length - 1; i > -1; i--) {
            var child = headChildren[i];
            var tagName = (child.tagName || '').toUpperCase();
            if ([
                    'STYLE',
                    'LINK'
                ].indexOf(tagName) > -1) {
                beforeChild = child;
            }
        }
        DOCUMENT.head.insertBefore(style, beforeChild);
        return css;
    }
    var idPool = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    function nextUniqueId() {
        var size = 12;
        var id = '';
        while (size-- > 0) {
            id += idPool[Math.random() * 62 | 0];
        }
        return id;
    }
    function toArray(obj) {
        var array = [];
        for (var i = (obj || []).length >>> 0; i--;) {
            array[i] = obj[i];
        }
        return array;
    }
    function classArray(node) {
        if (node.classList) {
            return toArray(node.classList);
        } else {
            return (node.getAttribute('class') || '').split(' ').filter(function (i) {
                return i;
            });
        }
    }
    function getIconName(familyPrefix, cls) {
        var parts = cls.split('-');
        var prefix = parts[0];
        var iconName = parts.slice(1).join('-');
        if (prefix === familyPrefix && iconName !== '' && !isReserved(iconName)) {
            return iconName;
        } else {
            return null;
        }
    }
    function htmlEscape(str) {
        return ''.concat(str).replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    }
    function joinAttributes(attributes) {
        return Object.keys(attributes || {}).reduce(function (acc, attributeName) {
            return acc + ''.concat(attributeName, '="').concat(htmlEscape(attributes[attributeName]), '" ');
        }, '').trim();
    }
    function joinStyles(styles) {
        return Object.keys(styles || {}).reduce(function (acc, styleName) {
            return acc + ''.concat(styleName, ': ').concat(styles[styleName], ';');
        }, '');
    }
    function transformIsMeaningful(transform) {
        return transform.size !== meaninglessTransform.size || transform.x !== meaninglessTransform.x || transform.y !== meaninglessTransform.y || transform.rotate !== meaninglessTransform.rotate || transform.flipX || transform.flipY;
    }
    function transformForSvg(_ref) {
        var transform = _ref.transform, containerWidth = _ref.containerWidth, iconWidth = _ref.iconWidth;
        var outer = { transform: 'translate('.concat(containerWidth / 2, ' 256)') };
        var innerTranslate = 'translate('.concat(transform.x * 32, ', ').concat(transform.y * 32, ') ');
        var innerScale = 'scale('.concat(transform.size / 16 * (transform.flipX ? -1 : 1), ', ').concat(transform.size / 16 * (transform.flipY ? -1 : 1), ') ');
        var innerRotate = 'rotate('.concat(transform.rotate, ' 0 0)');
        var inner = { transform: ''.concat(innerTranslate, ' ').concat(innerScale, ' ').concat(innerRotate) };
        var path = { transform: 'translate('.concat(iconWidth / 2 * -1, ' -256)') };
        return {
            outer: outer,
            inner: inner,
            path: path
        };
    }
    function transformForCss(_ref2) {
        var transform = _ref2.transform, _ref2$width = _ref2.width, width = _ref2$width === void 0 ? UNITS_IN_GRID : _ref2$width, _ref2$height = _ref2.height, height = _ref2$height === void 0 ? UNITS_IN_GRID : _ref2$height, _ref2$startCentered = _ref2.startCentered, startCentered = _ref2$startCentered === void 0 ? false : _ref2$startCentered;
        var val = '';
        if (startCentered && IS_IE) {
            val += 'translate('.concat(transform.x / d - width / 2, 'em, ').concat(transform.y / d - height / 2, 'em) ');
        } else if (startCentered) {
            val += 'translate(calc(-50% + '.concat(transform.x / d, 'em), calc(-50% + ').concat(transform.y / d, 'em)) ');
        } else {
            val += 'translate('.concat(transform.x / d, 'em, ').concat(transform.y / d, 'em) ');
        }
        val += 'scale('.concat(transform.size / d * (transform.flipX ? -1 : 1), ', ').concat(transform.size / d * (transform.flipY ? -1 : 1), ') ');
        val += 'rotate('.concat(transform.rotate, 'deg) ');
        return val;
    }
    var ALL_SPACE = {
        x: 0,
        y: 0,
        width: '100%',
        height: '100%'
    };
    function fillBlack(abstract) {
        var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        if (abstract.attributes && (abstract.attributes.fill || force)) {
            abstract.attributes.fill = 'black';
        }
        return abstract;
    }
    function deGroup(abstract) {
        if (abstract.tag === 'g') {
            return abstract.children;
        } else {
            return [abstract];
        }
    }
    function makeIconMasking(_ref) {
        var children = _ref.children, attributes = _ref.attributes, main = _ref.main, mask = _ref.mask, transform = _ref.transform;
        var mainWidth = main.width, mainPath = main.icon;
        var maskWidth = mask.width, maskPath = mask.icon;
        var trans = transformForSvg({
            transform: transform,
            containerWidth: maskWidth,
            iconWidth: mainWidth
        });
        var maskRect = {
            tag: 'rect',
            attributes: _objectSpread({}, ALL_SPACE, { fill: 'white' })
        };
        var maskInnerGroupChildrenMixin = mainPath.children ? { children: mainPath.children.map(fillBlack) } : {};
        var maskInnerGroup = {
            tag: 'g',
            attributes: _objectSpread({}, trans.inner),
            children: [fillBlack(_objectSpread({
                    tag: mainPath.tag,
                    attributes: _objectSpread({}, mainPath.attributes, trans.path)
                }, maskInnerGroupChildrenMixin))]
        };
        var maskOuterGroup = {
            tag: 'g',
            attributes: _objectSpread({}, trans.outer),
            children: [maskInnerGroup]
        };
        var maskId = 'mask-'.concat(nextUniqueId());
        var clipId = 'clip-'.concat(nextUniqueId());
        var maskTag = {
            tag: 'mask',
            attributes: _objectSpread({}, ALL_SPACE, {
                id: maskId,
                maskUnits: 'userSpaceOnUse',
                maskContentUnits: 'userSpaceOnUse'
            }),
            children: [
                maskRect,
                maskOuterGroup
            ]
        };
        var defs = {
            tag: 'defs',
            children: [
                {
                    tag: 'clipPath',
                    attributes: { id: clipId },
                    children: deGroup(maskPath)
                },
                maskTag
            ]
        };
        children.push(defs, {
            tag: 'rect',
            attributes: _objectSpread({
                fill: 'currentColor',
                'clip-path': 'url(#'.concat(clipId, ')'),
                mask: 'url(#'.concat(maskId, ')')
            }, ALL_SPACE)
        });
        return {
            children: children,
            attributes: attributes
        };
    }
    function makeIconStandard(_ref) {
        var children = _ref.children, attributes = _ref.attributes, main = _ref.main, transform = _ref.transform, styles = _ref.styles;
        var styleString = joinStyles(styles);
        if (styleString.length > 0) {
            attributes['style'] = styleString;
        }
        if (transformIsMeaningful(transform)) {
            var trans = transformForSvg({
                transform: transform,
                containerWidth: main.width,
                iconWidth: main.width
            });
            children.push({
                tag: 'g',
                attributes: _objectSpread({}, trans.outer),
                children: [{
                        tag: 'g',
                        attributes: _objectSpread({}, trans.inner),
                        children: [{
                                tag: main.icon.tag,
                                children: main.icon.children,
                                attributes: _objectSpread({}, main.icon.attributes, trans.path)
                            }]
                    }]
            });
        } else {
            children.push(main.icon);
        }
        return {
            children: children,
            attributes: attributes
        };
    }
    function asIcon(_ref) {
        var children = _ref.children, main = _ref.main, mask = _ref.mask, attributes = _ref.attributes, styles = _ref.styles, transform = _ref.transform;
        if (transformIsMeaningful(transform) && main.found && !mask.found) {
            var width = main.width, height = main.height;
            var offset = {
                x: width / height / 2,
                y: 0.5
            };
            attributes['style'] = joinStyles(_objectSpread({}, styles, { 'transform-origin': ''.concat(offset.x + transform.x / 16, 'em ').concat(offset.y + transform.y / 16, 'em') }));
        }
        return [{
                tag: 'svg',
                attributes: attributes,
                children: children
            }];
    }
    function asSymbol(_ref) {
        var prefix = _ref.prefix, iconName = _ref.iconName, children = _ref.children, attributes = _ref.attributes, symbol = _ref.symbol;
        var id = symbol === true ? ''.concat(prefix, '-').concat(config.familyPrefix, '-').concat(iconName) : symbol;
        return [{
                tag: 'svg',
                attributes: { style: 'display: none;' },
                children: [{
                        tag: 'symbol',
                        attributes: _objectSpread({}, attributes, { id: id }),
                        children: children
                    }]
            }];
    }
    function makeInlineSvgAbstract(params) {
        var _params$icons = params.icons, main = _params$icons.main, mask = _params$icons.mask, prefix = params.prefix, iconName = params.iconName, transform = params.transform, symbol = params.symbol, title = params.title, extra = params.extra, _params$watchable = params.watchable, watchable = _params$watchable === void 0 ? false : _params$watchable;
        var _ref = mask.found ? mask : main, width = _ref.width, height = _ref.height;
        var widthClass = 'fa-w-'.concat(Math.ceil(width / height * 16));
        var attrClass = [
            config.replacementClass,
            iconName ? ''.concat(config.familyPrefix, '-').concat(iconName) : '',
            widthClass
        ].filter(function (c) {
            return extra.classes.indexOf(c) === -1;
        }).concat(extra.classes).join(' ');
        var content = {
            children: [],
            attributes: _objectSpread({}, extra.attributes, {
                'data-prefix': prefix,
                'data-icon': iconName,
                'class': attrClass,
                'role': extra.attributes.role || 'img',
                'xmlns': 'http://www.w3.org/2000/svg',
                'viewBox': '0 0 '.concat(width, ' ').concat(height)
            })
        };
        if (watchable) {
            content.attributes[DATA_FA_I2SVG] = '';
        }
        if (title)
            content.children.push({
                tag: 'title',
                attributes: { id: content.attributes['aria-labelledby'] || 'title-'.concat(nextUniqueId()) },
                children: [title]
            });
        var args = _objectSpread({}, content, {
            prefix: prefix,
            iconName: iconName,
            main: main,
            mask: mask,
            transform: transform,
            symbol: symbol,
            styles: extra.styles
        });
        var _ref2 = mask.found && main.found ? makeIconMasking(args) : makeIconStandard(args), children = _ref2.children, attributes = _ref2.attributes;
        args.children = children;
        args.attributes = attributes;
        if (symbol) {
            return asSymbol(args);
        } else {
            return asIcon(args);
        }
    }
    function makeLayersTextAbstract(params) {
        var content = params.content, width = params.width, height = params.height, transform = params.transform, title = params.title, extra = params.extra, _params$watchable2 = params.watchable, watchable = _params$watchable2 === void 0 ? false : _params$watchable2;
        var attributes = _objectSpread({}, extra.attributes, title ? { 'title': title } : {}, { 'class': extra.classes.join(' ') });
        if (watchable) {
            attributes[DATA_FA_I2SVG] = '';
        }
        var styles = _objectSpread({}, extra.styles);
        if (transformIsMeaningful(transform)) {
            styles['transform'] = transformForCss({
                transform: transform,
                startCentered: true,
                width: width,
                height: height
            });
            styles['-webkit-transform'] = styles['transform'];
        }
        var styleString = joinStyles(styles);
        if (styleString.length > 0) {
            attributes['style'] = styleString;
        }
        var val = [];
        val.push({
            tag: 'span',
            attributes: attributes,
            children: [content]
        });
        if (title) {
            val.push({
                tag: 'span',
                attributes: { class: 'sr-only' },
                children: [title]
            });
        }
        return val;
    }
    function makeLayersCounterAbstract(params) {
        var content = params.content, title = params.title, extra = params.extra;
        var attributes = _objectSpread({}, extra.attributes, title ? { 'title': title } : {}, { 'class': extra.classes.join(' ') });
        var styleString = joinStyles(extra.styles);
        if (styleString.length > 0) {
            attributes['style'] = styleString;
        }
        var val = [];
        val.push({
            tag: 'span',
            attributes: attributes,
            children: [content]
        });
        if (title) {
            val.push({
                tag: 'span',
                attributes: { class: 'sr-only' },
                children: [title]
            });
        }
        return val;
    }
    var noop$1 = function noop() {
    };
    var p = config.measurePerformance && PERFORMANCE && PERFORMANCE.mark && PERFORMANCE.measure ? PERFORMANCE : {
        mark: noop$1,
        measure: noop$1
    };
    var preamble = 'FA "5.10.1"';
    var begin = function begin(name) {
        p.mark(''.concat(preamble, ' ').concat(name, ' begins'));
        return function () {
            return end(name);
        };
    };
    var end = function end(name) {
        p.mark(''.concat(preamble, ' ').concat(name, ' ends'));
        p.measure(''.concat(preamble, ' ').concat(name), ''.concat(preamble, ' ').concat(name, ' begins'), ''.concat(preamble, ' ').concat(name, ' ends'));
    };
    var perf = {
        begin: begin,
        end: end
    };
    var bindInternal4 = function bindInternal4(func, thisContext) {
        return function (a, b, c, d) {
            return func.call(thisContext, a, b, c, d);
        };
    };
    var reduce = function fastReduceObject(subject, fn, initialValue, thisContext) {
        var keys = Object.keys(subject), length = keys.length, iterator = thisContext !== undefined ? bindInternal4(fn, thisContext) : fn, i, key, result;
        if (initialValue === undefined) {
            i = 1;
            result = subject[keys[0]];
        } else {
            i = 0;
            result = initialValue;
        }
        for (; i < length; i++) {
            key = keys[i];
            result = iterator(result, subject[key], key, subject);
        }
        return result;
    };
    function toHex(unicode) {
        var result = '';
        for (var i = 0; i < unicode.length; i++) {
            var hex = unicode.charCodeAt(i).toString(16);
            result += ('000' + hex).slice(-4);
        }
        return result;
    }
    function defineIcons(prefix, icons) {
        var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var _params$skipHooks = params.skipHooks, skipHooks = _params$skipHooks === void 0 ? false : _params$skipHooks;
        var normalized = Object.keys(icons).reduce(function (acc, iconName) {
            var icon = icons[iconName];
            var expanded = !!icon.icon;
            if (expanded) {
                acc[icon.iconName] = icon.icon;
            } else {
                acc[iconName] = icon;
            }
            return acc;
        }, {});
        if (typeof namespace.hooks.addPack === 'function' && !skipHooks) {
            namespace.hooks.addPack(prefix, normalized);
        } else {
            namespace.styles[prefix] = _objectSpread({}, namespace.styles[prefix] || {}, normalized);
        }
        if (prefix === 'fas') {
            defineIcons('fa', icons);
        }
    }
    var styles = namespace.styles, shims = namespace.shims;
    var _byUnicode = {};
    var _byLigature = {};
    var _byOldName = {};
    var build = function build() {
        var lookup = function lookup(reducer) {
            return reduce(styles, function (o, style, prefix) {
                o[prefix] = reduce(style, reducer, {});
                return o;
            }, {});
        };
        _byUnicode = lookup(function (acc, icon, iconName) {
            if (icon[3]) {
                acc[icon[3]] = iconName;
            }
            return acc;
        });
        _byLigature = lookup(function (acc, icon, iconName) {
            var ligatures = icon[2];
            acc[iconName] = iconName;
            ligatures.forEach(function (ligature) {
                acc[ligature] = iconName;
            });
            return acc;
        });
        var hasRegular = 'far' in styles;
        _byOldName = reduce(shims, function (acc, shim) {
            var oldName = shim[0];
            var prefix = shim[1];
            var iconName = shim[2];
            if (prefix === 'far' && !hasRegular) {
                prefix = 'fas';
            }
            acc[oldName] = {
                prefix: prefix,
                iconName: iconName
            };
            return acc;
        }, {});
    };
    build();
    function byUnicode(prefix, unicode) {
        return (_byUnicode[prefix] || {})[unicode];
    }
    function byLigature(prefix, ligature) {
        return (_byLigature[prefix] || {})[ligature];
    }
    function byOldName(name) {
        return _byOldName[name] || {
            prefix: null,
            iconName: null
        };
    }
    var styles$1 = namespace.styles;
    var emptyCanonicalIcon = function emptyCanonicalIcon() {
        return {
            prefix: null,
            iconName: null,
            rest: []
        };
    };
    function getCanonicalIcon(values) {
        return values.reduce(function (acc, cls) {
            var iconName = getIconName(config.familyPrefix, cls);
            if (styles$1[cls]) {
                acc.prefix = cls;
            } else if (config.autoFetchSvg && [
                    'fas',
                    'far',
                    'fal',
                    'fad',
                    'fab',
                    'fa'
                ].indexOf(cls) > -1) {
                acc.prefix = cls;
            } else if (iconName) {
                var shim = acc.prefix === 'fa' ? byOldName(iconName) : {};
                acc.iconName = shim.iconName || iconName;
                acc.prefix = shim.prefix || acc.prefix;
            } else if (cls !== config.replacementClass && cls.indexOf('fa-w-') !== 0) {
                acc.rest.push(cls);
            }
            return acc;
        }, emptyCanonicalIcon());
    }
    function iconFromMapping(mapping, prefix, iconName) {
        if (mapping && mapping[prefix] && mapping[prefix][iconName]) {
            return {
                prefix: prefix,
                iconName: iconName,
                icon: mapping[prefix][iconName]
            };
        }
    }
    function toHtml(abstractNodes) {
        var tag = abstractNodes.tag, _abstractNodes$attrib = abstractNodes.attributes, attributes = _abstractNodes$attrib === void 0 ? {} : _abstractNodes$attrib, _abstractNodes$childr = abstractNodes.children, children = _abstractNodes$childr === void 0 ? [] : _abstractNodes$childr;
        if (typeof abstractNodes === 'string') {
            return htmlEscape(abstractNodes);
        } else {
            return '<'.concat(tag, ' ').concat(joinAttributes(attributes), '>').concat(children.map(toHtml).join(''), '</').concat(tag, '>');
        }
    }
    var noop$2 = function noop() {
    };
    function isWatched(node) {
        var i2svg = node.getAttribute ? node.getAttribute(DATA_FA_I2SVG) : null;
        return typeof i2svg === 'string';
    }
    function getMutator() {
        if (config.autoReplaceSvg === true) {
            return mutators.replace;
        }
        var mutator = mutators[config.autoReplaceSvg];
        return mutator || mutators.replace;
    }
    var mutators = {
        replace: function replace(mutation) {
            var node = mutation[0];
            var abstract = mutation[1];
            var newOuterHTML = abstract.map(function (a) {
                return toHtml(a);
            }).join('\n');
            if (node.parentNode && node.outerHTML) {
                node.outerHTML = newOuterHTML + (config.keepOriginalSource && node.tagName.toLowerCase() !== 'svg' ? '<!-- '.concat(node.outerHTML, ' -->') : '');
            } else if (node.parentNode) {
                var newNode = document.createElement('span');
                node.parentNode.replaceChild(newNode, node);
                newNode.outerHTML = newOuterHTML;
            }
        },
        nest: function nest(mutation) {
            var node = mutation[0];
            var abstract = mutation[1];
            if (~classArray(node).indexOf(config.replacementClass)) {
                return mutators.replace(mutation);
            }
            var forSvg = new RegExp(''.concat(config.familyPrefix, '-.*'));
            delete abstract[0].attributes.style;
            var splitClasses = abstract[0].attributes.class.split(' ').reduce(function (acc, cls) {
                if (cls === config.replacementClass || cls.match(forSvg)) {
                    acc.toSvg.push(cls);
                } else {
                    acc.toNode.push(cls);
                }
                return acc;
            }, {
                toNode: [],
                toSvg: []
            });
            abstract[0].attributes.class = splitClasses.toSvg.join(' ');
            var newInnerHTML = abstract.map(function (a) {
                return toHtml(a);
            }).join('\n');
            node.setAttribute('class', splitClasses.toNode.join(' '));
            node.setAttribute(DATA_FA_I2SVG, '');
            node.innerHTML = newInnerHTML;
        }
    };
    function performOperationSync(op) {
        op();
    }
    function perform(mutations, callback) {
        var callbackFunction = typeof callback === 'function' ? callback : noop$2;
        if (mutations.length === 0) {
            callbackFunction();
        } else {
            var frame = performOperationSync;
            if (config.mutateApproach === MUTATION_APPROACH_ASYNC) {
                frame = WINDOW.requestAnimationFrame || performOperationSync;
            }
            frame(function () {
                var mutator = getMutator();
                var mark = perf.begin('mutate');
                mutations.map(mutator);
                mark();
                callbackFunction();
            });
        }
    }
    var disabled = false;
    function disableObservation() {
        disabled = true;
    }
    function enableObservation() {
        disabled = false;
    }
    var mo = null;
    function observe(options) {
        if (!MUTATION_OBSERVER) {
            return;
        }
        if (!config.observeMutations) {
            return;
        }
        var treeCallback = options.treeCallback, nodeCallback = options.nodeCallback, pseudoElementsCallback = options.pseudoElementsCallback, _options$observeMutat = options.observeMutationsRoot, observeMutationsRoot = _options$observeMutat === void 0 ? DOCUMENT : _options$observeMutat;
        mo = new MUTATION_OBSERVER(function (objects) {
            if (disabled)
                return;
            toArray(objects).forEach(function (mutationRecord) {
                if (mutationRecord.type === 'childList' && mutationRecord.addedNodes.length > 0 && !isWatched(mutationRecord.addedNodes[0])) {
                    if (config.searchPseudoElements) {
                        pseudoElementsCallback(mutationRecord.target);
                    }
                    treeCallback(mutationRecord.target);
                }
                if (mutationRecord.type === 'attributes' && mutationRecord.target.parentNode && config.searchPseudoElements) {
                    pseudoElementsCallback(mutationRecord.target.parentNode);
                }
                if (mutationRecord.type === 'attributes' && isWatched(mutationRecord.target) && ~ATTRIBUTES_WATCHED_FOR_MUTATION.indexOf(mutationRecord.attributeName)) {
                    if (mutationRecord.attributeName === 'class') {
                        var _getCanonicalIcon = getCanonicalIcon(classArray(mutationRecord.target)), prefix = _getCanonicalIcon.prefix, iconName = _getCanonicalIcon.iconName;
                        if (prefix)
                            mutationRecord.target.setAttribute('data-prefix', prefix);
                        if (iconName)
                            mutationRecord.target.setAttribute('data-icon', iconName);
                    } else {
                        nodeCallback(mutationRecord.target);
                    }
                }
            });
        });
        if (!IS_DOM)
            return;
        mo.observe(observeMutationsRoot, {
            childList: true,
            attributes: true,
            characterData: true,
            subtree: true
        });
    }
    function disconnect() {
        if (!mo)
            return;
        mo.disconnect();
    }
    function styleParser(node) {
        var style = node.getAttribute('style');
        var val = [];
        if (style) {
            val = style.split(';').reduce(function (acc, style) {
                var styles = style.split(':');
                var prop = styles[0];
                var value = styles.slice(1);
                if (prop && value.length > 0) {
                    acc[prop] = value.join(':').trim();
                }
                return acc;
            }, {});
        }
        return val;
    }
    function classParser(node) {
        var existingPrefix = node.getAttribute('data-prefix');
        var existingIconName = node.getAttribute('data-icon');
        var innerText = node.innerText !== undefined ? node.innerText.trim() : '';
        var val = getCanonicalIcon(classArray(node));
        if (existingPrefix && existingIconName) {
            val.prefix = existingPrefix;
            val.iconName = existingIconName;
        }
        if (val.prefix && innerText.length > 1) {
            val.iconName = byLigature(val.prefix, node.innerText);
        } else if (val.prefix && innerText.length === 1) {
            val.iconName = byUnicode(val.prefix, toHex(node.innerText));
        }
        return val;
    }
    var parseTransformString = function parseTransformString(transformString) {
        var transform = {
            size: 16,
            x: 0,
            y: 0,
            flipX: false,
            flipY: false,
            rotate: 0
        };
        if (!transformString) {
            return transform;
        } else {
            return transformString.toLowerCase().split(' ').reduce(function (acc, n) {
                var parts = n.toLowerCase().split('-');
                var first = parts[0];
                var rest = parts.slice(1).join('-');
                if (first && rest === 'h') {
                    acc.flipX = true;
                    return acc;
                }
                if (first && rest === 'v') {
                    acc.flipY = true;
                    return acc;
                }
                rest = parseFloat(rest);
                if (isNaN(rest)) {
                    return acc;
                }
                switch (first) {
                case 'grow':
                    acc.size = acc.size + rest;
                    break;
                case 'shrink':
                    acc.size = acc.size - rest;
                    break;
                case 'left':
                    acc.x = acc.x - rest;
                    break;
                case 'right':
                    acc.x = acc.x + rest;
                    break;
                case 'up':
                    acc.y = acc.y - rest;
                    break;
                case 'down':
                    acc.y = acc.y + rest;
                    break;
                case 'rotate':
                    acc.rotate = acc.rotate + rest;
                    break;
                }
                return acc;
            }, transform);
        }
    };
    function transformParser(node) {
        return parseTransformString(node.getAttribute('data-fa-transform'));
    }
    function symbolParser(node) {
        var symbol = node.getAttribute('data-fa-symbol');
        return symbol === null ? false : symbol === '' ? true : symbol;
    }
    function attributesParser(node) {
        var extraAttributes = toArray(node.attributes).reduce(function (acc, attr) {
            if (acc.name !== 'class' && acc.name !== 'style') {
                acc[attr.name] = attr.value;
            }
            return acc;
        }, {});
        var title = node.getAttribute('title');
        if (config.autoA11y) {
            if (title) {
                extraAttributes['aria-labelledby'] = ''.concat(config.replacementClass, '-title-').concat(nextUniqueId());
            } else {
                extraAttributes['aria-hidden'] = 'true';
                extraAttributes['focusable'] = 'false';
            }
        }
        return extraAttributes;
    }
    function maskParser(node) {
        var mask = node.getAttribute('data-fa-mask');
        if (!mask) {
            return emptyCanonicalIcon();
        } else {
            return getCanonicalIcon(mask.split(' ').map(function (i) {
                return i.trim();
            }));
        }
    }
    function blankMeta() {
        return {
            iconName: null,
            title: null,
            prefix: null,
            transform: meaninglessTransform,
            symbol: false,
            mask: null,
            extra: {
                classes: [],
                styles: {},
                attributes: {}
            }
        };
    }
    function parseMeta(node) {
        var _classParser = classParser(node), iconName = _classParser.iconName, prefix = _classParser.prefix, extraClasses = _classParser.rest;
        var extraStyles = styleParser(node);
        var transform = transformParser(node);
        var symbol = symbolParser(node);
        var extraAttributes = attributesParser(node);
        var mask = maskParser(node);
        return {
            iconName: iconName,
            title: node.getAttribute('title'),
            prefix: prefix,
            transform: transform,
            symbol: symbol,
            mask: mask,
            extra: {
                classes: extraClasses,
                styles: extraStyles,
                attributes: extraAttributes
            }
        };
    }
    function MissingIcon(error) {
        this.name = 'MissingIcon';
        this.message = error || 'Icon unavailable';
        this.stack = new Error().stack;
    }
    MissingIcon.prototype = Object.create(Error.prototype);
    MissingIcon.prototype.constructor = MissingIcon;
    var FILL = { fill: 'currentColor' };
    var ANIMATION_BASE = {
        attributeType: 'XML',
        repeatCount: 'indefinite',
        dur: '2s'
    };
    var RING = {
        tag: 'path',
        attributes: _objectSpread({}, FILL, { d: 'M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z' })
    };
    var OPACITY_ANIMATE = _objectSpread({}, ANIMATION_BASE, { attributeName: 'opacity' });
    var DOT = {
        tag: 'circle',
        attributes: _objectSpread({}, FILL, {
            cx: '256',
            cy: '364',
            r: '28'
        }),
        children: [
            {
                tag: 'animate',
                attributes: _objectSpread({}, ANIMATION_BASE, {
                    attributeName: 'r',
                    values: '28;14;28;28;14;28;'
                })
            },
            {
                tag: 'animate',
                attributes: _objectSpread({}, OPACITY_ANIMATE, { values: '1;0;1;1;0;1;' })
            }
        ]
    };
    var QUESTION = {
        tag: 'path',
        attributes: _objectSpread({}, FILL, {
            opacity: '1',
            d: 'M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z'
        }),
        children: [{
                tag: 'animate',
                attributes: _objectSpread({}, OPACITY_ANIMATE, { values: '1;0;0;0;0;1;' })
            }]
    };
    var EXCLAMATION = {
        tag: 'path',
        attributes: _objectSpread({}, FILL, {
            opacity: '0',
            d: 'M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z'
        }),
        children: [{
                tag: 'animate',
                attributes: _objectSpread({}, OPACITY_ANIMATE, { values: '0;0;1;1;0;0;' })
            }]
    };
    var missing = {
        tag: 'g',
        children: [
            RING,
            DOT,
            QUESTION,
            EXCLAMATION
        ]
    };
    var styles$2 = namespace.styles;
    function asFoundIcon(icon) {
        var width = icon[0];
        var height = icon[1];
        var _icon$slice = icon.slice(4), _icon$slice2 = _slicedToArray(_icon$slice, 1), vectorData = _icon$slice2[0];
        var element = null;
        if (Array.isArray(vectorData)) {
            element = {
                tag: 'g',
                attributes: { class: ''.concat(config.familyPrefix, '-').concat(DUOTONE_CLASSES.GROUP) },
                children: [
                    {
                        tag: 'path',
                        attributes: {
                            class: ''.concat(config.familyPrefix, '-').concat(DUOTONE_CLASSES.SECONDARY),
                            fill: 'currentColor',
                            d: vectorData[0]
                        }
                    },
                    {
                        tag: 'path',
                        attributes: {
                            class: ''.concat(config.familyPrefix, '-').concat(DUOTONE_CLASSES.PRIMARY),
                            fill: 'currentColor',
                            d: vectorData[1]
                        }
                    }
                ]
            };
        } else {
            element = {
                tag: 'path',
                attributes: {
                    fill: 'currentColor',
                    d: vectorData
                }
            };
        }
        return {
            found: true,
            width: width,
            height: height,
            icon: element
        };
    }
    function findIcon(iconName, prefix) {
        return new picked(function (resolve, reject) {
            var val = {
                found: false,
                width: 512,
                height: 512,
                icon: missing
            };
            if (iconName && prefix && styles$2[prefix] && styles$2[prefix][iconName]) {
                var icon = styles$2[prefix][iconName];
                return resolve(asFoundIcon(icon));
            }
            if (iconName && prefix && !config.showMissingIcons) {
                reject(new MissingIcon('Icon is missing for prefix '.concat(prefix, ' with icon name ').concat(iconName)));
            } else {
                resolve(val);
            }
        });
    }
    var styles$3 = namespace.styles;
    function generateSvgReplacementMutation(node, nodeMeta) {
        var iconName = nodeMeta.iconName, title = nodeMeta.title, prefix = nodeMeta.prefix, transform = nodeMeta.transform, symbol = nodeMeta.symbol, mask = nodeMeta.mask, extra = nodeMeta.extra;
        return new picked(function (resolve, reject) {
            picked.all([
                findIcon(iconName, prefix),
                findIcon(mask.iconName, mask.prefix)
            ]).then(function (_ref) {
                var _ref2 = _slicedToArray(_ref, 2), main = _ref2[0], mask = _ref2[1];
                resolve([
                    node,
                    makeInlineSvgAbstract({
                        icons: {
                            main: main,
                            mask: mask
                        },
                        prefix: prefix,
                        iconName: iconName,
                        transform: transform,
                        symbol: symbol,
                        mask: mask,
                        title: title,
                        extra: extra,
                        watchable: true
                    })
                ]);
            });
        });
    }
    function generateLayersText(node, nodeMeta) {
        var title = nodeMeta.title, transform = nodeMeta.transform, extra = nodeMeta.extra;
        var width = null;
        var height = null;
        if (IS_IE) {
            var computedFontSize = parseInt(getComputedStyle(node).fontSize, 10);
            var boundingClientRect = node.getBoundingClientRect();
            width = boundingClientRect.width / computedFontSize;
            height = boundingClientRect.height / computedFontSize;
        }
        if (config.autoA11y && !title) {
            extra.attributes['aria-hidden'] = 'true';
        }
        return picked.resolve([
            node,
            makeLayersTextAbstract({
                content: node.innerHTML,
                width: width,
                height: height,
                transform: transform,
                title: title,
                extra: extra,
                watchable: true
            })
        ]);
    }
    function generateMutation(node) {
        var nodeMeta = parseMeta(node);
        if (~nodeMeta.extra.classes.indexOf(LAYERS_TEXT_CLASSNAME)) {
            return generateLayersText(node, nodeMeta);
        } else {
            return generateSvgReplacementMutation(node, nodeMeta);
        }
    }
    function onTree(root) {
        var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        if (!IS_DOM)
            return;
        var htmlClassList = DOCUMENT.documentElement.classList;
        var hclAdd = function hclAdd(suffix) {
            return htmlClassList.add(''.concat(HTML_CLASS_I2SVG_BASE_CLASS, '-').concat(suffix));
        };
        var hclRemove = function hclRemove(suffix) {
            return htmlClassList.remove(''.concat(HTML_CLASS_I2SVG_BASE_CLASS, '-').concat(suffix));
        };
        var prefixes = config.autoFetchSvg ? Object.keys(PREFIX_TO_STYLE) : Object.keys(styles$3);
        var prefixesDomQuery = ['.'.concat(LAYERS_TEXT_CLASSNAME, ':not([').concat(DATA_FA_I2SVG, '])')].concat(prefixes.map(function (p) {
            return '.'.concat(p, ':not([').concat(DATA_FA_I2SVG, '])');
        })).join(', ');
        if (prefixesDomQuery.length === 0) {
            return;
        }
        var candidates = [];
        try {
            candidates = toArray(root.querySelectorAll(prefixesDomQuery));
        } catch (e) {
        }
        if (candidates.length > 0) {
            hclAdd('pending');
            hclRemove('complete');
        } else {
            return;
        }
        var mark = perf.begin('onTree');
        var mutations = candidates.reduce(function (acc, node) {
            try {
                var mutation = generateMutation(node);
                if (mutation) {
                    acc.push(mutation);
                }
            } catch (e) {
                if (!PRODUCTION) {
                    if (e instanceof MissingIcon) {
                        console.error(e);
                    }
                }
            }
            return acc;
        }, []);
        return new picked(function (resolve, reject) {
            picked.all(mutations).then(function (resolvedMutations) {
                perform(resolvedMutations, function () {
                    hclAdd('active');
                    hclAdd('complete');
                    hclRemove('pending');
                    if (typeof callback === 'function')
                        callback();
                    mark();
                    resolve();
                });
            }).catch(function () {
                mark();
                reject();
            });
        });
    }
    function onNode(node) {
        var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        generateMutation(node).then(function (mutation) {
            if (mutation) {
                perform([mutation], callback);
            }
        });
    }
    function replaceForPosition(node, position) {
        var pendingAttribute = ''.concat(DATA_FA_PSEUDO_ELEMENT_PENDING).concat(position.replace(':', '-'));
        return new picked(function (resolve, reject) {
            if (node.getAttribute(pendingAttribute) !== null) {
                return resolve();
            }
            var children = toArray(node.children);
            var alreadyProcessedPseudoElement = children.filter(function (c) {
                return c.getAttribute(DATA_FA_PSEUDO_ELEMENT) === position;
            })[0];
            var styles = WINDOW.getComputedStyle(node, position);
            var fontFamily = styles.getPropertyValue('font-family').match(FONT_FAMILY_PATTERN);
            var fontWeight = styles.getPropertyValue('font-weight');
            if (alreadyProcessedPseudoElement && !fontFamily) {
                node.removeChild(alreadyProcessedPseudoElement);
                return resolve();
            } else if (fontFamily) {
                var content = styles.getPropertyValue('content');
                var prefix = ~[
                    'Solid',
                    'Regular',
                    'Light',
                    'Duotone',
                    'Brands'
                ].indexOf(fontFamily[1]) ? STYLE_TO_PREFIX[fontFamily[1].toLowerCase()] : FONT_WEIGHT_TO_PREFIX[fontWeight];
                var hexValue = toHex(content.length === 3 ? content.substr(1, 1) : content);
                var iconName = byUnicode(prefix, hexValue);
                var iconIdentifier = iconName;
                if (iconName && (!alreadyProcessedPseudoElement || alreadyProcessedPseudoElement.getAttribute(DATA_PREFIX) !== prefix || alreadyProcessedPseudoElement.getAttribute(DATA_ICON) !== iconIdentifier)) {
                    node.setAttribute(pendingAttribute, iconIdentifier);
                    if (alreadyProcessedPseudoElement) {
                        node.removeChild(alreadyProcessedPseudoElement);
                    }
                    var meta = blankMeta();
                    var extra = meta.extra;
                    extra.attributes[DATA_FA_PSEUDO_ELEMENT] = position;
                    findIcon(iconName, prefix).then(function (main) {
                        var abstract = makeInlineSvgAbstract(_objectSpread({}, meta, {
                            icons: {
                                main: main,
                                mask: emptyCanonicalIcon()
                            },
                            prefix: prefix,
                            iconName: iconIdentifier,
                            extra: extra,
                            watchable: true
                        }));
                        var element = DOCUMENT.createElement('svg');
                        if (position === ':before') {
                            node.insertBefore(element, node.firstChild);
                        } else {
                            node.appendChild(element);
                        }
                        element.outerHTML = abstract.map(function (a) {
                            return toHtml(a);
                        }).join('\n');
                        node.removeAttribute(pendingAttribute);
                        resolve();
                    }).catch(reject);
                } else {
                    resolve();
                }
            } else {
                resolve();
            }
        });
    }
    function replace(node) {
        return picked.all([
            replaceForPosition(node, ':before'),
            replaceForPosition(node, ':after')
        ]);
    }
    function processable(node) {
        return node.parentNode !== document.head && !~TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS.indexOf(node.tagName.toUpperCase()) && !node.getAttribute(DATA_FA_PSEUDO_ELEMENT) && (!node.parentNode || node.parentNode.tagName !== 'svg');
    }
    function searchPseudoElements(root) {
        if (!IS_DOM)
            return;
        return new picked(function (resolve, reject) {
            var operations = toArray(root.querySelectorAll('*')).filter(processable).map(replace);
            var end = perf.begin('searchPseudoElements');
            disableObservation();
            picked.all(operations).then(function () {
                end();
                enableObservation();
                resolve();
            }).catch(function () {
                end();
                enableObservation();
                reject();
            });
        });
    }
    var baseStyles = 'svg:not(:root).svg-inline--fa {\n  overflow: visible;\n}\n\n.svg-inline--fa {\n  display: inline-block;\n  font-size: inherit;\n  height: 1em;\n  overflow: visible;\n  vertical-align: -0.125em;\n}\n.svg-inline--fa.fa-lg {\n  vertical-align: -0.225em;\n}\n.svg-inline--fa.fa-w-1 {\n  width: 0.0625em;\n}\n.svg-inline--fa.fa-w-2 {\n  width: 0.125em;\n}\n.svg-inline--fa.fa-w-3 {\n  width: 0.1875em;\n}\n.svg-inline--fa.fa-w-4 {\n  width: 0.25em;\n}\n.svg-inline--fa.fa-w-5 {\n  width: 0.3125em;\n}\n.svg-inline--fa.fa-w-6 {\n  width: 0.375em;\n}\n.svg-inline--fa.fa-w-7 {\n  width: 0.4375em;\n}\n.svg-inline--fa.fa-w-8 {\n  width: 0.5em;\n}\n.svg-inline--fa.fa-w-9 {\n  width: 0.5625em;\n}\n.svg-inline--fa.fa-w-10 {\n  width: 0.625em;\n}\n.svg-inline--fa.fa-w-11 {\n  width: 0.6875em;\n}\n.svg-inline--fa.fa-w-12 {\n  width: 0.75em;\n}\n.svg-inline--fa.fa-w-13 {\n  width: 0.8125em;\n}\n.svg-inline--fa.fa-w-14 {\n  width: 0.875em;\n}\n.svg-inline--fa.fa-w-15 {\n  width: 0.9375em;\n}\n.svg-inline--fa.fa-w-16 {\n  width: 1em;\n}\n.svg-inline--fa.fa-w-17 {\n  width: 1.0625em;\n}\n.svg-inline--fa.fa-w-18 {\n  width: 1.125em;\n}\n.svg-inline--fa.fa-w-19 {\n  width: 1.1875em;\n}\n.svg-inline--fa.fa-w-20 {\n  width: 1.25em;\n}\n.svg-inline--fa.fa-pull-left {\n  margin-right: 0.3em;\n  width: auto;\n}\n.svg-inline--fa.fa-pull-right {\n  margin-left: 0.3em;\n  width: auto;\n}\n.svg-inline--fa.fa-border {\n  height: 1.5em;\n}\n.svg-inline--fa.fa-li {\n  width: 2em;\n}\n.svg-inline--fa.fa-fw {\n  width: 1.25em;\n}\n\n.fa-layers svg.svg-inline--fa {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n.fa-layers {\n  display: inline-block;\n  height: 1em;\n  position: relative;\n  text-align: center;\n  vertical-align: -0.125em;\n  width: 1em;\n}\n.fa-layers svg.svg-inline--fa {\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-counter, .fa-layers-text {\n  display: inline-block;\n  position: absolute;\n  text-align: center;\n}\n\n.fa-layers-text {\n  left: 50%;\n  top: 50%;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-counter {\n  background-color: #ff253a;\n  border-radius: 1em;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  color: #fff;\n  height: 1.5em;\n  line-height: 1;\n  max-width: 5em;\n  min-width: 1.5em;\n  overflow: hidden;\n  padding: 0.25em;\n  right: 0;\n  text-overflow: ellipsis;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-bottom-right {\n  bottom: 0;\n  right: 0;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom right;\n          transform-origin: bottom right;\n}\n\n.fa-layers-bottom-left {\n  bottom: 0;\n  left: 0;\n  right: auto;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom left;\n          transform-origin: bottom left;\n}\n\n.fa-layers-top-right {\n  right: 0;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-top-left {\n  left: 0;\n  right: auto;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top left;\n          transform-origin: top left;\n}\n\n.fa-lg {\n  font-size: 1.3333333333em;\n  line-height: 0.75em;\n  vertical-align: -0.0667em;\n}\n\n.fa-xs {\n  font-size: 0.75em;\n}\n\n.fa-sm {\n  font-size: 0.875em;\n}\n\n.fa-1x {\n  font-size: 1em;\n}\n\n.fa-2x {\n  font-size: 2em;\n}\n\n.fa-3x {\n  font-size: 3em;\n}\n\n.fa-4x {\n  font-size: 4em;\n}\n\n.fa-5x {\n  font-size: 5em;\n}\n\n.fa-6x {\n  font-size: 6em;\n}\n\n.fa-7x {\n  font-size: 7em;\n}\n\n.fa-8x {\n  font-size: 8em;\n}\n\n.fa-9x {\n  font-size: 9em;\n}\n\n.fa-10x {\n  font-size: 10em;\n}\n\n.fa-fw {\n  text-align: center;\n  width: 1.25em;\n}\n\n.fa-ul {\n  list-style-type: none;\n  margin-left: 2.5em;\n  padding-left: 0;\n}\n.fa-ul > li {\n  position: relative;\n}\n\n.fa-li {\n  left: -2em;\n  position: absolute;\n  text-align: center;\n  width: 2em;\n  line-height: inherit;\n}\n\n.fa-border {\n  border: solid 0.08em #eee;\n  border-radius: 0.1em;\n  padding: 0.2em 0.25em 0.15em;\n}\n\n.fa-pull-left {\n  float: left;\n}\n\n.fa-pull-right {\n  float: right;\n}\n\n.fa.fa-pull-left,\n.fas.fa-pull-left,\n.far.fa-pull-left,\n.fal.fa-pull-left,\n.fab.fa-pull-left {\n  margin-right: 0.3em;\n}\n.fa.fa-pull-right,\n.fas.fa-pull-right,\n.far.fa-pull-right,\n.fal.fa-pull-right,\n.fab.fa-pull-right {\n  margin-left: 0.3em;\n}\n\n.fa-spin {\n  -webkit-animation: fa-spin 2s infinite linear;\n          animation: fa-spin 2s infinite linear;\n}\n\n.fa-pulse {\n  -webkit-animation: fa-spin 1s infinite steps(8);\n          animation: fa-spin 1s infinite steps(8);\n}\n\n@-webkit-keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n\n@keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n.fa-rotate-90 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=1)";\n  -webkit-transform: rotate(90deg);\n          transform: rotate(90deg);\n}\n\n.fa-rotate-180 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2)";\n  -webkit-transform: rotate(180deg);\n          transform: rotate(180deg);\n}\n\n.fa-rotate-270 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=3)";\n  -webkit-transform: rotate(270deg);\n          transform: rotate(270deg);\n}\n\n.fa-flip-horizontal {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)";\n  -webkit-transform: scale(-1, 1);\n          transform: scale(-1, 1);\n}\n\n.fa-flip-vertical {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";\n  -webkit-transform: scale(1, -1);\n          transform: scale(1, -1);\n}\n\n.fa-flip-both, .fa-flip-horizontal.fa-flip-vertical {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";\n  -webkit-transform: scale(-1, -1);\n          transform: scale(-1, -1);\n}\n\n:root .fa-rotate-90,\n:root .fa-rotate-180,\n:root .fa-rotate-270,\n:root .fa-flip-horizontal,\n:root .fa-flip-vertical,\n:root .fa-flip-both {\n  -webkit-filter: none;\n          filter: none;\n}\n\n.fa-stack {\n  display: inline-block;\n  height: 2em;\n  position: relative;\n  width: 2.5em;\n}\n\n.fa-stack-1x,\n.fa-stack-2x {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n.svg-inline--fa.fa-stack-1x {\n  height: 1em;\n  width: 1.25em;\n}\n.svg-inline--fa.fa-stack-2x {\n  height: 2em;\n  width: 2.5em;\n}\n\n.fa-inverse {\n  color: #fff;\n}\n\n.sr-only {\n  border: 0;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n.sr-only-focusable:active, .sr-only-focusable:focus {\n  clip: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  position: static;\n  width: auto;\n}\n\n.svg-inline--fa .fa-primary {\n  fill: var(--fa-primary-color, currentColor);\n  opacity: 1;\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa .fa-secondary {\n  fill: var(--fa-secondary-color, currentColor);\n  opacity: 0.4;\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-primary {\n  opacity: 0.4;\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-secondary {\n  opacity: 1;\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa mask .fa-primary,\n.svg-inline--fa mask .fa-secondary {\n  fill: black;\n}\n\n.fad.fa-inverse {\n  color: #fff;\n}';
    function css() {
        var dfp = DEFAULT_FAMILY_PREFIX;
        var drc = DEFAULT_REPLACEMENT_CLASS;
        var fp = config.familyPrefix;
        var rc = config.replacementClass;
        var s = baseStyles;
        if (fp !== dfp || rc !== drc) {
            var dPatt = new RegExp('\\.'.concat(dfp, '\\-'), 'g');
            var customPropPatt = new RegExp('\\--'.concat(dfp, '\\-'), 'g');
            var rPatt = new RegExp('\\.'.concat(drc), 'g');
            s = s.replace(dPatt, '.'.concat(fp, '-')).replace(customPropPatt, '--'.concat(fp, '-')).replace(rPatt, '.'.concat(rc));
        }
        return s;
    }
    var Library = function () {
        function Library() {
            _classCallCheck(this, Library);
            this.definitions = {};
        }
        _createClass(Library, [
            {
                key: 'add',
                value: function add() {
                    var _this = this;
                    for (var _len = arguments.length, definitions = new Array(_len), _key = 0; _key < _len; _key++) {
                        definitions[_key] = arguments[_key];
                    }
                    var additions = definitions.reduce(this._pullDefinitions, {});
                    Object.keys(additions).forEach(function (key) {
                        _this.definitions[key] = _objectSpread({}, _this.definitions[key] || {}, additions[key]);
                        defineIcons(key, additions[key]);
                        build();
                    });
                }
            },
            {
                key: 'reset',
                value: function reset() {
                    this.definitions = {};
                }
            },
            {
                key: '_pullDefinitions',
                value: function _pullDefinitions(additions, definition) {
                    var normalized = definition.prefix && definition.iconName && definition.icon ? { 0: definition } : definition;
                    Object.keys(normalized).map(function (key) {
                        var _normalized$key = normalized[key], prefix = _normalized$key.prefix, iconName = _normalized$key.iconName, icon = _normalized$key.icon;
                        if (!additions[prefix])
                            additions[prefix] = {};
                        additions[prefix][iconName] = icon;
                    });
                    return additions;
                }
            }
        ]);
        return Library;
    }();
    function ensureCss() {
        if (config.autoAddCss && !_cssInserted) {
            insertCss(css());
            _cssInserted = true;
        }
    }
    function apiObject(val, abstractCreator) {
        Object.defineProperty(val, 'abstract', { get: abstractCreator });
        Object.defineProperty(val, 'html', {
            get: function get() {
                return val.abstract.map(function (a) {
                    return toHtml(a);
                });
            }
        });
        Object.defineProperty(val, 'node', {
            get: function get() {
                if (!IS_DOM)
                    return;
                var container = DOCUMENT.createElement('div');
                container.innerHTML = val.html;
                return container.children;
            }
        });
        return val;
    }
    function findIconDefinition(iconLookup) {
        var _iconLookup$prefix = iconLookup.prefix, prefix = _iconLookup$prefix === void 0 ? 'fa' : _iconLookup$prefix, iconName = iconLookup.iconName;
        if (!iconName)
            return;
        return iconFromMapping(library.definitions, prefix, iconName) || iconFromMapping(namespace.styles, prefix, iconName);
    }
    function resolveIcons(next) {
        return function (maybeIconDefinition) {
            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var iconDefinition = (maybeIconDefinition || {}).icon ? maybeIconDefinition : findIconDefinition(maybeIconDefinition || {});
            var mask = params.mask;
            if (mask) {
                mask = (mask || {}).icon ? mask : findIconDefinition(mask || {});
            }
            return next(iconDefinition, _objectSpread({}, params, { mask: mask }));
        };
    }
    var library = new Library();
    var noAuto = function noAuto() {
        config.autoReplaceSvg = false;
        config.observeMutations = false;
        disconnect();
    };
    var _cssInserted = false;
    var dom = {
        i2svg: function i2svg() {
            var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            if (IS_DOM) {
                ensureCss();
                var _params$node = params.node, node = _params$node === void 0 ? DOCUMENT : _params$node, _params$callback = params.callback, callback = _params$callback === void 0 ? function () {
                    } : _params$callback;
                if (config.searchPseudoElements) {
                    searchPseudoElements(node);
                }
                return onTree(node, callback);
            } else {
                return picked.reject('Operation requires a DOM of some kind.');
            }
        },
        css: css,
        insertCss: function insertCss$$1() {
            if (!_cssInserted) {
                insertCss(css());
                _cssInserted = true;
            }
        },
        watch: function watch() {
            var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var autoReplaceSvgRoot = params.autoReplaceSvgRoot, observeMutationsRoot = params.observeMutationsRoot;
            if (config.autoReplaceSvg === false) {
                config.autoReplaceSvg = true;
            }
            config.observeMutations = true;
            domready(function () {
                autoReplace({ autoReplaceSvgRoot: autoReplaceSvgRoot });
                observe({
                    treeCallback: onTree,
                    nodeCallback: onNode,
                    pseudoElementsCallback: searchPseudoElements,
                    observeMutationsRoot: observeMutationsRoot
                });
            });
        }
    };
    var parse = {
        transform: function transform(transformString) {
            return parseTransformString(transformString);
        }
    };
    var icon = resolveIcons(function (iconDefinition) {
        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var _params$transform = params.transform, transform = _params$transform === void 0 ? meaninglessTransform : _params$transform, _params$symbol = params.symbol, symbol = _params$symbol === void 0 ? false : _params$symbol, _params$mask = params.mask, mask = _params$mask === void 0 ? null : _params$mask, _params$title = params.title, title = _params$title === void 0 ? null : _params$title, _params$classes = params.classes, classes = _params$classes === void 0 ? [] : _params$classes, _params$attributes = params.attributes, attributes = _params$attributes === void 0 ? {} : _params$attributes, _params$styles = params.styles, styles = _params$styles === void 0 ? {} : _params$styles;
        if (!iconDefinition)
            return;
        var prefix = iconDefinition.prefix, iconName = iconDefinition.iconName, icon = iconDefinition.icon;
        return apiObject(_objectSpread({ type: 'icon' }, iconDefinition), function () {
            ensureCss();
            if (config.autoA11y) {
                if (title) {
                    attributes['aria-labelledby'] = ''.concat(config.replacementClass, '-title-').concat(nextUniqueId());
                } else {
                    attributes['aria-hidden'] = 'true';
                    attributes['focusable'] = 'false';
                }
            }
            return makeInlineSvgAbstract({
                icons: {
                    main: asFoundIcon(icon),
                    mask: mask ? asFoundIcon(mask.icon) : {
                        found: false,
                        width: null,
                        height: null,
                        icon: {}
                    }
                },
                prefix: prefix,
                iconName: iconName,
                transform: _objectSpread({}, meaninglessTransform, transform),
                symbol: symbol,
                title: title,
                extra: {
                    attributes: attributes,
                    styles: styles,
                    classes: classes
                }
            });
        });
    });
    var text = function text(content) {
        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var _params$transform2 = params.transform, transform = _params$transform2 === void 0 ? meaninglessTransform : _params$transform2, _params$title2 = params.title, title = _params$title2 === void 0 ? null : _params$title2, _params$classes2 = params.classes, classes = _params$classes2 === void 0 ? [] : _params$classes2, _params$attributes2 = params.attributes, attributes = _params$attributes2 === void 0 ? {} : _params$attributes2, _params$styles2 = params.styles, styles = _params$styles2 === void 0 ? {} : _params$styles2;
        return apiObject({
            type: 'text',
            content: content
        }, function () {
            ensureCss();
            return makeLayersTextAbstract({
                content: content,
                transform: _objectSpread({}, meaninglessTransform, transform),
                title: title,
                extra: {
                    attributes: attributes,
                    styles: styles,
                    classes: [''.concat(config.familyPrefix, '-layers-text')].concat(_toConsumableArray(classes))
                }
            });
        });
    };
    var counter = function counter(content) {
        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var _params$title3 = params.title, title = _params$title3 === void 0 ? null : _params$title3, _params$classes3 = params.classes, classes = _params$classes3 === void 0 ? [] : _params$classes3, _params$attributes3 = params.attributes, attributes = _params$attributes3 === void 0 ? {} : _params$attributes3, _params$styles3 = params.styles, styles = _params$styles3 === void 0 ? {} : _params$styles3;
        return apiObject({
            type: 'counter',
            content: content
        }, function () {
            ensureCss();
            return makeLayersCounterAbstract({
                content: content.toString(),
                title: title,
                extra: {
                    attributes: attributes,
                    styles: styles,
                    classes: [''.concat(config.familyPrefix, '-layers-counter')].concat(_toConsumableArray(classes))
                }
            });
        });
    };
    var layer = function layer(assembler) {
        return apiObject({ type: 'layer' }, function () {
            ensureCss();
            var children = [];
            assembler(function (args) {
                Array.isArray(args) ? args.map(function (a) {
                    children = children.concat(a.abstract);
                }) : children = children.concat(args.abstract);
            });
            return [{
                    tag: 'span',
                    attributes: { class: ''.concat(config.familyPrefix, '-layers') },
                    children: children
                }];
        });
    };
    var api = {
        noAuto: noAuto,
        config: config,
        dom: dom,
        library: library,
        parse: parse,
        findIconDefinition: findIconDefinition,
        icon: icon,
        text: text,
        counter: counter,
        layer: layer,
        toHtml: toHtml
    };
    var autoReplace = function autoReplace() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var _params$autoReplaceSv = params.autoReplaceSvgRoot, autoReplaceSvgRoot = _params$autoReplaceSv === void 0 ? DOCUMENT : _params$autoReplaceSv;
        if ((Object.keys(namespace.styles).length > 0 || config.autoFetchSvg) && IS_DOM && config.autoReplaceSvg)
            api.dom.i2svg({ node: autoReplaceSvgRoot });
    };
    exports.icon = icon;
    exports.noAuto = noAuto;
    exports.config = config;
    exports.toHtml = toHtml;
    exports.layer = layer;
    exports.text = text;
    exports.counter = counter;
    exports.library = library;
    exports.dom = dom;
    exports.parse = parse;
    exports.findIconDefinition = findIconDefinition;
    Object.defineProperty(exports, '__esModule', { value: true });
}));
/*popper.js@1.15.0#dist/umd/popper*/
define('popper.js@1.15.0#dist/umd/popper', [
    'module',
    '@loader',
    'require',
    'jquery'
], function (module, loader, require) {
    loader.get('@@global-helpers').prepareGlobal({
        require: require,
        name: module.id,
        deps: ['jquery']
    });
    var define = loader.global.define;
    var require = loader.global.require;
    var source = '/**!\n * @fileOverview Kickass library to create and place poppers near their reference elements.\n * @version 1.15.0\n * @license\n * Copyright (c) 2016 Federico Zivolo and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n(function (global, factory) {\n\ttypeof exports === \'object\' && typeof module !== \'undefined\' ? module.exports = factory() :\n\ttypeof define === \'function\' && define.amd ? define(factory) :\n\t(global.Popper = factory());\n}(this, (function () { \'use strict\';\n\nvar isBrowser = typeof window !== \'undefined\' && typeof document !== \'undefined\';\n\nvar longerTimeoutBrowsers = [\'Edge\', \'Trident\', \'Firefox\'];\nvar timeoutDuration = 0;\nfor (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n    timeoutDuration = 1;\n    break;\n  }\n}\n\nfunction microtaskDebounce(fn) {\n  var called = false;\n  return function () {\n    if (called) {\n      return;\n    }\n    called = true;\n    window.Promise.resolve().then(function () {\n      called = false;\n      fn();\n    });\n  };\n}\n\nfunction taskDebounce(fn) {\n  var scheduled = false;\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(function () {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nvar supportsMicroTasks = isBrowser && window.Promise;\n\n/**\n* Create a debounced version of a method, that\'s asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nvar debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;\n\n/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === \'[object Function]\';\n}\n\n/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nfunction getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  var window = element.ownerDocument.defaultView;\n  var css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n\n/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nfunction getParentNode(element) {\n  if (element.nodeName === \'HTML\') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nfunction getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body;\n  }\n\n  switch (element.nodeName) {\n    case \'HTML\':\n    case \'BODY\':\n      return element.ownerDocument.body;\n    case \'#document\':\n      return element.body;\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n\n  var _getStyleComputedProp = getStyleComputedProperty(element),\n      overflow = _getStyleComputedProp.overflow,\n      overflowX = _getStyleComputedProp.overflowX,\n      overflowY = _getStyleComputedProp.overflowY;\n\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n\nvar isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nvar isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\nfunction isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n  if (version === 10) {\n    return isIE10;\n  }\n  return isIE11 || isIE10;\n}\n\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nfunction getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  var noOffsetParent = isIE(10) ? document.body : null;\n\n  // NOTE: 1 DOM access here\n  var offsetParent = element.offsetParent || null;\n  // Skip hidden elements which don\'t have an offsetParent\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  var nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === \'BODY\' || nodeName === \'HTML\') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  }\n\n  // .offsetParent will return the closest TH, TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if ([\'TH\', \'TD\', \'TABLE\'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, \'position\') === \'static\') {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n\nfunction isOffsetContainer(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === \'BODY\') {\n    return false;\n  }\n  return nodeName === \'HTML\' || getOffsetParent(element.firstElementChild) === element;\n}\n\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nfunction getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nfunction findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn\'t defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  }\n\n  // Here we make sure to give as "start" the element that comes first in the DOM\n  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  var start = order ? element1 : element2;\n  var end = order ? element2 : element1;\n\n  // Get common ancestor container\n  var range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  var commonAncestorContainer = range.commonAncestorContainer;\n\n  // Both nodes are inside #document\n\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  var element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nfunction getScroll(element) {\n  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'top\';\n\n  var upperSide = side === \'top\' ? \'scrollTop\' : \'scrollLeft\';\n  var nodeName = element.nodeName;\n\n  if (nodeName === \'BODY\' || nodeName === \'HTML\') {\n    var html = element.ownerDocument.documentElement;\n    var scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nfunction includeScroll(rect, element) {\n  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var scrollTop = getScroll(element, \'top\');\n  var scrollLeft = getScroll(element, \'left\');\n  var modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n\n/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nfunction getBordersSize(styles, axis) {\n  var sideA = axis === \'x\' ? \'Left\' : \'Top\';\n  var sideB = sideA === \'Left\' ? \'Right\' : \'Bottom\';\n\n  return parseFloat(styles[\'border\' + sideA + \'Width\'], 10) + parseFloat(styles[\'border\' + sideB + \'Width\'], 10);\n}\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(body[\'offset\' + axis], body[\'scroll\' + axis], html[\'client\' + axis], html[\'offset\' + axis], html[\'scroll\' + axis], isIE(10) ? parseInt(html[\'offset\' + axis]) + parseInt(computedStyle[\'margin\' + (axis === \'Height\' ? \'Top\' : \'Left\')]) + parseInt(computedStyle[\'margin\' + (axis === \'Height\' ? \'Bottom\' : \'Right\')]) : 0);\n}\n\nfunction getWindowSizes(document) {\n  var body = document.body;\n  var html = document.documentElement;\n  var computedStyle = isIE(10) && getComputedStyle(html);\n\n  return {\n    height: getSize(\'Height\', body, html, computedStyle),\n    width: getSize(\'Width\', body, html, computedStyle)\n  };\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if ("value" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nfunction getClientRect(offsets) {\n  return _extends({}, offsets, {\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height\n  });\n}\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nfunction getBoundingClientRect(element) {\n  var rect = {};\n\n  // IE10 10 FIX: Please, don\'t ask, the element isn\'t\n  // considered in DOM in some circumstances...\n  // This isn\'t reproducible in IE10 compatibility mode of IE11\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      var scrollTop = getScroll(element, \'top\');\n      var scrollLeft = getScroll(element, \'left\');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } else {\n      rect = element.getBoundingClientRect();\n    }\n  } catch (e) {}\n\n  var result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top\n  };\n\n  // subtract scrollbar size from sizes\n  var sizes = element.nodeName === \'HTML\' ? getWindowSizes(element.ownerDocument) : {};\n  var width = sizes.width || element.clientWidth || result.right - result.left;\n  var height = sizes.height || element.clientHeight || result.bottom - result.top;\n\n  var horizScrollbar = element.offsetWidth - width;\n  var vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it\'s not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    var styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, \'x\');\n    vertScrollbar -= getBordersSize(styles, \'y\');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n\nfunction getOffsetRectRelativeToArbitraryNode(children, parent) {\n  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var isIE10 = isIE(10);\n  var isHTML = parent.nodeName === \'HTML\';\n  var childrenRect = getBoundingClientRect(children);\n  var parentRect = getBoundingClientRect(parent);\n  var scrollParent = getScrollParent(children);\n\n  var styles = getStyleComputedProperty(parent);\n  var borderTopWidth = parseFloat(styles.borderTopWidth, 10);\n  var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);\n\n  // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n  if (fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n  var offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it\'s being used as parent\n  // we do this only on HTML because it\'s the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    var marginTop = parseFloat(styles.marginTop, 10);\n    var marginLeft = parseFloat(styles.marginLeft, 10);\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== \'BODY\') {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element) {\n  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var html = element.ownerDocument.documentElement;\n  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  var width = Math.max(html.clientWidth, window.innerWidth || 0);\n  var height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  var scrollTop = !excludeScroll ? getScroll(html) : 0;\n  var scrollLeft = !excludeScroll ? getScroll(html, \'left\') : 0;\n\n  var offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width: width,\n    height: height\n  };\n\n  return getClientRect(offset);\n}\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to "isFixed?"\n */\nfunction isFixed(element) {\n  var nodeName = element.nodeName;\n  if (nodeName === \'BODY\' || nodeName === \'HTML\') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, \'position\') === \'fixed\') {\n    return true;\n  }\n  var parentNode = getParentNode(element);\n  if (!parentNode) {\n    return false;\n  }\n  return isFixed(parentNode);\n}\n\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\nfunction getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn\'t defined for any reason\n  if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n  var el = element.parentElement;\n  while (el && getStyleComputedProperty(el, \'transform\') === \'none\') {\n    el = el.parentElement;\n  }\n  return el || document.documentElement;\n}\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\nfunction getBoundaries(popper, reference, padding, boundariesElement) {\n  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  // NOTE: 1 DOM access here\n\n  var boundaries = { top: 0, left: 0 };\n  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);\n\n  // Handle viewport case\n  if (boundariesElement === \'viewport\') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    var boundariesNode = void 0;\n    if (boundariesElement === \'scrollParent\') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n      if (boundariesNode.nodeName === \'BODY\') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === \'window\') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === \'HTML\' && !isFixed(offsetParent)) {\n      var _getWindowSizes = getWindowSizes(popper.ownerDocument),\n          height = _getWindowSizes.height,\n          width = _getWindowSizes.width;\n\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  padding = padding || 0;\n  var isPaddingNumber = typeof padding === \'number\';\n  boundaries.left += isPaddingNumber ? padding : padding.left || 0;\n  boundaries.top += isPaddingNumber ? padding : padding.top || 0;\n  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;\n  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;\n\n  return boundaries;\n}\n\nfunction getArea(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n  if (placement.indexOf(\'auto\') === -1) {\n    return placement;\n  }\n\n  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\n\n  var rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height\n    }\n  };\n\n  var sortedAreas = Object.keys(rects).map(function (key) {\n    return _extends({\n      key: key\n    }, rects[key], {\n      area: getArea(rects[key])\n    });\n  }).sort(function (a, b) {\n    return b.area - a.area;\n  });\n\n  var filteredAreas = sortedAreas.filter(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return width >= popper.clientWidth && height >= popper.clientHeight;\n  });\n\n  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n\n  var variation = placement.split(\'-\')[1];\n\n  return computedPlacement + (variation ? \'-\' + variation : \'\');\n}\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nfunction getReferenceOffsets(state, popper, reference) {\n  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nfunction getOuterSizes(element) {\n  var window = element.ownerDocument.defaultView;\n  var styles = window.getComputedStyle(element);\n  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n  var result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x\n  };\n  return result;\n}\n\n/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nfunction getOppositePlacement(placement) {\n  var hash = { left: \'right\', right: \'left\', bottom: \'top\', top: \'bottom\' };\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nfunction getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split(\'-\')[0];\n\n  // Get popper node sizes\n  var popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  var popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  var isHoriz = [\'right\', \'left\'].indexOf(placement) !== -1;\n  var mainSide = isHoriz ? \'top\' : \'left\';\n  var secondarySide = isHoriz ? \'left\' : \'top\';\n  var measurement = isHoriz ? \'height\' : \'width\';\n  var secondaryMeasurement = !isHoriz ? \'height\' : \'width\';\n\n  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n\n/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(function (cur) {\n      return cur[prop] === value;\n    });\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn\'t supported\n  var match = find(arr, function (obj) {\n    return obj[prop] === value;\n  });\n  return arr.indexOf(match);\n}\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nfunction runModifiers(modifiers, data, ends) {\n  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, \'name\', ends));\n\n  modifiersToRun.forEach(function (modifier) {\n    if (modifier[\'function\']) {\n      // eslint-disable-line dot-notation\n      console.warn(\'`modifier.function` is deprecated, use `modifier.fn`!\');\n    }\n    var fn = modifier[\'function\'] || modifier.fn; // eslint-disable-line dot-notation\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn\'t\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nfunction update() {\n  // if popper is destroyed, don\'t perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  var data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {}\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  data.positionFixed = this.options.positionFixed;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\n\n  data.offsets.popper.position = this.options.positionFixed ? \'fixed\' : \'absolute\';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n\n/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nfunction isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(function (_ref) {\n    var name = _ref.name,\n        enabled = _ref.enabled;\n    return enabled && name === modifierName;\n  });\n}\n\n/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nfunction getSupportedPropertyName(property) {\n  var prefixes = [false, \'ms\', \'Webkit\', \'Moz\', \'O\'];\n  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefix = prefixes[i];\n    var toCheck = prefix ? \'\' + prefix + upperProp : property;\n    if (typeof document.body.style[toCheck] !== \'undefined\') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n\n/**\n * Destroys the popper.\n * @method\n * @memberof Popper\n */\nfunction destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, \'applyStyle\')) {\n    this.popper.removeAttribute(\'x-placement\');\n    this.popper.style.position = \'\';\n    this.popper.style.top = \'\';\n    this.popper.style.left = \'\';\n    this.popper.style.right = \'\';\n    this.popper.style.bottom = \'\';\n    this.popper.style.willChange = \'\';\n    this.popper.style[getSupportedPropertyName(\'transform\')] = \'\';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicity asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn\'t support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n\n/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\nfunction getWindow(element) {\n  var ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  var isBody = scrollParent.nodeName === \'BODY\';\n  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction setupEventListeners(reference, options, state, updateBound) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener(\'resize\', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  var scrollElement = getScrollParent(reference);\n  attachToScrollParents(scrollElement, \'scroll\', state.updateBound, state.scrollParents);\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nfunction enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\n  }\n}\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener(\'resize\', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(function (target) {\n    target.removeEventListener(\'scroll\', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n\n/**\n * It will remove resize/scroll events and won\'t recalculate popper position\n * when they are triggered. It also won\'t trigger `onUpdate` callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nfunction disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n\n/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nfunction isNumeric(n) {\n  return n !== \'\' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setStyles(element, styles) {\n  Object.keys(styles).forEach(function (prop) {\n    var unit = \'\';\n    // add unit if the value is numeric and is one of the following\n    if ([\'width\', \'height\', \'top\', \'right\', \'bottom\', \'left\'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = \'px\';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n\n/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function (prop) {\n    var value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nfunction applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\nfunction applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\n  // compute reference element offsets\n  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\n\n  popper.setAttribute(\'x-placement\', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can\'t guarantee correct computations\n  setStyles(popper, { position: options.positionFixed ? \'fixed\' : \'absolute\' });\n\n  return options;\n}\n\n/**\n * @function\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Boolean} shouldRound - If the offsets should be rounded at all\n * @returns {Object} The popper\'s position offsets rounded\n *\n * The tale of pixel-perfect positioning. It\'s still not 100% perfect, but as\n * good as it can be within reason.\n * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\n *\n * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\n * as well on High DPI screens).\n *\n * Firefox prefers no rounding for positioning and does not have blurriness on\n * high DPI screens.\n *\n * Only horizontal placement and left/right values need to be considered.\n */\nfunction getRoundedOffsets(data, shouldRound) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n  var round = Math.round,\n      floor = Math.floor;\n\n  var noRound = function noRound(v) {\n    return v;\n  };\n\n  var referenceWidth = round(reference.width);\n  var popperWidth = round(popper.width);\n\n  var isVertical = [\'left\', \'right\'].indexOf(data.placement) !== -1;\n  var isVariation = data.placement.indexOf(\'-\') !== -1;\n  var sameWidthParity = referenceWidth % 2 === popperWidth % 2;\n  var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;\n\n  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;\n  var verticalToInteger = !shouldRound ? noRound : round;\n\n  return {\n    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),\n    top: verticalToInteger(popper.top),\n    bottom: verticalToInteger(popper.bottom),\n    right: horizontalToInteger(popper.right)\n  };\n}\n\nvar isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeStyle(data, options) {\n  var x = options.x,\n      y = options.y;\n  var popper = data.offsets.popper;\n\n  // Remove this legacy support in Popper.js v2\n\n  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === \'applyStyle\';\n  }).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn(\'WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!\');\n  }\n  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\n\n  var offsetParent = getOffsetParent(data.instance.popper);\n  var offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  var styles = {\n    position: popper.position\n  };\n\n  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);\n\n  var sideA = x === \'bottom\' ? \'top\' : \'bottom\';\n  var sideB = y === \'right\' ? \'left\' : \'right\';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  var prefixedProperty = getSupportedPropertyName(\'transform\');\n\n  // now, let\'s make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it\'s been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  var left = void 0,\n      top = void 0;\n  if (sideA === \'bottom\') {\n    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n    // and not the bottom of the html element\n    if (offsetParent.nodeName === \'HTML\') {\n      top = -offsetParent.clientHeight + offsets.bottom;\n    } else {\n      top = -offsetParentRect.height + offsets.bottom;\n    }\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === \'right\') {\n    if (offsetParent.nodeName === \'HTML\') {\n      left = -offsetParent.clientWidth + offsets.right;\n    } else {\n      left = -offsetParentRect.width + offsets.right;\n    }\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = \'translate3d(\' + left + \'px, \' + top + \'px, 0)\';\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = \'transform\';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    var invertTop = sideA === \'bottom\' ? -1 : 1;\n    var invertLeft = sideB === \'right\' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = sideA + \', \' + sideB;\n  }\n\n  // Attributes\n  var attributes = {\n    \'x-placement\': data.placement\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = _extends({}, attributes, data.attributes);\n  data.styles = _extends({}, styles, data.styles);\n  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);\n\n  return data;\n}\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nfunction isModifierRequired(modifiers, requestingName, requestedName) {\n  var requesting = find(modifiers, function (_ref) {\n    var name = _ref.name;\n    return name === requestingName;\n  });\n\n  var isRequired = !!requesting && modifiers.some(function (modifier) {\n    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\n  });\n\n  if (!isRequired) {\n    var _requesting = \'`\' + requestingName + \'`\';\n    var requested = \'`\' + requestedName + \'`\';\n    console.warn(requested + \' modifier is required by \' + _requesting + \' modifier in order to work, be sure to include it before \' + _requesting + \'!\');\n  }\n  return isRequired;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction arrow(data, options) {\n  var _data$offsets$arrow;\n\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, \'arrow\', \'keepTogether\')) {\n    return data;\n  }\n\n  var arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it\'s a CSS selector\n  if (typeof arrowElement === \'string\') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don\'t run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn\'t a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn(\'WARNING: `arrow.element` must be child of its popper element!\');\n      return data;\n    }\n  }\n\n  var placement = data.placement.split(\'-\')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isVertical = [\'left\', \'right\'].indexOf(placement) !== -1;\n\n  var len = isVertical ? \'height\' : \'width\';\n  var sideCapitalized = isVertical ? \'Top\' : \'Left\';\n  var side = sideCapitalized.toLowerCase();\n  var altSide = isVertical ? \'left\' : \'top\';\n  var opSide = isVertical ? \'bottom\' : \'right\';\n  var arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjunction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\n  }\n  data.offsets.popper = getClientRect(data.offsets.popper);\n\n  // compute center of the popper\n  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don\'t have this info available\n  var css = getStyleComputedProperty(data.instance.popper);\n  var popperMarginSide = parseFloat(css[\'margin\' + sideCapitalized], 10);\n  var popperBorderSide = parseFloat(css[\'border\' + sideCapitalized + \'Width\'], 10);\n  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, \'\'), _data$offsets$arrow);\n\n  return data;\n}\n\n/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nfunction getOppositeVariation(variation) {\n  if (variation === \'end\') {\n    return \'start\';\n  } else if (variation === \'start\') {\n    return \'end\';\n  }\n  return variation;\n}\n\n/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-end` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nvar placements = [\'auto-start\', \'auto\', \'auto-end\', \'top-start\', \'top\', \'top-end\', \'right-start\', \'right\', \'right-end\', \'bottom-end\', \'bottom\', \'bottom-start\', \'left-end\', \'left\', \'left-start\'];\n\n// Get rid of `auto` `auto-start` and `auto-end`\nvar validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nfunction clockwise(placement) {\n  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var index = validPlacements.indexOf(placement);\n  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n\nvar BEHAVIORS = {\n  FLIP: \'flip\',\n  CLOCKWISE: \'clockwise\',\n  COUNTERCLOCKWISE: \'counterclockwise\'\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction flip(data, options) {\n  // if `inner` modifier is enabled, we can\'t use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, \'inner\')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there\'s not enough space on any of the flippable sides\n    return data;\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);\n\n  var placement = data.placement.split(\'-\')[0];\n  var placementOpposite = getOppositePlacement(placement);\n  var variation = data.placement.split(\'-\')[1] || \'\';\n\n  var flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach(function (step, index) {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split(\'-\')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    var popperOffsets = data.offsets.popper;\n    var refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    var floor = Math.floor;\n    var overlapsRef = placement === \'left\' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === \'right\' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === \'top\' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === \'bottom\' && floor(popperOffsets.top) < floor(refOffsets.bottom);\n\n    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    var overflowsBoundaries = placement === \'left\' && overflowsLeft || placement === \'right\' && overflowsRight || placement === \'top\' && overflowsTop || placement === \'bottom\' && overflowsBottom;\n\n    // flip the variation if required\n    var isVertical = [\'top\', \'bottom\'].indexOf(placement) !== -1;\n\n    // flips variation if reference element overflows boundaries\n    var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === \'start\' && overflowsLeft || isVertical && variation === \'end\' && overflowsRight || !isVertical && variation === \'start\' && overflowsTop || !isVertical && variation === \'end\' && overflowsBottom);\n\n    // flips variation if popper content overflows boundaries\n    var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === \'start\' && overflowsRight || isVertical && variation === \'end\' && overflowsLeft || !isVertical && variation === \'start\' && overflowsBottom || !isVertical && variation === \'end\' && overflowsTop);\n\n    var flippedVariation = flippedVariationByRef || flippedVariationByContent;\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? \'-\' + variation : \'\');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\n\n      data = runModifiers(data.instance.modifiers, data, \'flip\');\n    }\n  });\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction keepTogether(data) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var placement = data.placement.split(\'-\')[0];\n  var floor = Math.floor;\n  var isVertical = [\'top\', \'bottom\'].indexOf(placement) !== -1;\n  var side = isVertical ? \'right\' : \'bottom\';\n  var opSide = isVertical ? \'left\' : \'top\';\n  var measurement = isVertical ? \'width\' : \'height\';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nfunction toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  var split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  var value = +split[1];\n  var unit = split[2];\n\n  // If it\'s not a number it\'s an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf(\'%\') === 0) {\n    var element = void 0;\n    switch (unit) {\n      case \'%p\':\n        element = popperOffsets;\n        break;\n      case \'%\':\n      case \'%r\':\n      default:\n        element = referenceOffsets;\n    }\n\n    var rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === \'vh\' || unit === \'vw\') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    var size = void 0;\n    if (unit === \'vh\') {\n      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    } else {\n      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it\'s px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nfunction parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\n  var offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  var useHeight = [\'right\', \'left\'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  var fragments = offset.split(/(\\+|\\-)/).map(function (frag) {\n    return frag.trim();\n  });\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  var divider = fragments.indexOf(find(fragments, function (frag) {\n    return frag.search(/,|\\s/) !== -1;\n  }));\n\n  if (fragments[divider] && fragments[divider].indexOf(\',\') === -1) {\n    console.warn(\'Offsets separated by white space(s) are deprecated, use a comma (,) instead.\');\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  var splitRegex = /\\s*,\\s*|\\s+/;\n  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map(function (op, index) {\n    // Most of the units rely on the orientation of the popper\n    var measurement = (index === 1 ? !useHeight : useHeight) ? \'height\' : \'width\';\n    var mergeWithPrevious = false;\n    return op\n    // This aggregates any `+` or `-` sign that aren\'t considered operators\n    // e.g.: 10 + +5 => [10, +, +5]\n    .reduce(function (a, b) {\n      if (a[a.length - 1] === \'\' && [\'+\', \'-\'].indexOf(b) !== -1) {\n        a[a.length - 1] = b;\n        mergeWithPrevious = true;\n        return a;\n      } else if (mergeWithPrevious) {\n        a[a.length - 1] += b;\n        mergeWithPrevious = false;\n        return a;\n      } else {\n        return a.concat(b);\n      }\n    }, [])\n    // Here we convert the string values into number values (in px)\n    .map(function (str) {\n      return toValue(str, measurement, popperOffsets, referenceOffsets);\n    });\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach(function (op, index) {\n    op.forEach(function (frag, index2) {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === \'-\' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nfunction offset(data, _ref) {\n  var offset = _ref.offset;\n  var placement = data.placement,\n      _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var basePlacement = placement.split(\'-\')[0];\n\n  var offsets = void 0;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === \'left\') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === \'right\') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === \'top\') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === \'bottom\') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction preventOverflow(data, options) {\n  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  // NOTE: DOM access here\n  // resets the popper\'s position so that the document size can be calculated excluding\n  // the size of the popper element itself\n  var transformProp = getSupportedPropertyName(\'transform\');\n  var popperStyles = data.instance.popper.style; // assignment to help minification\n  var top = popperStyles.top,\n      left = popperStyles.left,\n      transform = popperStyles[transformProp];\n\n  popperStyles.top = \'\';\n  popperStyles.left = \'\';\n  popperStyles[transformProp] = \'\';\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);\n\n  // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n\n  options.boundaries = boundaries;\n\n  var order = options.priority;\n  var popper = data.offsets.popper;\n\n  var check = {\n    primary: function primary(placement) {\n      var value = popper[placement];\n      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return defineProperty({}, placement, value);\n    },\n    secondary: function secondary(placement) {\n      var mainSide = placement === \'right\' ? \'left\' : \'top\';\n      var value = popper[mainSide];\n      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\n        value = Math.min(popper[mainSide], boundaries[placement] - (placement === \'right\' ? popper.width : popper.height));\n      }\n      return defineProperty({}, mainSide, value);\n    }\n  };\n\n  order.forEach(function (placement) {\n    var side = [\'left\', \'top\'].indexOf(placement) !== -1 ? \'primary\' : \'secondary\';\n    popper = _extends({}, popper, check[side](placement));\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction shift(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split(\'-\')[0];\n  var shiftvariation = placement.split(\'-\')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    var _data$offsets = data.offsets,\n        reference = _data$offsets.reference,\n        popper = _data$offsets.popper;\n\n    var isVertical = [\'bottom\', \'top\'].indexOf(basePlacement) !== -1;\n    var side = isVertical ? \'left\' : \'top\';\n    var measurement = isVertical ? \'width\' : \'height\';\n\n    var shiftOffsets = {\n      start: defineProperty({}, side, reference[side]),\n      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])\n    };\n\n    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, \'hide\', \'preventOverflow\')) {\n    return data;\n  }\n\n  var refRect = data.offsets.reference;\n  var bound = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === \'preventOverflow\';\n  }).boundaries;\n\n  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\n    // Avoid unnecessary DOM access if visibility hasn\'t changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes[\'x-out-of-boundaries\'] = \'\';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn\'t changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes[\'x-out-of-boundaries\'] = false;\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction inner(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split(\'-\')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isHoriz = [\'left\', \'right\'].indexOf(basePlacement) !== -1;\n\n  var subtractLength = [\'top\', \'left\'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? \'left\' : \'top\'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? \'width\' : \'height\'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don\'t want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nvar modifiers = {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unit-less, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the `height`.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren\'t supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * \'10%\'\n   * \'10, 10\'\n   * \'10%, 10\'\n   * \'10 + 10%\'\n   * \'10 - 5vh + 3%\'\n   * \'-10px + 5vh, 5px - 6%\'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * A scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has "escaped the boundaries" \u2014 or just "escaped".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain "trapped" in the boundaries, or\n   * - if it should ignore the boundary and "escape with its reference"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=[\'left\',\'right\',\'top\',\'bottom\']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: [\'left\', \'right\', \'top\', \'bottom\'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper. This makes sure the popper always has a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement=\'scrollParent\'\n     * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: \'scrollParent\'\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near each other\n   * without leaving any gap between the two. Especially useful when the arrow is\n   * enabled and you want to ensure that it points to its reference element.\n   * It cares only about the first axis. You can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjunction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element=\'[x-arrow]\' - Selector or node used as arrow */\n    element: \'[x-arrow]\'\n  },\n\n  /**\n   * Modifier used to flip the popper\'s placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior=\'flip\'\n     * The behavior used to change the popper\'s placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations)\n     */\n    behavior: \'flip\',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement=\'viewport\'\n     * The element which will define the boundaries of the popper position.\n     * The popper will never be placed outside of the defined boundaries\n     * (except if `keepTogether` is enabled)\n     */\n    boundariesElement: \'viewport\',\n    /**\n     * @prop {Boolean} flipVariations=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the reference element overlaps its boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariations: false,\n    /**\n     * @prop {Boolean} flipVariationsByContent=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the popper element overlaps its reference boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariationsByContent: false\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x=\'bottom\']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: \'bottom\',\n    /**\n     * @prop {string} [x=\'left\']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: \'right\'\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define your own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: undefined\n  }\n};\n\n/**\n * The `dataObject` is an object containing all the information used by Popper.js.\n * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nvar Defaults = {\n  /**\n   * Popper\'s placement.\n   * @prop {Popper.placements} placement=\'bottom\'\n   */\n  placement: \'bottom\',\n\n  /**\n   * Set this to true if you want popper to position it self in \'fixed\' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: function onCreate() {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: function onUpdate() {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers: modifiers\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n\n// Utils\n// Methods\nvar Popper = function () {\n  /**\n   * Creates a new Popper.js instance.\n   * @class Popper\n   * @param {Element|referenceObject} reference - The reference element used to position the popper\n   * @param {Element} popper - The HTML / XML element used as the popper\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  function Popper(reference, popper) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    classCallCheck(this, Popper);\n\n    this.scheduleUpdate = function () {\n      return requestAnimationFrame(_this.update);\n    };\n\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = _extends({}, Popper.Defaults, options);\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: []\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\n      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\n    });\n\n    // Refactoring modifiers\' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\n      return _extends({\n        name: name\n      }, _this.options.modifiers[name]);\n    })\n    // sort the modifiers by order\n    .sort(function (a, b) {\n      return a.order - b.order;\n    });\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don\'t add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(function (modifierOptions) {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    var eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can\'t use class properties because they don\'t get listed in the\n  // class prototype and break stuff like Sinon stubs\n\n\n  createClass(Popper, [{\n    key: \'update\',\n    value: function update$$1() {\n      return update.call(this);\n    }\n  }, {\n    key: \'destroy\',\n    value: function destroy$$1() {\n      return destroy.call(this);\n    }\n  }, {\n    key: \'enableEventListeners\',\n    value: function enableEventListeners$$1() {\n      return enableEventListeners.call(this);\n    }\n  }, {\n    key: \'disableEventListeners\',\n    value: function disableEventListeners$$1() {\n      return disableEventListeners.call(this);\n    }\n\n    /**\n     * Schedules an update. It will run on the next UI update available.\n     * @method scheduleUpdate\n     * @memberof Popper\n     */\n\n\n    /**\n     * Collection of utilities useful when writing custom modifiers.\n     * Starting from version 1.7, this method is available only if you\n     * include `popper-utils.js` before `popper.js`.\n     *\n     * **DEPRECATION**: This way to access PopperUtils is deprecated\n     * and will be removed in v2! Use the PopperUtils module directly instead.\n     * Due to the high instability of the methods contained in Utils, we can\'t\n     * guarantee them to follow semver. Use them at your own risk!\n     * @static\n     * @private\n     * @type {Object}\n     * @deprecated since version 1.8\n     * @member Utils\n     * @memberof Popper\n     */\n\n  }]);\n  return Popper;\n}();\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don\'t have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn\'t supported in Internet Explorer 10.\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n\n\nPopper.Utils = (typeof window !== \'undefined\' ? window : global).PopperUtils;\nPopper.placements = placements;\nPopper.Defaults = Defaults;\n\nreturn Popper;\n\n})));\n//# sourceMappingURL=popper.js.map\n';
    loader.global.define = undefined;
    loader.global.module = undefined;
    loader.global.exports = undefined;
    loader.__exec({
        'source': source,
        'address': module.uri
    });
    loader.global.require = require;
    loader.global.define = define;
    return loader.get('@@global-helpers').retrieveGlobal(module.id, undefined);
});
/*bootstrap@4.3.1#dist/js/bootstrap*/
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('jquery'), require('popper.js')) : typeof define === 'function' && define.amd ? define('bootstrap@4.3.1#dist/js/bootstrap', [
        'exports',
        'jquery',
        'popper.js'
    ], factory) : (global = global || self, factory(global.bootstrap = {}, global.jQuery, global.Popper));
}(this, function (exports, $, Popper) {
    'use strict';
    $ = $ && $.hasOwnProperty('default') ? $['default'] : $;
    Popper = Popper && Popper.hasOwnProperty('default') ? Popper['default'] : Popper;
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor)
                descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
            _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
            _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    function _defineProperty(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === 'function') {
                ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
                    return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                }));
            }
            ownKeys.forEach(function (key) {
                _defineProperty(target, key, source[key]);
            });
        }
        return target;
    }
    function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
    }
    var TRANSITION_END = 'transitionend';
    var MAX_UID = 1000000;
    var MILLISECONDS_MULTIPLIER = 1000;
    function toType(obj) {
        return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
    }
    function getSpecialTransitionEndEvent() {
        return {
            bindType: TRANSITION_END,
            delegateType: TRANSITION_END,
            handle: function handle(event) {
                if ($(event.target).is(this)) {
                    return event.handleObj.handler.apply(this, arguments);
                }
                return undefined;
            }
        };
    }
    function transitionEndEmulator(duration) {
        var _this = this;
        var called = false;
        $(this).one(Util.TRANSITION_END, function () {
            called = true;
        });
        setTimeout(function () {
            if (!called) {
                Util.triggerTransitionEnd(_this);
            }
        }, duration);
        return this;
    }
    function setTransitionEndSupport() {
        $.fn.emulateTransitionEnd = transitionEndEmulator;
        $.event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();
    }
    var Util = {
        TRANSITION_END: 'bsTransitionEnd',
        getUID: function getUID(prefix) {
            do {
                prefix += ~~(Math.random() * MAX_UID);
            } while (document.getElementById(prefix));
            return prefix;
        },
        getSelectorFromElement: function getSelectorFromElement(element) {
            var selector = element.getAttribute('data-target');
            if (!selector || selector === '#') {
                var hrefAttr = element.getAttribute('href');
                selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : '';
            }
            try {
                return document.querySelector(selector) ? selector : null;
            } catch (err) {
                return null;
            }
        },
        getTransitionDurationFromElement: function getTransitionDurationFromElement(element) {
            if (!element) {
                return 0;
            }
            var transitionDuration = $(element).css('transition-duration');
            var transitionDelay = $(element).css('transition-delay');
            var floatTransitionDuration = parseFloat(transitionDuration);
            var floatTransitionDelay = parseFloat(transitionDelay);
            if (!floatTransitionDuration && !floatTransitionDelay) {
                return 0;
            }
            transitionDuration = transitionDuration.split(',')[0];
            transitionDelay = transitionDelay.split(',')[0];
            return (parseFloat(transitionDuration) + parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
        },
        reflow: function reflow(element) {
            return element.offsetHeight;
        },
        triggerTransitionEnd: function triggerTransitionEnd(element) {
            $(element).trigger(TRANSITION_END);
        },
        supportsTransitionEnd: function supportsTransitionEnd() {
            return Boolean(TRANSITION_END);
        },
        isElement: function isElement(obj) {
            return (obj[0] || obj).nodeType;
        },
        typeCheckConfig: function typeCheckConfig(componentName, config, configTypes) {
            for (var property in configTypes) {
                if (Object.prototype.hasOwnProperty.call(configTypes, property)) {
                    var expectedTypes = configTypes[property];
                    var value = config[property];
                    var valueType = value && Util.isElement(value) ? 'element' : toType(value);
                    if (!new RegExp(expectedTypes).test(valueType)) {
                        throw new Error(componentName.toUpperCase() + ': ' + ('Option "' + property + '" provided type "' + valueType + '" ') + ('but expected type "' + expectedTypes + '".'));
                    }
                }
            }
        },
        findShadowRoot: function findShadowRoot(element) {
            if (!document.documentElement.attachShadow) {
                return null;
            }
            if (typeof element.getRootNode === 'function') {
                var root = element.getRootNode();
                return root instanceof ShadowRoot ? root : null;
            }
            if (element instanceof ShadowRoot) {
                return element;
            }
            if (!element.parentNode) {
                return null;
            }
            return Util.findShadowRoot(element.parentNode);
        }
    };
    setTransitionEndSupport();
    var NAME = 'alert';
    var VERSION = '4.3.1';
    var DATA_KEY = 'bs.alert';
    var EVENT_KEY = '.' + DATA_KEY;
    var DATA_API_KEY = '.data-api';
    var JQUERY_NO_CONFLICT = $.fn[NAME];
    var Selector = { DISMISS: '[data-dismiss="alert"]' };
    var Event = {
        CLOSE: 'close' + EVENT_KEY,
        CLOSED: 'closed' + EVENT_KEY,
        CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY
    };
    var ClassName = {
        ALERT: 'alert',
        FADE: 'fade',
        SHOW: 'show'
    };
    var Alert = function () {
        function Alert(element) {
            this._element = element;
        }
        var _proto = Alert.prototype;
        _proto.close = function close(element) {
            var rootElement = this._element;
            if (element) {
                rootElement = this._getRootElement(element);
            }
            var customEvent = this._triggerCloseEvent(rootElement);
            if (customEvent.isDefaultPrevented()) {
                return;
            }
            this._removeElement(rootElement);
        };
        _proto.dispose = function dispose() {
            $.removeData(this._element, DATA_KEY);
            this._element = null;
        };
        _proto._getRootElement = function _getRootElement(element) {
            var selector = Util.getSelectorFromElement(element);
            var parent = false;
            if (selector) {
                parent = document.querySelector(selector);
            }
            if (!parent) {
                parent = $(element).closest('.' + ClassName.ALERT)[0];
            }
            return parent;
        };
        _proto._triggerCloseEvent = function _triggerCloseEvent(element) {
            var closeEvent = $.Event(Event.CLOSE);
            $(element).trigger(closeEvent);
            return closeEvent;
        };
        _proto._removeElement = function _removeElement(element) {
            var _this = this;
            $(element).removeClass(ClassName.SHOW);
            if (!$(element).hasClass(ClassName.FADE)) {
                this._destroyElement(element);
                return;
            }
            var transitionDuration = Util.getTransitionDurationFromElement(element);
            $(element).one(Util.TRANSITION_END, function (event) {
                return _this._destroyElement(element, event);
            }).emulateTransitionEnd(transitionDuration);
        };
        _proto._destroyElement = function _destroyElement(element) {
            $(element).detach().trigger(Event.CLOSED).remove();
        };
        Alert._jQueryInterface = function _jQueryInterface(config) {
            return this.each(function () {
                var $element = $(this);
                var data = $element.data(DATA_KEY);
                if (!data) {
                    data = new Alert(this);
                    $element.data(DATA_KEY, data);
                }
                if (config === 'close') {
                    data[config](this);
                }
            });
        };
        Alert._handleDismiss = function _handleDismiss(alertInstance) {
            return function (event) {
                if (event) {
                    event.preventDefault();
                }
                alertInstance.close(this);
            };
        };
        _createClass(Alert, null, [{
                key: 'VERSION',
                get: function get() {
                    return VERSION;
                }
            }]);
        return Alert;
    }();
    $(document).on(Event.CLICK_DATA_API, Selector.DISMISS, Alert._handleDismiss(new Alert()));
    $.fn[NAME] = Alert._jQueryInterface;
    $.fn[NAME].Constructor = Alert;
    $.fn[NAME].noConflict = function () {
        $.fn[NAME] = JQUERY_NO_CONFLICT;
        return Alert._jQueryInterface;
    };
    var NAME$1 = 'button';
    var VERSION$1 = '4.3.1';
    var DATA_KEY$1 = 'bs.button';
    var EVENT_KEY$1 = '.' + DATA_KEY$1;
    var DATA_API_KEY$1 = '.data-api';
    var JQUERY_NO_CONFLICT$1 = $.fn[NAME$1];
    var ClassName$1 = {
        ACTIVE: 'active',
        BUTTON: 'btn',
        FOCUS: 'focus'
    };
    var Selector$1 = {
        DATA_TOGGLE_CARROT: '[data-toggle^="button"]',
        DATA_TOGGLE: '[data-toggle="buttons"]',
        INPUT: 'input:not([type="hidden"])',
        ACTIVE: '.active',
        BUTTON: '.btn'
    };
    var Event$1 = {
        CLICK_DATA_API: 'click' + EVENT_KEY$1 + DATA_API_KEY$1,
        FOCUS_BLUR_DATA_API: 'focus' + EVENT_KEY$1 + DATA_API_KEY$1 + ' ' + ('blur' + EVENT_KEY$1 + DATA_API_KEY$1)
    };
    var Button = function () {
        function Button(element) {
            this._element = element;
        }
        var _proto = Button.prototype;
        _proto.toggle = function toggle() {
            var triggerChangeEvent = true;
            var addAriaPressed = true;
            var rootElement = $(this._element).closest(Selector$1.DATA_TOGGLE)[0];
            if (rootElement) {
                var input = this._element.querySelector(Selector$1.INPUT);
                if (input) {
                    if (input.type === 'radio') {
                        if (input.checked && this._element.classList.contains(ClassName$1.ACTIVE)) {
                            triggerChangeEvent = false;
                        } else {
                            var activeElement = rootElement.querySelector(Selector$1.ACTIVE);
                            if (activeElement) {
                                $(activeElement).removeClass(ClassName$1.ACTIVE);
                            }
                        }
                    }
                    if (triggerChangeEvent) {
                        if (input.hasAttribute('disabled') || rootElement.hasAttribute('disabled') || input.classList.contains('disabled') || rootElement.classList.contains('disabled')) {
                            return;
                        }
                        input.checked = !this._element.classList.contains(ClassName$1.ACTIVE);
                        $(input).trigger('change');
                    }
                    input.focus();
                    addAriaPressed = false;
                }
            }
            if (addAriaPressed) {
                this._element.setAttribute('aria-pressed', !this._element.classList.contains(ClassName$1.ACTIVE));
            }
            if (triggerChangeEvent) {
                $(this._element).toggleClass(ClassName$1.ACTIVE);
            }
        };
        _proto.dispose = function dispose() {
            $.removeData(this._element, DATA_KEY$1);
            this._element = null;
        };
        Button._jQueryInterface = function _jQueryInterface(config) {
            return this.each(function () {
                var data = $(this).data(DATA_KEY$1);
                if (!data) {
                    data = new Button(this);
                    $(this).data(DATA_KEY$1, data);
                }
                if (config === 'toggle') {
                    data[config]();
                }
            });
        };
        _createClass(Button, null, [{
                key: 'VERSION',
                get: function get() {
                    return VERSION$1;
                }
            }]);
        return Button;
    }();
    $(document).on(Event$1.CLICK_DATA_API, Selector$1.DATA_TOGGLE_CARROT, function (event) {
        event.preventDefault();
        var button = event.target;
        if (!$(button).hasClass(ClassName$1.BUTTON)) {
            button = $(button).closest(Selector$1.BUTTON);
        }
        Button._jQueryInterface.call($(button), 'toggle');
    }).on(Event$1.FOCUS_BLUR_DATA_API, Selector$1.DATA_TOGGLE_CARROT, function (event) {
        var button = $(event.target).closest(Selector$1.BUTTON)[0];
        $(button).toggleClass(ClassName$1.FOCUS, /^focus(in)?$/.test(event.type));
    });
    $.fn[NAME$1] = Button._jQueryInterface;
    $.fn[NAME$1].Constructor = Button;
    $.fn[NAME$1].noConflict = function () {
        $.fn[NAME$1] = JQUERY_NO_CONFLICT$1;
        return Button._jQueryInterface;
    };
    var NAME$2 = 'carousel';
    var VERSION$2 = '4.3.1';
    var DATA_KEY$2 = 'bs.carousel';
    var EVENT_KEY$2 = '.' + DATA_KEY$2;
    var DATA_API_KEY$2 = '.data-api';
    var JQUERY_NO_CONFLICT$2 = $.fn[NAME$2];
    var ARROW_LEFT_KEYCODE = 37;
    var ARROW_RIGHT_KEYCODE = 39;
    var TOUCHEVENT_COMPAT_WAIT = 500;
    var SWIPE_THRESHOLD = 40;
    var Default = {
        interval: 5000,
        keyboard: true,
        slide: false,
        pause: 'hover',
        wrap: true,
        touch: true
    };
    var DefaultType = {
        interval: '(number|boolean)',
        keyboard: 'boolean',
        slide: '(boolean|string)',
        pause: '(string|boolean)',
        wrap: 'boolean',
        touch: 'boolean'
    };
    var Direction = {
        NEXT: 'next',
        PREV: 'prev',
        LEFT: 'left',
        RIGHT: 'right'
    };
    var Event$2 = {
        SLIDE: 'slide' + EVENT_KEY$2,
        SLID: 'slid' + EVENT_KEY$2,
        KEYDOWN: 'keydown' + EVENT_KEY$2,
        MOUSEENTER: 'mouseenter' + EVENT_KEY$2,
        MOUSELEAVE: 'mouseleave' + EVENT_KEY$2,
        TOUCHSTART: 'touchstart' + EVENT_KEY$2,
        TOUCHMOVE: 'touchmove' + EVENT_KEY$2,
        TOUCHEND: 'touchend' + EVENT_KEY$2,
        POINTERDOWN: 'pointerdown' + EVENT_KEY$2,
        POINTERUP: 'pointerup' + EVENT_KEY$2,
        DRAG_START: 'dragstart' + EVENT_KEY$2,
        LOAD_DATA_API: 'load' + EVENT_KEY$2 + DATA_API_KEY$2,
        CLICK_DATA_API: 'click' + EVENT_KEY$2 + DATA_API_KEY$2
    };
    var ClassName$2 = {
        CAROUSEL: 'carousel',
        ACTIVE: 'active',
        SLIDE: 'slide',
        RIGHT: 'carousel-item-right',
        LEFT: 'carousel-item-left',
        NEXT: 'carousel-item-next',
        PREV: 'carousel-item-prev',
        ITEM: 'carousel-item',
        POINTER_EVENT: 'pointer-event'
    };
    var Selector$2 = {
        ACTIVE: '.active',
        ACTIVE_ITEM: '.active.carousel-item',
        ITEM: '.carousel-item',
        ITEM_IMG: '.carousel-item img',
        NEXT_PREV: '.carousel-item-next, .carousel-item-prev',
        INDICATORS: '.carousel-indicators',
        DATA_SLIDE: '[data-slide], [data-slide-to]',
        DATA_RIDE: '[data-ride="carousel"]'
    };
    var PointerType = {
        TOUCH: 'touch',
        PEN: 'pen'
    };
    var Carousel = function () {
        function Carousel(element, config) {
            this._items = null;
            this._interval = null;
            this._activeElement = null;
            this._isPaused = false;
            this._isSliding = false;
            this.touchTimeout = null;
            this.touchStartX = 0;
            this.touchDeltaX = 0;
            this._config = this._getConfig(config);
            this._element = element;
            this._indicatorsElement = this._element.querySelector(Selector$2.INDICATORS);
            this._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;
            this._pointerEvent = Boolean(window.PointerEvent || window.MSPointerEvent);
            this._addEventListeners();
        }
        var _proto = Carousel.prototype;
        _proto.next = function next() {
            if (!this._isSliding) {
                this._slide(Direction.NEXT);
            }
        };
        _proto.nextWhenVisible = function nextWhenVisible() {
            if (!document.hidden && $(this._element).is(':visible') && $(this._element).css('visibility') !== 'hidden') {
                this.next();
            }
        };
        _proto.prev = function prev() {
            if (!this._isSliding) {
                this._slide(Direction.PREV);
            }
        };
        _proto.pause = function pause(event) {
            if (!event) {
                this._isPaused = true;
            }
            if (this._element.querySelector(Selector$2.NEXT_PREV)) {
                Util.triggerTransitionEnd(this._element);
                this.cycle(true);
            }
            clearInterval(this._interval);
            this._interval = null;
        };
        _proto.cycle = function cycle(event) {
            if (!event) {
                this._isPaused = false;
            }
            if (this._interval) {
                clearInterval(this._interval);
                this._interval = null;
            }
            if (this._config.interval && !this._isPaused) {
                this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
            }
        };
        _proto.to = function to(index) {
            var _this = this;
            this._activeElement = this._element.querySelector(Selector$2.ACTIVE_ITEM);
            var activeIndex = this._getItemIndex(this._activeElement);
            if (index > this._items.length - 1 || index < 0) {
                return;
            }
            if (this._isSliding) {
                $(this._element).one(Event$2.SLID, function () {
                    return _this.to(index);
                });
                return;
            }
            if (activeIndex === index) {
                this.pause();
                this.cycle();
                return;
            }
            var direction = index > activeIndex ? Direction.NEXT : Direction.PREV;
            this._slide(direction, this._items[index]);
        };
        _proto.dispose = function dispose() {
            $(this._element).off(EVENT_KEY$2);
            $.removeData(this._element, DATA_KEY$2);
            this._items = null;
            this._config = null;
            this._element = null;
            this._interval = null;
            this._isPaused = null;
            this._isSliding = null;
            this._activeElement = null;
            this._indicatorsElement = null;
        };
        _proto._getConfig = function _getConfig(config) {
            config = _objectSpread({}, Default, config);
            Util.typeCheckConfig(NAME$2, config, DefaultType);
            return config;
        };
        _proto._handleSwipe = function _handleSwipe() {
            var absDeltax = Math.abs(this.touchDeltaX);
            if (absDeltax <= SWIPE_THRESHOLD) {
                return;
            }
            var direction = absDeltax / this.touchDeltaX;
            if (direction > 0) {
                this.prev();
            }
            if (direction < 0) {
                this.next();
            }
        };
        _proto._addEventListeners = function _addEventListeners() {
            var _this2 = this;
            if (this._config.keyboard) {
                $(this._element).on(Event$2.KEYDOWN, function (event) {
                    return _this2._keydown(event);
                });
            }
            if (this._config.pause === 'hover') {
                $(this._element).on(Event$2.MOUSEENTER, function (event) {
                    return _this2.pause(event);
                }).on(Event$2.MOUSELEAVE, function (event) {
                    return _this2.cycle(event);
                });
            }
            if (this._config.touch) {
                this._addTouchEventListeners();
            }
        };
        _proto._addTouchEventListeners = function _addTouchEventListeners() {
            var _this3 = this;
            if (!this._touchSupported) {
                return;
            }
            var start = function start(event) {
                if (_this3._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {
                    _this3.touchStartX = event.originalEvent.clientX;
                } else if (!_this3._pointerEvent) {
                    _this3.touchStartX = event.originalEvent.touches[0].clientX;
                }
            };
            var move = function move(event) {
                if (event.originalEvent.touches && event.originalEvent.touches.length > 1) {
                    _this3.touchDeltaX = 0;
                } else {
                    _this3.touchDeltaX = event.originalEvent.touches[0].clientX - _this3.touchStartX;
                }
            };
            var end = function end(event) {
                if (_this3._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {
                    _this3.touchDeltaX = event.originalEvent.clientX - _this3.touchStartX;
                }
                _this3._handleSwipe();
                if (_this3._config.pause === 'hover') {
                    _this3.pause();
                    if (_this3.touchTimeout) {
                        clearTimeout(_this3.touchTimeout);
                    }
                    _this3.touchTimeout = setTimeout(function (event) {
                        return _this3.cycle(event);
                    }, TOUCHEVENT_COMPAT_WAIT + _this3._config.interval);
                }
            };
            $(this._element.querySelectorAll(Selector$2.ITEM_IMG)).on(Event$2.DRAG_START, function (e) {
                return e.preventDefault();
            });
            if (this._pointerEvent) {
                $(this._element).on(Event$2.POINTERDOWN, function (event) {
                    return start(event);
                });
                $(this._element).on(Event$2.POINTERUP, function (event) {
                    return end(event);
                });
                this._element.classList.add(ClassName$2.POINTER_EVENT);
            } else {
                $(this._element).on(Event$2.TOUCHSTART, function (event) {
                    return start(event);
                });
                $(this._element).on(Event$2.TOUCHMOVE, function (event) {
                    return move(event);
                });
                $(this._element).on(Event$2.TOUCHEND, function (event) {
                    return end(event);
                });
            }
        };
        _proto._keydown = function _keydown(event) {
            if (/input|textarea/i.test(event.target.tagName)) {
                return;
            }
            switch (event.which) {
            case ARROW_LEFT_KEYCODE:
                event.preventDefault();
                this.prev();
                break;
            case ARROW_RIGHT_KEYCODE:
                event.preventDefault();
                this.next();
                break;
            default:
            }
        };
        _proto._getItemIndex = function _getItemIndex(element) {
            this._items = element && element.parentNode ? [].slice.call(element.parentNode.querySelectorAll(Selector$2.ITEM)) : [];
            return this._items.indexOf(element);
        };
        _proto._getItemByDirection = function _getItemByDirection(direction, activeElement) {
            var isNextDirection = direction === Direction.NEXT;
            var isPrevDirection = direction === Direction.PREV;
            var activeIndex = this._getItemIndex(activeElement);
            var lastItemIndex = this._items.length - 1;
            var isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;
            if (isGoingToWrap && !this._config.wrap) {
                return activeElement;
            }
            var delta = direction === Direction.PREV ? -1 : 1;
            var itemIndex = (activeIndex + delta) % this._items.length;
            return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];
        };
        _proto._triggerSlideEvent = function _triggerSlideEvent(relatedTarget, eventDirectionName) {
            var targetIndex = this._getItemIndex(relatedTarget);
            var fromIndex = this._getItemIndex(this._element.querySelector(Selector$2.ACTIVE_ITEM));
            var slideEvent = $.Event(Event$2.SLIDE, {
                relatedTarget: relatedTarget,
                direction: eventDirectionName,
                from: fromIndex,
                to: targetIndex
            });
            $(this._element).trigger(slideEvent);
            return slideEvent;
        };
        _proto._setActiveIndicatorElement = function _setActiveIndicatorElement(element) {
            if (this._indicatorsElement) {
                var indicators = [].slice.call(this._indicatorsElement.querySelectorAll(Selector$2.ACTIVE));
                $(indicators).removeClass(ClassName$2.ACTIVE);
                var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];
                if (nextIndicator) {
                    $(nextIndicator).addClass(ClassName$2.ACTIVE);
                }
            }
        };
        _proto._slide = function _slide(direction, element) {
            var _this4 = this;
            var activeElement = this._element.querySelector(Selector$2.ACTIVE_ITEM);
            var activeElementIndex = this._getItemIndex(activeElement);
            var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);
            var nextElementIndex = this._getItemIndex(nextElement);
            var isCycling = Boolean(this._interval);
            var directionalClassName;
            var orderClassName;
            var eventDirectionName;
            if (direction === Direction.NEXT) {
                directionalClassName = ClassName$2.LEFT;
                orderClassName = ClassName$2.NEXT;
                eventDirectionName = Direction.LEFT;
            } else {
                directionalClassName = ClassName$2.RIGHT;
                orderClassName = ClassName$2.PREV;
                eventDirectionName = Direction.RIGHT;
            }
            if (nextElement && $(nextElement).hasClass(ClassName$2.ACTIVE)) {
                this._isSliding = false;
                return;
            }
            var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);
            if (slideEvent.isDefaultPrevented()) {
                return;
            }
            if (!activeElement || !nextElement) {
                return;
            }
            this._isSliding = true;
            if (isCycling) {
                this.pause();
            }
            this._setActiveIndicatorElement(nextElement);
            var slidEvent = $.Event(Event$2.SLID, {
                relatedTarget: nextElement,
                direction: eventDirectionName,
                from: activeElementIndex,
                to: nextElementIndex
            });
            if ($(this._element).hasClass(ClassName$2.SLIDE)) {
                $(nextElement).addClass(orderClassName);
                Util.reflow(nextElement);
                $(activeElement).addClass(directionalClassName);
                $(nextElement).addClass(directionalClassName);
                var nextElementInterval = parseInt(nextElement.getAttribute('data-interval'), 10);
                if (nextElementInterval) {
                    this._config.defaultInterval = this._config.defaultInterval || this._config.interval;
                    this._config.interval = nextElementInterval;
                } else {
                    this._config.interval = this._config.defaultInterval || this._config.interval;
                }
                var transitionDuration = Util.getTransitionDurationFromElement(activeElement);
                $(activeElement).one(Util.TRANSITION_END, function () {
                    $(nextElement).removeClass(directionalClassName + ' ' + orderClassName).addClass(ClassName$2.ACTIVE);
                    $(activeElement).removeClass(ClassName$2.ACTIVE + ' ' + orderClassName + ' ' + directionalClassName);
                    _this4._isSliding = false;
                    setTimeout(function () {
                        return $(_this4._element).trigger(slidEvent);
                    }, 0);
                }).emulateTransitionEnd(transitionDuration);
            } else {
                $(activeElement).removeClass(ClassName$2.ACTIVE);
                $(nextElement).addClass(ClassName$2.ACTIVE);
                this._isSliding = false;
                $(this._element).trigger(slidEvent);
            }
            if (isCycling) {
                this.cycle();
            }
        };
        Carousel._jQueryInterface = function _jQueryInterface(config) {
            return this.each(function () {
                var data = $(this).data(DATA_KEY$2);
                var _config = _objectSpread({}, Default, $(this).data());
                if (typeof config === 'object') {
                    _config = _objectSpread({}, _config, config);
                }
                var action = typeof config === 'string' ? config : _config.slide;
                if (!data) {
                    data = new Carousel(this, _config);
                    $(this).data(DATA_KEY$2, data);
                }
                if (typeof config === 'number') {
                    data.to(config);
                } else if (typeof action === 'string') {
                    if (typeof data[action] === 'undefined') {
                        throw new TypeError('No method named "' + action + '"');
                    }
                    data[action]();
                } else if (_config.interval && _config.ride) {
                    data.pause();
                    data.cycle();
                }
            });
        };
        Carousel._dataApiClickHandler = function _dataApiClickHandler(event) {
            var selector = Util.getSelectorFromElement(this);
            if (!selector) {
                return;
            }
            var target = $(selector)[0];
            if (!target || !$(target).hasClass(ClassName$2.CAROUSEL)) {
                return;
            }
            var config = _objectSpread({}, $(target).data(), $(this).data());
            var slideIndex = this.getAttribute('data-slide-to');
            if (slideIndex) {
                config.interval = false;
            }
            Carousel._jQueryInterface.call($(target), config);
            if (slideIndex) {
                $(target).data(DATA_KEY$2).to(slideIndex);
            }
            event.preventDefault();
        };
        _createClass(Carousel, null, [
            {
                key: 'VERSION',
                get: function get() {
                    return VERSION$2;
                }
            },
            {
                key: 'Default',
                get: function get() {
                    return Default;
                }
            }
        ]);
        return Carousel;
    }();
    $(document).on(Event$2.CLICK_DATA_API, Selector$2.DATA_SLIDE, Carousel._dataApiClickHandler);
    $(window).on(Event$2.LOAD_DATA_API, function () {
        var carousels = [].slice.call(document.querySelectorAll(Selector$2.DATA_RIDE));
        for (var i = 0, len = carousels.length; i < len; i++) {
            var $carousel = $(carousels[i]);
            Carousel._jQueryInterface.call($carousel, $carousel.data());
        }
    });
    $.fn[NAME$2] = Carousel._jQueryInterface;
    $.fn[NAME$2].Constructor = Carousel;
    $.fn[NAME$2].noConflict = function () {
        $.fn[NAME$2] = JQUERY_NO_CONFLICT$2;
        return Carousel._jQueryInterface;
    };
    var NAME$3 = 'collapse';
    var VERSION$3 = '4.3.1';
    var DATA_KEY$3 = 'bs.collapse';
    var EVENT_KEY$3 = '.' + DATA_KEY$3;
    var DATA_API_KEY$3 = '.data-api';
    var JQUERY_NO_CONFLICT$3 = $.fn[NAME$3];
    var Default$1 = {
        toggle: true,
        parent: ''
    };
    var DefaultType$1 = {
        toggle: 'boolean',
        parent: '(string|element)'
    };
    var Event$3 = {
        SHOW: 'show' + EVENT_KEY$3,
        SHOWN: 'shown' + EVENT_KEY$3,
        HIDE: 'hide' + EVENT_KEY$3,
        HIDDEN: 'hidden' + EVENT_KEY$3,
        CLICK_DATA_API: 'click' + EVENT_KEY$3 + DATA_API_KEY$3
    };
    var ClassName$3 = {
        SHOW: 'show',
        COLLAPSE: 'collapse',
        COLLAPSING: 'collapsing',
        COLLAPSED: 'collapsed'
    };
    var Dimension = {
        WIDTH: 'width',
        HEIGHT: 'height'
    };
    var Selector$3 = {
        ACTIVES: '.show, .collapsing',
        DATA_TOGGLE: '[data-toggle="collapse"]'
    };
    var Collapse = function () {
        function Collapse(element, config) {
            this._isTransitioning = false;
            this._element = element;
            this._config = this._getConfig(config);
            this._triggerArray = [].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#' + element.id + '"],' + ('[data-toggle="collapse"][data-target="#' + element.id + '"]')));
            var toggleList = [].slice.call(document.querySelectorAll(Selector$3.DATA_TOGGLE));
            for (var i = 0, len = toggleList.length; i < len; i++) {
                var elem = toggleList[i];
                var selector = Util.getSelectorFromElement(elem);
                var filterElement = [].slice.call(document.querySelectorAll(selector)).filter(function (foundElem) {
                    return foundElem === element;
                });
                if (selector !== null && filterElement.length > 0) {
                    this._selector = selector;
                    this._triggerArray.push(elem);
                }
            }
            this._parent = this._config.parent ? this._getParent() : null;
            if (!this._config.parent) {
                this._addAriaAndCollapsedClass(this._element, this._triggerArray);
            }
            if (this._config.toggle) {
                this.toggle();
            }
        }
        var _proto = Collapse.prototype;
        _proto.toggle = function toggle() {
            if ($(this._element).hasClass(ClassName$3.SHOW)) {
                this.hide();
            } else {
                this.show();
            }
        };
        _proto.show = function show() {
            var _this = this;
            if (this._isTransitioning || $(this._element).hasClass(ClassName$3.SHOW)) {
                return;
            }
            var actives;
            var activesData;
            if (this._parent) {
                actives = [].slice.call(this._parent.querySelectorAll(Selector$3.ACTIVES)).filter(function (elem) {
                    if (typeof _this._config.parent === 'string') {
                        return elem.getAttribute('data-parent') === _this._config.parent;
                    }
                    return elem.classList.contains(ClassName$3.COLLAPSE);
                });
                if (actives.length === 0) {
                    actives = null;
                }
            }
            if (actives) {
                activesData = $(actives).not(this._selector).data(DATA_KEY$3);
                if (activesData && activesData._isTransitioning) {
                    return;
                }
            }
            var startEvent = $.Event(Event$3.SHOW);
            $(this._element).trigger(startEvent);
            if (startEvent.isDefaultPrevented()) {
                return;
            }
            if (actives) {
                Collapse._jQueryInterface.call($(actives).not(this._selector), 'hide');
                if (!activesData) {
                    $(actives).data(DATA_KEY$3, null);
                }
            }
            var dimension = this._getDimension();
            $(this._element).removeClass(ClassName$3.COLLAPSE).addClass(ClassName$3.COLLAPSING);
            this._element.style[dimension] = 0;
            if (this._triggerArray.length) {
                $(this._triggerArray).removeClass(ClassName$3.COLLAPSED).attr('aria-expanded', true);
            }
            this.setTransitioning(true);
            var complete = function complete() {
                $(_this._element).removeClass(ClassName$3.COLLAPSING).addClass(ClassName$3.COLLAPSE).addClass(ClassName$3.SHOW);
                _this._element.style[dimension] = '';
                _this.setTransitioning(false);
                $(_this._element).trigger(Event$3.SHOWN);
            };
            var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
            var scrollSize = 'scroll' + capitalizedDimension;
            var transitionDuration = Util.getTransitionDurationFromElement(this._element);
            $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
            this._element.style[dimension] = this._element[scrollSize] + 'px';
        };
        _proto.hide = function hide() {
            var _this2 = this;
            if (this._isTransitioning || !$(this._element).hasClass(ClassName$3.SHOW)) {
                return;
            }
            var startEvent = $.Event(Event$3.HIDE);
            $(this._element).trigger(startEvent);
            if (startEvent.isDefaultPrevented()) {
                return;
            }
            var dimension = this._getDimension();
            this._element.style[dimension] = this._element.getBoundingClientRect()[dimension] + 'px';
            Util.reflow(this._element);
            $(this._element).addClass(ClassName$3.COLLAPSING).removeClass(ClassName$3.COLLAPSE).removeClass(ClassName$3.SHOW);
            var triggerArrayLength = this._triggerArray.length;
            if (triggerArrayLength > 0) {
                for (var i = 0; i < triggerArrayLength; i++) {
                    var trigger = this._triggerArray[i];
                    var selector = Util.getSelectorFromElement(trigger);
                    if (selector !== null) {
                        var $elem = $([].slice.call(document.querySelectorAll(selector)));
                        if (!$elem.hasClass(ClassName$3.SHOW)) {
                            $(trigger).addClass(ClassName$3.COLLAPSED).attr('aria-expanded', false);
                        }
                    }
                }
            }
            this.setTransitioning(true);
            var complete = function complete() {
                _this2.setTransitioning(false);
                $(_this2._element).removeClass(ClassName$3.COLLAPSING).addClass(ClassName$3.COLLAPSE).trigger(Event$3.HIDDEN);
            };
            this._element.style[dimension] = '';
            var transitionDuration = Util.getTransitionDurationFromElement(this._element);
            $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
        };
        _proto.setTransitioning = function setTransitioning(isTransitioning) {
            this._isTransitioning = isTransitioning;
        };
        _proto.dispose = function dispose() {
            $.removeData(this._element, DATA_KEY$3);
            this._config = null;
            this._parent = null;
            this._element = null;
            this._triggerArray = null;
            this._isTransitioning = null;
        };
        _proto._getConfig = function _getConfig(config) {
            config = _objectSpread({}, Default$1, config);
            config.toggle = Boolean(config.toggle);
            Util.typeCheckConfig(NAME$3, config, DefaultType$1);
            return config;
        };
        _proto._getDimension = function _getDimension() {
            var hasWidth = $(this._element).hasClass(Dimension.WIDTH);
            return hasWidth ? Dimension.WIDTH : Dimension.HEIGHT;
        };
        _proto._getParent = function _getParent() {
            var _this3 = this;
            var parent;
            if (Util.isElement(this._config.parent)) {
                parent = this._config.parent;
                if (typeof this._config.parent.jquery !== 'undefined') {
                    parent = this._config.parent[0];
                }
            } else {
                parent = document.querySelector(this._config.parent);
            }
            var selector = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]';
            var children = [].slice.call(parent.querySelectorAll(selector));
            $(children).each(function (i, element) {
                _this3._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element]);
            });
            return parent;
        };
        _proto._addAriaAndCollapsedClass = function _addAriaAndCollapsedClass(element, triggerArray) {
            var isOpen = $(element).hasClass(ClassName$3.SHOW);
            if (triggerArray.length) {
                $(triggerArray).toggleClass(ClassName$3.COLLAPSED, !isOpen).attr('aria-expanded', isOpen);
            }
        };
        Collapse._getTargetFromElement = function _getTargetFromElement(element) {
            var selector = Util.getSelectorFromElement(element);
            return selector ? document.querySelector(selector) : null;
        };
        Collapse._jQueryInterface = function _jQueryInterface(config) {
            return this.each(function () {
                var $this = $(this);
                var data = $this.data(DATA_KEY$3);
                var _config = _objectSpread({}, Default$1, $this.data(), typeof config === 'object' && config ? config : {});
                if (!data && _config.toggle && /show|hide/.test(config)) {
                    _config.toggle = false;
                }
                if (!data) {
                    data = new Collapse(this, _config);
                    $this.data(DATA_KEY$3, data);
                }
                if (typeof config === 'string') {
                    if (typeof data[config] === 'undefined') {
                        throw new TypeError('No method named "' + config + '"');
                    }
                    data[config]();
                }
            });
        };
        _createClass(Collapse, null, [
            {
                key: 'VERSION',
                get: function get() {
                    return VERSION$3;
                }
            },
            {
                key: 'Default',
                get: function get() {
                    return Default$1;
                }
            }
        ]);
        return Collapse;
    }();
    $(document).on(Event$3.CLICK_DATA_API, Selector$3.DATA_TOGGLE, function (event) {
        if (event.currentTarget.tagName === 'A') {
            event.preventDefault();
        }
        var $trigger = $(this);
        var selector = Util.getSelectorFromElement(this);
        var selectors = [].slice.call(document.querySelectorAll(selector));
        $(selectors).each(function () {
            var $target = $(this);
            var data = $target.data(DATA_KEY$3);
            var config = data ? 'toggle' : $trigger.data();
            Collapse._jQueryInterface.call($target, config);
        });
    });
    $.fn[NAME$3] = Collapse._jQueryInterface;
    $.fn[NAME$3].Constructor = Collapse;
    $.fn[NAME$3].noConflict = function () {
        $.fn[NAME$3] = JQUERY_NO_CONFLICT$3;
        return Collapse._jQueryInterface;
    };
    var NAME$4 = 'dropdown';
    var VERSION$4 = '4.3.1';
    var DATA_KEY$4 = 'bs.dropdown';
    var EVENT_KEY$4 = '.' + DATA_KEY$4;
    var DATA_API_KEY$4 = '.data-api';
    var JQUERY_NO_CONFLICT$4 = $.fn[NAME$4];
    var ESCAPE_KEYCODE = 27;
    var SPACE_KEYCODE = 32;
    var TAB_KEYCODE = 9;
    var ARROW_UP_KEYCODE = 38;
    var ARROW_DOWN_KEYCODE = 40;
    var RIGHT_MOUSE_BUTTON_WHICH = 3;
    var REGEXP_KEYDOWN = new RegExp(ARROW_UP_KEYCODE + '|' + ARROW_DOWN_KEYCODE + '|' + ESCAPE_KEYCODE);
    var Event$4 = {
        HIDE: 'hide' + EVENT_KEY$4,
        HIDDEN: 'hidden' + EVENT_KEY$4,
        SHOW: 'show' + EVENT_KEY$4,
        SHOWN: 'shown' + EVENT_KEY$4,
        CLICK: 'click' + EVENT_KEY$4,
        CLICK_DATA_API: 'click' + EVENT_KEY$4 + DATA_API_KEY$4,
        KEYDOWN_DATA_API: 'keydown' + EVENT_KEY$4 + DATA_API_KEY$4,
        KEYUP_DATA_API: 'keyup' + EVENT_KEY$4 + DATA_API_KEY$4
    };
    var ClassName$4 = {
        DISABLED: 'disabled',
        SHOW: 'show',
        DROPUP: 'dropup',
        DROPRIGHT: 'dropright',
        DROPLEFT: 'dropleft',
        MENURIGHT: 'dropdown-menu-right',
        MENULEFT: 'dropdown-menu-left',
        POSITION_STATIC: 'position-static'
    };
    var Selector$4 = {
        DATA_TOGGLE: '[data-toggle="dropdown"]',
        FORM_CHILD: '.dropdown form',
        MENU: '.dropdown-menu',
        NAVBAR_NAV: '.navbar-nav',
        VISIBLE_ITEMS: '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)'
    };
    var AttachmentMap = {
        TOP: 'top-start',
        TOPEND: 'top-end',
        BOTTOM: 'bottom-start',
        BOTTOMEND: 'bottom-end',
        RIGHT: 'right-start',
        RIGHTEND: 'right-end',
        LEFT: 'left-start',
        LEFTEND: 'left-end'
    };
    var Default$2 = {
        offset: 0,
        flip: true,
        boundary: 'scrollParent',
        reference: 'toggle',
        display: 'dynamic'
    };
    var DefaultType$2 = {
        offset: '(number|string|function)',
        flip: 'boolean',
        boundary: '(string|element)',
        reference: '(string|element)',
        display: 'string'
    };
    var Dropdown = function () {
        function Dropdown(element, config) {
            this._element = element;
            this._popper = null;
            this._config = this._getConfig(config);
            this._menu = this._getMenuElement();
            this._inNavbar = this._detectNavbar();
            this._addEventListeners();
        }
        var _proto = Dropdown.prototype;
        _proto.toggle = function toggle() {
            if (this._element.disabled || $(this._element).hasClass(ClassName$4.DISABLED)) {
                return;
            }
            var parent = Dropdown._getParentFromElement(this._element);
            var isActive = $(this._menu).hasClass(ClassName$4.SHOW);
            Dropdown._clearMenus();
            if (isActive) {
                return;
            }
            var relatedTarget = { relatedTarget: this._element };
            var showEvent = $.Event(Event$4.SHOW, relatedTarget);
            $(parent).trigger(showEvent);
            if (showEvent.isDefaultPrevented()) {
                return;
            }
            if (!this._inNavbar) {
                if (typeof Popper === 'undefined') {
                    throw new TypeError('Bootstrap\'s dropdowns require Popper.js (https://popper.js.org/)');
                }
                var referenceElement = this._element;
                if (this._config.reference === 'parent') {
                    referenceElement = parent;
                } else if (Util.isElement(this._config.reference)) {
                    referenceElement = this._config.reference;
                    if (typeof this._config.reference.jquery !== 'undefined') {
                        referenceElement = this._config.reference[0];
                    }
                }
                if (this._config.boundary !== 'scrollParent') {
                    $(parent).addClass(ClassName$4.POSITION_STATIC);
                }
                this._popper = new Popper(referenceElement, this._menu, this._getPopperConfig());
            }
            if ('ontouchstart' in document.documentElement && $(parent).closest(Selector$4.NAVBAR_NAV).length === 0) {
                $(document.body).children().on('mouseover', null, $.noop);
            }
            this._element.focus();
            this._element.setAttribute('aria-expanded', true);
            $(this._menu).toggleClass(ClassName$4.SHOW);
            $(parent).toggleClass(ClassName$4.SHOW).trigger($.Event(Event$4.SHOWN, relatedTarget));
        };
        _proto.show = function show() {
            if (this._element.disabled || $(this._element).hasClass(ClassName$4.DISABLED) || $(this._menu).hasClass(ClassName$4.SHOW)) {
                return;
            }
            var relatedTarget = { relatedTarget: this._element };
            var showEvent = $.Event(Event$4.SHOW, relatedTarget);
            var parent = Dropdown._getParentFromElement(this._element);
            $(parent).trigger(showEvent);
            if (showEvent.isDefaultPrevented()) {
                return;
            }
            $(this._menu).toggleClass(ClassName$4.SHOW);
            $(parent).toggleClass(ClassName$4.SHOW).trigger($.Event(Event$4.SHOWN, relatedTarget));
        };
        _proto.hide = function hide() {
            if (this._element.disabled || $(this._element).hasClass(ClassName$4.DISABLED) || !$(this._menu).hasClass(ClassName$4.SHOW)) {
                return;
            }
            var relatedTarget = { relatedTarget: this._element };
            var hideEvent = $.Event(Event$4.HIDE, relatedTarget);
            var parent = Dropdown._getParentFromElement(this._element);
            $(parent).trigger(hideEvent);
            if (hideEvent.isDefaultPrevented()) {
                return;
            }
            $(this._menu).toggleClass(ClassName$4.SHOW);
            $(parent).toggleClass(ClassName$4.SHOW).trigger($.Event(Event$4.HIDDEN, relatedTarget));
        };
        _proto.dispose = function dispose() {
            $.removeData(this._element, DATA_KEY$4);
            $(this._element).off(EVENT_KEY$4);
            this._element = null;
            this._menu = null;
            if (this._popper !== null) {
                this._popper.destroy();
                this._popper = null;
            }
        };
        _proto.update = function update() {
            this._inNavbar = this._detectNavbar();
            if (this._popper !== null) {
                this._popper.scheduleUpdate();
            }
        };
        _proto._addEventListeners = function _addEventListeners() {
            var _this = this;
            $(this._element).on(Event$4.CLICK, function (event) {
                event.preventDefault();
                event.stopPropagation();
                _this.toggle();
            });
        };
        _proto._getConfig = function _getConfig(config) {
            config = _objectSpread({}, this.constructor.Default, $(this._element).data(), config);
            Util.typeCheckConfig(NAME$4, config, this.constructor.DefaultType);
            return config;
        };
        _proto._getMenuElement = function _getMenuElement() {
            if (!this._menu) {
                var parent = Dropdown._getParentFromElement(this._element);
                if (parent) {
                    this._menu = parent.querySelector(Selector$4.MENU);
                }
            }
            return this._menu;
        };
        _proto._getPlacement = function _getPlacement() {
            var $parentDropdown = $(this._element.parentNode);
            var placement = AttachmentMap.BOTTOM;
            if ($parentDropdown.hasClass(ClassName$4.DROPUP)) {
                placement = AttachmentMap.TOP;
                if ($(this._menu).hasClass(ClassName$4.MENURIGHT)) {
                    placement = AttachmentMap.TOPEND;
                }
            } else if ($parentDropdown.hasClass(ClassName$4.DROPRIGHT)) {
                placement = AttachmentMap.RIGHT;
            } else if ($parentDropdown.hasClass(ClassName$4.DROPLEFT)) {
                placement = AttachmentMap.LEFT;
            } else if ($(this._menu).hasClass(ClassName$4.MENURIGHT)) {
                placement = AttachmentMap.BOTTOMEND;
            }
            return placement;
        };
        _proto._detectNavbar = function _detectNavbar() {
            return $(this._element).closest('.navbar').length > 0;
        };
        _proto._getOffset = function _getOffset() {
            var _this2 = this;
            var offset = {};
            if (typeof this._config.offset === 'function') {
                offset.fn = function (data) {
                    data.offsets = _objectSpread({}, data.offsets, _this2._config.offset(data.offsets, _this2._element) || {});
                    return data;
                };
            } else {
                offset.offset = this._config.offset;
            }
            return offset;
        };
        _proto._getPopperConfig = function _getPopperConfig() {
            var popperConfig = {
                placement: this._getPlacement(),
                modifiers: {
                    offset: this._getOffset(),
                    flip: { enabled: this._config.flip },
                    preventOverflow: { boundariesElement: this._config.boundary }
                }
            };
            if (this._config.display === 'static') {
                popperConfig.modifiers.applyStyle = { enabled: false };
            }
            return popperConfig;
        };
        Dropdown._jQueryInterface = function _jQueryInterface(config) {
            return this.each(function () {
                var data = $(this).data(DATA_KEY$4);
                var _config = typeof config === 'object' ? config : null;
                if (!data) {
                    data = new Dropdown(this, _config);
                    $(this).data(DATA_KEY$4, data);
                }
                if (typeof config === 'string') {
                    if (typeof data[config] === 'undefined') {
                        throw new TypeError('No method named "' + config + '"');
                    }
                    data[config]();
                }
            });
        };
        Dropdown._clearMenus = function _clearMenus(event) {
            if (event && (event.which === RIGHT_MOUSE_BUTTON_WHICH || event.type === 'keyup' && event.which !== TAB_KEYCODE)) {
                return;
            }
            var toggles = [].slice.call(document.querySelectorAll(Selector$4.DATA_TOGGLE));
            for (var i = 0, len = toggles.length; i < len; i++) {
                var parent = Dropdown._getParentFromElement(toggles[i]);
                var context = $(toggles[i]).data(DATA_KEY$4);
                var relatedTarget = { relatedTarget: toggles[i] };
                if (event && event.type === 'click') {
                    relatedTarget.clickEvent = event;
                }
                if (!context) {
                    continue;
                }
                var dropdownMenu = context._menu;
                if (!$(parent).hasClass(ClassName$4.SHOW)) {
                    continue;
                }
                if (event && (event.type === 'click' && /input|textarea/i.test(event.target.tagName) || event.type === 'keyup' && event.which === TAB_KEYCODE) && $.contains(parent, event.target)) {
                    continue;
                }
                var hideEvent = $.Event(Event$4.HIDE, relatedTarget);
                $(parent).trigger(hideEvent);
                if (hideEvent.isDefaultPrevented()) {
                    continue;
                }
                if ('ontouchstart' in document.documentElement) {
                    $(document.body).children().off('mouseover', null, $.noop);
                }
                toggles[i].setAttribute('aria-expanded', 'false');
                $(dropdownMenu).removeClass(ClassName$4.SHOW);
                $(parent).removeClass(ClassName$4.SHOW).trigger($.Event(Event$4.HIDDEN, relatedTarget));
            }
        };
        Dropdown._getParentFromElement = function _getParentFromElement(element) {
            var parent;
            var selector = Util.getSelectorFromElement(element);
            if (selector) {
                parent = document.querySelector(selector);
            }
            return parent || element.parentNode;
        };
        Dropdown._dataApiKeydownHandler = function _dataApiKeydownHandler(event) {
            if (/input|textarea/i.test(event.target.tagName) ? event.which === SPACE_KEYCODE || event.which !== ESCAPE_KEYCODE && (event.which !== ARROW_DOWN_KEYCODE && event.which !== ARROW_UP_KEYCODE || $(event.target).closest(Selector$4.MENU).length) : !REGEXP_KEYDOWN.test(event.which)) {
                return;
            }
            event.preventDefault();
            event.stopPropagation();
            if (this.disabled || $(this).hasClass(ClassName$4.DISABLED)) {
                return;
            }
            var parent = Dropdown._getParentFromElement(this);
            var isActive = $(parent).hasClass(ClassName$4.SHOW);
            if (!isActive || isActive && (event.which === ESCAPE_KEYCODE || event.which === SPACE_KEYCODE)) {
                if (event.which === ESCAPE_KEYCODE) {
                    var toggle = parent.querySelector(Selector$4.DATA_TOGGLE);
                    $(toggle).trigger('focus');
                }
                $(this).trigger('click');
                return;
            }
            var items = [].slice.call(parent.querySelectorAll(Selector$4.VISIBLE_ITEMS));
            if (items.length === 0) {
                return;
            }
            var index = items.indexOf(event.target);
            if (event.which === ARROW_UP_KEYCODE && index > 0) {
                index--;
            }
            if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {
                index++;
            }
            if (index < 0) {
                index = 0;
            }
            items[index].focus();
        };
        _createClass(Dropdown, null, [
            {
                key: 'VERSION',
                get: function get() {
                    return VERSION$4;
                }
            },
            {
                key: 'Default',
                get: function get() {
                    return Default$2;
                }
            },
            {
                key: 'DefaultType',
                get: function get() {
                    return DefaultType$2;
                }
            }
        ]);
        return Dropdown;
    }();
    $(document).on(Event$4.KEYDOWN_DATA_API, Selector$4.DATA_TOGGLE, Dropdown._dataApiKeydownHandler).on(Event$4.KEYDOWN_DATA_API, Selector$4.MENU, Dropdown._dataApiKeydownHandler).on(Event$4.CLICK_DATA_API + ' ' + Event$4.KEYUP_DATA_API, Dropdown._clearMenus).on(Event$4.CLICK_DATA_API, Selector$4.DATA_TOGGLE, function (event) {
        event.preventDefault();
        event.stopPropagation();
        Dropdown._jQueryInterface.call($(this), 'toggle');
    }).on(Event$4.CLICK_DATA_API, Selector$4.FORM_CHILD, function (e) {
        e.stopPropagation();
    });
    $.fn[NAME$4] = Dropdown._jQueryInterface;
    $.fn[NAME$4].Constructor = Dropdown;
    $.fn[NAME$4].noConflict = function () {
        $.fn[NAME$4] = JQUERY_NO_CONFLICT$4;
        return Dropdown._jQueryInterface;
    };
    var NAME$5 = 'modal';
    var VERSION$5 = '4.3.1';
    var DATA_KEY$5 = 'bs.modal';
    var EVENT_KEY$5 = '.' + DATA_KEY$5;
    var DATA_API_KEY$5 = '.data-api';
    var JQUERY_NO_CONFLICT$5 = $.fn[NAME$5];
    var ESCAPE_KEYCODE$1 = 27;
    var Default$3 = {
        backdrop: true,
        keyboard: true,
        focus: true,
        show: true
    };
    var DefaultType$3 = {
        backdrop: '(boolean|string)',
        keyboard: 'boolean',
        focus: 'boolean',
        show: 'boolean'
    };
    var Event$5 = {
        HIDE: 'hide' + EVENT_KEY$5,
        HIDDEN: 'hidden' + EVENT_KEY$5,
        SHOW: 'show' + EVENT_KEY$5,
        SHOWN: 'shown' + EVENT_KEY$5,
        FOCUSIN: 'focusin' + EVENT_KEY$5,
        RESIZE: 'resize' + EVENT_KEY$5,
        CLICK_DISMISS: 'click.dismiss' + EVENT_KEY$5,
        KEYDOWN_DISMISS: 'keydown.dismiss' + EVENT_KEY$5,
        MOUSEUP_DISMISS: 'mouseup.dismiss' + EVENT_KEY$5,
        MOUSEDOWN_DISMISS: 'mousedown.dismiss' + EVENT_KEY$5,
        CLICK_DATA_API: 'click' + EVENT_KEY$5 + DATA_API_KEY$5
    };
    var ClassName$5 = {
        SCROLLABLE: 'modal-dialog-scrollable',
        SCROLLBAR_MEASURER: 'modal-scrollbar-measure',
        BACKDROP: 'modal-backdrop',
        OPEN: 'modal-open',
        FADE: 'fade',
        SHOW: 'show'
    };
    var Selector$5 = {
        DIALOG: '.modal-dialog',
        MODAL_BODY: '.modal-body',
        DATA_TOGGLE: '[data-toggle="modal"]',
        DATA_DISMISS: '[data-dismiss="modal"]',
        FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',
        STICKY_CONTENT: '.sticky-top'
    };
    var Modal = function () {
        function Modal(element, config) {
            this._config = this._getConfig(config);
            this._element = element;
            this._dialog = element.querySelector(Selector$5.DIALOG);
            this._backdrop = null;
            this._isShown = false;
            this._isBodyOverflowing = false;
            this._ignoreBackdropClick = false;
            this._isTransitioning = false;
            this._scrollbarWidth = 0;
        }
        var _proto = Modal.prototype;
        _proto.toggle = function toggle(relatedTarget) {
            return this._isShown ? this.hide() : this.show(relatedTarget);
        };
        _proto.show = function show(relatedTarget) {
            var _this = this;
            if (this._isShown || this._isTransitioning) {
                return;
            }
            if ($(this._element).hasClass(ClassName$5.FADE)) {
                this._isTransitioning = true;
            }
            var showEvent = $.Event(Event$5.SHOW, { relatedTarget: relatedTarget });
            $(this._element).trigger(showEvent);
            if (this._isShown || showEvent.isDefaultPrevented()) {
                return;
            }
            this._isShown = true;
            this._checkScrollbar();
            this._setScrollbar();
            this._adjustDialog();
            this._setEscapeEvent();
            this._setResizeEvent();
            $(this._element).on(Event$5.CLICK_DISMISS, Selector$5.DATA_DISMISS, function (event) {
                return _this.hide(event);
            });
            $(this._dialog).on(Event$5.MOUSEDOWN_DISMISS, function () {
                $(_this._element).one(Event$5.MOUSEUP_DISMISS, function (event) {
                    if ($(event.target).is(_this._element)) {
                        _this._ignoreBackdropClick = true;
                    }
                });
            });
            this._showBackdrop(function () {
                return _this._showElement(relatedTarget);
            });
        };
        _proto.hide = function hide(event) {
            var _this2 = this;
            if (event) {
                event.preventDefault();
            }
            if (!this._isShown || this._isTransitioning) {
                return;
            }
            var hideEvent = $.Event(Event$5.HIDE);
            $(this._element).trigger(hideEvent);
            if (!this._isShown || hideEvent.isDefaultPrevented()) {
                return;
            }
            this._isShown = false;
            var transition = $(this._element).hasClass(ClassName$5.FADE);
            if (transition) {
                this._isTransitioning = true;
            }
            this._setEscapeEvent();
            this._setResizeEvent();
            $(document).off(Event$5.FOCUSIN);
            $(this._element).removeClass(ClassName$5.SHOW);
            $(this._element).off(Event$5.CLICK_DISMISS);
            $(this._dialog).off(Event$5.MOUSEDOWN_DISMISS);
            if (transition) {
                var transitionDuration = Util.getTransitionDurationFromElement(this._element);
                $(this._element).one(Util.TRANSITION_END, function (event) {
                    return _this2._hideModal(event);
                }).emulateTransitionEnd(transitionDuration);
            } else {
                this._hideModal();
            }
        };
        _proto.dispose = function dispose() {
            [
                window,
                this._element,
                this._dialog
            ].forEach(function (htmlElement) {
                return $(htmlElement).off(EVENT_KEY$5);
            });
            $(document).off(Event$5.FOCUSIN);
            $.removeData(this._element, DATA_KEY$5);
            this._config = null;
            this._element = null;
            this._dialog = null;
            this._backdrop = null;
            this._isShown = null;
            this._isBodyOverflowing = null;
            this._ignoreBackdropClick = null;
            this._isTransitioning = null;
            this._scrollbarWidth = null;
        };
        _proto.handleUpdate = function handleUpdate() {
            this._adjustDialog();
        };
        _proto._getConfig = function _getConfig(config) {
            config = _objectSpread({}, Default$3, config);
            Util.typeCheckConfig(NAME$5, config, DefaultType$3);
            return config;
        };
        _proto._showElement = function _showElement(relatedTarget) {
            var _this3 = this;
            var transition = $(this._element).hasClass(ClassName$5.FADE);
            if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
                document.body.appendChild(this._element);
            }
            this._element.style.display = 'block';
            this._element.removeAttribute('aria-hidden');
            this._element.setAttribute('aria-modal', true);
            if ($(this._dialog).hasClass(ClassName$5.SCROLLABLE)) {
                this._dialog.querySelector(Selector$5.MODAL_BODY).scrollTop = 0;
            } else {
                this._element.scrollTop = 0;
            }
            if (transition) {
                Util.reflow(this._element);
            }
            $(this._element).addClass(ClassName$5.SHOW);
            if (this._config.focus) {
                this._enforceFocus();
            }
            var shownEvent = $.Event(Event$5.SHOWN, { relatedTarget: relatedTarget });
            var transitionComplete = function transitionComplete() {
                if (_this3._config.focus) {
                    _this3._element.focus();
                }
                _this3._isTransitioning = false;
                $(_this3._element).trigger(shownEvent);
            };
            if (transition) {
                var transitionDuration = Util.getTransitionDurationFromElement(this._dialog);
                $(this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(transitionDuration);
            } else {
                transitionComplete();
            }
        };
        _proto._enforceFocus = function _enforceFocus() {
            var _this4 = this;
            $(document).off(Event$5.FOCUSIN).on(Event$5.FOCUSIN, function (event) {
                if (document !== event.target && _this4._element !== event.target && $(_this4._element).has(event.target).length === 0) {
                    _this4._element.focus();
                }
            });
        };
        _proto._setEscapeEvent = function _setEscapeEvent() {
            var _this5 = this;
            if (this._isShown && this._config.keyboard) {
                $(this._element).on(Event$5.KEYDOWN_DISMISS, function (event) {
                    if (event.which === ESCAPE_KEYCODE$1) {
                        event.preventDefault();
                        _this5.hide();
                    }
                });
            } else if (!this._isShown) {
                $(this._element).off(Event$5.KEYDOWN_DISMISS);
            }
        };
        _proto._setResizeEvent = function _setResizeEvent() {
            var _this6 = this;
            if (this._isShown) {
                $(window).on(Event$5.RESIZE, function (event) {
                    return _this6.handleUpdate(event);
                });
            } else {
                $(window).off(Event$5.RESIZE);
            }
        };
        _proto._hideModal = function _hideModal() {
            var _this7 = this;
            this._element.style.display = 'none';
            this._element.setAttribute('aria-hidden', true);
            this._element.removeAttribute('aria-modal');
            this._isTransitioning = false;
            this._showBackdrop(function () {
                $(document.body).removeClass(ClassName$5.OPEN);
                _this7._resetAdjustments();
                _this7._resetScrollbar();
                $(_this7._element).trigger(Event$5.HIDDEN);
            });
        };
        _proto._removeBackdrop = function _removeBackdrop() {
            if (this._backdrop) {
                $(this._backdrop).remove();
                this._backdrop = null;
            }
        };
        _proto._showBackdrop = function _showBackdrop(callback) {
            var _this8 = this;
            var animate = $(this._element).hasClass(ClassName$5.FADE) ? ClassName$5.FADE : '';
            if (this._isShown && this._config.backdrop) {
                this._backdrop = document.createElement('div');
                this._backdrop.className = ClassName$5.BACKDROP;
                if (animate) {
                    this._backdrop.classList.add(animate);
                }
                $(this._backdrop).appendTo(document.body);
                $(this._element).on(Event$5.CLICK_DISMISS, function (event) {
                    if (_this8._ignoreBackdropClick) {
                        _this8._ignoreBackdropClick = false;
                        return;
                    }
                    if (event.target !== event.currentTarget) {
                        return;
                    }
                    if (_this8._config.backdrop === 'static') {
                        _this8._element.focus();
                    } else {
                        _this8.hide();
                    }
                });
                if (animate) {
                    Util.reflow(this._backdrop);
                }
                $(this._backdrop).addClass(ClassName$5.SHOW);
                if (!callback) {
                    return;
                }
                if (!animate) {
                    callback();
                    return;
                }
                var backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);
                $(this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(backdropTransitionDuration);
            } else if (!this._isShown && this._backdrop) {
                $(this._backdrop).removeClass(ClassName$5.SHOW);
                var callbackRemove = function callbackRemove() {
                    _this8._removeBackdrop();
                    if (callback) {
                        callback();
                    }
                };
                if ($(this._element).hasClass(ClassName$5.FADE)) {
                    var _backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);
                    $(this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(_backdropTransitionDuration);
                } else {
                    callbackRemove();
                }
            } else if (callback) {
                callback();
            }
        };
        _proto._adjustDialog = function _adjustDialog() {
            var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
            if (!this._isBodyOverflowing && isModalOverflowing) {
                this._element.style.paddingLeft = this._scrollbarWidth + 'px';
            }
            if (this._isBodyOverflowing && !isModalOverflowing) {
                this._element.style.paddingRight = this._scrollbarWidth + 'px';
            }
        };
        _proto._resetAdjustments = function _resetAdjustments() {
            this._element.style.paddingLeft = '';
            this._element.style.paddingRight = '';
        };
        _proto._checkScrollbar = function _checkScrollbar() {
            var rect = document.body.getBoundingClientRect();
            this._isBodyOverflowing = rect.left + rect.right < window.innerWidth;
            this._scrollbarWidth = this._getScrollbarWidth();
        };
        _proto._setScrollbar = function _setScrollbar() {
            var _this9 = this;
            if (this._isBodyOverflowing) {
                var fixedContent = [].slice.call(document.querySelectorAll(Selector$5.FIXED_CONTENT));
                var stickyContent = [].slice.call(document.querySelectorAll(Selector$5.STICKY_CONTENT));
                $(fixedContent).each(function (index, element) {
                    var actualPadding = element.style.paddingRight;
                    var calculatedPadding = $(element).css('padding-right');
                    $(element).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + _this9._scrollbarWidth + 'px');
                });
                $(stickyContent).each(function (index, element) {
                    var actualMargin = element.style.marginRight;
                    var calculatedMargin = $(element).css('margin-right');
                    $(element).data('margin-right', actualMargin).css('margin-right', parseFloat(calculatedMargin) - _this9._scrollbarWidth + 'px');
                });
                var actualPadding = document.body.style.paddingRight;
                var calculatedPadding = $(document.body).css('padding-right');
                $(document.body).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + this._scrollbarWidth + 'px');
            }
            $(document.body).addClass(ClassName$5.OPEN);
        };
        _proto._resetScrollbar = function _resetScrollbar() {
            var fixedContent = [].slice.call(document.querySelectorAll(Selector$5.FIXED_CONTENT));
            $(fixedContent).each(function (index, element) {
                var padding = $(element).data('padding-right');
                $(element).removeData('padding-right');
                element.style.paddingRight = padding ? padding : '';
            });
            var elements = [].slice.call(document.querySelectorAll('' + Selector$5.STICKY_CONTENT));
            $(elements).each(function (index, element) {
                var margin = $(element).data('margin-right');
                if (typeof margin !== 'undefined') {
                    $(element).css('margin-right', margin).removeData('margin-right');
                }
            });
            var padding = $(document.body).data('padding-right');
            $(document.body).removeData('padding-right');
            document.body.style.paddingRight = padding ? padding : '';
        };
        _proto._getScrollbarWidth = function _getScrollbarWidth() {
            var scrollDiv = document.createElement('div');
            scrollDiv.className = ClassName$5.SCROLLBAR_MEASURER;
            document.body.appendChild(scrollDiv);
            var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
            document.body.removeChild(scrollDiv);
            return scrollbarWidth;
        };
        Modal._jQueryInterface = function _jQueryInterface(config, relatedTarget) {
            return this.each(function () {
                var data = $(this).data(DATA_KEY$5);
                var _config = _objectSpread({}, Default$3, $(this).data(), typeof config === 'object' && config ? config : {});
                if (!data) {
                    data = new Modal(this, _config);
                    $(this).data(DATA_KEY$5, data);
                }
                if (typeof config === 'string') {
                    if (typeof data[config] === 'undefined') {
                        throw new TypeError('No method named "' + config + '"');
                    }
                    data[config](relatedTarget);
                } else if (_config.show) {
                    data.show(relatedTarget);
                }
            });
        };
        _createClass(Modal, null, [
            {
                key: 'VERSION',
                get: function get() {
                    return VERSION$5;
                }
            },
            {
                key: 'Default',
                get: function get() {
                    return Default$3;
                }
            }
        ]);
        return Modal;
    }();
    $(document).on(Event$5.CLICK_DATA_API, Selector$5.DATA_TOGGLE, function (event) {
        var _this10 = this;
        var target;
        var selector = Util.getSelectorFromElement(this);
        if (selector) {
            target = document.querySelector(selector);
        }
        var config = $(target).data(DATA_KEY$5) ? 'toggle' : _objectSpread({}, $(target).data(), $(this).data());
        if (this.tagName === 'A' || this.tagName === 'AREA') {
            event.preventDefault();
        }
        var $target = $(target).one(Event$5.SHOW, function (showEvent) {
            if (showEvent.isDefaultPrevented()) {
                return;
            }
            $target.one(Event$5.HIDDEN, function () {
                if ($(_this10).is(':visible')) {
                    _this10.focus();
                }
            });
        });
        Modal._jQueryInterface.call($(target), config, this);
    });
    $.fn[NAME$5] = Modal._jQueryInterface;
    $.fn[NAME$5].Constructor = Modal;
    $.fn[NAME$5].noConflict = function () {
        $.fn[NAME$5] = JQUERY_NO_CONFLICT$5;
        return Modal._jQueryInterface;
    };
    var uriAttrs = [
        'background',
        'cite',
        'href',
        'itemtype',
        'longdesc',
        'poster',
        'src',
        'xlink:href'
    ];
    var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
    var DefaultWhitelist = {
        '*': [
            'class',
            'dir',
            'id',
            'lang',
            'role',
            ARIA_ATTRIBUTE_PATTERN
        ],
        a: [
            'target',
            'href',
            'title',
            'rel'
        ],
        area: [],
        b: [],
        br: [],
        col: [],
        code: [],
        div: [],
        em: [],
        hr: [],
        h1: [],
        h2: [],
        h3: [],
        h4: [],
        h5: [],
        h6: [],
        i: [],
        img: [
            'src',
            'alt',
            'title',
            'width',
            'height'
        ],
        li: [],
        ol: [],
        p: [],
        pre: [],
        s: [],
        small: [],
        span: [],
        sub: [],
        sup: [],
        strong: [],
        u: [],
        ul: []
    };
    var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
    var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;
    function allowedAttribute(attr, allowedAttributeList) {
        var attrName = attr.nodeName.toLowerCase();
        if (allowedAttributeList.indexOf(attrName) !== -1) {
            if (uriAttrs.indexOf(attrName) !== -1) {
                return Boolean(attr.nodeValue.match(SAFE_URL_PATTERN) || attr.nodeValue.match(DATA_URL_PATTERN));
            }
            return true;
        }
        var regExp = allowedAttributeList.filter(function (attrRegex) {
            return attrRegex instanceof RegExp;
        });
        for (var i = 0, l = regExp.length; i < l; i++) {
            if (attrName.match(regExp[i])) {
                return true;
            }
        }
        return false;
    }
    function sanitizeHtml(unsafeHtml, whiteList, sanitizeFn) {
        if (unsafeHtml.length === 0) {
            return unsafeHtml;
        }
        if (sanitizeFn && typeof sanitizeFn === 'function') {
            return sanitizeFn(unsafeHtml);
        }
        var domParser = new window.DOMParser();
        var createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');
        var whitelistKeys = Object.keys(whiteList);
        var elements = [].slice.call(createdDocument.body.querySelectorAll('*'));
        var _loop = function _loop(i, len) {
            var el = elements[i];
            var elName = el.nodeName.toLowerCase();
            if (whitelistKeys.indexOf(el.nodeName.toLowerCase()) === -1) {
                el.parentNode.removeChild(el);
                return 'continue';
            }
            var attributeList = [].slice.call(el.attributes);
            var whitelistedAttributes = [].concat(whiteList['*'] || [], whiteList[elName] || []);
            attributeList.forEach(function (attr) {
                if (!allowedAttribute(attr, whitelistedAttributes)) {
                    el.removeAttribute(attr.nodeName);
                }
            });
        };
        for (var i = 0, len = elements.length; i < len; i++) {
            var _ret = _loop(i, len);
            if (_ret === 'continue')
                continue;
        }
        return createdDocument.body.innerHTML;
    }
    var NAME$6 = 'tooltip';
    var VERSION$6 = '4.3.1';
    var DATA_KEY$6 = 'bs.tooltip';
    var EVENT_KEY$6 = '.' + DATA_KEY$6;
    var JQUERY_NO_CONFLICT$6 = $.fn[NAME$6];
    var CLASS_PREFIX = 'bs-tooltip';
    var BSCLS_PREFIX_REGEX = new RegExp('(^|\\s)' + CLASS_PREFIX + '\\S+', 'g');
    var DISALLOWED_ATTRIBUTES = [
        'sanitize',
        'whiteList',
        'sanitizeFn'
    ];
    var DefaultType$4 = {
        animation: 'boolean',
        template: 'string',
        title: '(string|element|function)',
        trigger: 'string',
        delay: '(number|object)',
        html: 'boolean',
        selector: '(string|boolean)',
        placement: '(string|function)',
        offset: '(number|string|function)',
        container: '(string|element|boolean)',
        fallbackPlacement: '(string|array)',
        boundary: '(string|element)',
        sanitize: 'boolean',
        sanitizeFn: '(null|function)',
        whiteList: 'object'
    };
    var AttachmentMap$1 = {
        AUTO: 'auto',
        TOP: 'top',
        RIGHT: 'right',
        BOTTOM: 'bottom',
        LEFT: 'left'
    };
    var Default$4 = {
        animation: true,
        template: '<div class="tooltip" role="tooltip">' + '<div class="arrow"></div>' + '<div class="tooltip-inner"></div></div>',
        trigger: 'hover focus',
        title: '',
        delay: 0,
        html: false,
        selector: false,
        placement: 'top',
        offset: 0,
        container: false,
        fallbackPlacement: 'flip',
        boundary: 'scrollParent',
        sanitize: true,
        sanitizeFn: null,
        whiteList: DefaultWhitelist
    };
    var HoverState = {
        SHOW: 'show',
        OUT: 'out'
    };
    var Event$6 = {
        HIDE: 'hide' + EVENT_KEY$6,
        HIDDEN: 'hidden' + EVENT_KEY$6,
        SHOW: 'show' + EVENT_KEY$6,
        SHOWN: 'shown' + EVENT_KEY$6,
        INSERTED: 'inserted' + EVENT_KEY$6,
        CLICK: 'click' + EVENT_KEY$6,
        FOCUSIN: 'focusin' + EVENT_KEY$6,
        FOCUSOUT: 'focusout' + EVENT_KEY$6,
        MOUSEENTER: 'mouseenter' + EVENT_KEY$6,
        MOUSELEAVE: 'mouseleave' + EVENT_KEY$6
    };
    var ClassName$6 = {
        FADE: 'fade',
        SHOW: 'show'
    };
    var Selector$6 = {
        TOOLTIP: '.tooltip',
        TOOLTIP_INNER: '.tooltip-inner',
        ARROW: '.arrow'
    };
    var Trigger = {
        HOVER: 'hover',
        FOCUS: 'focus',
        CLICK: 'click',
        MANUAL: 'manual'
    };
    var Tooltip = function () {
        function Tooltip(element, config) {
            if (typeof Popper === 'undefined') {
                throw new TypeError('Bootstrap\'s tooltips require Popper.js (https://popper.js.org/)');
            }
            this._isEnabled = true;
            this._timeout = 0;
            this._hoverState = '';
            this._activeTrigger = {};
            this._popper = null;
            this.element = element;
            this.config = this._getConfig(config);
            this.tip = null;
            this._setListeners();
        }
        var _proto = Tooltip.prototype;
        _proto.enable = function enable() {
            this._isEnabled = true;
        };
        _proto.disable = function disable() {
            this._isEnabled = false;
        };
        _proto.toggleEnabled = function toggleEnabled() {
            this._isEnabled = !this._isEnabled;
        };
        _proto.toggle = function toggle(event) {
            if (!this._isEnabled) {
                return;
            }
            if (event) {
                var dataKey = this.constructor.DATA_KEY;
                var context = $(event.currentTarget).data(dataKey);
                if (!context) {
                    context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                    $(event.currentTarget).data(dataKey, context);
                }
                context._activeTrigger.click = !context._activeTrigger.click;
                if (context._isWithActiveTrigger()) {
                    context._enter(null, context);
                } else {
                    context._leave(null, context);
                }
            } else {
                if ($(this.getTipElement()).hasClass(ClassName$6.SHOW)) {
                    this._leave(null, this);
                    return;
                }
                this._enter(null, this);
            }
        };
        _proto.dispose = function dispose() {
            clearTimeout(this._timeout);
            $.removeData(this.element, this.constructor.DATA_KEY);
            $(this.element).off(this.constructor.EVENT_KEY);
            $(this.element).closest('.modal').off('hide.bs.modal');
            if (this.tip) {
                $(this.tip).remove();
            }
            this._isEnabled = null;
            this._timeout = null;
            this._hoverState = null;
            this._activeTrigger = null;
            if (this._popper !== null) {
                this._popper.destroy();
            }
            this._popper = null;
            this.element = null;
            this.config = null;
            this.tip = null;
        };
        _proto.show = function show() {
            var _this = this;
            if ($(this.element).css('display') === 'none') {
                throw new Error('Please use show on visible elements');
            }
            var showEvent = $.Event(this.constructor.Event.SHOW);
            if (this.isWithContent() && this._isEnabled) {
                $(this.element).trigger(showEvent);
                var shadowRoot = Util.findShadowRoot(this.element);
                var isInTheDom = $.contains(shadowRoot !== null ? shadowRoot : this.element.ownerDocument.documentElement, this.element);
                if (showEvent.isDefaultPrevented() || !isInTheDom) {
                    return;
                }
                var tip = this.getTipElement();
                var tipId = Util.getUID(this.constructor.NAME);
                tip.setAttribute('id', tipId);
                this.element.setAttribute('aria-describedby', tipId);
                this.setContent();
                if (this.config.animation) {
                    $(tip).addClass(ClassName$6.FADE);
                }
                var placement = typeof this.config.placement === 'function' ? this.config.placement.call(this, tip, this.element) : this.config.placement;
                var attachment = this._getAttachment(placement);
                this.addAttachmentClass(attachment);
                var container = this._getContainer();
                $(tip).data(this.constructor.DATA_KEY, this);
                if (!$.contains(this.element.ownerDocument.documentElement, this.tip)) {
                    $(tip).appendTo(container);
                }
                $(this.element).trigger(this.constructor.Event.INSERTED);
                this._popper = new Popper(this.element, tip, {
                    placement: attachment,
                    modifiers: {
                        offset: this._getOffset(),
                        flip: { behavior: this.config.fallbackPlacement },
                        arrow: { element: Selector$6.ARROW },
                        preventOverflow: { boundariesElement: this.config.boundary }
                    },
                    onCreate: function onCreate(data) {
                        if (data.originalPlacement !== data.placement) {
                            _this._handlePopperPlacementChange(data);
                        }
                    },
                    onUpdate: function onUpdate(data) {
                        return _this._handlePopperPlacementChange(data);
                    }
                });
                $(tip).addClass(ClassName$6.SHOW);
                if ('ontouchstart' in document.documentElement) {
                    $(document.body).children().on('mouseover', null, $.noop);
                }
                var complete = function complete() {
                    if (_this.config.animation) {
                        _this._fixTransition();
                    }
                    var prevHoverState = _this._hoverState;
                    _this._hoverState = null;
                    $(_this.element).trigger(_this.constructor.Event.SHOWN);
                    if (prevHoverState === HoverState.OUT) {
                        _this._leave(null, _this);
                    }
                };
                if ($(this.tip).hasClass(ClassName$6.FADE)) {
                    var transitionDuration = Util.getTransitionDurationFromElement(this.tip);
                    $(this.tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
                } else {
                    complete();
                }
            }
        };
        _proto.hide = function hide(callback) {
            var _this2 = this;
            var tip = this.getTipElement();
            var hideEvent = $.Event(this.constructor.Event.HIDE);
            var complete = function complete() {
                if (_this2._hoverState !== HoverState.SHOW && tip.parentNode) {
                    tip.parentNode.removeChild(tip);
                }
                _this2._cleanTipClass();
                _this2.element.removeAttribute('aria-describedby');
                $(_this2.element).trigger(_this2.constructor.Event.HIDDEN);
                if (_this2._popper !== null) {
                    _this2._popper.destroy();
                }
                if (callback) {
                    callback();
                }
            };
            $(this.element).trigger(hideEvent);
            if (hideEvent.isDefaultPrevented()) {
                return;
            }
            $(tip).removeClass(ClassName$6.SHOW);
            if ('ontouchstart' in document.documentElement) {
                $(document.body).children().off('mouseover', null, $.noop);
            }
            this._activeTrigger[Trigger.CLICK] = false;
            this._activeTrigger[Trigger.FOCUS] = false;
            this._activeTrigger[Trigger.HOVER] = false;
            if ($(this.tip).hasClass(ClassName$6.FADE)) {
                var transitionDuration = Util.getTransitionDurationFromElement(tip);
                $(tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
            } else {
                complete();
            }
            this._hoverState = '';
        };
        _proto.update = function update() {
            if (this._popper !== null) {
                this._popper.scheduleUpdate();
            }
        };
        _proto.isWithContent = function isWithContent() {
            return Boolean(this.getTitle());
        };
        _proto.addAttachmentClass = function addAttachmentClass(attachment) {
            $(this.getTipElement()).addClass(CLASS_PREFIX + '-' + attachment);
        };
        _proto.getTipElement = function getTipElement() {
            this.tip = this.tip || $(this.config.template)[0];
            return this.tip;
        };
        _proto.setContent = function setContent() {
            var tip = this.getTipElement();
            this.setElementContent($(tip.querySelectorAll(Selector$6.TOOLTIP_INNER)), this.getTitle());
            $(tip).removeClass(ClassName$6.FADE + ' ' + ClassName$6.SHOW);
        };
        _proto.setElementContent = function setElementContent($element, content) {
            if (typeof content === 'object' && (content.nodeType || content.jquery)) {
                if (this.config.html) {
                    if (!$(content).parent().is($element)) {
                        $element.empty().append(content);
                    }
                } else {
                    $element.text($(content).text());
                }
                return;
            }
            if (this.config.html) {
                if (this.config.sanitize) {
                    content = sanitizeHtml(content, this.config.whiteList, this.config.sanitizeFn);
                }
                $element.html(content);
            } else {
                $element.text(content);
            }
        };
        _proto.getTitle = function getTitle() {
            var title = this.element.getAttribute('data-original-title');
            if (!title) {
                title = typeof this.config.title === 'function' ? this.config.title.call(this.element) : this.config.title;
            }
            return title;
        };
        _proto._getOffset = function _getOffset() {
            var _this3 = this;
            var offset = {};
            if (typeof this.config.offset === 'function') {
                offset.fn = function (data) {
                    data.offsets = _objectSpread({}, data.offsets, _this3.config.offset(data.offsets, _this3.element) || {});
                    return data;
                };
            } else {
                offset.offset = this.config.offset;
            }
            return offset;
        };
        _proto._getContainer = function _getContainer() {
            if (this.config.container === false) {
                return document.body;
            }
            if (Util.isElement(this.config.container)) {
                return $(this.config.container);
            }
            return $(document).find(this.config.container);
        };
        _proto._getAttachment = function _getAttachment(placement) {
            return AttachmentMap$1[placement.toUpperCase()];
        };
        _proto._setListeners = function _setListeners() {
            var _this4 = this;
            var triggers = this.config.trigger.split(' ');
            triggers.forEach(function (trigger) {
                if (trigger === 'click') {
                    $(_this4.element).on(_this4.constructor.Event.CLICK, _this4.config.selector, function (event) {
                        return _this4.toggle(event);
                    });
                } else if (trigger !== Trigger.MANUAL) {
                    var eventIn = trigger === Trigger.HOVER ? _this4.constructor.Event.MOUSEENTER : _this4.constructor.Event.FOCUSIN;
                    var eventOut = trigger === Trigger.HOVER ? _this4.constructor.Event.MOUSELEAVE : _this4.constructor.Event.FOCUSOUT;
                    $(_this4.element).on(eventIn, _this4.config.selector, function (event) {
                        return _this4._enter(event);
                    }).on(eventOut, _this4.config.selector, function (event) {
                        return _this4._leave(event);
                    });
                }
            });
            $(this.element).closest('.modal').on('hide.bs.modal', function () {
                if (_this4.element) {
                    _this4.hide();
                }
            });
            if (this.config.selector) {
                this.config = _objectSpread({}, this.config, {
                    trigger: 'manual',
                    selector: ''
                });
            } else {
                this._fixTitle();
            }
        };
        _proto._fixTitle = function _fixTitle() {
            var titleType = typeof this.element.getAttribute('data-original-title');
            if (this.element.getAttribute('title') || titleType !== 'string') {
                this.element.setAttribute('data-original-title', this.element.getAttribute('title') || '');
                this.element.setAttribute('title', '');
            }
        };
        _proto._enter = function _enter(event, context) {
            var dataKey = this.constructor.DATA_KEY;
            context = context || $(event.currentTarget).data(dataKey);
            if (!context) {
                context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                $(event.currentTarget).data(dataKey, context);
            }
            if (event) {
                context._activeTrigger[event.type === 'focusin' ? Trigger.FOCUS : Trigger.HOVER] = true;
            }
            if ($(context.getTipElement()).hasClass(ClassName$6.SHOW) || context._hoverState === HoverState.SHOW) {
                context._hoverState = HoverState.SHOW;
                return;
            }
            clearTimeout(context._timeout);
            context._hoverState = HoverState.SHOW;
            if (!context.config.delay || !context.config.delay.show) {
                context.show();
                return;
            }
            context._timeout = setTimeout(function () {
                if (context._hoverState === HoverState.SHOW) {
                    context.show();
                }
            }, context.config.delay.show);
        };
        _proto._leave = function _leave(event, context) {
            var dataKey = this.constructor.DATA_KEY;
            context = context || $(event.currentTarget).data(dataKey);
            if (!context) {
                context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                $(event.currentTarget).data(dataKey, context);
            }
            if (event) {
                context._activeTrigger[event.type === 'focusout' ? Trigger.FOCUS : Trigger.HOVER] = false;
            }
            if (context._isWithActiveTrigger()) {
                return;
            }
            clearTimeout(context._timeout);
            context._hoverState = HoverState.OUT;
            if (!context.config.delay || !context.config.delay.hide) {
                context.hide();
                return;
            }
            context._timeout = setTimeout(function () {
                if (context._hoverState === HoverState.OUT) {
                    context.hide();
                }
            }, context.config.delay.hide);
        };
        _proto._isWithActiveTrigger = function _isWithActiveTrigger() {
            for (var trigger in this._activeTrigger) {
                if (this._activeTrigger[trigger]) {
                    return true;
                }
            }
            return false;
        };
        _proto._getConfig = function _getConfig(config) {
            var dataAttributes = $(this.element).data();
            Object.keys(dataAttributes).forEach(function (dataAttr) {
                if (DISALLOWED_ATTRIBUTES.indexOf(dataAttr) !== -1) {
                    delete dataAttributes[dataAttr];
                }
            });
            config = _objectSpread({}, this.constructor.Default, dataAttributes, typeof config === 'object' && config ? config : {});
            if (typeof config.delay === 'number') {
                config.delay = {
                    show: config.delay,
                    hide: config.delay
                };
            }
            if (typeof config.title === 'number') {
                config.title = config.title.toString();
            }
            if (typeof config.content === 'number') {
                config.content = config.content.toString();
            }
            Util.typeCheckConfig(NAME$6, config, this.constructor.DefaultType);
            if (config.sanitize) {
                config.template = sanitizeHtml(config.template, config.whiteList, config.sanitizeFn);
            }
            return config;
        };
        _proto._getDelegateConfig = function _getDelegateConfig() {
            var config = {};
            if (this.config) {
                for (var key in this.config) {
                    if (this.constructor.Default[key] !== this.config[key]) {
                        config[key] = this.config[key];
                    }
                }
            }
            return config;
        };
        _proto._cleanTipClass = function _cleanTipClass() {
            var $tip = $(this.getTipElement());
            var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);
            if (tabClass !== null && tabClass.length) {
                $tip.removeClass(tabClass.join(''));
            }
        };
        _proto._handlePopperPlacementChange = function _handlePopperPlacementChange(popperData) {
            var popperInstance = popperData.instance;
            this.tip = popperInstance.popper;
            this._cleanTipClass();
            this.addAttachmentClass(this._getAttachment(popperData.placement));
        };
        _proto._fixTransition = function _fixTransition() {
            var tip = this.getTipElement();
            var initConfigAnimation = this.config.animation;
            if (tip.getAttribute('x-placement') !== null) {
                return;
            }
            $(tip).removeClass(ClassName$6.FADE);
            this.config.animation = false;
            this.hide();
            this.show();
            this.config.animation = initConfigAnimation;
        };
        Tooltip._jQueryInterface = function _jQueryInterface(config) {
            return this.each(function () {
                var data = $(this).data(DATA_KEY$6);
                var _config = typeof config === 'object' && config;
                if (!data && /dispose|hide/.test(config)) {
                    return;
                }
                if (!data) {
                    data = new Tooltip(this, _config);
                    $(this).data(DATA_KEY$6, data);
                }
                if (typeof config === 'string') {
                    if (typeof data[config] === 'undefined') {
                        throw new TypeError('No method named "' + config + '"');
                    }
                    data[config]();
                }
            });
        };
        _createClass(Tooltip, null, [
            {
                key: 'VERSION',
                get: function get() {
                    return VERSION$6;
                }
            },
            {
                key: 'Default',
                get: function get() {
                    return Default$4;
                }
            },
            {
                key: 'NAME',
                get: function get() {
                    return NAME$6;
                }
            },
            {
                key: 'DATA_KEY',
                get: function get() {
                    return DATA_KEY$6;
                }
            },
            {
                key: 'Event',
                get: function get() {
                    return Event$6;
                }
            },
            {
                key: 'EVENT_KEY',
                get: function get() {
                    return EVENT_KEY$6;
                }
            },
            {
                key: 'DefaultType',
                get: function get() {
                    return DefaultType$4;
                }
            }
        ]);
        return Tooltip;
    }();
    $.fn[NAME$6] = Tooltip._jQueryInterface;
    $.fn[NAME$6].Constructor = Tooltip;
    $.fn[NAME$6].noConflict = function () {
        $.fn[NAME$6] = JQUERY_NO_CONFLICT$6;
        return Tooltip._jQueryInterface;
    };
    var NAME$7 = 'popover';
    var VERSION$7 = '4.3.1';
    var DATA_KEY$7 = 'bs.popover';
    var EVENT_KEY$7 = '.' + DATA_KEY$7;
    var JQUERY_NO_CONFLICT$7 = $.fn[NAME$7];
    var CLASS_PREFIX$1 = 'bs-popover';
    var BSCLS_PREFIX_REGEX$1 = new RegExp('(^|\\s)' + CLASS_PREFIX$1 + '\\S+', 'g');
    var Default$5 = _objectSpread({}, Tooltip.Default, {
        placement: 'right',
        trigger: 'click',
        content: '',
        template: '<div class="popover" role="tooltip">' + '<div class="arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div></div>'
    });
    var DefaultType$5 = _objectSpread({}, Tooltip.DefaultType, { content: '(string|element|function)' });
    var ClassName$7 = {
        FADE: 'fade',
        SHOW: 'show'
    };
    var Selector$7 = {
        TITLE: '.popover-header',
        CONTENT: '.popover-body'
    };
    var Event$7 = {
        HIDE: 'hide' + EVENT_KEY$7,
        HIDDEN: 'hidden' + EVENT_KEY$7,
        SHOW: 'show' + EVENT_KEY$7,
        SHOWN: 'shown' + EVENT_KEY$7,
        INSERTED: 'inserted' + EVENT_KEY$7,
        CLICK: 'click' + EVENT_KEY$7,
        FOCUSIN: 'focusin' + EVENT_KEY$7,
        FOCUSOUT: 'focusout' + EVENT_KEY$7,
        MOUSEENTER: 'mouseenter' + EVENT_KEY$7,
        MOUSELEAVE: 'mouseleave' + EVENT_KEY$7
    };
    var Popover = function (_Tooltip) {
        _inheritsLoose(Popover, _Tooltip);
        function Popover() {
            return _Tooltip.apply(this, arguments) || this;
        }
        var _proto = Popover.prototype;
        _proto.isWithContent = function isWithContent() {
            return this.getTitle() || this._getContent();
        };
        _proto.addAttachmentClass = function addAttachmentClass(attachment) {
            $(this.getTipElement()).addClass(CLASS_PREFIX$1 + '-' + attachment);
        };
        _proto.getTipElement = function getTipElement() {
            this.tip = this.tip || $(this.config.template)[0];
            return this.tip;
        };
        _proto.setContent = function setContent() {
            var $tip = $(this.getTipElement());
            this.setElementContent($tip.find(Selector$7.TITLE), this.getTitle());
            var content = this._getContent();
            if (typeof content === 'function') {
                content = content.call(this.element);
            }
            this.setElementContent($tip.find(Selector$7.CONTENT), content);
            $tip.removeClass(ClassName$7.FADE + ' ' + ClassName$7.SHOW);
        };
        _proto._getContent = function _getContent() {
            return this.element.getAttribute('data-content') || this.config.content;
        };
        _proto._cleanTipClass = function _cleanTipClass() {
            var $tip = $(this.getTipElement());
            var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX$1);
            if (tabClass !== null && tabClass.length > 0) {
                $tip.removeClass(tabClass.join(''));
            }
        };
        Popover._jQueryInterface = function _jQueryInterface(config) {
            return this.each(function () {
                var data = $(this).data(DATA_KEY$7);
                var _config = typeof config === 'object' ? config : null;
                if (!data && /dispose|hide/.test(config)) {
                    return;
                }
                if (!data) {
                    data = new Popover(this, _config);
                    $(this).data(DATA_KEY$7, data);
                }
                if (typeof config === 'string') {
                    if (typeof data[config] === 'undefined') {
                        throw new TypeError('No method named "' + config + '"');
                    }
                    data[config]();
                }
            });
        };
        _createClass(Popover, null, [
            {
                key: 'VERSION',
                get: function get() {
                    return VERSION$7;
                }
            },
            {
                key: 'Default',
                get: function get() {
                    return Default$5;
                }
            },
            {
                key: 'NAME',
                get: function get() {
                    return NAME$7;
                }
            },
            {
                key: 'DATA_KEY',
                get: function get() {
                    return DATA_KEY$7;
                }
            },
            {
                key: 'Event',
                get: function get() {
                    return Event$7;
                }
            },
            {
                key: 'EVENT_KEY',
                get: function get() {
                    return EVENT_KEY$7;
                }
            },
            {
                key: 'DefaultType',
                get: function get() {
                    return DefaultType$5;
                }
            }
        ]);
        return Popover;
    }(Tooltip);
    $.fn[NAME$7] = Popover._jQueryInterface;
    $.fn[NAME$7].Constructor = Popover;
    $.fn[NAME$7].noConflict = function () {
        $.fn[NAME$7] = JQUERY_NO_CONFLICT$7;
        return Popover._jQueryInterface;
    };
    var NAME$8 = 'scrollspy';
    var VERSION$8 = '4.3.1';
    var DATA_KEY$8 = 'bs.scrollspy';
    var EVENT_KEY$8 = '.' + DATA_KEY$8;
    var DATA_API_KEY$6 = '.data-api';
    var JQUERY_NO_CONFLICT$8 = $.fn[NAME$8];
    var Default$6 = {
        offset: 10,
        method: 'auto',
        target: ''
    };
    var DefaultType$6 = {
        offset: 'number',
        method: 'string',
        target: '(string|element)'
    };
    var Event$8 = {
        ACTIVATE: 'activate' + EVENT_KEY$8,
        SCROLL: 'scroll' + EVENT_KEY$8,
        LOAD_DATA_API: 'load' + EVENT_KEY$8 + DATA_API_KEY$6
    };
    var ClassName$8 = {
        DROPDOWN_ITEM: 'dropdown-item',
        DROPDOWN_MENU: 'dropdown-menu',
        ACTIVE: 'active'
    };
    var Selector$8 = {
        DATA_SPY: '[data-spy="scroll"]',
        ACTIVE: '.active',
        NAV_LIST_GROUP: '.nav, .list-group',
        NAV_LINKS: '.nav-link',
        NAV_ITEMS: '.nav-item',
        LIST_ITEMS: '.list-group-item',
        DROPDOWN: '.dropdown',
        DROPDOWN_ITEMS: '.dropdown-item',
        DROPDOWN_TOGGLE: '.dropdown-toggle'
    };
    var OffsetMethod = {
        OFFSET: 'offset',
        POSITION: 'position'
    };
    var ScrollSpy = function () {
        function ScrollSpy(element, config) {
            var _this = this;
            this._element = element;
            this._scrollElement = element.tagName === 'BODY' ? window : element;
            this._config = this._getConfig(config);
            this._selector = this._config.target + ' ' + Selector$8.NAV_LINKS + ',' + (this._config.target + ' ' + Selector$8.LIST_ITEMS + ',') + (this._config.target + ' ' + Selector$8.DROPDOWN_ITEMS);
            this._offsets = [];
            this._targets = [];
            this._activeTarget = null;
            this._scrollHeight = 0;
            $(this._scrollElement).on(Event$8.SCROLL, function (event) {
                return _this._process(event);
            });
            this.refresh();
            this._process();
        }
        var _proto = ScrollSpy.prototype;
        _proto.refresh = function refresh() {
            var _this2 = this;
            var autoMethod = this._scrollElement === this._scrollElement.window ? OffsetMethod.OFFSET : OffsetMethod.POSITION;
            var offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;
            var offsetBase = offsetMethod === OffsetMethod.POSITION ? this._getScrollTop() : 0;
            this._offsets = [];
            this._targets = [];
            this._scrollHeight = this._getScrollHeight();
            var targets = [].slice.call(document.querySelectorAll(this._selector));
            targets.map(function (element) {
                var target;
                var targetSelector = Util.getSelectorFromElement(element);
                if (targetSelector) {
                    target = document.querySelector(targetSelector);
                }
                if (target) {
                    var targetBCR = target.getBoundingClientRect();
                    if (targetBCR.width || targetBCR.height) {
                        return [
                            $(target)[offsetMethod]().top + offsetBase,
                            targetSelector
                        ];
                    }
                }
                return null;
            }).filter(function (item) {
                return item;
            }).sort(function (a, b) {
                return a[0] - b[0];
            }).forEach(function (item) {
                _this2._offsets.push(item[0]);
                _this2._targets.push(item[1]);
            });
        };
        _proto.dispose = function dispose() {
            $.removeData(this._element, DATA_KEY$8);
            $(this._scrollElement).off(EVENT_KEY$8);
            this._element = null;
            this._scrollElement = null;
            this._config = null;
            this._selector = null;
            this._offsets = null;
            this._targets = null;
            this._activeTarget = null;
            this._scrollHeight = null;
        };
        _proto._getConfig = function _getConfig(config) {
            config = _objectSpread({}, Default$6, typeof config === 'object' && config ? config : {});
            if (typeof config.target !== 'string') {
                var id = $(config.target).attr('id');
                if (!id) {
                    id = Util.getUID(NAME$8);
                    $(config.target).attr('id', id);
                }
                config.target = '#' + id;
            }
            Util.typeCheckConfig(NAME$8, config, DefaultType$6);
            return config;
        };
        _proto._getScrollTop = function _getScrollTop() {
            return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
        };
        _proto._getScrollHeight = function _getScrollHeight() {
            return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
        };
        _proto._getOffsetHeight = function _getOffsetHeight() {
            return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
        };
        _proto._process = function _process() {
            var scrollTop = this._getScrollTop() + this._config.offset;
            var scrollHeight = this._getScrollHeight();
            var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();
            if (this._scrollHeight !== scrollHeight) {
                this.refresh();
            }
            if (scrollTop >= maxScroll) {
                var target = this._targets[this._targets.length - 1];
                if (this._activeTarget !== target) {
                    this._activate(target);
                }
                return;
            }
            if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
                this._activeTarget = null;
                this._clear();
                return;
            }
            var offsetLength = this._offsets.length;
            for (var i = offsetLength; i--;) {
                var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);
                if (isActiveTarget) {
                    this._activate(this._targets[i]);
                }
            }
        };
        _proto._activate = function _activate(target) {
            this._activeTarget = target;
            this._clear();
            var queries = this._selector.split(',').map(function (selector) {
                return selector + '[data-target="' + target + '"],' + selector + '[href="' + target + '"]';
            });
            var $link = $([].slice.call(document.querySelectorAll(queries.join(','))));
            if ($link.hasClass(ClassName$8.DROPDOWN_ITEM)) {
                $link.closest(Selector$8.DROPDOWN).find(Selector$8.DROPDOWN_TOGGLE).addClass(ClassName$8.ACTIVE);
                $link.addClass(ClassName$8.ACTIVE);
            } else {
                $link.addClass(ClassName$8.ACTIVE);
                $link.parents(Selector$8.NAV_LIST_GROUP).prev(Selector$8.NAV_LINKS + ', ' + Selector$8.LIST_ITEMS).addClass(ClassName$8.ACTIVE);
                $link.parents(Selector$8.NAV_LIST_GROUP).prev(Selector$8.NAV_ITEMS).children(Selector$8.NAV_LINKS).addClass(ClassName$8.ACTIVE);
            }
            $(this._scrollElement).trigger(Event$8.ACTIVATE, { relatedTarget: target });
        };
        _proto._clear = function _clear() {
            [].slice.call(document.querySelectorAll(this._selector)).filter(function (node) {
                return node.classList.contains(ClassName$8.ACTIVE);
            }).forEach(function (node) {
                return node.classList.remove(ClassName$8.ACTIVE);
            });
        };
        ScrollSpy._jQueryInterface = function _jQueryInterface(config) {
            return this.each(function () {
                var data = $(this).data(DATA_KEY$8);
                var _config = typeof config === 'object' && config;
                if (!data) {
                    data = new ScrollSpy(this, _config);
                    $(this).data(DATA_KEY$8, data);
                }
                if (typeof config === 'string') {
                    if (typeof data[config] === 'undefined') {
                        throw new TypeError('No method named "' + config + '"');
                    }
                    data[config]();
                }
            });
        };
        _createClass(ScrollSpy, null, [
            {
                key: 'VERSION',
                get: function get() {
                    return VERSION$8;
                }
            },
            {
                key: 'Default',
                get: function get() {
                    return Default$6;
                }
            }
        ]);
        return ScrollSpy;
    }();
    $(window).on(Event$8.LOAD_DATA_API, function () {
        var scrollSpys = [].slice.call(document.querySelectorAll(Selector$8.DATA_SPY));
        var scrollSpysLength = scrollSpys.length;
        for (var i = scrollSpysLength; i--;) {
            var $spy = $(scrollSpys[i]);
            ScrollSpy._jQueryInterface.call($spy, $spy.data());
        }
    });
    $.fn[NAME$8] = ScrollSpy._jQueryInterface;
    $.fn[NAME$8].Constructor = ScrollSpy;
    $.fn[NAME$8].noConflict = function () {
        $.fn[NAME$8] = JQUERY_NO_CONFLICT$8;
        return ScrollSpy._jQueryInterface;
    };
    var NAME$9 = 'tab';
    var VERSION$9 = '4.3.1';
    var DATA_KEY$9 = 'bs.tab';
    var EVENT_KEY$9 = '.' + DATA_KEY$9;
    var DATA_API_KEY$7 = '.data-api';
    var JQUERY_NO_CONFLICT$9 = $.fn[NAME$9];
    var Event$9 = {
        HIDE: 'hide' + EVENT_KEY$9,
        HIDDEN: 'hidden' + EVENT_KEY$9,
        SHOW: 'show' + EVENT_KEY$9,
        SHOWN: 'shown' + EVENT_KEY$9,
        CLICK_DATA_API: 'click' + EVENT_KEY$9 + DATA_API_KEY$7
    };
    var ClassName$9 = {
        DROPDOWN_MENU: 'dropdown-menu',
        ACTIVE: 'active',
        DISABLED: 'disabled',
        FADE: 'fade',
        SHOW: 'show'
    };
    var Selector$9 = {
        DROPDOWN: '.dropdown',
        NAV_LIST_GROUP: '.nav, .list-group',
        ACTIVE: '.active',
        ACTIVE_UL: '> li > .active',
        DATA_TOGGLE: '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',
        DROPDOWN_TOGGLE: '.dropdown-toggle',
        DROPDOWN_ACTIVE_CHILD: '> .dropdown-menu .active'
    };
    var Tab = function () {
        function Tab(element) {
            this._element = element;
        }
        var _proto = Tab.prototype;
        _proto.show = function show() {
            var _this = this;
            if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && $(this._element).hasClass(ClassName$9.ACTIVE) || $(this._element).hasClass(ClassName$9.DISABLED)) {
                return;
            }
            var target;
            var previous;
            var listElement = $(this._element).closest(Selector$9.NAV_LIST_GROUP)[0];
            var selector = Util.getSelectorFromElement(this._element);
            if (listElement) {
                var itemSelector = listElement.nodeName === 'UL' || listElement.nodeName === 'OL' ? Selector$9.ACTIVE_UL : Selector$9.ACTIVE;
                previous = $.makeArray($(listElement).find(itemSelector));
                previous = previous[previous.length - 1];
            }
            var hideEvent = $.Event(Event$9.HIDE, { relatedTarget: this._element });
            var showEvent = $.Event(Event$9.SHOW, { relatedTarget: previous });
            if (previous) {
                $(previous).trigger(hideEvent);
            }
            $(this._element).trigger(showEvent);
            if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) {
                return;
            }
            if (selector) {
                target = document.querySelector(selector);
            }
            this._activate(this._element, listElement);
            var complete = function complete() {
                var hiddenEvent = $.Event(Event$9.HIDDEN, { relatedTarget: _this._element });
                var shownEvent = $.Event(Event$9.SHOWN, { relatedTarget: previous });
                $(previous).trigger(hiddenEvent);
                $(_this._element).trigger(shownEvent);
            };
            if (target) {
                this._activate(target, target.parentNode, complete);
            } else {
                complete();
            }
        };
        _proto.dispose = function dispose() {
            $.removeData(this._element, DATA_KEY$9);
            this._element = null;
        };
        _proto._activate = function _activate(element, container, callback) {
            var _this2 = this;
            var activeElements = container && (container.nodeName === 'UL' || container.nodeName === 'OL') ? $(container).find(Selector$9.ACTIVE_UL) : $(container).children(Selector$9.ACTIVE);
            var active = activeElements[0];
            var isTransitioning = callback && active && $(active).hasClass(ClassName$9.FADE);
            var complete = function complete() {
                return _this2._transitionComplete(element, active, callback);
            };
            if (active && isTransitioning) {
                var transitionDuration = Util.getTransitionDurationFromElement(active);
                $(active).removeClass(ClassName$9.SHOW).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
            } else {
                complete();
            }
        };
        _proto._transitionComplete = function _transitionComplete(element, active, callback) {
            if (active) {
                $(active).removeClass(ClassName$9.ACTIVE);
                var dropdownChild = $(active.parentNode).find(Selector$9.DROPDOWN_ACTIVE_CHILD)[0];
                if (dropdownChild) {
                    $(dropdownChild).removeClass(ClassName$9.ACTIVE);
                }
                if (active.getAttribute('role') === 'tab') {
                    active.setAttribute('aria-selected', false);
                }
            }
            $(element).addClass(ClassName$9.ACTIVE);
            if (element.getAttribute('role') === 'tab') {
                element.setAttribute('aria-selected', true);
            }
            Util.reflow(element);
            if (element.classList.contains(ClassName$9.FADE)) {
                element.classList.add(ClassName$9.SHOW);
            }
            if (element.parentNode && $(element.parentNode).hasClass(ClassName$9.DROPDOWN_MENU)) {
                var dropdownElement = $(element).closest(Selector$9.DROPDOWN)[0];
                if (dropdownElement) {
                    var dropdownToggleList = [].slice.call(dropdownElement.querySelectorAll(Selector$9.DROPDOWN_TOGGLE));
                    $(dropdownToggleList).addClass(ClassName$9.ACTIVE);
                }
                element.setAttribute('aria-expanded', true);
            }
            if (callback) {
                callback();
            }
        };
        Tab._jQueryInterface = function _jQueryInterface(config) {
            return this.each(function () {
                var $this = $(this);
                var data = $this.data(DATA_KEY$9);
                if (!data) {
                    data = new Tab(this);
                    $this.data(DATA_KEY$9, data);
                }
                if (typeof config === 'string') {
                    if (typeof data[config] === 'undefined') {
                        throw new TypeError('No method named "' + config + '"');
                    }
                    data[config]();
                }
            });
        };
        _createClass(Tab, null, [{
                key: 'VERSION',
                get: function get() {
                    return VERSION$9;
                }
            }]);
        return Tab;
    }();
    $(document).on(Event$9.CLICK_DATA_API, Selector$9.DATA_TOGGLE, function (event) {
        event.preventDefault();
        Tab._jQueryInterface.call($(this), 'show');
    });
    $.fn[NAME$9] = Tab._jQueryInterface;
    $.fn[NAME$9].Constructor = Tab;
    $.fn[NAME$9].noConflict = function () {
        $.fn[NAME$9] = JQUERY_NO_CONFLICT$9;
        return Tab._jQueryInterface;
    };
    var NAME$a = 'toast';
    var VERSION$a = '4.3.1';
    var DATA_KEY$a = 'bs.toast';
    var EVENT_KEY$a = '.' + DATA_KEY$a;
    var JQUERY_NO_CONFLICT$a = $.fn[NAME$a];
    var Event$a = {
        CLICK_DISMISS: 'click.dismiss' + EVENT_KEY$a,
        HIDE: 'hide' + EVENT_KEY$a,
        HIDDEN: 'hidden' + EVENT_KEY$a,
        SHOW: 'show' + EVENT_KEY$a,
        SHOWN: 'shown' + EVENT_KEY$a
    };
    var ClassName$a = {
        FADE: 'fade',
        HIDE: 'hide',
        SHOW: 'show',
        SHOWING: 'showing'
    };
    var DefaultType$7 = {
        animation: 'boolean',
        autohide: 'boolean',
        delay: 'number'
    };
    var Default$7 = {
        animation: true,
        autohide: true,
        delay: 500
    };
    var Selector$a = { DATA_DISMISS: '[data-dismiss="toast"]' };
    var Toast = function () {
        function Toast(element, config) {
            this._element = element;
            this._config = this._getConfig(config);
            this._timeout = null;
            this._setListeners();
        }
        var _proto = Toast.prototype;
        _proto.show = function show() {
            var _this = this;
            $(this._element).trigger(Event$a.SHOW);
            if (this._config.animation) {
                this._element.classList.add(ClassName$a.FADE);
            }
            var complete = function complete() {
                _this._element.classList.remove(ClassName$a.SHOWING);
                _this._element.classList.add(ClassName$a.SHOW);
                $(_this._element).trigger(Event$a.SHOWN);
                if (_this._config.autohide) {
                    _this.hide();
                }
            };
            this._element.classList.remove(ClassName$a.HIDE);
            this._element.classList.add(ClassName$a.SHOWING);
            if (this._config.animation) {
                var transitionDuration = Util.getTransitionDurationFromElement(this._element);
                $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
            } else {
                complete();
            }
        };
        _proto.hide = function hide(withoutTimeout) {
            var _this2 = this;
            if (!this._element.classList.contains(ClassName$a.SHOW)) {
                return;
            }
            $(this._element).trigger(Event$a.HIDE);
            if (withoutTimeout) {
                this._close();
            } else {
                this._timeout = setTimeout(function () {
                    _this2._close();
                }, this._config.delay);
            }
        };
        _proto.dispose = function dispose() {
            clearTimeout(this._timeout);
            this._timeout = null;
            if (this._element.classList.contains(ClassName$a.SHOW)) {
                this._element.classList.remove(ClassName$a.SHOW);
            }
            $(this._element).off(Event$a.CLICK_DISMISS);
            $.removeData(this._element, DATA_KEY$a);
            this._element = null;
            this._config = null;
        };
        _proto._getConfig = function _getConfig(config) {
            config = _objectSpread({}, Default$7, $(this._element).data(), typeof config === 'object' && config ? config : {});
            Util.typeCheckConfig(NAME$a, config, this.constructor.DefaultType);
            return config;
        };
        _proto._setListeners = function _setListeners() {
            var _this3 = this;
            $(this._element).on(Event$a.CLICK_DISMISS, Selector$a.DATA_DISMISS, function () {
                return _this3.hide(true);
            });
        };
        _proto._close = function _close() {
            var _this4 = this;
            var complete = function complete() {
                _this4._element.classList.add(ClassName$a.HIDE);
                $(_this4._element).trigger(Event$a.HIDDEN);
            };
            this._element.classList.remove(ClassName$a.SHOW);
            if (this._config.animation) {
                var transitionDuration = Util.getTransitionDurationFromElement(this._element);
                $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
            } else {
                complete();
            }
        };
        Toast._jQueryInterface = function _jQueryInterface(config) {
            return this.each(function () {
                var $element = $(this);
                var data = $element.data(DATA_KEY$a);
                var _config = typeof config === 'object' && config;
                if (!data) {
                    data = new Toast(this, _config);
                    $element.data(DATA_KEY$a, data);
                }
                if (typeof config === 'string') {
                    if (typeof data[config] === 'undefined') {
                        throw new TypeError('No method named "' + config + '"');
                    }
                    data[config](this);
                }
            });
        };
        _createClass(Toast, null, [
            {
                key: 'VERSION',
                get: function get() {
                    return VERSION$a;
                }
            },
            {
                key: 'DefaultType',
                get: function get() {
                    return DefaultType$7;
                }
            },
            {
                key: 'Default',
                get: function get() {
                    return Default$7;
                }
            }
        ]);
        return Toast;
    }();
    $.fn[NAME$a] = Toast._jQueryInterface;
    $.fn[NAME$a].Constructor = Toast;
    $.fn[NAME$a].noConflict = function () {
        $.fn[NAME$a] = JQUERY_NO_CONFLICT$a;
        return Toast._jQueryInterface;
    };
    (function () {
        if (typeof $ === 'undefined') {
            throw new TypeError('Bootstrap\'s JavaScript requires jQuery. jQuery must be included before Bootstrap\'s JavaScript.');
        }
        var version = $.fn.jquery.split(' ')[0].split('.');
        var minMajor = 1;
        var ltMajor = 2;
        var minMinor = 9;
        var minPatch = 1;
        var maxMajor = 4;
        if (version[0] < ltMajor && version[1] < minMinor || version[0] === minMajor && version[1] === minMinor && version[2] < minPatch || version[0] >= maxMajor) {
            throw new Error('Bootstrap\'s JavaScript requires at least jQuery v1.9.1 but less than v4.0.0');
        }
    }());
    exports.Util = Util;
    exports.Alert = Alert;
    exports.Button = Button;
    exports.Carousel = Carousel;
    exports.Collapse = Collapse;
    exports.Dropdown = Dropdown;
    exports.Modal = Modal;
    exports.Popover = Popover;
    exports.Scrollspy = ScrollSpy;
    exports.Tab = Tab;
    exports.Toast = Toast;
    exports.Tooltip = Tooltip;
    Object.defineProperty(exports, '__esModule', { value: true });
}));
/*can-rest-model@1.1.1#can-rest-model*/
define('can-rest-model@1.1.1#can-rest-model', [
    'require',
    'exports',
    'module',
    'can-connect/constructor/constructor',
    'can-connect/can/map/map',
    'can-connect/data/parse/parse',
    'can-connect/data/url/url',
    'can-define/list/list',
    'can-define/map/map',
    'can-namespace',
    'can-connect/base/base'
], function (require, exports, module) {
    var constructor = require('can-connect/constructor/constructor');
    var canMap = require('can-connect/can/map/map');
    var dataParse = require('can-connect/data/parse/parse');
    var dataUrl = require('can-connect/data/url/url');
    var DefineList = require('can-define/list/list');
    var DefineMap = require('can-define/map/map');
    var namespace = require('can-namespace');
    var base = require('can-connect/base/base');
    function restModel(optionsOrUrl) {
        var options = typeof optionsOrUrl === 'string' ? { url: optionsOrUrl } : optionsOrUrl;
        if (typeof options.Map === 'undefined') {
            options.Map = DefineMap.extend({ seal: false }, {});
        }
        if (typeof options.List === 'undefined') {
            options.List = options.Map.List || DefineList.extend({ '#': options.Map });
        }
        var connection = [
            base,
            dataUrl,
            dataParse,
            constructor,
            canMap
        ].reduce(function (prev, behavior) {
            return behavior(prev);
        }, options);
        connection.init();
        return connection;
    }
    module.exports = namespace.restModel = restModel;
});
/*[steal-add-npm-packages]*/
if (steal && typeof steal.addNpmPackages === "function") {
    steal.addNpmPackages([
        {
            origFileUrl:
                "file:C:/source/development.github/shuttle/Shuttle.Esb.Samples/Shuttle.ProcessManagement/site.canjs/package.json",
            fileUrl: "./package.json",
            name: "site.canjs",
            version: "1.0.0",
            description: "Shuttle Books",
            steal: {
                main: "main.js",
                directories: { lib: "src" },
                plugins: ["steal-stache", "steal-css"],
                meta: {},
                paths: {},
                serviceBaseURL: "http://localhost:8656/api/",
                npmAlgorithm: "flat"
            },
            dependencies: {
                "@fortawesome/fontawesome-svg-core": "^1.2.19",
                "@fortawesome/free-regular-svg-icons": "^5.9.0",
                "@fortawesome/free-solid-svg-icons": "^5.9.0",
                bootstrap: "^4.3.1",
                can: "^5.28.4",
                "can-define-validate-validatejs": "^1.1.1",
                "can-fixture": "^3.1.6",
                jquery: "^3.4.1",
                moment: "^2.24.0",
                "popper.js": "^1.15.0",
                "shuttle-can-api": "^1.0.28",
                "shuttle-canstrap": "^1.1.5",
                "shuttle-guard": "^1.0.0",
                steal: "^2.2.1",
                "steal-css": "^1.3.2",
                "steal-stache": "^4.1.4",
                tether: "^1.4.6"
            },
            devDependencies: {},
            scripts: { postinstall: "steal-tools bundle --deps --no-minify" },
            author: "",
            license: "ISC"
        },
        {
            name: "steal-stache",
            version: "4.1.5",
            origFileUrl: "./node_modules/steal-stache/package.json",
            fileUrl: "./node_modules/steal-stache/package.json",
            _from: "steal-stache@^4.1.4",
            _id: "steal-stache@4.1.5",
            _inBundle: false,
            _integrity:
                "sha512-Zo2KFbw5EE3Z9j5ir4EXclW4hljerH3h6YlUse/oH9o2m3FDBpmXb8sq/xCiFcBuoD45Qx22icv5AYiLmSkyBA==",
            _location: "/steal-stache",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "steal-stache@^4.1.4",
                name: "steal-stache",
                escapedName: "steal-stache",
                rawSpec: "^4.1.4",
                saveSpec: null,
                fetchSpec: "^4.1.4"
            },
            _requiredBy: ["/", "/can", "/can-connect-tag"],
            _resolved:
                "https://registry.npmjs.org/steal-stache/-/steal-stache-4.1.5.tgz",
            _shasum: "2edea1f070ea762f99a317d19f11039bd546c714",
            _spec: "steal-stache@^4.1.4",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/steal-stache/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.0.0",
                "can-stache": "^4.0.0",
                "can-stache-ast": "^1.0.0",
                "can-stache-bindings": "^4.0.0",
                "can-view-import": "^4.2.2",
                "steal-config-utils": "^1.0.0"
            },
            deprecated: false,
            description: "Load can-stache templates with StealJS",
            devDependencies: {
                "bit-docs": "0.0.7",
                "can-test-helpers": "^1.1.0",
                "can-view-callbacks": "^4.1.1",
                "can-view-nodelist": "^4.0.0",
                jshint: "^2.9.4",
                steal: "^1.7.0",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.0.0",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "stealjs", "donejs"],
            main: "steal-stache.js",
            repository: {
                type: "git",
                url: "git://github.com/canjs/steal-stache.git"
            },
            scripts: {
                jshint: "jshint ./*.js test/ --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test: "npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            },
            system: {
                main: "steal-stache",
                configDependencies: ["live-reload"],
                npmIgnore: {
                    documentjs: true,
                    testee: true,
                    "steal-tools": true
                },
                npmAlgorithm: "flat",
                ext: { stache: "steal-stache" }
            },
            steal: {
                main: "steal-stache",
                configDependencies: ["live-reload"],
                npmIgnore: {
                    documentjs: true,
                    testee: true,
                    "steal-tools": true
                },
                npmAlgorithm: "flat",
                ext: { stache: "steal-stache" }
            }
        },
        {
            name: "steal-css",
            version: "1.3.2",
            origFileUrl: "./node_modules/steal-css/package.json",
            fileUrl: "./node_modules/steal-css/package.json",
            _from: "steal-css@^1.3.2",
            _id: "steal-css@1.3.2",
            _inBundle: false,
            _integrity:
                "sha512-hT3j9+p+qxqu3Jh46zGoB31V/8SKYba/C9sRtGkryKRR8vf582UmLpcbo2s1FysSNZCISbCGi7jl/pZgvdIxbg==",
            _location: "/steal-css",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "steal-css@^1.3.2",
                name: "steal-css",
                escapedName: "steal-css",
                rawSpec: "^1.3.2",
                saveSpec: null,
                fetchSpec: "^1.3.2"
            },
            _requiredBy: ["/"],
            _resolved:
                "https://registry.npmjs.org/steal-css/-/steal-css-1.3.2.tgz",
            _shasum: "66aeac1cb88940cd740af57d51472d0380c45eb7",
            _spec: "steal-css@^1.3.2",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs",
            author: { name: "Bitovi" },
            "bit-docs": {
                dependencies: {
                    "bit-docs-glob-finder": "^0.0.5",
                    "bit-docs-dev": "^0.0.3",
                    "bit-docs-js": "^0.0.3",
                    "bit-docs-generate-readme": "^0.0.8"
                },
                glob: { pattern: "**/*.{js,md}", ignore: "node_modules/**/*" },
                readme: { apis: "./docs/apis.json" },
                parent: "steal-css"
            },
            bugs: { url: "https://github.com/stealjs/steal-css/issues" },
            bundleDependencies: false,
            deprecated: false,
            description: "CSS plugin for StealJS",
            devDependencies: {
                async: "^2.3.0",
                "bit-docs": "0.0.7",
                eslint: "^4.1.1",
                "http-server": "^0.10.0",
                qunitjs: "~2.4.0",
                saucelabs: "^1.4.0",
                steal: "^1.0.0",
                "steal-qunit": "^1.0.0",
                "steal-test-helpers": "^0.2.0",
                "steal-tools": "^1.0.0",
                "test-saucelabs": "0.0.2",
                testee: "^0.6.1",
                wd: "^1.2.0"
            },
            eslintConfig: {
                extends: "eslint:recommended",
                rules: {
                    "no-param-reassign": "error",
                    "no-useless-escape": "off"
                },
                env: { node: true, browser: true },
                globals: { doneSsr: true, Promise: true }
            },
            homepage: "https://github.com/stealjs/steal-css",
            keywords: ["StealJS", "CSS"],
            license: "MIT",
            main: "css.js",
            repository: {
                type: "git",
                url: "git+https://github.com/stealjs/steal-css.git"
            },
            scripts: {
                "build-1": "node test/css-paths/build.js",
                "build-2":
                    "steal-tools build --config test/css-before-js/stealconfig.js --main main --baseUrl test/css-before-js/ --minify false",
                "build-3": "node test/css-instantiated/build.js",
                document: "bit-docs",
                eslint: "eslint css.js",
                "http-server": "http-server -p 3000 --silent",
                "run-tests":
                    "testee test/test.html --browsers firefox --reporter Spec",
                saucelabs:
                    "npm run build-1 && npm run build-2 && npm run build-3 && node test/saucelabs",
                test:
                    "npm run eslint && npm run build-1 && npm run build-2 && npm run build-3 && npm run run-tests"
            },
            steal: {
                ext: { css: "steal-css" },
                map: { $css: "steal-css@1.3.2#css" }
            }
        },
        {
            name: "steal",
            version: "2.2.2",
            origFileUrl: "./node_modules/steal/package.json",
            fileUrl: "./node_modules/steal/package.json",
            _from: "steal@^2.2.1",
            _id: "steal@2.2.2",
            _inBundle: false,
            _integrity:
                "sha512-KGZ84G8YZMIIwZElwEWPCqg6WnFIV6Rvvp/g7fgcWdxp7/9EODGBwVBAkvRDVrpV/15Wz0SgHM7C5omLuYVnRA==",
            _location: "/steal",
            _phantomChildren: { "safe-buffer": "5.1.2" },
            _requested: {
                type: "range",
                registry: true,
                raw: "steal@^2.2.1",
                name: "steal",
                escapedName: "steal",
                rawSpec: "^2.2.1",
                saveSpec: null,
                fetchSpec: "^2.2.1"
            },
            _requiredBy: ["/", "/shuttle-canstrap"],
            _resolved: "https://registry.npmjs.org/steal/-/steal-2.2.2.tgz",
            _shasum: "089ff73ab3f1848a5a5198435c602ec6b5d3f770",
            _spec: "steal@^2.2.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com/"
            },
            bugs: { url: "https://github.com/stealjs/steal/issues" },
            bundleDependencies: false,
            dependencies: {
                assert: "~1.4.1",
                buffer: "~5.0.4",
                "console-browserify": "~1.1.0",
                "constants-browserify": "~1.0.0",
                "crypto-browserify": "~3.11.0",
                "domain-browser": "~1.1.2",
                events: "~1.1.1",
                "http-browserify": "~1.7.0",
                "https-browserify": "~1.0.0",
                "os-browserify": "~0.3.0",
                "path-browserify": "~0.0.0",
                process: "~0.11.9",
                punycode: "~2.0.1",
                resolve: "^1.1.7",
                string_decoder: "~1.0.0",
                "tty-browserify": "~0.0.0",
                "vm-browserify": "~0.0.4",
                "zlib-browserify": "~0.0.3"
            },
            deprecated: false,
            description: "Gets JavaScript.",
            devDependencies: {
                async: "^2.1.4",
                "babel-plugin-steal-test": "0.0.2",
                "babel-preset-steal-test": "0.0.1",
                "babel-standalone": "6.24.2",
                eslint: "^3.19.0",
                "fs-extra": "^3.0.0",
                grunt: "~0.4.1",
                "grunt-cli": "^1.2.0",
                "grunt-contrib-concat": "~1.0.1",
                "grunt-contrib-copy": "~1.0.0",
                "grunt-contrib-jshint": "~1.1.0",
                "grunt-contrib-uglify": "~3.0.0",
                "grunt-contrib-watch": "~1.0.0",
                "grunt-esnext": "0.0.3",
                "grunt-simple-mocha": "^0.4.0",
                "grunt-string-replace": "^1.3.1",
                "http-server": "^0.10.0",
                jquery: "^3.1.1",
                "live-reload-testing": "^6.0.0",
                nock: "^9.4.3",
                qunitjs: "^2.3.0",
                "regenerator-runtime": "^0.10.3",
                saucelabs: "^1.3.0",
                "steal-conditional": "^0.3.2",
                "steal-qunit": "^1.0.0",
                "test-saucelabs": "0.0.1",
                testee: "^0.5.1",
                traceur: "0.0.111",
                "traceur-runtime":
                    "github:jmcriffey/bower-traceur-runtime#0.0.91",
                wd: "^1.1.3",
                when: "3.7.5"
            },
            globalBrowser: {
                console: "console-browserify",
                constants: "constants-browserify",
                crypto: "crypto-browserify",
                http: "http-browserify",
                buffer: "buffer",
                os: "os-browserify",
                vm: "vm-browserify",
                zlib: "zlib-browserify",
                assert: "assert",
                child_process: "./ext/builtin/child_process.js",
                cluster: "./ext/builtin/cluster.js",
                dgram: "./ext/builtin/dgram.js",
                dns: "./ext/builtin/dns.js",
                domain: "domain-browser",
                events: "events",
                fs: "./ext/builtin/fs.js",
                https: "https-browserify",
                module: "./ext/builtin/module.js",
                net: "./ext/builtin/net.js",
                path: "path-browserify",
                process: "process",
                querystring: "./ext/builtin/querystring.js",
                readline: "./ext/builtin/readline.js",
                repl: "./ext/builtin/repl.js",
                stream: "./ext/builtin/stream.js",
                string_decoder: "string_decoder",
                sys: "./ext/builtin/sys.js",
                timers: "./ext/builtin/timers.js",
                tls: "./ext/builtin/tls.js",
                tty: "tty-browserify",
                url: "./ext/builtin/url.js",
                util: "./ext/builtin/util.js",
                _stream_readable: "./ext/builtin/_stream_readable.js",
                _stream_writable: "./ext/builtin/_stream_writable.js",
                _stream_duplex: "./ext/builtin/_stream_duplex.js",
                _stream_transform: "./ext/builtin/_stream_transform.js",
                _stream_passthrough: "./ext/builtin/_stream_passthrough.js"
            },
            homepage: "https://github.com/stealjs/steal#readme",
            keywords: ["stealjs", "donejs", "modules", "es6", "bundling"],
            licenses: [
                {
                    type: "MIT",
                    url: "http://opensource.org/licenses/mit-license.php"
                }
            ],
            main: "main",
            repository: {
                type: "git",
                url: "git://github.com/stealjs/steal.git"
            },
            scripts: {
                build: "grunt",
                "http-server": "http-server -p 3000 --silent",
                lint: 'eslint "{src,ext}/**/*.js"',
                "npm-copy": "node scripts/copy.js",
                test: "npm run npm-copy && npm run lint && grunt test --stack",
                "test-node": "grunt simplemocha",
                "test-node:ci": "npm run lint && npm run test-node",
                "test:live-reload":
                    "cd test/live_reload && live-reload-test & testee test/live_reload/unit.html --browsers firefox --reporter Spec",
                "test:npm-live-reload":
                    "cd test/npm/live-reload && live-reload-test & testee test/npm/steal-live-reload.html --browsers firefox --reporter Spec",
                ui:
                    "npm run npm-copy && grunt build && npm run lint && node test/saucelabs.js"
            },
            steal: {
                npmDependencies: {
                    "console-browserify": true,
                    "constants-browserify": true,
                    "crypto-browserify": true,
                    "http-browserify": true,
                    buffer: true,
                    "os-browserify": true,
                    "vm-browserify": true,
                    "zlib-browserify": true,
                    assert: true,
                    "domain-browser": true,
                    events: true,
                    "https-browserify": true,
                    "path-browserify": true,
                    string_decoder: true,
                    "tty-browserify": true,
                    process: true,
                    punycode: true
                }
            }
        },
        {
            name: "buffer",
            version: "5.0.8",
            nestedFileUrl:
                "./node_modules/steal/node_modules/buffer/package.json",
            origFileUrl: "./node_modules/buffer/package.json",
            fileUrl: "./node_modules/buffer/package.json",
            _from: "buffer@~5.0.4",
            _id: "buffer@5.0.8",
            _inBundle: false,
            _integrity:
                "sha512-xXvjQhVNz50v2nPeoOsNqWCLGfiv4ji/gXZM28jnVwdLJxH4mFyqgqCKfaK9zf1KUbG6zTkjLOy7ou+jSMarGA==",
            _location: "/buffer",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "buffer@~5.0.4",
                name: "buffer",
                escapedName: "buffer",
                rawSpec: "~5.0.4",
                saveSpec: null,
                fetchSpec: "~5.0.4"
            },
            _requiredBy: ["/steal"],
            _resolved: "https://registry.npmjs.org/buffer/-/buffer-5.0.8.tgz",
            _shasum: "84daa52e7cf2fa8ce4195bc5cf0f7809e0930b24",
            _spec: "buffer@~5.0.4",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\steal",
            author: {
                name: "Feross Aboukhadijeh",
                email: "feross@feross.org",
                url: "http://feross.org"
            },
            bugs: { url: "https://github.com/feross/buffer/issues" },
            bundleDependencies: false,
            contributors: [
                { name: "Romain Beauxis", email: "toots@rastageeks.org" },
                { name: "James Halliday", email: "mail@substack.net" }
            ],
            dependencies: { "base64-js": "^1.0.2", ieee754: "^1.1.4" },
            deprecated: false,
            description: "Node.js Buffer API, for the browser",
            devDependencies: {
                benchmark: "^2.0.0",
                browserify: "^14.0.0",
                "concat-stream": "^1.4.7",
                hyperquest: "^2.0.0",
                "is-buffer": "^1.1.1",
                "is-nan": "^1.0.1",
                split: "^1.0.0",
                standard: "*",
                tape: "^4.0.0",
                through2: "^2.0.0",
                "uglify-js": "^2.7.3",
                zuul: "^3.0.0"
            },
            homepage: "https://github.com/feross/buffer",
            jspm: { map: { "./index.js": { node: "@node/buffer" } } },
            keywords: [
                "arraybuffer",
                "browser",
                "browserify",
                "buffer",
                "compatible",
                "dataview",
                "uint8array"
            ],
            license: "MIT",
            main: "index.js",
            repository: {
                type: "git",
                url: "git://github.com/feross/buffer.git"
            },
            scripts: {
                perf:
                    "browserify --debug perf/bracket-notation.js > perf/bundle.js && open perf/index.html",
                "perf-node":
                    "node perf/bracket-notation.js && node perf/concat.js && node perf/copy-big.js && node perf/copy.js && node perf/new-big.js && node perf/new.js && node perf/readDoubleBE.js && node perf/readFloatBE.js && node perf/readUInt32LE.js && node perf/slice.js && node perf/writeFloatBE.js",
                size: "browserify -r ./ | uglifyjs -c -m | gzip | wc -c",
                test: "standard && node ./bin/test.js",
                "test-browser-es5": "zuul --ui tape -- test/*.js",
                "test-browser-es5-local": "zuul --ui tape --local -- test/*.js",
                "test-browser-es6":
                    "zuul --ui tape -- test/*.js test/node/*.js",
                "test-browser-es6-local":
                    "zuul --ui tape --local -- test/*.js test/node/*.js",
                "test-node": "tape test/*.js test/node/*.js",
                "update-authors": "./bin/update-authors.sh"
            },
            standard: {
                ignore: [
                    "test/node/**/*.js",
                    "test/_polyfill.js",
                    "perf/**/*.js"
                ]
            }
        },
        {
            name: "console-browserify",
            version: "1.1.0",
            nestedFileUrl:
                "./node_modules/steal/node_modules/console-browserify/package.json",
            origFileUrl: "./node_modules/console-browserify/package.json",
            fileUrl: "./node_modules/console-browserify/package.json",
            _from: "console-browserify@~1.1.0",
            _id: "console-browserify@1.1.0",
            _inBundle: false,
            _integrity: "sha1-8CQcRXMKn8YyOyBtvzjtx0HQuxA=",
            _location: "/console-browserify",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "console-browserify@~1.1.0",
                name: "console-browserify",
                escapedName: "console-browserify",
                rawSpec: "~1.1.0",
                saveSpec: null,
                fetchSpec: "~1.1.0"
            },
            _requiredBy: ["/steal"],
            _resolved:
                "https://registry.npmjs.org/console-browserify/-/console-browserify-1.1.0.tgz",
            _shasum: "f0241c45730a9fc6323b206dbf38edc741d0bb10",
            _spec: "console-browserify@~1.1.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\steal",
            author: { name: "Raynos", email: "raynos2@gmail.com" },
            bugs: {
                url: "https://github.com/Raynos/console-browserify/issues",
                email: "raynos2@gmail.com"
            },
            bundleDependencies: false,
            contributors: [{ name: "Raynos" }],
            dependencies: { "date-now": "^0.1.4" },
            deprecated: false,
            description: "Emulate console for all the browsers",
            devDependencies: {
                jsonify: "0.0.0",
                "run-browser": "^1.3.0",
                "tap-dot": "^0.2.1",
                "tap-spec": "^0.1.8",
                tape: "^2.12.3"
            },
            homepage: "https://github.com/Raynos/console-browserify",
            keywords: [],
            licenses: [
                {
                    type: "MIT",
                    url:
                        "http://github.com/Raynos/console-browserify/raw/master/LICENSE"
                }
            ],
            main: "index",
            repository: {
                type: "git",
                url: "git://github.com/Raynos/console-browserify.git"
            },
            scripts: {
                browser: "run-browser test/index.js",
                build: "browserify test/index.js -o test/static/bundle.js",
                cover:
                    "istanbul cover --report none --print detail ./test/index.js",
                dot: "node ./test/index.js | tap-dot",
                phantom: "run-browser test/index.js -b | tap-spec",
                start: "node ./index.js",
                test: "node ./test/index.js | tap-spec",
                testem: "testem",
                "view-cover":
                    "istanbul report html && google-chrome ./coverage/index.html"
            },
            testling: {
                files: "test/index.js",
                browsers: [
                    "ie/8..latest",
                    "firefox/16..latest",
                    "firefox/nightly",
                    "chrome/22..latest",
                    "chrome/canary",
                    "opera/12..latest",
                    "opera/next",
                    "safari/5.1..latest",
                    "ipad/6.0..latest",
                    "iphone/6.0..latest",
                    "android-browser/4.2..latest"
                ]
            }
        },
        {
            name: "assert",
            version: "1.4.1",
            nestedFileUrl:
                "./node_modules/steal/node_modules/assert/package.json",
            origFileUrl: "./node_modules/assert/package.json",
            fileUrl: "./node_modules/assert/package.json",
            _from: "assert@~1.4.1",
            _id: "assert@1.4.1",
            _inBundle: false,
            _integrity: "sha1-mZEtWRg2tab1s0XA8H7vwI/GXZE=",
            _location: "/assert",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "assert@~1.4.1",
                name: "assert",
                escapedName: "assert",
                rawSpec: "~1.4.1",
                saveSpec: null,
                fetchSpec: "~1.4.1"
            },
            _requiredBy: ["/steal"],
            _resolved: "https://registry.npmjs.org/assert/-/assert-1.4.1.tgz",
            _shasum: "99912d591836b5a6f5b345c0f07eefc08fc65d91",
            _spec: "assert@~1.4.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\steal",
            bugs: {
                url: "https://github.com/defunctzombie/commonjs-assert/issues"
            },
            bundleDependencies: false,
            dependencies: { util: "0.10.3" },
            deprecated: false,
            description: "commonjs assert - node.js api compatible",
            devDependencies: {
                mocha: "~1.21.4",
                zuul: "~3.10.0",
                "zuul-ngrok": "^4.0.0"
            },
            homepage: "https://github.com/defunctzombie/commonjs-assert",
            keywords: ["assert"],
            license: "MIT",
            main: "./assert.js",
            repository: {
                type: "git",
                url: "git://github.com/defunctzombie/commonjs-assert.git"
            },
            scripts: {
                "browser-local": "zuul --no-coverage --local 8000 -- test.js",
                test: "npm run test-node && npm run test-browser",
                "test-browser": "zuul -- test.js",
                "test-native": "TEST_NATIVE=true mocha --ui qunit test.js",
                "test-node": "mocha --ui qunit test.js"
            }
        },
        {
            name: "constants-browserify",
            version: "1.0.0",
            nestedFileUrl:
                "./node_modules/steal/node_modules/constants-browserify/package.json",
            origFileUrl: "./node_modules/constants-browserify/package.json",
            fileUrl: "./node_modules/constants-browserify/package.json",
            _from: "constants-browserify@~1.0.0",
            _id: "constants-browserify@1.0.0",
            _inBundle: false,
            _integrity: "sha1-wguW2MYXdIqvHBYCF2DNJ/y4y3U=",
            _location: "/constants-browserify",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "constants-browserify@~1.0.0",
                name: "constants-browserify",
                escapedName: "constants-browserify",
                rawSpec: "~1.0.0",
                saveSpec: null,
                fetchSpec: "~1.0.0"
            },
            _requiredBy: ["/steal"],
            _resolved:
                "https://registry.npmjs.org/constants-browserify/-/constants-browserify-1.0.0.tgz",
            _shasum: "c20b96d8c617748aaf1c16021760cd27fcb8cb75",
            _spec: "constants-browserify@~1.0.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\steal",
            author: {
                name: "Julian Gruber",
                email: "julian@juliangruber.com",
                url: "http://juliangruber.com"
            },
            bugs: {
                url:
                    "https://github.com/juliangruber/constants-browserify/issues"
            },
            bundleDependencies: false,
            contributors: [
                {
                    name: "James J. Womack",
                    email: "james@womack.io",
                    url: "http://netflix.com"
                }
            ],
            dependencies: {},
            deprecated: false,
            description: "node's constants module for the browser",
            homepage: "https://github.com/juliangruber/constants-browserify",
            keywords: ["constants", "node", "browser", "browserify"],
            license: "MIT",
            main: "constants.json",
            repository: {
                type: "git",
                url: "git://github.com/juliangruber/constants-browserify.git"
            },
            scripts: { test: "node test.js" }
        },
        {
            name: "crypto-browserify",
            version: "3.11.1",
            nestedFileUrl:
                "./node_modules/steal/node_modules/crypto-browserify/package.json",
            origFileUrl: "./node_modules/crypto-browserify/package.json",
            fileUrl: "./node_modules/crypto-browserify/package.json",
            _from: "crypto-browserify@~3.11.0",
            _id: "crypto-browserify@3.11.1",
            _inBundle: false,
            _integrity:
                "sha512-Na7ZlwCOqoaW5RwUK1WpXws2kv8mNhWdTlzob0UXulk6G9BDbyiJaGTYBIX61Ozn9l1EPPJpICZb4DaOpT9NlQ==",
            _location: "/crypto-browserify",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "crypto-browserify@~3.11.0",
                name: "crypto-browserify",
                escapedName: "crypto-browserify",
                rawSpec: "~3.11.0",
                saveSpec: null,
                fetchSpec: "~3.11.0"
            },
            _requiredBy: ["/steal"],
            _resolved:
                "https://registry.npmjs.org/crypto-browserify/-/crypto-browserify-3.11.1.tgz",
            _shasum: "948945efc6757a400d6e5e5af47194d10064279f",
            _spec: "crypto-browserify@~3.11.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\steal",
            author: {
                name: "Dominic Tarr",
                email: "dominic.tarr@gmail.com",
                url: "dominictarr.com"
            },
            browser: { crypto: false },
            bugs: {
                url:
                    "https://github.com/crypto-browserify/crypto-browserify/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "browserify-cipher": "^1.0.0",
                "browserify-sign": "^4.0.0",
                "create-ecdh": "^4.0.0",
                "create-hash": "^1.1.0",
                "create-hmac": "^1.1.0",
                "diffie-hellman": "^5.0.0",
                inherits: "^2.0.1",
                pbkdf2: "^3.0.3",
                "public-encrypt": "^4.0.0",
                randombytes: "^2.0.0"
            },
            deprecated: false,
            description: "implementation of crypto for the browser",
            devDependencies: {
                "hash-test-vectors": "~1.3.2",
                pseudorandombytes: "^2.0.0",
                standard: "^5.0.2",
                tape: "~2.3.2",
                zuul: "^3.6.0"
            },
            engines: { node: "*" },
            homepage: "https://github.com/crypto-browserify/crypto-browserify",
            license: "MIT",
            optionalDependencies: {},
            repository: {
                type: "git",
                url: "git://github.com/crypto-browserify/crypto-browserify.git"
            },
            scripts: {
                browser:
                    "zuul --browser-version $BROWSER_VERSION --browser-name $BROWSER_NAME -- test/index.js",
                standard: "standard",
                test: "npm run standard && npm run unit",
                unit: "node test/"
            }
        },
        {
            name: "http-browserify",
            version: "1.7.0",
            nestedFileUrl:
                "./node_modules/steal/node_modules/http-browserify/package.json",
            origFileUrl: "./node_modules/http-browserify/package.json",
            fileUrl: "./node_modules/http-browserify/package.json",
            _from: "http-browserify@~1.7.0",
            _id: "http-browserify@1.7.0",
            _inBundle: false,
            _integrity: "sha1-M3la3nLfiKz7/TZ3PO/tp2RzWyA=",
            _location: "/http-browserify",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "http-browserify@~1.7.0",
                name: "http-browserify",
                escapedName: "http-browserify",
                rawSpec: "~1.7.0",
                saveSpec: null,
                fetchSpec: "~1.7.0"
            },
            _requiredBy: ["/steal"],
            _resolved:
                "https://registry.npmjs.org/http-browserify/-/http-browserify-1.7.0.tgz",
            _shasum: "33795ade72df88acfbfd36773cefeda764735b20",
            _spec: "http-browserify@~1.7.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\steal",
            author: {
                name: "James Halliday",
                email: "mail@substack.net",
                url: "http://substack.net"
            },
            browserify: "index.js",
            bugs: { url: "https://github.com/substack/http-browserify/issues" },
            bundleDependencies: false,
            dependencies: { Base64: "~0.2.0", inherits: "~2.0.1" },
            deprecated: false,
            description: "http module compatability for browserify",
            devDependencies: { ecstatic: "~0.1.6", tape: "~2.3.2" },
            directories: { lib: ".", example: "example", test: "test" },
            homepage: "https://github.com/substack/http-browserify#readme",
            keywords: [
                "http",
                "browserify",
                "compatible",
                "meatless",
                "browser"
            ],
            license: "MIT/X11",
            main: "index.js",
            repository: {
                type: "git",
                url: "git+ssh://git@github.com/substack/http-browserify.git"
            },
            scripts: { test: "tape test/*.js" }
        },
        {
            name: "https-browserify",
            version: "1.0.0",
            nestedFileUrl:
                "./node_modules/steal/node_modules/https-browserify/package.json",
            origFileUrl: "./node_modules/https-browserify/package.json",
            fileUrl: "./node_modules/https-browserify/package.json",
            _from: "https-browserify@~1.0.0",
            _id: "https-browserify@1.0.0",
            _inBundle: false,
            _integrity: "sha1-7AbBDgo0wPL68Zn3/X/Hj//QPHM=",
            _location: "/https-browserify",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "https-browserify@~1.0.0",
                name: "https-browserify",
                escapedName: "https-browserify",
                rawSpec: "~1.0.0",
                saveSpec: null,
                fetchSpec: "~1.0.0"
            },
            _requiredBy: ["/steal"],
            _resolved:
                "https://registry.npmjs.org/https-browserify/-/https-browserify-1.0.0.tgz",
            _shasum: "ec06c10e0a34c0f2faf199f7fd7fc78fffd03c73",
            _spec: "https-browserify@~1.0.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\steal",
            author: {
                name: "James Halliday",
                email: "mail@substack.net",
                url: "http://substack.net"
            },
            bugs: {
                url: "https://github.com/substack/https-browserify/issues"
            },
            bundleDependencies: false,
            deprecated: false,
            description: "https module compatability for browserify",
            devDependencies: { standard: "^9.0.2" },
            homepage: "https://github.com/substack/https-browserify",
            keywords: ["browser", "browserify", "https"],
            license: "MIT",
            main: "index.js",
            repository: {
                type: "git",
                url: "git://github.com/substack/https-browserify.git"
            },
            scripts: { test: "standard" }
        },
        {
            name: "os-browserify",
            version: "0.3.0",
            nestedFileUrl:
                "./node_modules/steal/node_modules/os-browserify/package.json",
            origFileUrl: "./node_modules/os-browserify/package.json",
            fileUrl: "./node_modules/os-browserify/package.json",
            _from: "os-browserify@~0.3.0",
            _id: "os-browserify@0.3.0",
            _inBundle: false,
            _integrity: "sha1-hUNzx/XCMVkU/Jv8a9gjj92h7Cc=",
            _location: "/os-browserify",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "os-browserify@~0.3.0",
                name: "os-browserify",
                escapedName: "os-browserify",
                rawSpec: "~0.3.0",
                saveSpec: null,
                fetchSpec: "~0.3.0"
            },
            _requiredBy: ["/steal"],
            _resolved:
                "https://registry.npmjs.org/os-browserify/-/os-browserify-0.3.0.tgz",
            _shasum: "854373c7f5c2315914fc9bfc6bd8238fdda1ec27",
            _spec: "os-browserify@~0.3.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\steal",
            author: { name: "CoderPuppy", email: "coderpup@gmail.com" },
            browser: "browser.js",
            bugs: { url: "https://github.com/CoderPuppy/os-browserify/issues" },
            bundleDependencies: false,
            deprecated: false,
            description:
                "The [os](https://nodejs.org/api/os.html) module from node.js, but for browsers.",
            homepage: "https://github.com/CoderPuppy/os-browserify#readme",
            jspm: {
                map: {
                    "./main.js": { node: "@node/os", browser: "./browser.js" }
                }
            },
            license: "MIT",
            main: "main.js",
            repository: {
                type: "git",
                url: "git+ssh://git@github.com/CoderPuppy/os-browserify.git"
            }
        },
        {
            name: "path-browserify",
            version: "0.0.1",
            nestedFileUrl:
                "./node_modules/steal/node_modules/path-browserify/package.json",
            origFileUrl: "./node_modules/path-browserify/package.json",
            fileUrl: "./node_modules/path-browserify/package.json",
            _from: "path-browserify@~0.0.0",
            _id: "path-browserify@0.0.1",
            _inBundle: false,
            _integrity:
                "sha512-BapA40NHICOS+USX9SN4tyhq+A2RrN/Ws5F0Z5aMHDp98Fl86lX8Oti8B7uN93L4Ifv4fHOEA+pQw87gmMO/lQ==",
            _location: "/path-browserify",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "path-browserify@~0.0.0",
                name: "path-browserify",
                escapedName: "path-browserify",
                rawSpec: "~0.0.0",
                saveSpec: null,
                fetchSpec: "~0.0.0"
            },
            _requiredBy: ["/steal"],
            _resolved:
                "https://registry.npmjs.org/path-browserify/-/path-browserify-0.0.1.tgz",
            _shasum: "e6c4ddd7ed3aa27c68a20cc4e50e1a4ee83bbc4a",
            _spec: "path-browserify@~0.0.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\steal",
            author: {
                name: "James Halliday",
                email: "mail@substack.net",
                url: "http://substack.net"
            },
            bugs: { url: "https://github.com/substack/path-browserify/issues" },
            bundleDependencies: false,
            dependencies: {},
            deprecated: false,
            description: "the path module from node core for browsers",
            devDependencies: { tape: "~1.0.4" },
            homepage: "https://github.com/substack/path-browserify",
            keywords: ["path", "browser", "browserify"],
            license: "MIT",
            main: "index.js",
            repository: {
                type: "git",
                url: "git://github.com/substack/path-browserify.git"
            },
            scripts: { test: "node test/test-path.js" }
        },
        {
            name: "process",
            version: "0.11.10",
            nestedFileUrl:
                "./node_modules/steal/node_modules/process/package.json",
            origFileUrl: "./node_modules/process/package.json",
            fileUrl: "./node_modules/process/package.json",
            _from: "process@~0.11.9",
            _id: "process@0.11.10",
            _inBundle: false,
            _integrity: "sha1-czIwDoQBYb2j5podHZGn1LwW8YI=",
            _location: "/process",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "process@~0.11.9",
                name: "process",
                escapedName: "process",
                rawSpec: "~0.11.9",
                saveSpec: null,
                fetchSpec: "~0.11.9"
            },
            _requiredBy: ["/steal"],
            _resolved:
                "https://registry.npmjs.org/process/-/process-0.11.10.tgz",
            _shasum: "7332300e840161bda3e69a1d1d91a7d4bc16f182",
            _spec: "process@~0.11.9",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\steal",
            author: { name: "Roman Shtylman", email: "shtylman@gmail.com" },
            browser: "./browser.js",
            bugs: { url: "https://github.com/shtylman/node-process/issues" },
            bundleDependencies: false,
            deprecated: false,
            description: "process information for node.js and browsers",
            devDependencies: { mocha: "2.2.1", zuul: "^3.10.3" },
            engines: { node: ">= 0.6.0" },
            homepage: "https://github.com/shtylman/node-process#readme",
            keywords: ["process"],
            license: "MIT",
            main: "./index.js",
            repository: {
                type: "git",
                url: "git://github.com/shtylman/node-process.git"
            },
            scripts: {
                browser:
                    "zuul --no-coverage --ui mocha-bdd --local 8080 -- test.js",
                test: "mocha test.js"
            }
        },
        {
            name: "punycode",
            version: "2.0.1",
            nestedFileUrl:
                "./node_modules/steal/node_modules/punycode/package.json",
            origFileUrl: "./node_modules/punycode/package.json",
            fileUrl: "./node_modules/punycode/package.json",
            _from: "punycode@~2.0.1",
            _id: "punycode@2.0.1",
            _inBundle: false,
            _integrity: "sha1-PxQv2ObvTpziSsv3uoaf+bANLCs=",
            _location: "/punycode",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "punycode@~2.0.1",
                name: "punycode",
                escapedName: "punycode",
                rawSpec: "~2.0.1",
                saveSpec: null,
                fetchSpec: "~2.0.1"
            },
            _requiredBy: ["/steal"],
            _resolved:
                "https://registry.npmjs.org/punycode/-/punycode-2.0.1.tgz",
            _shasum: "3f142fd8e6ef4e9ce24acbf7ba869ff9b00d2c2b",
            _spec: "punycode@~2.0.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\steal",
            author: {
                name: "Mathias Bynens",
                url: "https://mathiasbynens.be/"
            },
            bugs: { url: "https://github.com/bestiejs/punycode.js/issues" },
            bundleDependencies: false,
            contributors: [
                { name: "Mathias Bynens", url: "https://mathiasbynens.be/" }
            ],
            deprecated: false,
            description:
                "A robust Punycode converter that fully complies to RFC 3492 and RFC 5891, and works on nearly all JavaScript platforms.",
            devDependencies: {
                codecov: "^1.0.1",
                istanbul: "^0.4.1",
                mocha: "^2.5.3"
            },
            engines: { node: ">=6" },
            files: ["LICENSE-MIT.txt", "punycode.js", "punycode.es6.js"],
            homepage: "https://mths.be/punycode",
            "jsnext:main": "punycode.es6.js",
            jspm: { map: { "./punycode.js": { node: "@node/punycode" } } },
            keywords: [
                "punycode",
                "unicode",
                "idn",
                "idna",
                "dns",
                "url",
                "domain"
            ],
            license: "MIT",
            main: "punycode.js",
            repository: {
                type: "git",
                url: "git+https://github.com/bestiejs/punycode.js.git"
            },
            scripts: {
                prepublish: "node scripts/prepublish.js",
                test: "mocha tests"
            }
        },
        {
            name: "string_decoder",
            version: "1.1.1",
            nestedFileUrl:
                "./node_modules/steal/node_modules/string_decoder/package.json",
            origFileUrl: "./node_modules/string_decoder/package.json",
            fileUrl: "./node_modules/string_decoder/package.json",
            _from: "string_decoder@~1.1.1",
            _id: "string_decoder@1.1.1",
            _inBundle: false,
            _integrity:
                "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
            _location: "/string_decoder",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "string_decoder@~1.1.1",
                name: "string_decoder",
                escapedName: "string_decoder",
                rawSpec: "~1.1.1",
                saveSpec: null,
                fetchSpec: "~1.1.1"
            },
            _requiredBy: ["/readable-stream"],
            _resolved:
                "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
            _shasum: "9cf1611ba62685d7030ae9e4ba34149c3af03fc8",
            _spec: "string_decoder@~1.1.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\readable-stream",
            bugs: { url: "https://github.com/nodejs/string_decoder/issues" },
            bundleDependencies: false,
            dependencies: { "safe-buffer": "~5.1.0" },
            deprecated: false,
            description: "The string_decoder module from Node core",
            devDependencies: {
                "babel-polyfill": "^6.23.0",
                "core-util-is": "^1.0.2",
                inherits: "^2.0.3",
                tap: "~0.4.8"
            },
            homepage: "https://github.com/nodejs/string_decoder",
            keywords: ["string", "decoder", "browser", "browserify"],
            license: "MIT",
            main: "lib/string_decoder.js",
            repository: {
                type: "git",
                url: "git://github.com/nodejs/string_decoder.git"
            },
            scripts: {
                ci:
                    "tap test/parallel/*.js test/ours/*.js --tap | tee test.tap && node test/verify-dependencies.js",
                test: "tap test/parallel/*.js && node test/verify-dependencies"
            }
        },
        {
            name: "tty-browserify",
            version: "0.0.1",
            nestedFileUrl:
                "./node_modules/steal/node_modules/tty-browserify/package.json",
            origFileUrl: "./node_modules/tty-browserify/package.json",
            fileUrl: "./node_modules/tty-browserify/package.json",
            _from: "tty-browserify@~0.0.0",
            _id: "tty-browserify@0.0.1",
            _inBundle: false,
            _integrity:
                "sha512-C3TaO7K81YvjCgQH9Q1S3R3P3BtN3RIM8n+OvX4il1K1zgE8ZhI0op7kClgkxtutIE8hQrcrHBXvIheqKUUCxw==",
            _location: "/tty-browserify",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "tty-browserify@~0.0.0",
                name: "tty-browserify",
                escapedName: "tty-browserify",
                rawSpec: "~0.0.0",
                saveSpec: null,
                fetchSpec: "~0.0.0"
            },
            _requiredBy: ["/steal"],
            _resolved:
                "https://registry.npmjs.org/tty-browserify/-/tty-browserify-0.0.1.tgz",
            _shasum: "3f05251ee17904dfd0677546670db9651682b811",
            _spec: "tty-browserify@~0.0.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\steal",
            author: {
                name: "James Halliday",
                email: "mail@substack.net",
                url: "http://substack.net"
            },
            bugs: {
                url: "https://github.com/browserify/tty-browserify/issues"
            },
            bundleDependencies: false,
            dependencies: {},
            deprecated: false,
            description: "the tty module from node core for browsers",
            devDependencies: { tape: "~1.0.4" },
            homepage: "https://github.com/browserify/tty-browserify",
            keywords: ["tty", "browser", "browserify"],
            license: "MIT",
            main: "index.js",
            repository: {
                type: "git",
                url: "git://github.com/browserify/tty-browserify.git"
            },
            scripts: { test: "tape test/*.js" }
        },
        {
            name: "vm-browserify",
            version: "0.0.4",
            nestedFileUrl:
                "./node_modules/steal/node_modules/vm-browserify/package.json",
            origFileUrl: "./node_modules/vm-browserify/package.json",
            fileUrl: "./node_modules/vm-browserify/package.json",
            _from: "vm-browserify@~0.0.4",
            _id: "vm-browserify@0.0.4",
            _inBundle: false,
            _integrity: "sha1-XX6kW7755Kb/ZflUOOCofDV9WnM=",
            _location: "/vm-browserify",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "vm-browserify@~0.0.4",
                name: "vm-browserify",
                escapedName: "vm-browserify",
                rawSpec: "~0.0.4",
                saveSpec: null,
                fetchSpec: "~0.0.4"
            },
            _requiredBy: ["/steal"],
            _resolved:
                "https://registry.npmjs.org/vm-browserify/-/vm-browserify-0.0.4.tgz",
            _shasum: "5d7ea45bbef9e4a6ff65f95438e0a87c357d5a73",
            _spec: "vm-browserify@~0.0.4",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\steal",
            author: {
                name: "James Halliday",
                email: "mail@substack.net",
                url: "http://substack.net"
            },
            bugs: { url: "https://github.com/substack/vm-browserify/issues" },
            bundleDependencies: false,
            dependencies: { indexof: "0.0.1" },
            deprecated: false,
            description: "vm module for the browser",
            devDependencies: { tape: "~2.3.2" },
            homepage: "https://github.com/substack/vm-browserify#readme",
            keywords: ["vm", "browser", "eval"],
            license: "MIT",
            main: "index.js",
            repository: {
                type: "git",
                url: "git+ssh://git@github.com/substack/vm-browserify.git"
            },
            scripts: { test: "tap test/*.js" },
            testling: {
                files: "test/*.js",
                browsers: [
                    "ie/6..latest",
                    "firefox/16..latest",
                    "firefox/nightly",
                    "chrome/22..latest",
                    "chrome/canary",
                    "opera/12..latest",
                    "opera/next",
                    "safari/5.1..latest",
                    "ipad/6.0..latest",
                    "iphone/6.0..latest",
                    "android-browser/4.2..latest"
                ]
            }
        },
        {
            name: "domain-browser",
            version: "1.1.7",
            nestedFileUrl:
                "./node_modules/steal/node_modules/domain-browser/package.json",
            origFileUrl: "./node_modules/domain-browser/package.json",
            fileUrl: "./node_modules/domain-browser/package.json",
            _from: "domain-browser@~1.1.2",
            _id: "domain-browser@1.1.7",
            _inBundle: false,
            _integrity: "sha1-hnqksJP6oF8d4IwG9NeyH9+GmLw=",
            _location: "/domain-browser",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "domain-browser@~1.1.2",
                name: "domain-browser",
                escapedName: "domain-browser",
                rawSpec: "~1.1.2",
                saveSpec: null,
                fetchSpec: "~1.1.2"
            },
            _requiredBy: ["/steal"],
            _resolved:
                "https://registry.npmjs.org/domain-browser/-/domain-browser-1.1.7.tgz",
            _shasum: "867aa4b093faa05f1de08c06f4d7b21fdf8698bc",
            _spec: "domain-browser@~1.1.2",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\steal",
            author: {
                name: "2013+ Bevry Pty Ltd",
                email: "us@bevry.me",
                url: "http://bevry.me"
            },
            badges: {
                list: [
                    "travisci",
                    "npmversion",
                    "npmdownloads",
                    "daviddm",
                    "daviddmdev",
                    "---",
                    "slackin",
                    "patreon",
                    "gratipay",
                    "flattr",
                    "paypal",
                    "bitcoin",
                    "wishlist"
                ],
                config: {
                    patreonUsername: "bevry",
                    gratipayUsername: "bevry",
                    flattrCode: "344188/balupton-on-Flattr",
                    paypalButtonID: "QB8GQPZAH84N6",
                    bitcoinURL: "https://bevry.me/bitcoin",
                    wishlistURL: "https://bevry.me/wishlist",
                    slackinURL: "https://slack.bevry.me"
                }
            },
            browsers: true,
            bugs: { url: "https://github.com/bevry/domain-browser/issues" },
            bundleDependencies: false,
            contributors: [
                {
                    name: "Benjamin Lupton",
                    email: "b@lupton.cc",
                    url: "http://balupton.com"
                },
                { name: "Evan Solomon", url: "http://evansolomon.me" },
                {
                    name: "James Halliday",
                    email: "substack@gmail.com",
                    url: "http://substack.net/"
                },
                {
                    name: "Guy Bedford",
                    email: "guybedford@gmail.com",
                    url: "twitter.com/guybedford"
                },
                {
                    name: "Bogdan Chadkin",
                    email: "trysound@yandex.ru",
                    url: "https://github.com/TrySound"
                }
            ],
            dependencies: {},
            deprecated: false,
            description:
                "Node's domain module for the web browser. This is merely an evented try...catch with the same API as node, nothing more.",
            devDependencies: {
                "assert-helpers": "^4.1.0",
                eslint: "^1.10.3",
                joe: "^1.6.0",
                "joe-reporter-console": "^1.2.1",
                projectz: "^1.0.8"
            },
            engines: { node: ">=0.4", npm: ">=1.2" },
            homepage: "https://github.com/bevry/domain-browser",
            jspm: { map: { "./index.js": { node: "@node/domain" } } },
            keywords: [
                "domain",
                "trycatch",
                "try",
                "catch",
                "node-compat",
                "ender.js",
                "component",
                "component.io",
                "umd",
                "amd",
                "require.js",
                "browser"
            ],
            license: "MIT",
            main: "./index.js",
            maintainers: [
                {
                    name: "Benjamin Lupton",
                    email: "b@lupton.cc",
                    url: "http://balupton.com"
                }
            ],
            repository: {
                type: "git",
                url: "git+ssh://git@github.com/bevry/domain-browser.git"
            },
            scripts: {
                clean: "node --harmony nakefile.js clean",
                compile: "node --harmony nakefile.js compile",
                meta: "node --harmony nakefile.js meta",
                prepare: "node --harmony nakefile.js prepare",
                release: "node --harmony nakefile.js release",
                setup: "node --harmony nakefile.js setup",
                test: "node --harmony ./test.js",
                verify: "node --harmony nakefile.js verify",
                watch: "node --harmony nakefile.js watch"
            }
        },
        {
            name: "zlib-browserify",
            version: "0.0.3",
            nestedFileUrl:
                "./node_modules/steal/node_modules/zlib-browserify/package.json",
            origFileUrl: "./node_modules/zlib-browserify/package.json",
            fileUrl: "./node_modules/zlib-browserify/package.json",
            _from: "zlib-browserify@~0.0.3",
            _id: "zlib-browserify@0.0.3",
            _inBundle: false,
            _integrity: "sha1-JAzNv9AgP6hCsTDe77FBQSLIzFA=",
            _location: "/zlib-browserify",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "zlib-browserify@~0.0.3",
                name: "zlib-browserify",
                escapedName: "zlib-browserify",
                rawSpec: "~0.0.3",
                saveSpec: null,
                fetchSpec: "~0.0.3"
            },
            _requiredBy: ["/steal"],
            _resolved:
                "https://registry.npmjs.org/zlib-browserify/-/zlib-browserify-0.0.3.tgz",
            _shasum: "240ccdbfd0203fa842b130deefb1414122c8cc50",
            _spec: "zlib-browserify@~0.0.3",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\steal",
            author: { name: "Brian J. Brennan" },
            bugs: {
                url: "https://github.com/brianloveswords/zlib-browserify/issues"
            },
            bundleDependencies: false,
            dependencies: { tape: "~0.2.2" },
            deprecated: false,
            description: "Wrapper for zlib.js to allow for browserifyication",
            devDependencies: { tap: "~0.3.3" },
            directories: { test: "test" },
            gitHead: "4be9419f0e8e9dec9629c8a538b33a4efd7df17b",
            homepage:
                "https://github.com/brianloveswords/zlib-browserify#readme",
            keywords: ["zlib", "browserify"],
            license: "MIT",
            main: "index.js",
            repository: {
                type: "git",
                url: "git://github.com/brianloveswords/zlib-browserify.git"
            },
            scripts: { test: "tap test/*.test.js" }
        },
        {
            name: "events",
            version: "1.1.1",
            nestedFileUrl:
                "./node_modules/steal/node_modules/events/package.json",
            origFileUrl: "./node_modules/events/package.json",
            fileUrl: "./node_modules/events/package.json",
            _from: "events@^1.1.1",
            _id: "events@1.1.1",
            _inBundle: false,
            _integrity: "sha1-nr23Y1rQmccNzEwqH1AEKI6L2SQ=",
            _location: "/events",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "events@^1.1.1",
                name: "events",
                escapedName: "events",
                rawSpec: "^1.1.1",
                saveSpec: null,
                fetchSpec: "^1.1.1"
            },
            _requiredBy: ["/feathers-authentication-popups", "/steal"],
            _resolved: "https://registry.npmjs.org/events/-/events-1.1.1.tgz",
            _shasum: "9ebdb7635ad099c70dcc4c2a1f5004288e8bd924",
            _spec: "events@^1.1.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\feathers-authentication-popups",
            author: {
                name: "Irakli Gozalishvili",
                email: "rfobic@gmail.com",
                url: "http://jeditoolkit.com"
            },
            bugs: { url: "http://github.com/Gozala/events/issues/" },
            bundleDependencies: false,
            deprecated: false,
            description: "Node's event emitter for all engines.",
            devDependencies: { mocha: "~1.21.4", zuul: "~1.10.2" },
            engines: { node: ">=0.4.x" },
            homepage: "https://github.com/Gozala/events#readme",
            id: "events",
            keywords: [
                "events",
                "eventEmitter",
                "eventDispatcher",
                "listeners"
            ],
            license: "MIT",
            main: "./events.js",
            repository: {
                type: "git",
                url: "git://github.com/Gozala/events.git",
                web: "https://github.com/Gozala/events"
            },
            scripts: {
                test:
                    "mocha --ui qunit -- tests/index.js && zuul -- tests/index.js"
            }
        },
        {
            name: "string_decoder",
            version: "1.0.3",
            nestedFileUrl:
                "./node_modules/steal/node_modules/string_decoder/package.json",
            origFileUrl: "./node_modules/string_decoder/package.json",
            __crawledNestedPosition: true,
            nextFileUrl:
                "./node_modules/steal/node_modules/string_decoder/package.json",
            fileUrl:
                "./node_modules/steal/node_modules/string_decoder/package.json",
            _from: "string_decoder@~1.0.0",
            _id: "string_decoder@1.0.3",
            _inBundle: false,
            _integrity:
                "sha512-4AH6Z5fzNNBcH+6XDMfA/BTt87skxqJlO0lAh3Dker5zThcAxG6mKz+iGu308UKoPPQ8Dcqx/4JhujzltRa+hQ==",
            _location: "/steal/string_decoder",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "string_decoder@~1.0.0",
                name: "string_decoder",
                escapedName: "string_decoder",
                rawSpec: "~1.0.0",
                saveSpec: null,
                fetchSpec: "~1.0.0"
            },
            _requiredBy: ["/steal"],
            _resolved:
                "https://registry.npmjs.org/string_decoder/-/string_decoder-1.0.3.tgz",
            _shasum: "0fc67d7c141825de94282dd536bec6b9bce860ab",
            _spec: "string_decoder@~1.0.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\steal",
            bugs: { url: "https://github.com/rvagg/string_decoder/issues" },
            bundleDependencies: false,
            dependencies: { "safe-buffer": "~5.1.0" },
            deprecated: false,
            description: "The string_decoder module from Node core",
            devDependencies: { "babel-polyfill": "^6.23.0", tap: "~0.4.8" },
            homepage: "https://github.com/rvagg/string_decoder",
            keywords: ["string", "decoder", "browser", "browserify"],
            license: "MIT",
            main: "lib/string_decoder.js",
            repository: {
                type: "git",
                url: "git://github.com/rvagg/string_decoder.git"
            },
            scripts: {
                test: "tap test/parallel/*.js && node test/verify-dependencies"
            }
        },
        {
            name: "jquery",
            version: "3.4.1",
            origFileUrl: "./node_modules/jquery/package.json",
            fileUrl: "./node_modules/jquery/package.json",
            _from: "jquery@^3.4.1",
            _id: "jquery@3.4.1",
            _inBundle: false,
            _integrity:
                "sha512-36+AdBzCL+y6qjw5Tx7HgzeGCzC81MDDgaUP8ld2zhx58HdqXGoBd+tHdrBMiyjGQs0Hxs/MLZTu/eHNJJuWPw==",
            _location: "/jquery",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "jquery@^3.4.1",
                name: "jquery",
                escapedName: "jquery",
                rawSpec: "^3.4.1",
                saveSpec: null,
                fetchSpec: "^3.4.1"
            },
            _requiredBy: [
                "/",
                "/shuttle-can-api",
                "/tempusdominus-bootstrap-4"
            ],
            _resolved: "https://registry.npmjs.org/jquery/-/jquery-3.4.1.tgz",
            _shasum: "714f1f8d9dde4bdfa55764ba37ef214630d80ef2",
            _spec: "jquery@^3.4.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs",
            author: {
                name: "JS Foundation and other contributors",
                url: "https://github.com/jquery/jquery/blob/3.4.1/AUTHORS.txt"
            },
            bugs: { url: "https://github.com/jquery/jquery/issues" },
            bundleDependencies: false,
            commitplease: {
                nohook: true,
                components: [
                    "Docs",
                    "Tests",
                    "Build",
                    "Support",
                    "Release",
                    "Core",
                    "Ajax",
                    "Attributes",
                    "Callbacks",
                    "CSS",
                    "Data",
                    "Deferred",
                    "Deprecated",
                    "Dimensions",
                    "Effects",
                    "Event",
                    "Manipulation",
                    "Offset",
                    "Queue",
                    "Selector",
                    "Serialize",
                    "Traversing",
                    "Wrap"
                ],
                markerPattern: "^((clos|fix|resolv)(e[sd]|ing))|^(refs?)",
                ticketPattern:
                    "^((Closes|Fixes) ([a-zA-Z]{2,}-)[0-9]+)|^(Refs? [^#])"
            },
            dependencies: {},
            deprecated: false,
            description: "JavaScript library for DOM operations",
            devDependencies: {
                "@babel/core": "7.3.3",
                "@babel/plugin-transform-for-of": "7.2.0",
                commitplease: "3.2.0",
                "core-js": "2.6.5",
                "eslint-config-jquery": "1.0.1",
                grunt: "1.0.3",
                "grunt-babel": "8.0.0",
                "grunt-cli": "1.3.2",
                "grunt-compare-size": "0.4.2",
                "grunt-contrib-uglify": "3.4.0",
                "grunt-contrib-watch": "1.1.0",
                "grunt-eslint": "21.0.0",
                "grunt-git-authors": "3.2.0",
                "grunt-jsonlint": "1.1.0",
                "grunt-karma": "3.0.1",
                "grunt-newer": "1.3.0",
                "grunt-npmcopy": "0.1.0",
                "gzip-js": "0.3.2",
                husky: "1.3.1",
                insight: "0.10.1",
                jsdom: "13.2.0",
                karma: "4.0.1",
                "karma-browserstack-launcher": "1.4.0",
                "karma-chrome-launcher": "2.2.0",
                "karma-firefox-launcher": "1.1.0",
                "karma-ie-launcher": "1.0.0",
                "karma-jsdom-launcher": "7.1.0",
                "karma-qunit": "3.0.0",
                "load-grunt-tasks": "4.0.0",
                "native-promise-only": "0.8.1",
                "promises-aplus-tests": "2.1.2",
                q: "1.5.1",
                qunit: "2.9.2",
                "raw-body": "2.3.3",
                requirejs: "2.3.6",
                sinon: "2.3.7",
                sizzle: "2.3.4",
                "strip-json-comments": "2.0.1",
                testswarm: "1.1.0",
                "uglify-js": "3.4.7"
            },
            homepage: "https://jquery.com",
            husky: {
                hooks: {
                    "commit-msg": "node node_modules/commitplease",
                    "pre-commit": "grunt lint:newer qunit_fixture"
                }
            },
            keywords: ["jquery", "javascript", "browser", "library"],
            license: "MIT",
            main: "dist/jquery.js",
            repository: {
                type: "git",
                url: "git+https://github.com/jquery/jquery.git"
            },
            scripts: {
                build: "npm install && grunt",
                jenkins: "npm run test:browserless",
                start: "grunt watch",
                test: "grunt && grunt test:slow && grunt karma:main",
                "test:browser": "grunt && grunt karma:main",
                "test:browserless": "grunt && grunt test:slow"
            },
            title: "jQuery"
        },
        {
            name: "popper.js",
            version: "1.15.0",
            origFileUrl: "./node_modules/popper.js/package.json",
            fileUrl: "./node_modules/popper.js/package.json",
            _from: "popper.js@^1.15.0",
            _id: "popper.js@1.15.0",
            _inBundle: false,
            _integrity:
                "sha512-w010cY1oCUmI+9KwwlWki+r5jxKfTFDVoadl7MSrIujHU5MJ5OR6HTDj6Xo8aoR/QsA56x8jKjA59qGH4ELtrA==",
            _location: "/popper.js",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "popper.js@^1.15.0",
                name: "popper.js",
                escapedName: "popper.js",
                rawSpec: "^1.15.0",
                saveSpec: null,
                fetchSpec: "^1.15.0"
            },
            _requiredBy: [
                "/",
                "/shuttle-canstrap",
                "/tempusdominus-bootstrap-4"
            ],
            _resolved:
                "https://registry.npmjs.org/popper.js/-/popper.js-1.15.0.tgz",
            _shasum: "5560b99bbad7647e9faa475c6b8056621f5a4ff2",
            _spec: "popper.js@^1.15.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs",
            author: {
                name: "Federico Zivolo",
                email: "federico.zivolo@gmail.com"
            },
            bugs: { url: "https://github.com/FezVrasta/popper.js/issues" },
            bundleDependencies: false,
            contributors: [
                {
                    name: "Contributors",
                    url:
                        "https://github.com/FezVrasta/popper.js/graphs/contributors"
                }
            ],
            deprecated: false,
            description: "A kickass library to manage your poppers",
            devDependencies: {
                "@popperjs/bundle": "^1.0.2",
                "@popperjs/eslint-config-popper": "^1.0.0",
                "@popperjs/test": "^1.0.0",
                "@popperjs/test-utils": "^1.0.0",
                eslint: "^4.1.1",
                "nuget-publish": "^1.0.3",
                typescript: "^2.7.1"
            },
            homepage: "https://popper.js.org",
            keywords: [
                "popperjs",
                "component",
                "drop",
                "tooltip",
                "popover",
                "position",
                "attached"
            ],
            license: "MIT",
            main: "dist/umd/popper.js",
            module: "dist/esm/popper.js",
            repository: {
                type: "git",
                url: "git+https://github.com/FezVrasta/popper.js.git"
            },
            resolutions: { micromatch: "^3.0.3" },
            scripts: {
                build:
                    "node bundle.js && cp index.js.flow dist/umd/poppper.js.flow",
                coverage: "COVERAGE=true yarn test",
                lint: "eslint .",
                postpublish: "nuget-publish && ./bower-publish.sh",
                posttest: "tsc --project tests/types/tsconfig.json",
                prebuild: "yarn lint",
                prepare: "yarn build",
                pretest: "yarn lint",
                test: "popper-karma",
                "test:dev": "BROWSERS=Chrome NODE_ENV=development yarn test"
            },
            types: "index.d.ts",
            unpkg: "dist/umd/popper.min.js"
        },
        {
            name: "@fortawesome/fontawesome-svg-core",
            version: "1.2.21",
            origFileUrl:
                "./node_modules/@fortawesome/fontawesome-svg-core/package.json",
            fileUrl:
                "./node_modules/@fortawesome/fontawesome-svg-core/package.json",
            _from: "@fortawesome/fontawesome-svg-core@^1.2.19",
            _id: "@fortawesome/fontawesome-svg-core@1.2.21",
            _inBundle: false,
            _integrity:
                "sha512-EhrgMZLJS0tTYZhUbodurZBqDgAFLDNdxJP/q5unrZJwiFo8Dd7xGvJdhAhY5WcX4khzkPQcbLTCMPHBtutD7Q==",
            _location: "/@fortawesome/fontawesome-svg-core",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "@fortawesome/fontawesome-svg-core@^1.2.19",
                name: "@fortawesome/fontawesome-svg-core",
                escapedName: "@fortawesome%2ffontawesome-svg-core",
                scope: "@fortawesome",
                rawSpec: "^1.2.19",
                saveSpec: null,
                fetchSpec: "^1.2.19"
            },
            _requiredBy: ["/"],
            _resolved:
                "https://registry.npmjs.org/@fortawesome/fontawesome-svg-core/-/fontawesome-svg-core-1.2.21.tgz",
            _shasum: "5b08a28d6e1ea198e002447b158abba00fd12122",
            _spec: "@fortawesome/fontawesome-svg-core@^1.2.19",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs",
            author: {
                name: "Dave Gandy",
                email: "dave@fontawesome.com",
                url: "http://twitter.com/davegandy"
            },
            bugs: { url: "http://github.com/FortAwesome/Font-Awesome/issues" },
            bundleDependencies: false,
            contributors: [
                { name: "Brian Talbot", url: "http://twitter.com/talbs" },
                {
                    name: "Travis Chase",
                    url: "http://twitter.com/supercodepoet"
                },
                { name: "Rob Madole", url: "http://twitter.com/robmadole" },
                {
                    name: "Geremia Taglialatela",
                    url: "http://twitter.com/gtagliala"
                },
                { name: "Mike Wilkerson", url: "http://twitter.com/mw77" }
            ],
            dependencies: {
                "@fortawesome/fontawesome-common-types": "^0.2.21"
            },
            deprecated: false,
            description: "The iconic font, CSS, and SVG framework",
            engines: { node: ">=6" },
            homepage: "https://fontawesome.com",
            "jsnext:main": "index.es.js",
            keywords: [
                "font",
                "awesome",
                "fontawesome",
                "icon",
                "svg",
                "bootstrap"
            ],
            license: "MIT",
            main: "index.js",
            module: "index.es.js",
            repository: {
                type: "git",
                url: "git+https://github.com/FortAwesome/Font-Awesome.git"
            },
            style: "styles.css",
            types: "./index.d.ts"
        },
        {
            name: "shuttle-canstrap",
            version: "1.2.1",
            origFileUrl: "./node_modules/shuttle-canstrap/package.json",
            fileUrl: "./node_modules/shuttle-canstrap/package.json",
            _from: "shuttle-canstrap@^1.1.5",
            _id: "shuttle-canstrap@1.2.1",
            _inBundle: false,
            _integrity:
                "sha512-cwfiWavMEbYdbmABMzBNKLdx/O5alci13PL3O6GPRXGdY3QAJb/jI6ifBjYm+Ur052JNCBbCKeDQhfngi+LRag==",
            _location: "/shuttle-canstrap",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "shuttle-canstrap@^1.1.5",
                name: "shuttle-canstrap",
                escapedName: "shuttle-canstrap",
                rawSpec: "^1.1.5",
                saveSpec: null,
                fetchSpec: "^1.1.5"
            },
            _requiredBy: ["/"],
            _resolved:
                "https://registry.npmjs.org/shuttle-canstrap/-/shuttle-canstrap-1.2.1.tgz",
            _shasum: "c8f85f41fa72ea77ebe50140bef021b77a2f8fd3",
            _spec: "shuttle-canstrap@^1.1.5",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs",
            author: { name: "Eben Roux" },
            bugs: {
                url: "https://github.com/shuttle-npm/shuttle-canstrap/issues"
            },
            bundleDependencies: false,
            dependencies: {
                bootstrap: "^4.3.1",
                can: "^5.28.4",
                "popper.js": "^1.15.0",
                "shuttle-guard": "^1.0.0",
                steal: "^2.2.1",
                "tempusdominus-bootstrap-4": "^5.1.2",
                tether: "^1.4.6"
            },
            deprecated: false,
            description: "CanJS components using Bootstrap v4",
            devDependencies: { "sync-glob": "^1.4.0" },
            homepage: "https://github.com/shuttle-npm/shuttle-canstrap#readme",
            keywords: ["shuttle", "canjs", "bootstrap"],
            license: "ISC",
            main: "shuttle-canstrap.js",
            repository: {
                type: "git",
                url: "git+https://github.com/shuttle-npm/shuttle-canstrap.git"
            },
            scripts: {
                "sync-samples":
                    'node .\\node_modules\\sync-glob\\bin\\sync-glob.js --watch "**/*" "!node_modules/**/*" ..\\shuttle-canstrap-samples\\node_modules\\shuttle-canstrap\\'
            }
        },
        {
            name: "shuttle-can-api",
            version: "1.1.2",
            origFileUrl: "./node_modules/shuttle-can-api/package.json",
            fileUrl: "./node_modules/shuttle-can-api/package.json",
            _from: "shuttle-can-api@^1.0.28",
            _id: "shuttle-can-api@1.1.2",
            _inBundle: false,
            _integrity:
                "sha512-3T6fijlQbpPhuu6hcJ9urDwD6h+TRwpyDHpquHph6VxtzrAi+w24nS+rC8Oz10ypykJ1DXsk/vm6bGaUdMMD0w==",
            _location: "/shuttle-can-api",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "shuttle-can-api@^1.0.28",
                name: "shuttle-can-api",
                escapedName: "shuttle-can-api",
                rawSpec: "^1.0.28",
                saveSpec: null,
                fetchSpec: "^1.0.28"
            },
            _requiredBy: ["/"],
            _resolved:
                "https://registry.npmjs.org/shuttle-can-api/-/shuttle-can-api-1.1.2.tgz",
            _shasum: "4dfe5858c5a71ef47d173aa84cf30e917bdf7d0a",
            _spec: "shuttle-can-api@^1.0.28",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs",
            author: { name: "Eben Roux" },
            bugs: {
                url: "https://github.com/shuttle-npm/shuttle-can-api/issues"
            },
            bundleDependencies: false,
            dependencies: {
                can: "^5.26.0",
                jquery: "^3.4.1",
                "shuttle-guard": "^1.0.0"
            },
            deprecated: false,
            description: "Simple web-api client for use with CanJS.",
            devDependencies: {
                "can-fixture": "^3.1.5",
                chai: "^4.2.0",
                mocha: "^6.1.4",
                steal: "^2.2.1",
                "steal-mocha": "^2.0.1"
            },
            homepage: "https://github.com/shuttle-npm/shuttle-can-api#readme",
            keywords: ["canjs", "api"],
            license: "ISC",
            main: "shuttle-can-api.js",
            repository: {
                type: "git",
                url: "git+https://github.com/shuttle-npm/shuttle-can-api.git"
            },
            scripts: { test: 'echo "Error: no test specified" && exit 1' }
        },
        {
            name: "bootstrap",
            version: "4.3.1",
            origFileUrl: "./node_modules/bootstrap/package.json",
            fileUrl: "./node_modules/bootstrap/package.json",
            _from: "bootstrap@^4.3.1",
            _id: "bootstrap@4.3.1",
            _inBundle: false,
            _integrity:
                "sha512-rXqOmH1VilAt2DyPzluTi2blhk17bO7ef+zLLPlWvG494pDxcM234pJ8wTc/6R40UWizAIIMgxjvxZg5kmsbag==",
            _location: "/bootstrap",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "bootstrap@^4.3.1",
                name: "bootstrap",
                escapedName: "bootstrap",
                rawSpec: "^4.3.1",
                saveSpec: null,
                fetchSpec: "^4.3.1"
            },
            _requiredBy: [
                "/",
                "/shuttle-canstrap",
                "/tempusdominus-bootstrap-4"
            ],
            _resolved:
                "https://registry.npmjs.org/bootstrap/-/bootstrap-4.3.1.tgz",
            _shasum: "280ca8f610504d99d7b6b4bfc4b68cec601704ac",
            _spec: "bootstrap@^4.3.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs",
            author: {
                name: "The Bootstrap Authors",
                url: "https://github.com/twbs/bootstrap/graphs/contributors"
            },
            bugs: { url: "https://github.com/twbs/bootstrap/issues" },
            bundleDependencies: false,
            bundlesize: [
                { path: "./dist/css/bootstrap-grid.css", maxSize: "7 kB" },
                { path: "./dist/css/bootstrap-grid.min.css", maxSize: "6 kB" },
                { path: "./dist/css/bootstrap-reboot.css", maxSize: "2 kB" },
                {
                    path: "./dist/css/bootstrap-reboot.min.css",
                    maxSize: "2 kB"
                },
                { path: "./dist/css/bootstrap.css", maxSize: "25 kB" },
                { path: "./dist/css/bootstrap.min.css", maxSize: "23 kB" },
                { path: "./dist/js/bootstrap.bundle.js", maxSize: "47 kB" },
                { path: "./dist/js/bootstrap.bundle.min.js", maxSize: "22 kB" },
                { path: "./dist/js/bootstrap.js", maxSize: "25 kB" },
                { path: "./dist/js/bootstrap.min.js", maxSize: "15.5 kB" }
            ],
            contributors: [{ name: "Twitter, Inc." }],
            dependencies: {},
            deprecated: false,
            description:
                "The most popular front-end framework for developing responsive, mobile first projects on the web.",
            devDependencies: {
                "@babel/cli": "^7.2.3",
                "@babel/core": "^7.2.2",
                "@babel/plugin-proposal-object-rest-spread": "^7.3.2",
                "@babel/preset-env": "^7.3.1",
                autoprefixer: "^9.4.7",
                "babel-eslint": "^10.0.1",
                "babel-plugin-istanbul": "^5.1.0",
                "broken-link-checker": "^0.7.8",
                bundlesize: "0.15.3",
                "clean-css-cli": "^4.2.1",
                coveralls: "^3.0.2",
                "cross-env": "^5.2.0",
                eslint: "^5.13.0",
                "find-unused-sass-variables": "^0.3.2",
                glob: "^7.1.3",
                "hammer-simulator": "0.0.1",
                "http-server": "^0.11.1",
                ip: "^1.1.5",
                jquery: "^3.3.1",
                karma: "^3.1.4",
                "karma-browserstack-launcher": "^1.4.0",
                "karma-chrome-launcher": "^2.2.0",
                "karma-coverage-istanbul-reporter": "^2.0.4",
                "karma-detect-browsers": "^2.3.3",
                "karma-firefox-launcher": "^1.1.0",
                "karma-qunit": "^2.1.0",
                "karma-sinon": "^1.0.5",
                "node-sass": "^4.11.0",
                nodemon: "^1.18.9",
                "npm-run-all": "^4.1.5",
                "popper.js": "^1.14.7",
                "postcss-cli": "^6.1.1",
                qunit: "^2.9.1",
                rollup: "^1.1.2",
                "rollup-plugin-babel": "^4.3.2",
                "rollup-plugin-commonjs": "^9.2.0",
                "rollup-plugin-node-resolve": "^4.0.0",
                shelljs: "^0.8.3",
                shx: "^0.3.2",
                sinon: "^7.2.3",
                stylelint: "^9.10.1",
                "stylelint-config-twbs-bootstrap": "^0.3.0",
                "uglify-js": "^3.4.9",
                "vnu-jar": "18.11.5"
            },
            engines: { node: ">=6" },
            files: [
                "dist/{css,js}/*.{css,js,map}",
                "js/{src,dist}/**/*.{js,map}",
                "scss/**/*.scss"
            ],
            homepage: "https://getbootstrap.com/",
            jspm: {
                registry: "npm",
                main: "js/bootstrap",
                directories: { lib: "dist" },
                shim: {
                    "js/bootstrap": {
                        deps: ["jquery", "popper.js"],
                        exports: "$"
                    }
                },
                dependencies: {},
                peerDependencies: {
                    jquery: "1.9.1 - 3",
                    "popper.js": "^1.14.7"
                }
            },
            keywords: [
                "css",
                "sass",
                "mobile-first",
                "responsive",
                "front-end",
                "framework",
                "web"
            ],
            license: "MIT",
            main: "dist/js/bootstrap",
            peerDependencies: { jquery: "1.9.1 - 3", "popper.js": "^1.14.7" },
            repository: {
                type: "git",
                url: "git+https://github.com/twbs/bootstrap.git"
            },
            sass: "scss/bootstrap.scss",
            scripts: {
                blc:
                    "blc --exclude-external --filter-level 3 --follow --get --ordered --recursive --host-requests 4 --input http://localhost:3000/",
                bundlesize: "bundlesize",
                "check-broken-links":
                    'npm-run-all --parallel --race "http-server -- _gh_pages/" blc',
                coveralls: "shx cat js/coverage/lcov.info | coveralls",
                css: "npm-run-all css-compile css-prefix css-minify css-copy",
                "css-compile": "npm-run-all --parallel css-compile-*",
                "css-compile-docs":
                    "cross-env-shell node-sass --output-style expanded --source-map true --source-map-contents true --precision 6 site/docs/$npm_package_version_short/assets/scss/docs.scss site/docs/$npm_package_version_short/assets/css/docs.min.css",
                "css-compile-main":
                    "node-sass --output-style expanded --source-map true --source-map-contents true --precision 6 scss/bootstrap.scss dist/css/bootstrap.css && node-sass --output-style expanded --source-map true --source-map-contents true --precision 6 scss/bootstrap-grid.scss dist/css/bootstrap-grid.css && node-sass --output-style expanded --source-map true --source-map-contents true --precision 6 scss/bootstrap-reboot.scss dist/css/bootstrap-reboot.css && npm run css-copy",
                "css-copy":
                    "cross-env-shell shx mkdir -p site/docs/$npm_package_version_short/dist/ && cross-env-shell shx cp -r dist/css/ site/docs/$npm_package_version_short/dist/",
                "css-docs":
                    "npm-run-all css-compile-docs css-prefix-docs css-minify-docs",
                "css-lint": "npm-run-all --parallel css-lint-*",
                "css-lint-docs":
                    'stylelint "site/docs/**/assets/scss/*.scss" "site/docs/**/*.css" --cache --cache-location .cache/.stylelintcache',
                "css-lint-main":
                    'stylelint "scss/**/*.scss" --cache --cache-location .cache/.stylelintcache',
                "css-lint-vars": "fusv scss/ site/docs/",
                "css-main":
                    "npm-run-all css-lint css-compile-main css-prefix-main css-minify-main css-copy",
                "css-minify": "npm-run-all --parallel css-minify-*",
                "css-minify-docs":
                    "cross-env-shell cleancss --level 1 --format breaksWith=lf --source-map --source-map-inline-sources --output site/docs/$npm_package_version_short/assets/css/docs.min.css site/docs/$npm_package_version_short/assets/css/docs.min.css",
                "css-minify-main":
                    "cleancss --level 1 --format breaksWith=lf --source-map --source-map-inline-sources --output dist/css/bootstrap.min.css dist/css/bootstrap.css && cleancss --level 1 --format breaksWith=lf --source-map --source-map-inline-sources --output dist/css/bootstrap-grid.min.css dist/css/bootstrap-grid.css && cleancss --level 1 --format breaksWith=lf --source-map --source-map-inline-sources --output dist/css/bootstrap-reboot.min.css dist/css/bootstrap-reboot.css",
                "css-prefix": "npm-run-all --parallel css-prefix-*",
                "css-prefix-docs":
                    'postcss --config build/postcss.config.js --replace "site/docs/**/*.css" "site/docs/**/*.css"',
                "css-prefix-main":
                    'postcss --config build/postcss.config.js --replace "dist/css/*.css" "!dist/css/*.min.css"',
                dist: "npm-run-all --parallel css js",
                docs: "npm-run-all css-docs js-docs docs-compile docs-lint",
                "docs-compile": "bundle exec jekyll build",
                "docs-lint": "node build/vnu-jar.js",
                "docs-production":
                    "cross-env JEKYLL_ENV=production npm run docs-compile",
                "docs-serve": "bundle exec jekyll serve",
                "docs-serve-only":
                    "npm run docs-serve -- --skip-initial-build --no-watch",
                "http-server": "http-server --silent -p 3000",
                js: "npm-run-all js-compile js-minify js-copy",
                "js-compile":
                    "npm-run-all --parallel js-compile-* --sequential js-copy",
                "js-compile-bundle":
                    "rollup --environment BUNDLE:true --config build/rollup.config.js --sourcemap",
                "js-compile-plugins": "node build/build-plugins.js",
                "js-compile-plugins-coverage":
                    "cross-env NODE_ENV=test node build/build-plugins.js",
                "js-compile-standalone":
                    "rollup --environment BUNDLE:false --config build/rollup.config.js --sourcemap",
                "js-copy":
                    "cross-env-shell shx mkdir -p site/docs/$npm_package_version_short/dist/ && cross-env-shell shx cp -r dist/js/ site/docs/$npm_package_version_short/dist/",
                "js-docs": "npm-run-all js-lint-docs js-minify-docs",
                "js-lint": "npm-run-all --parallel js-lint-*",
                "js-lint-docs":
                    "eslint --cache --cache-location .cache/.eslintcache site/",
                "js-lint-main":
                    "eslint --cache --cache-location .cache/.eslintcache js/src js/tests build/",
                "js-main": "npm-run-all js-lint js-compile js-minify-main",
                "js-minify":
                    "npm-run-all --parallel js-minify-main js-minify-docs",
                "js-minify-bundle":
                    'uglifyjs --compress typeofs=false --mangle --comments "/^!/" --source-map "content=dist/js/bootstrap.bundle.js.map,includeSources,url=bootstrap.bundle.min.js.map" --output dist/js/bootstrap.bundle.min.js dist/js/bootstrap.bundle.js',
                "js-minify-docs":
                    'cross-env-shell uglifyjs --mangle --comments \\"/^!/\\" --output site/docs/$npm_package_version_short/assets/js/docs.min.js site/docs/$npm_package_version_short/assets/js/vendor/anchor.min.js site/docs/$npm_package_version_short/assets/js/vendor/clipboard.min.js site/docs/$npm_package_version_short/assets/js/vendor/bs-custom-file-input.min.js "site/docs/$npm_package_version_short/assets/js/src/*.js"',
                "js-minify-main":
                    "npm-run-all js-minify-standalone js-minify-bundle",
                "js-minify-standalone":
                    'uglifyjs --compress typeofs=false --mangle --comments "/^!/" --source-map "content=dist/js/bootstrap.js.map,includeSources,url=bootstrap.min.js.map" --output dist/js/bootstrap.min.js dist/js/bootstrap.js',
                "js-test": "npm-run-all js-test-karma* js-test-integration",
                "js-test-cloud": "cross-env BROWSER=true npm run js-test-karma",
                "js-test-integration":
                    "rollup --config js/tests/integration/rollup.bundle.js",
                "js-test-karma": "karma start js/tests/karma.conf.js",
                "js-test-karma-bundle":
                    "cross-env BUNDLE=true npm run js-test-karma",
                "js-test-karma-bundle-old":
                    "cross-env BUNDLE=true USE_OLD_JQUERY=true npm run js-test-karma",
                "js-test-karma-old":
                    "cross-env USE_OLD_JQUERY=true npm run js-test-karma",
                lint: "npm-run-all --parallel js-lint css-lint",
                release:
                    "npm run dist && npm run release-sri && npm run release-zip && npm run docs-production",
                "release-sri": "node build/generate-sri.js",
                "release-version": "node build/change-version.js",
                "release-zip":
                    'cross-env-shell "shx rm -rf bootstrap-$npm_package_version-dist && shx cp -r dist/ bootstrap-$npm_package_version-dist && zip -r9 bootstrap-$npm_package_version-dist.zip bootstrap-$npm_package_version-dist && shx rm -rf bootstrap-$npm_package_version-dist"',
                start: "npm-run-all --parallel watch docs-serve",
                test:
                    "npm-run-all lint dist js-test docs-compile docs-lint bundlesize",
                "update-deps":
                    'ncu -a -x jquery -x bundlesize && npm update && bundle update && cross-env-shell echo Manually update \\"site/docs/$npm_package_version_short/assets/js/vendor/\\"',
                watch: "npm-run-all --parallel watch-*",
                "watch-css-docs":
                    'nodemon --watch "site/docs/**/assets/scss/" --ext scss --exec "npm run css-docs"',
                "watch-css-main":
                    'nodemon --watch scss/ --ext scss --exec "npm run css-main"',
                "watch-js-docs":
                    'nodemon --watch "site/docs/**/assets/js/src/" --ext js --exec "npm run js-docs"',
                "watch-js-main":
                    'nodemon --watch js/src/ --ext js --exec "npm run js-compile"'
            },
            style: "dist/css/bootstrap.css",
            version_short: "4.3"
        },
        {
            name: "can-define-validate-validatejs",
            version: "1.1.1",
            origFileUrl:
                "./node_modules/can-define-validate-validatejs/package.json",
            fileUrl:
                "./node_modules/can-define-validate-validatejs/package.json",
            _from: "can-define-validate-validatejs@^1.1.1",
            _id: "can-define-validate-validatejs@1.1.1",
            _inBundle: false,
            _integrity:
                "sha512-uOLqkv0PrPc6KzrfGCaDEKlnKhb2/YqYgQbqOHj2/s7Ys653ZM41PSin40PJmpOX6XIr48itE0vF0h3ivLkILQ==",
            _location: "/can-define-validate-validatejs",
            _phantomChildren: {
                "can-reflect": "1.17.11",
                "validate.js": "0.11.1"
            },
            _requested: {
                type: "range",
                registry: true,
                raw: "can-define-validate-validatejs@^1.1.1",
                name: "can-define-validate-validatejs",
                escapedName: "can-define-validate-validatejs",
                rawSpec: "^1.1.1",
                saveSpec: null,
                fetchSpec: "^1.1.1"
            },
            _requiredBy: ["/", "/can"],
            _resolved:
                "https://registry.npmjs.org/can-define-validate-validatejs/-/can-define-validate-validatejs-1.1.1.tgz",
            _shasum: "5332319c49997b79ede13cb4e7a72a6d292bffb0",
            _spec: "can-define-validate-validatejs@^1.1.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs",
            author: { name: "Bitovi" },
            browser: {},
            bugs: {
                url:
                    "https://github.com/canjs/can-define-validate-validatejs/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.1.1",
                "can-define": "^2.0.0",
                "can-reflect": "^1.11.1",
                "can-validate": "^1.1.0",
                "can-validate-validatejs": "^0.1.0"
            },
            deprecated: false,
            description: "Validation helpers for can-define maps and lists.",
            devDependencies: {
                "bit-docs": "^0.0.8",
                "can-compute": "^4.0.0",
                "detect-cyclic-packages": "^1.1.0",
                "http-server": "^0.11.0",
                jshint: "^2.9.5",
                steal: "^1.5.14",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.9.0",
                testee: "^0.9.0"
            },
            homepage: "https://github.com/canjs/can-define-validate-validatejs",
            keywords: ["Validate", "plugin", "canjs"],
            license: "MIT",
            main: "can-define-validate-validatejs.js",
            repository: {
                type: "git",
                url:
                    "git+https://github.com/canjs/can-define-validate-validatejs.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "http-server -c-1",
                jshint: "jshint *.js --config",
                postversion:
                    "git push --tags && git checkout - && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major":
                    "npm version major && npm run build && npm publish",
                "release:minor":
                    "npm version minor && npm run build && npm publish",
                "release:patch":
                    "npm version patch && npm run build && npm publish",
                "release:pre":
                    "npm version prerelease && npm run build && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            },
            steal: {
                ignoreBrowser: true,
                npmIgnore: {
                    documentjs: true,
                    testee: true,
                    "steal-tools": true
                },
                npmDependencies: { "steal-qunit": true }
            }
        },
        {
            name: "can-stache",
            version: "4.17.19",
            nestedFileUrl:
                "./node_modules/shuttle-canstrap/node_modules/can-stache/package.json",
            origFileUrl: "./node_modules/can-stache/package.json",
            fileUrl: "./node_modules/can-stache/package.json",
            _from: "can-stache@4.17.19",
            _id: "can-stache@4.17.19",
            _inBundle: false,
            _integrity:
                "sha512-Vb1LM2mH2keP7tqGEibth7jENCF09Tb4YXdcxWI2utm947AclpISA7uzAqs7vSiY5+qCablc6VxvG1IOQ2jBxg==",
            _location: "/can-stache",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-stache@4.17.19",
                name: "can-stache",
                escapedName: "can-stache",
                rawSpec: "4.17.19",
                saveSpec: null,
                fetchSpec: "4.17.19"
            },
            _requiredBy: [
                "/can",
                "/can-component",
                "/can-connect-tag",
                "/can-stache-bindings",
                "/can-stache-converters",
                "/can-stache-element",
                "/can-stache-route-helpers",
                "/steal-stache"
            ],
            _resolved:
                "https://registry.npmjs.org/can-stache/-/can-stache-4.17.19.tgz",
            _shasum: "11454eb6daaa8a43d330a654ccb5ce6d37968912",
            _spec: "can-stache@4.17.19",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-stache/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.1.1",
                "can-attribute-encoder": "^1.0.0",
                "can-child-nodes": "^1.0.0",
                "can-define-lazy-value": "^1.0.2",
                "can-dom-data": "^1.0.1",
                "can-dom-mutate": "^1.3.6",
                "can-fragment": "^1.3.0",
                "can-globals": "^1.1.1",
                "can-import-module": "^1.0.0",
                "can-join-uris": "^1.0.0",
                "can-log": "^1.0.0",
                "can-namespace": "1.0.0",
                "can-observation": "^4.0.0",
                "can-observation-recorder": "^1.3.0",
                "can-reflect": "^1.16.4",
                "can-simple-observable": "^2.0.3",
                "can-stache-ast": "^1.0.0",
                "can-stache-helpers": "^1.0.0",
                "can-stache-key": "^1.3.1",
                "can-string": "<2.0.0",
                "can-symbol": "^1.6.4",
                "can-view-callbacks": "^4.2.0",
                "can-view-live": "^4.2.0",
                "can-view-nodelist": "^4.2.0",
                "can-view-parser": "^4.0.0",
                "can-view-scope": "^4.12.0",
                "can-view-target": "^4.1.2"
            },
            deprecated: false,
            description: "Live binding handlebars templates",
            devDependencies: {
                "can-define": "^2.0.4",
                "can-queues": "^1.2.1",
                "can-simple-map": "^4.0.0",
                "can-test-helpers": "^1.1.2",
                "can-vdom": "^4.0.0",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.4",
                steal: "^1.5.19",
                "steal-benchmark": "^0.0.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.0.1",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/doc/can-stache.html",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            license: "MIT",
            main: "can-stache",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-stache.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages",
                jshint: "jshint . --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            }
        },
        {
            name: "can",
            version: "5.31.0",
            origFileUrl: "./node_modules/can/package.json",
            fileUrl: "./node_modules/can/package.json",
            _from: "can@^5.28.4",
            _id: "can@5.31.0",
            _inBundle: false,
            _integrity:
                "sha512-AHu3eKzWxlyYuG6epsXrcLQNdq5+poTTPG4Ma4P1GPZgFx7Hmb3TIUCk6Wn2ZqqYvpw2kZ5h+WFF45a8iKw/og==",
            _location: "/can",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can@^5.28.4",
                name: "can",
                escapedName: "can",
                rawSpec: "^5.28.4",
                saveSpec: null,
                fetchSpec: "^5.28.4"
            },
            _requiredBy: ["/", "/shuttle-can-api", "/shuttle-canstrap"],
            _resolved: "https://registry.npmjs.org/can/-/can-5.31.0.tgz",
            _shasum: "6ec17e3ca3118dc9b339ea0e6138e959b638e730",
            _spec: "can@^5.28.4",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com/"
            },
            "bit-docs": {
                html: {
                    dependencies: {
                        "normalize.css": "^5.0.0",
                        "steal-conditional": "^0.3.6",
                        "steal-stache": "^4.0.1"
                    },
                    package: {
                        steal: {
                            configDependencies: [
                                "./node_modules/steal-conditional/conditional"
                            ]
                        }
                    },
                    static: [],
                    templates: []
                },
                dependencies: {
                    "bit-docs-glob-finder": "^0.0.5",
                    "bit-docs-dev": "^0.0.3",
                    "bit-docs-js": "^0.0.6",
                    "bit-docs-tag-sourceref": "^0.0.3",
                    "bit-docs-generate-html": "^0.11.0",
                    "bit-docs-generate-searchmap": "^0.2.0",
                    "bit-docs-html-canjs": "^2.4.1",
                    "bit-docs-prettify": "^0.3.0",
                    "bit-docs-html-highlight-line": "^0.5.3",
                    "bit-docs-tag-demo": "^0.5.3",
                    "bit-docs-tag-package": "^1.0.0",
                    "bit-docs-html-codepen-link": "^1.2.1",
                    "bit-docs-html-toc": "^1.1.1"
                },
                glob: {
                    pattern:
                        "{node_modules,docs}/{can-*,steal-stache}/**/*.{js,md}",
                    ignore: [
                        "node_modules/can-namespace/**/*",
                        "node_modules/can-wait/examples/**/*",
                        "node_modules/can-*/dist/**/*",
                        "node_modules/*/node_modules/**/*",
                        "node_modules/can-debug/src/draw-graph/vis.js"
                    ]
                },
                altVersions: {
                    "6.0.0-pre.4": "https://next.canjs.com",
                    "4.3.0": "https://v4.canjs.com",
                    "3.13.1": "https://v3.canjs.com",
                    "2.3.35": "https://v2.canjs.com"
                },
                parent: "canjs",
                minifyBuild: true,
                codepen: [
                    ['"can"', '"//unpkg.com/can@5/core.mjs"'],
                    ['"can/everything"', '"//unpkg.com/can@5/everything.mjs"'],
                    [
                        '"can/demos/technology-overview/mock-url"',
                        '"//unpkg.com/mock-url@^5.0.0/mock-url.mjs"'
                    ],
                    [
                        '"can/demos/technology-overview/route-mini-app-components"',
                        '"//unpkg.com/route-mini-app@^5.0.0/components.mjs"'
                    ],
                    ["return steal.import(", "return import("],
                    [
                        '"can/demos/technology-overview/page-login"',
                        '"//unpkg.com/route-mini-app@^5.0.0/page-login.mjs"'
                    ],
                    [
                        "`can/demos/technology-overview/page-${this.page}`",
                        "`//unpkg.com/route-mini-app@^5.0.0/page-${this.page}.mjs`"
                    ]
                ]
            },
            bugs: { url: "https://github.com/canjs/canjs/issues" },
            bundleDependencies: false,
            demos: ["http://canjs.us/#examples", "http://canjs.us/recipes"],
            dependencies: {
                "can-ajax": "2.4.4",
                "can-assign": "1.3.3",
                "can-attribute-encoder": "1.1.4",
                "can-attribute-observable": "1.2.6",
                "can-bind": "1.4.3",
                "can-child-nodes": "1.2.1",
                "can-cid": "1.3.1",
                "can-component": "4.6.2",
                "can-compute": "4.1.1",
                "can-connect": "3.2.1",
                "can-connect-feathers": "5.0.1",
                "can-connect-ndjson": "1.0.1",
                "can-connect-tag": "1.0.1",
                "can-construct": "3.5.6",
                "can-construct-super": "3.2.1",
                "can-control": "4.4.2",
                "can-data-types": "1.2.1",
                "can-debug": "2.0.7",
                "can-define": "2.7.21",
                "can-define-backup": "2.1.2",
                "can-define-lazy-value": "1.1.1",
                "can-define-stream": "1.1.1",
                "can-define-stream-kefir": "1.1.1",
                "can-define-validate-validatejs": "1.1.1",
                "can-deparam": "1.2.1",
                "can-diff": "1.4.5",
                "can-dom-data": "1.0.3",
                "can-dom-data-state": "1.1.2",
                "can-dom-events": "1.3.11",
                "can-dom-mutate": "1.3.9",
                "can-event-dom-enter": "2.2.1",
                "can-event-dom-radiochange": "2.2.1",
                "can-event-queue": "1.1.6",
                "can-fixture": "3.1.7",
                "can-fixture-socket": "2.0.2",
                "can-fragment": "1.3.1",
                "can-globals": "1.2.2",
                "can-kefir": "1.1.4",
                "can-key": "1.2.1",
                "can-key-tree": "1.2.2",
                "can-list": "4.2.2",
                "can-local-store": "1.0.1",
                "can-log": "1.0.2",
                "can-make-map": "1.2.1",
                "can-map": "4.3.8",
                "can-map-compat": "1.1.1",
                "can-map-define": "4.3.8",
                "can-memory-store": "1.0.2",
                "can-namespace": "1.0.0",
                "can-ndjson-stream": "1.0.1",
                "can-observable-array": "0.5.0",
                "can-observable-mixin": "0.4.0",
                "can-observable-object": "0.2.0",
                "can-observation": "4.1.3",
                "can-observation-recorder": "1.3.1",
                "can-observe": "2.3.1",
                "can-param": "1.1.2",
                "can-parse-uri": "1.2.2",
                "can-query-logic": "1.2.1",
                "can-queues": "1.2.2",
                "can-realtime-rest-model": "1.1.1",
                "can-reflect": "1.17.11",
                "can-reflect-dependencies": "1.1.2",
                "can-reflect-promise": "2.2.1",
                "can-rest-model": "1.1.1",
                "can-route": "4.4.9",
                "can-route-hash": "1.0.2",
                "can-route-mock": "1.0.2",
                "can-route-pushstate": "5.0.13",
                "can-set-legacy": "1.0.1",
                "can-simple-dom": "1.6.2",
                "can-simple-map": "4.3.2",
                "can-simple-observable": "2.4.2",
                "can-stache": "4.17.19",
                "can-stache-bindings": "4.10.9",
                "can-stache-converters": "4.2.6",
                "can-stache-element": "0.8.1",
                "can-stache-key": "1.4.3",
                "can-stache-route-helpers": "1.2.1",
                "can-stream": "1.1.1",
                "can-stream-kefir": "1.2.1",
                "can-string": "1.1.0",
                "can-string-to-any": "1.2.1",
                "can-super-model": "1.1.1",
                "can-symbol": "1.6.5",
                "can-type": "0.1.13",
                "can-validate": "1.2.1",
                "can-validate-interface": "1.0.3",
                "can-validate-legacy": "2.0.1",
                "can-validate-validatejs": "1.0.1",
                "can-value": "1.1.1",
                "can-vdom": "4.4.1",
                "can-view-autorender": "5.0.4",
                "can-view-callbacks": "4.4.0",
                "can-view-live": "4.2.8",
                "can-view-model": "4.0.3",
                "can-view-nodelist": "4.3.4",
                "can-view-parser": "4.1.3",
                "can-view-scope": "4.13.2",
                "can-view-target": "4.1.6",
                "steal-stache": "4.1.5"
            },
            deprecated: false,
            description:
                "MIT-licensed, client-side, JavaScript framework that makes building rich web applications easy.",
            devDependencies: {
                "@feathersjs/feathers": "^3.3.1",
                "@feathersjs/socketio-client": "^1.2.1",
                "@octokit/rest": "^16.27.3",
                "bit-docs": "0.0.11",
                "can-reflect-tests": "^0.3.1",
                "can-test-helpers": "^1.1.1",
                "core-js": "^2.5.7",
                "es6-promise-polyfill": "^1.2.0",
                funcunit: "^3.4.2",
                "gzip-size": "^4.1.0",
                "http-server": "^0.11.1",
                jquery: "2.x - 3.x",
                "jquery-ui": "^1.12.0",
                kefir: "^3.8.0",
                "prop-types": "^15.5.10",
                qunit: "^2.9.2",
                semver: "^6.1.1",
                "socket.io-client": "^2.2.0",
                steal: "^2.0.0",
                "steal-conditional": "^0.4.0",
                "steal-css": "^1.2.4",
                "steal-qunit": "^2.0.0",
                "steal-socket.io": "^4.0.9",
                "steal-tools": "^2.0.6",
                "test-saucelabs": "0.0.6",
                testee: "^0.9.0",
                webpack: "^4.12.0",
                "webpack-cli": "^3.0.7"
            },
            googleAnalyticsTrackingCode: "UA-2302003-11",
            homepage: "http://canjs.com/",
            keywords: ["CanJS", "DoneJS"],
            licenses: [
                {
                    type: "MIT",
                    url: "http://opensource.org/licenses/mit-license.php"
                }
            ],
            main: "can.js",
            repository: {
                type: "git",
                url: "git+ssh://git@github.com/canjs/canjs.git",
                github: "https://github.com/canjs/canjs"
            },
            scripts: {
                build:
                    "node build.js && npm run make-copy-of-globals-for-can4-compat",
                "build-tests": "node test/build.js",
                "build-webpack-test":
                    "webpack -o test/builders/webpack/bundle.js test/builders/webpack/index.js",
                "deps-bundle": "node build-dev-bundle",
                document:
                    "./pre-document.sh && npm run deps-bundle && bit-docs",
                "document:force":
                    "./pre-document.sh && npm run deps-bundle && bit-docs -fd",
                "http-server": "http-server -p 3000 --silent",
                "make-copy-of-globals-for-can4-compat":
                    "echo 'console.warn(\"This build is deprecated. Please update your URLs to the version of CanJS you intend to use, such as https://unpkg.com/can@4/dist/global/can.js\");' | cat - dist/global/core.js > dist/global/can.js && echo 'console.warn(\"This build is deprecated. Please update your URLs to the version of CanJS you intend to use, such as https://unpkg.com/can@4/dist/global/can.all.js\");' | cat - dist/global/everything.js > dist/global/can.all.js",
                postversion:
                    "git push --tags && git checkout - && git branch -D release && git push",
                preversion: "npm test",
                "release:major":
                    "npm version major && npm run build && npm publish",
                "release:minor":
                    "npm version minor && npm run build && npm publish",
                "release:patch":
                    "npm version patch && npm run build && npm publish",
                "release:pre":
                    "npm version prerelease && npm run build && npm publish --tag=pre",
                test:
                    "npm run test-development && npm run test-production && npm run test-builders && npm run test-global-build",
                "test-builders":
                    "npm run build-webpack-test && npm run testee-builders",
                "test-development": "npm run testee",
                "test-global-build":
                    "npm run build && npm run testee-global-build",
                "test-local": "npm run build && npm run testee",
                "test-production":
                    "npm run build-tests && npm run testee-production",
                "test-sauce-labs": "node test/test-sauce-labs.js",
                testee: "testee test/index.html --browsers firefox",
                "testee-builders":
                    "testee test/builders/test.html --browsers firefox",
                "testee-global-build":
                    "testee test/global-build.html --browsers firefox",
                "testee-production":
                    "testee test/production.html --browsers firefox",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            },
            sideEffects: false,
            steal: {
                npmAlgorithm: "flat",
                npmIgnore: {
                    "bit-docs": true,
                    testee: true,
                    async: true,
                    saucelabs: true,
                    "test-saucelabs": true,
                    wd: true,
                    "http-server": true
                },
                meta: { "socket.io-client/dist/socket.io": { format: "cjs" } },
                plugins: ["steal-stache"],
                main: "can"
            },
            title: "CanJS"
        },
        {
            name: "shuttle-guard",
            version: "1.0.0",
            nestedFileUrl:
                "./node_modules/shuttle-can-api/node_modules/shuttle-guard/package.json",
            origFileUrl: "./node_modules/shuttle-guard/package.json",
            fileUrl: "./node_modules/shuttle-guard/package.json",
            _from: "shuttle-guard@^1.0.0",
            _id: "shuttle-guard@1.0.0",
            _inBundle: false,
            _integrity:
                "sha512-8ghDgPpykaH8qDfb7zn8ii7R2jlkZEkLDgxlEH8MlG9jEArM6f+2sJirynjp2EMxPHpK5Sp7aybT0fMGh3HWkw==",
            _location: "/shuttle-guard",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "shuttle-guard@^1.0.0",
                name: "shuttle-guard",
                escapedName: "shuttle-guard",
                rawSpec: "^1.0.0",
                saveSpec: null,
                fetchSpec: "^1.0.0"
            },
            _requiredBy: ["/", "/shuttle-can-api", "/shuttle-canstrap"],
            _resolved:
                "https://registry.npmjs.org/shuttle-guard/-/shuttle-guard-1.0.0.tgz",
            _shasum: "2603352e1ad4962fba75b69a76d0a3b7ed42201b",
            _spec: "shuttle-guard@^1.0.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs",
            author: { name: "Eben Roux" },
            bugs: {
                url: "https://github.com/shuttle-npm/shuttle-guard/issues"
            },
            bundleDependencies: false,
            deprecated: false,
            description: "Guard methods.",
            homepage: "https://github.com/shuttle-npm/shuttle-guard#readme",
            keywords: ["guard"],
            license: "BSD-3-Clause",
            main: "shuttle-guard.js",
            repository: {
                type: "git",
                url: "git+https://github.com/shuttle-npm/shuttle-guard.git"
            },
            scripts: { test: 'echo "Error: no test specified" && exit 1' }
        },
        {
            name: "moment",
            version: "2.24.0",
            nestedFileUrl:
                "./node_modules/shuttle-canstrap/node_modules/moment/package.json",
            origFileUrl: "./node_modules/moment/package.json",
            fileUrl: "./node_modules/moment/package.json",
            _from: "moment@^2.24.0",
            _id: "moment@2.24.0",
            _inBundle: false,
            _integrity:
                "sha512-bV7f+6l2QigeBBZSM/6yTNq4P2fNpSWj/0e7jQcy87A8e7o2nAfP/34/2ky5Vw4B9S446EtIhodAzkFCcR4dQg==",
            _location: "/moment",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "moment@^2.24.0",
                name: "moment",
                escapedName: "moment",
                rawSpec: "^2.24.0",
                saveSpec: null,
                fetchSpec: "^2.24.0"
            },
            _requiredBy: [
                "/",
                "/moment-timezone",
                "/tempusdominus-bootstrap-4"
            ],
            _resolved: "https://registry.npmjs.org/moment/-/moment-2.24.0.tgz",
            _shasum: "0d055d53f5052aa653c9f6eb68bb5d12bf5c2b5b",
            _spec: "moment@^2.24.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs",
            author: {
                name: "Iskren Ivov Chernev",
                email: "iskren.chernev@gmail.com",
                url: "https://github.com/ichernev"
            },
            bugs: { url: "https://github.com/moment/moment/issues" },
            bundleDependencies: false,
            contributors: [
                {
                    name: "Tim Wood",
                    email: "washwithcare@gmail.com",
                    url: "http://timwoodcreates.com/"
                },
                { name: "Rocky Meza", url: "http://rockymeza.com" },
                {
                    name: "Matt Johnson",
                    email: "mj1856@hotmail.com",
                    url: "http://codeofmatt.com"
                },
                {
                    name: "Isaac Cambron",
                    email: "isaac@isaaccambron.com",
                    url: "http://isaaccambron.com"
                },
                {
                    name: "Andre Polykanine",
                    email: "andre@oire.org",
                    url: "https://github.com/oire"
                }
            ],
            deprecated: false,
            description: "Parse, validate, manipulate, and display dates",
            devDependencies: {
                benchmark: "latest",
                coveralls: "^3.0.2",
                "es6-promise": "latest",
                grunt: "~0.4",
                "grunt-benchmark": "latest",
                "grunt-cli": "latest",
                "grunt-contrib-clean": "latest",
                "grunt-contrib-concat": "latest",
                "grunt-contrib-copy": "latest",
                "grunt-contrib-jshint": "latest",
                "grunt-contrib-uglify": "latest",
                "grunt-contrib-watch": "^1.1.0",
                "grunt-env": "latest",
                "grunt-exec": "latest",
                "grunt-jscs": "latest",
                "grunt-karma": "latest",
                "grunt-nuget": "latest",
                "grunt-string-replace": "latest",
                karma: "latest",
                "karma-chrome-launcher": "latest",
                "karma-firefox-launcher": "latest",
                "karma-qunit": "latest",
                "karma-sauce-launcher": "latest",
                "load-grunt-tasks": "~3.5.2",
                "node-qunit": "^1.0.0",
                nyc: "~11.9.0",
                qunit: "^2.7.1",
                rollup: "~0.67.4",
                spacejam: "latest",
                typescript: "^1.8.10",
                "uglify-js": "latest"
            },
            dojoBuild: "package.js",
            ender: "./ender.js",
            engines: { node: "*" },
            homepage: "http://momentjs.com",
            "jsnext:main": "./src/moment.js",
            jspm: {
                files: ["moment.js", "moment.d.ts", "locale"],
                map: { moment: "./moment" },
                buildConfig: { uglify: true }
            },
            keywords: [
                "moment",
                "date",
                "time",
                "parse",
                "format",
                "validate",
                "i18n",
                "l10n",
                "ender"
            ],
            license: "MIT",
            main: "./moment.js",
            repository: {
                type: "git",
                url: "git+https://github.com/moment/moment.git"
            },
            scripts: {
                coverage: "nyc npm test && nyc report",
                coveralls:
                    "nyc npm test && nyc report --reporter=text-lcov | coveralls",
                test: "grunt test",
                "typescript-test": "tsc --project typing-tests"
            },
            spm: { main: "moment.js", output: ["locale/*.js"] },
            typings: "./moment.d.ts"
        },
        {
            name: "can-validate-validatejs",
            version: "1.0.1",
            nestedFileUrl:
                "./node_modules/can-define-validate-validatejs/node_modules/can-validate-validatejs/package.json",
            origFileUrl: "./node_modules/can-validate-validatejs/package.json",
            fileUrl: "./node_modules/can-validate-validatejs/package.json",
            _from: "can-validate-validatejs@1.0.1",
            _id: "can-validate-validatejs@1.0.1",
            _inBundle: false,
            _integrity:
                "sha512-2n2gvyeggyYBpQRG9V19UML7ME6BvSSJweQKkGNO2WulRH/tRhTuDK8k2tuJM3woFnDZo1uTAEIxr+Hdwr79mw==",
            _location: "/can-validate-validatejs",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-validate-validatejs@1.0.1",
                name: "can-validate-validatejs",
                escapedName: "can-validate-validatejs",
                rawSpec: "1.0.1",
                saveSpec: null,
                fetchSpec: "1.0.1"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-validate-validatejs/-/can-validate-validatejs-1.0.1.tgz",
            _shasum: "80d9cc6589e841a1a799e5ac62459d49c420f55a",
            _spec: "can-validate-validatejs@1.0.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: { name: "Bitovi" },
            bugs: {
                url: "https://github.com/canjs/can-validate-validatejs/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-reflect": "^1.11.1",
                "validate.js": "^0.11.1"
            },
            deprecated: false,
            description:
                "Create validator functions that use ValidateJS to validate values.",
            devDependencies: {
                "bit-docs": "^0.0.8",
                "detect-cyclic-packages": "^1.1.0",
                "http-server": "^0.11.0",
                jshint: "^2.9.4",
                steal: "^1.0.8",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.0.1",
                testee: "^0.9.0"
            },
            homepage: "https://github.com/canjs/can-validate-validatejs#readme",
            keywords: [
                "Validate",
                "Validate.js",
                "can-validate",
                "plugin",
                "canjs"
            ],
            license: "MIT",
            main: "can-validate-validatejs.js",
            repository: {
                type: "git",
                url: "git+https://github.com/canjs/can-validate-validatejs.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "http-server -c-1",
                jshint: "jshint . --config",
                postversion:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major":
                    "npm version major && npm run build && npm publish",
                "release:minor":
                    "npm version minor && npm run build && npm publish",
                "release:patch":
                    "npm version patch && npm run build && npm publish",
                "release:pre":
                    "npm version prerelease && npm run build && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            },
            steal: {
                ignoreBrowser: true,
                npmIgnore: {
                    "bit-docs": true,
                    testee: true,
                    "steal-tools": true
                },
                npmDependencies: { "steal-qunit": true },
                paths: {}
            }
        },
        {
            name: "can-define",
            version: "2.7.21",
            nestedFileUrl:
                "./node_modules/can-define-validate-validatejs/node_modules/can-define/package.json",
            origFileUrl: "./node_modules/can-define/package.json",
            fileUrl: "./node_modules/can-define/package.json",
            _from: "can-define@2.7.21",
            _id: "can-define@2.7.21",
            _inBundle: false,
            _integrity:
                "sha512-vU14CTo6r2A7itybVl8Q2V6djdJvsMPGLmACVmDCMNLNdpKBl+FyiHvzsWg5V2dAZ0jT8yJY1AXtvGXRO4N80Q==",
            _location: "/can-define",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-define@2.7.21",
                name: "can-define",
                escapedName: "can-define",
                rawSpec: "2.7.21",
                saveSpec: null,
                fetchSpec: "2.7.21"
            },
            _requiredBy: [
                "/can",
                "/can-component",
                "/can-connect",
                "/can-define-backup",
                "/can-define-connected-singleton",
                "/can-define-stream",
                "/can-define-stream-kefir",
                "/can-define-validate-validatejs",
                "/can-realtime-rest-model",
                "/can-rest-model",
                "/can-route",
                "/can-stream",
                "/can-super-model"
            ],
            _resolved:
                "https://registry.npmjs.org/can-define/-/can-define-2.7.21.tgz",
            _shasum: "05574d582c3a5177b2ba6dd6bb34a8a69b614fa8",
            _spec: "can-define@2.7.21",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: { name: "Bitovi" },
            bugs: { url: "https://github.com/canjs/can-define/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.1.1",
                "can-construct": "^3.5.4",
                "can-data-types": "<2.0.0",
                "can-define-lazy-value": "^1.0.0",
                "can-diff": "^1.0.0",
                "can-event-queue": "^1.0.0",
                "can-log": "^1.0.0",
                "can-namespace": "^1.0.0",
                "can-observation": "^4.0.0",
                "can-observation-recorder": "^1.0.0",
                "can-queues": "^1.0.0",
                "can-reflect": "^1.15.0",
                "can-simple-observable": "^2.4.0",
                "can-single-reference": "^1.0.0",
                "can-string-to-any": "^1.0.1",
                "can-symbol": "^1.0.0"
            },
            deprecated: false,
            description:
                "Create observable objects with JS dot operator compatibility",
            devDependencies: {
                "can-reflect-tests": "<0.3.0",
                "can-test-helpers": "^1.1.4",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                serve: "^11.0.0",
                steal: "^2.0.0",
                "steal-qunit": "^2.0.0",
                testee: "^0.9.0"
            },
            homepage: "https://github.com/canjs/can-define",
            keywords: ["CanJS"],
            license: "MIT",
            main: "can-define.js",
            repository: {
                type: "git",
                url: "git+https://github.com/canjs/can-define.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages",
                jshint:
                    "jshint --config .jshintrc --exclude ./node_modules,./dist .",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                start: "serve -p 8080",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            }
        },
        {
            name: "can-assign",
            version: "1.3.3",
            nestedFileUrl:
                "./node_modules/can-define-validate-validatejs/node_modules/can-assign/package.json",
            origFileUrl: "./node_modules/can-assign/package.json",
            fileUrl: "./node_modules/can-assign/package.json",
            _from: "can-assign@1.3.3",
            _id: "can-assign@1.3.3",
            _inBundle: false,
            _integrity:
                "sha512-HM8IGrfw1Z6mPodmu5GW+eCv/b9e8T2vycC6LVfmRSgHLTl+G9PJIKtHnl/sgbqH9muZhbw5jGmJPKu7N0tanA==",
            _location: "/can-assign",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-assign@1.3.3",
                name: "can-assign",
                escapedName: "can-assign",
                rawSpec: "1.3.3",
                saveSpec: null,
                fetchSpec: "1.3.3"
            },
            _requiredBy: [
                "/can",
                "/can-attribute-observable",
                "/can-bind",
                "/can-component",
                "/can-compute",
                "/can-connect-feathers",
                "/can-control",
                "/can-debug",
                "/can-define",
                "/can-define-backup",
                "/can-define-stream",
                "/can-define-validate-validatejs",
                "/can-fixture-socket",
                "/can-list",
                "/can-map",
                "/can-map-define",
                "/can-observable-mixin",
                "/can-query-logic",
                "/can-queues",
                "/can-reflect-dependencies",
                "/can-stache",
                "/can-stache-bindings",
                "/can-stream",
                "/can-util",
                "/can-validate-legacy",
                "/can-vdom",
                "/can-view-import",
                "/can-view-scope",
                "/steal-stache"
            ],
            _resolved:
                "https://registry.npmjs.org/can-assign/-/can-assign-1.3.3.tgz",
            _shasum: "1f988d202156d8c21c0b7aa50f6366eaff815c25",
            _spec: "can-assign@1.3.3",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "https://www.bitovi.com/"
            },
            bugs: { url: "https://github.com/canjs/can-assign/issues" },
            bundleDependencies: false,
            dependencies: { "can-namespace": "1.0.0" },
            deprecated: false,
            description:
                "A simplified version of Object.assign, which only accepts a single source argument.",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                "done-serve": "^3.3.1",
                "donejs-cli": "^3.1.1",
                "generator-donejs": "^3.3.0",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/",
            keywords: ["canjs", "object", "assign"],
            main: "can-assign",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-assign.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                }
            }
        },
        {
            name: "can-reflect",
            version: "1.17.11",
            nestedFileUrl:
                "./node_modules/can-define-validate-validatejs/node_modules/can-reflect/package.json",
            origFileUrl: "./node_modules/can-reflect/package.json",
            fileUrl: "./node_modules/can-reflect/package.json",
            _from: "can-reflect@1.17.11",
            _id: "can-reflect@1.17.11",
            _inBundle: false,
            _integrity:
                "sha512-5etmsHgAw9EisFeUBLwoc9IbrwA1OJ7rEhP56Xlb4r0IrXzYgmF9L3zGT3PIQiPN59OBonN/vQorRjZ9T09K+Q==",
            _location: "/can-reflect",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-reflect@1.17.11",
                name: "can-reflect",
                escapedName: "can-reflect",
                rawSpec: "1.17.11",
                saveSpec: null,
                fetchSpec: "1.17.11"
            },
            _requiredBy: [
                "/can",
                "/can-ajax",
                "/can-attribute-observable",
                "/can-bind",
                "/can-component",
                "/can-compute",
                "/can-connect",
                "/can-connect-ndjson",
                "/can-connect-tag",
                "/can-construct",
                "/can-construct-super",
                "/can-control",
                "/can-data-types",
                "/can-debug",
                "/can-define",
                "/can-define-backup",
                "/can-define-stream",
                "/can-define-validate-validatejs",
                "/can-define-validate-validatejs/can-validate-validatejs",
                "/can-diff",
                "/can-dom-events",
                "/can-dom-mutate",
                "/can-event-queue",
                "/can-fixture",
                "/can-fragment",
                "/can-globals",
                "/can-kefir",
                "/can-key",
                "/can-key-tree",
                "/can-list",
                "/can-local-store",
                "/can-map",
                "/can-map-compat",
                "/can-map-define",
                "/can-memory-store",
                "/can-observable-array",
                "/can-observable-mixin",
                "/can-observation",
                "/can-observe",
                "/can-query-logic",
                "/can-realtime-rest-model",
                "/can-reflect-dependencies",
                "/can-reflect-promise",
                "/can-rest-model",
                "/can-route",
                "/can-route-hash",
                "/can-route-mock",
                "/can-route-pushstate",
                "/can-set-legacy",
                "/can-simple-map",
                "/can-simple-observable",
                "/can-sort-object",
                "/can-stache",
                "/can-stache-bindings",
                "/can-stache-converters",
                "/can-stache-key",
                "/can-stache-route-helpers",
                "/can-stream",
                "/can-super-model",
                "/can-type",
                "/can-types",
                "/can-util",
                "/can-util/can-ajax",
                "/can-validate",
                "/can-validate-legacy",
                "/can-validate-validatejs",
                "/can-value",
                "/can-view-autorender",
                "/can-view-callbacks",
                "/can-view-live",
                "/can-view-model",
                "/can-view-scope"
            ],
            _resolved:
                "https://registry.npmjs.org/can-reflect/-/can-reflect-1.17.11.tgz",
            _shasum: "3a4eacb1e0483f8e15e89f646b487019da0e359f",
            _spec: "can-reflect@1.17.11",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "DoneJS core team",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-reflect/issues" },
            bundleDependencies: false,
            dependencies: { "can-namespace": "^1.0.0", "can-symbol": "^1.6.4" },
            deprecated: false,
            description: "reflection on unknown data types",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                "http-server": "^0.11.0",
                jshint: "^2.9.1",
                steal: "^1.0.5",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.0.1",
                "test-saucelabs": "0.0.6",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["donejs"],
            main: "can-reflect",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-reflect.git"
            },
            scripts: {
                build: "node build.js",
                ci: "npm run build && npm run test && node test-saucelabs.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                "http-server": "http-server -p 3000 --silent",
                jshint: "jshint ./*.js reflections/**/*.js types/*.js --config",
                postversion:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            }
        },
        {
            name: "can-validate",
            version: "1.2.1",
            nestedFileUrl:
                "./node_modules/can-define-validate-validatejs/node_modules/can-validate/package.json",
            origFileUrl: "./node_modules/can-validate/package.json",
            fileUrl: "./node_modules/can-validate/package.json",
            _from: "can-validate@1.2.1",
            _id: "can-validate@1.2.1",
            _inBundle: false,
            _integrity:
                "sha512-7zx2xVcteRVcPPmhKK4fT4dStTvlMQwytGEq4ANOzum+tCZ9QLq7IazXxOvbF7dKHNTQ2f+ToyaIEkUzGv2Uqg==",
            _location: "/can-validate",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-validate@1.2.1",
                name: "can-validate",
                escapedName: "can-validate",
                rawSpec: "1.2.1",
                saveSpec: null,
                fetchSpec: "1.2.1"
            },
            _requiredBy: ["/can", "/can-define-validate-validatejs"],
            _resolved:
                "https://registry.npmjs.org/can-validate/-/can-validate-1.2.1.tgz",
            _shasum: "6bd9983965720b5fdb863ec3c413483880f5873d",
            _spec: "can-validate@1.2.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: { name: "Bitovi" },
            browser: {},
            bugs: { url: "https://github.com/canjs/can-validate/issues" },
            bundleDependencies: false,
            dependencies: { "can-reflect": "^1.11.1" },
            deprecated: false,
            description: "Validation plugin for CanJS.",
            devDependencies: {
                "bit-docs": "0.0.8",
                "detect-cyclic-packages": "^1.1.0",
                "http-server": "^0.11.0",
                jshint: "^2.9.4",
                steal: "^1.0.8",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.0.1",
                testee: "^0.9.0"
            },
            homepage: "https://github.com/canjs/can-validate",
            keywords: ["Validate", "plugin", "canjs"],
            license: "MIT",
            main: "can-validate.js",
            repository: {
                type: "git",
                url: "git+https://github.com/canjs/can-validate.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "http-server -c-1",
                jshint: "jshint . --config",
                postversion:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major":
                    "npm version major && npm run build && npm publish",
                "release:minor":
                    "npm version minor && npm run build && npm publish",
                "release:patch":
                    "npm version patch && npm run build && npm publish",
                "release:pre":
                    "npm version prerelease && npm run build && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            },
            steal: {
                ignoreBrowser: true,
                npmIgnore: {
                    documentjs: true,
                    testee: true,
                    "steal-tools": true
                },
                npmDependencies: { "steal-qunit": true }
            }
        },
        {
            name: "can-view-parser",
            version: "4.1.3",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-view-parser/package.json",
            origFileUrl: "./node_modules/can-view-parser/package.json",
            fileUrl: "./node_modules/can-view-parser/package.json",
            _from: "can-view-parser@4.1.3",
            _id: "can-view-parser@4.1.3",
            _inBundle: false,
            _integrity:
                "sha512-+sK9Ntcr+gI8hYo7/6fLUK8R30ER63Vj4FOwZbuIAJrl6MJSJ0cXs+Kljw/NTZyjzLEdynzM3uaqWTNjzP2PLw==",
            _location: "/can-view-parser",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-view-parser@4.1.3",
                name: "can-view-parser",
                escapedName: "can-view-parser",
                rawSpec: "4.1.3",
                saveSpec: null,
                fetchSpec: "4.1.3"
            },
            _requiredBy: [
                "/can",
                "/can-stache",
                "/can-stache-ast",
                "/can-vdom",
                "/can-view-live"
            ],
            _resolved:
                "https://registry.npmjs.org/can-view-parser/-/can-view-parser-4.1.3.tgz",
            _shasum: "9338513649c573d5f3695843617d456ea5417a25",
            _spec: "can-view-parser@4.1.3",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-view-parser/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-attribute-encoder": "^1.0.0",
                "can-log": "^1.0.0",
                "can-namespace": "1.0.0"
            },
            deprecated: false,
            description: "Parses html and magic tags",
            devDependencies: {
                "can-test-helpers": "^1.0.1",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.0.1",
                "steal-qunit": "^2.0.0",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-view-parser",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-view-parser.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint test/*.js ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            }
        },
        {
            name: "can-view-callbacks",
            version: "4.4.0",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-view-callbacks/package.json",
            origFileUrl: "./node_modules/can-view-callbacks/package.json",
            fileUrl: "./node_modules/can-view-callbacks/package.json",
            _from: "can-view-callbacks@4.4.0",
            _id: "can-view-callbacks@4.4.0",
            _inBundle: false,
            _integrity:
                "sha512-w64S8ShGSutI5uhxOlSidnudjQg8yGC7PW4wIp0WJTSe3/JwG7QP377Xjk29zaE2MK9+zJTiE2M1v+7hi9Fk4g==",
            _location: "/can-view-callbacks",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-view-callbacks@4.4.0",
                name: "can-view-callbacks",
                escapedName: "can-view-callbacks",
                rawSpec: "4.4.0",
                saveSpec: null,
                fetchSpec: "4.4.0"
            },
            _requiredBy: [
                "/can",
                "/can-component",
                "/can-connect-tag",
                "/can-stache",
                "/can-stache-bindings",
                "/can-view-import",
                "/can-view-live"
            ],
            _resolved:
                "https://registry.npmjs.org/can-view-callbacks/-/can-view-callbacks-4.4.0.tgz",
            _shasum: "2658da7821b97c7f32b3a4dcf893a60f982d2403",
            _spec: "can-view-callbacks@4.4.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-view-callbacks/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-dom-mutate": "^1.0.0",
                "can-fragment": "^1.0.0",
                "can-globals": "^1.0.0",
                "can-log": "^1.0.0",
                "can-namespace": "1.0.0",
                "can-observation-recorder": "^1.0.0",
                "can-reflect": "^1.16.7",
                "can-symbol": "^1.6.1",
                "can-view-nodelist": "^4.0.0"
            },
            deprecated: false,
            description: "Registered callbacks for behaviors",
            devDependencies: {
                "can-test-helpers": "^1.0.1",
                "can-view-scope": "^4.0.0",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.5.6",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.4.0",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/doc/can-view-callbacks.html",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-view-callbacks",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-view-callbacks.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            }
        },
        {
            name: "can-stache-ast",
            version: "1.1.0",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-stache-ast/package.json",
            origFileUrl: "./node_modules/can-stache-ast/package.json",
            fileUrl: "./node_modules/can-stache-ast/package.json",
            _from: "can-stache-ast@^1.0.0",
            _id: "can-stache-ast@1.1.0",
            _inBundle: false,
            _integrity:
                "sha512-3df63QcrsJo6XYj8E3RGerr/Z+nGoKO/Cg0TaSybrdNqJmK7XtLsP42XMc4OrIH/edDQ63BH2DfAtTdSMTEbqQ==",
            _location: "/can-stache-ast",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-stache-ast@^1.0.0",
                name: "can-stache-ast",
                escapedName: "can-stache-ast",
                rawSpec: "^1.0.0",
                saveSpec: null,
                fetchSpec: "^1.0.0"
            },
            _requiredBy: ["/can-stache", "/steal-stache"],
            _resolved:
                "https://registry.npmjs.org/can-stache-ast/-/can-stache-ast-1.1.0.tgz",
            _shasum: "8e1fe9ad1702bd82d0e245867403c29a2d7fa24a",
            _spec: "can-stache-ast@^1.0.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can-stache",
            author: { name: "Bitovi", email: "contact@bitovi.com" },
            bugs: { url: "https://github.com/canjs/can-stache-ast/issues" },
            bundleDependencies: false,
            dependencies: { "can-view-parser": "^4.0.2" },
            deprecated: false,
            description:
                "[![Build Status](https://travis-ci.org/canjs/can-stache-ast.svg?branch=master)](https://travis-ci.org/canjs/can-stache-ast)",
            devDependencies: {
                jshint: "^2.9.1",
                steal: "^1.6.5",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.11.3",
                testee: "^0.7.0"
            },
            homepage: "https://github.com/canjs/can-stache-ast#readme",
            keywords: ["canjs", "donejs-plugin"],
            license: "MIT",
            main: "can-stache-ast.js",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-stache-ast.git"
            },
            scripts: {
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release'
            }
        },
        {
            name: "can-attribute-encoder",
            version: "1.1.4",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-attribute-encoder/package.json",
            origFileUrl: "./node_modules/can-attribute-encoder/package.json",
            fileUrl: "./node_modules/can-attribute-encoder/package.json",
            _from: "can-attribute-encoder@1.1.4",
            _id: "can-attribute-encoder@1.1.4",
            _inBundle: false,
            _integrity:
                "sha512-ZUHwzrTRNdtVM+7BgTLbDOOyO7dohPhCjEisJ8tOIIha1pvnn4D/pKcz3IAnZ+sUnYZgHK5JjGtiwl/0TlrzaA==",
            _location: "/can-attribute-encoder",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-attribute-encoder@1.1.4",
                name: "can-attribute-encoder",
                escapedName: "can-attribute-encoder",
                rawSpec: "1.1.4",
                saveSpec: null,
                fetchSpec: "1.1.4"
            },
            _requiredBy: [
                "/can",
                "/can-stache",
                "/can-stache-bindings",
                "/can-view-parser"
            ],
            _resolved:
                "https://registry.npmjs.org/can-attribute-encoder/-/can-attribute-encoder-1.1.4.tgz",
            _shasum: "26a16692d86e6998fa1585632d9f95ce0e20adb3",
            _spec: "can-attribute-encoder@1.1.4",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: {
                url: "https://github.com/canjs/can-attribute-encoder/issues"
            },
            bundleDependencies: false,
            dependencies: { "can-log": "^1.0.0", "can-namespace": "^1.0.0" },
            deprecated: false,
            description: "Encode / decode attributes for DOM elements",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.5",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/",
            keywords: ["canjs"],
            license: "MIT",
            main: "can-attribute-encoder",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-attribute-encoder.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: {
                npmIgnore: { testee: true, "steal-tools": true },
                main: "can-attribute-encoder"
            }
        },
        {
            name: "can-namespace",
            version: "1.0.0",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-namespace/package.json",
            origFileUrl: "./node_modules/can-namespace/package.json",
            fileUrl: "./node_modules/can-namespace/package.json",
            _from: "can-namespace@1.0.0",
            _id: "can-namespace@1.0.0",
            _inBundle: false,
            _integrity: "sha1-C4+vr7sRNSuerUIi/+OCJAW0Ppk=",
            _location: "/can-namespace",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-namespace@1.0.0",
                name: "can-namespace",
                escapedName: "can-namespace",
                rawSpec: "1.0.0",
                saveSpec: null,
                fetchSpec: "1.0.0"
            },
            _requiredBy: [
                "/can",
                "/can-ajax",
                "/can-assign",
                "/can-attribute-encoder",
                "/can-bind",
                "/can-child-nodes",
                "/can-cid",
                "/can-component",
                "/can-compute",
                "/can-connect",
                "/can-connect-ndjson",
                "/can-connect-tag",
                "/can-construct",
                "/can-control",
                "/can-data-types",
                "/can-debug",
                "/can-define",
                "/can-define-stream-kefir",
                "/can-deparam",
                "/can-dom-data",
                "/can-dom-data-state",
                "/can-dom-events",
                "/can-dom-mutate",
                "/can-event-dom-enter",
                "/can-event-dom-radiochange",
                "/can-fixture",
                "/can-fragment",
                "/can-globals",
                "/can-import-module",
                "/can-join-uris",
                "/can-key",
                "/can-list",
                "/can-local-store",
                "/can-map",
                "/can-memory-store",
                "/can-ndjson-stream",
                "/can-observable-mixin",
                "/can-observation",
                "/can-observation-recorder",
                "/can-observe",
                "/can-param",
                "/can-parse-uri",
                "/can-queues",
                "/can-realtime-rest-model",
                "/can-reflect",
                "/can-rest-model",
                "/can-route",
                "/can-simple-observable",
                "/can-stache",
                "/can-stache-helpers",
                "/can-stache-key",
                "/can-stream",
                "/can-stream-kefir",
                "/can-super-model",
                "/can-symbol",
                "/can-types",
                "/can-util",
                "/can-util/can-ajax",
                "/can-util/can-dom-data-state",
                "/can-validate-legacy",
                "/can-value",
                "/can-view-autorender",
                "/can-view-callbacks",
                "/can-view-model",
                "/can-view-nodelist",
                "/can-view-parser",
                "/can-view-scope",
                "/can-view-target"
            ],
            _resolved:
                "https://registry.npmjs.org/can-namespace/-/can-namespace-1.0.0.tgz",
            _shasum: "0b8fafafbb11352b9ead4222ffe3822405b43e99",
            _spec: "can-namespace@1.0.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-namespace/issues" },
            bundleDependencies: false,
            dependencies: {},
            deprecated: false,
            description: "Namespace where can-* packages are registered",
            devDependencies: {},
            homepage: "http://canjs.com",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-namespace",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-namespace.git"
            },
            scripts: {},
            system: { npmAlgorithm: "flat" },
            steal: { npmAlgorithm: "flat" }
        },
        {
            name: "can-globals",
            version: "1.2.2",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-globals/package.json",
            origFileUrl: "./node_modules/can-globals/package.json",
            fileUrl: "./node_modules/can-globals/package.json",
            _from: "can-globals@1.2.2",
            _id: "can-globals@1.2.2",
            _inBundle: false,
            _integrity:
                "sha512-wcsZoHIHd+pJ7Tx5NExRJggr3NGoOjJ38mRWlfyE6jAwG7N+Ha4opgosczrFBSHcVLeEJTg2WikCWJjOtgIP/w==",
            _location: "/can-globals",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-globals@1.2.2",
                name: "can-globals",
                escapedName: "can-globals",
                rawSpec: "1.2.2",
                saveSpec: null,
                fetchSpec: "1.2.2"
            },
            _requiredBy: [
                "/can",
                "/can-ajax",
                "/can-attribute-observable",
                "/can-component",
                "/can-connect",
                "/can-debug",
                "/can-dom-events",
                "/can-dom-mutate",
                "/can-event-dom-radiochange",
                "/can-fragment",
                "/can-import-module",
                "/can-observe",
                "/can-realtime-rest-model",
                "/can-rest-model",
                "/can-route",
                "/can-route-hash",
                "/can-route-pushstate",
                "/can-stache",
                "/can-super-model",
                "/can-types",
                "/can-util",
                "/can-util/can-ajax",
                "/can-util/can-event-dom-radiochange",
                "/can-vdom",
                "/can-view-callbacks",
                "/can-view-import",
                "/can-view-model",
                "/can-view-target"
            ],
            _resolved:
                "https://registry.npmjs.org/can-globals/-/can-globals-1.2.2.tgz",
            _shasum: "bf6eb3a3ab4ca46dfd0b3a1c8a2cc9932674cb14",
            _spec: "can-globals@1.2.2",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "https://www.bitovi.com/"
            },
            bugs: { url: "https://github.com/canjs/can-globals/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-namespace": "^1.0.0",
                "can-reflect": "^1.2.6",
                "can-symbol": "^1.0.0"
            },
            deprecated: false,
            description:
                "This module provides a dependency injection container. Modules may define a key and specify a default value (which can be static, cached lazy, or dynamic lazy), but other code can set and reset the value as needed. There is also an event system, for alerting on value changes, both specific to a key and for any key.",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.5",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "https://github.com/canjs/can-globals#readme",
            keywords: [
                "canjs",
                "can-globals",
                "globals",
                "dependancy",
                "injection"
            ],
            license: "MIT",
            main: "can-globals.js",
            repository: {
                type: "git",
                url: "git+https://github.com/canjs/can-globals.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                document: "bit-docs",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm run build && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            }
        },
        {
            name: "can-observation-recorder",
            version: "1.3.1",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-observation-recorder/package.json",
            origFileUrl: "./node_modules/can-observation-recorder/package.json",
            fileUrl: "./node_modules/can-observation-recorder/package.json",
            _from: "can-observation-recorder@1.3.1",
            _id: "can-observation-recorder@1.3.1",
            _inBundle: false,
            _integrity:
                "sha512-cVxn4gDchnhlPZyVgSNxmUH4VbOkeQA9bYUiEUhnOtJJ2sPepOqAiXiY/3/O7pVzjXo3sY5oj+R0/mbudZBxxA==",
            _location: "/can-observation-recorder",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-observation-recorder@1.3.1",
                name: "can-observation-recorder",
                escapedName: "can-observation-recorder",
                rawSpec: "1.3.1",
                saveSpec: null,
                fetchSpec: "1.3.1"
            },
            _requiredBy: [
                "/can",
                "/can-attribute-observable",
                "/can-component",
                "/can-compute",
                "/can-connect",
                "/can-connect-feathers",
                "/can-connect-tag",
                "/can-define",
                "/can-define-connected-singleton",
                "/can-kefir",
                "/can-list",
                "/can-map",
                "/can-map-define",
                "/can-observable-array",
                "/can-observable-mixin",
                "/can-observation",
                "/can-observe",
                "/can-reflect-promise",
                "/can-route",
                "/can-route-hash",
                "/can-route-pushstate",
                "/can-simple-map",
                "/can-simple-observable",
                "/can-stache",
                "/can-stache-bindings",
                "/can-stache-key",
                "/can-view-callbacks",
                "/can-view-scope"
            ],
            _resolved:
                "https://registry.npmjs.org/can-observation-recorder/-/can-observation-recorder-1.3.1.tgz",
            _shasum: "f4fe0fba26f5f6ff433d7cfc7c8ae28c3ab1cde3",
            _spec: "can-observation-recorder@1.3.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "DoneJS",
                email: "core@donejs.com",
                url: "donejs.com"
            },
            bugs: {
                url: "https://github.com/canjs/can-observation-recorder/issues"
            },
            bundleDependencies: false,
            dependencies: { "can-namespace": "^1.0.0", "can-symbol": "^1.6.1" },
            deprecated: false,
            description: "Records observations between two points in time",
            devDependencies: {
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "donejs-plugin"],
            license: "MIT",
            main: "./can-observation-recorder.js",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-observation-recorder.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                }
            }
        },
        {
            name: "can-view-scope",
            version: "4.13.2",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-view-scope/package.json",
            origFileUrl: "./node_modules/can-view-scope/package.json",
            fileUrl: "./node_modules/can-view-scope/package.json",
            _from: "can-view-scope@4.13.2",
            _id: "can-view-scope@4.13.2",
            _inBundle: false,
            _integrity:
                "sha512-R0Bcs9sZd7eezTrj4rnBL8TbJu085GNLqk9cUulSYgV09VjrLhv1kiACGMti4QQ/xrbjQ8MUbs2nDYhPRx3Wsw==",
            _location: "/can-view-scope",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-view-scope@4.13.2",
                name: "can-view-scope",
                escapedName: "can-view-scope",
                rawSpec: "4.13.2",
                saveSpec: null,
                fetchSpec: "4.13.2"
            },
            _requiredBy: [
                "/can",
                "/can-component",
                "/can-stache",
                "/can-stache-bindings"
            ],
            _resolved:
                "https://registry.npmjs.org/can-view-scope/-/can-view-scope-4.13.2.tgz",
            _shasum: "4fe2f71424102436af494a7ed0424ec18df2302f",
            _spec: "can-view-scope@4.13.2",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-view-scope/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.1.1",
                "can-construct": "^3.2.0",
                "can-define-lazy-value": "^1.0.0",
                "can-event-queue": "^1.0.0",
                "can-key-tree": "^1.0.0",
                "can-log": "^1.0.0",
                "can-namespace": "1.0.0",
                "can-observation": "^4.0.0",
                "can-observation-recorder": "^1.3.0",
                "can-queues": "^1.0.0",
                "can-reflect": "^1.6.0",
                "can-reflect-dependencies": "<2.0.0",
                "can-simple-map": "^4.3.0",
                "can-simple-observable": "^2.0.0",
                "can-single-reference": "^1.0.0",
                "can-stache-helpers": "^1.0.0",
                "can-stache-key": "^1.3.0",
                "can-symbol": "^1.0.0"
            },
            deprecated: false,
            description: "Observable scopes",
            devDependencies: {
                "can-test-helpers": "^1.0.1",
                "detect-cyclic-packages": "^1.1.0",
                docco: "^0.7.0",
                jshint: "^2.9.1",
                steal: "^2.0.0",
                "steal-qunit": "^2.0.0",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/doc/can-view-scope.html",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-view-scope",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-view-scope.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                docco:
                    "docco -o docco can-view-scope.js compute_data.js scope-key-data.js template-context.js",
                jshint: "jshint ./*.js test/*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee:
                    "testee test/test.html test/test-production.html --browsers firefox"
            }
        },
        {
            name: "can-import-module",
            version: "1.2.0",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-import-module/package.json",
            origFileUrl: "./node_modules/can-import-module/package.json",
            fileUrl: "./node_modules/can-import-module/package.json",
            _from: "can-import-module@^1.0.0",
            _id: "can-import-module@1.2.0",
            _inBundle: false,
            _integrity:
                "sha512-IG98g1BUm7o7OGVXWkBegID2H2lRVDMaN153OuoEf48jpgM57HPwFPKgblxHpX72qUhi+Ejqlb6PUvQQpcxczQ==",
            _location: "/can-import-module",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-import-module@^1.0.0",
                name: "can-import-module",
                escapedName: "can-import-module",
                rawSpec: "^1.0.0",
                saveSpec: null,
                fetchSpec: "^1.0.0"
            },
            _requiredBy: [
                "/can-stache",
                "/can-view-autorender",
                "/can-view-import"
            ],
            _resolved:
                "https://registry.npmjs.org/can-import-module/-/can-import-module-1.2.0.tgz",
            _shasum: "af1d56a27c8773aaf7c90d35d6257a811f844378",
            _spec: "can-import-module@^1.0.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can-stache",
            author: "",
            bugs: { url: "https://github.com/canjs/can-import-module/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-globals": "^1.0.1",
                "can-namespace": "^1.0.0"
            },
            deprecated: false,
            description:
                "[![Build Status](https://travis-ci.org/canjs/can-import-module.svg?branch=master)](https://travis-ci.org/canjs/can-import-module)",
            devDependencies: {
                jshint: "^2.9.1",
                steal: "^1.6.5",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.11.3",
                testee: "^0.7.0"
            },
            homepage: "https://github.com/canjs/can-import-module#readme",
            keywords: ["canjs", "donejs-plugin"],
            license: "MIT",
            main: "can-import-module.js",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-import-module.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            }
        },
        {
            name: "can-log",
            version: "1.0.2",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-log/package.json",
            origFileUrl: "./node_modules/can-log/package.json",
            fileUrl: "./node_modules/can-log/package.json",
            _from: "can-log@1.0.2",
            _id: "can-log@1.0.2",
            _inBundle: false,
            _integrity:
                "sha512-wmT8aGIb8u82HqKXjjXodb1fCanntC0RvMtluTMtt1GwVDZyPLV9RQHJ1+j3b5PgSPW6ZwCjyiKwnSkI+2swiw==",
            _location: "/can-log",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-log@1.0.2",
                name: "can-log",
                escapedName: "can-log",
                rawSpec: "1.0.2",
                saveSpec: null,
                fetchSpec: "1.0.2"
            },
            _requiredBy: [
                "/can",
                "/can-attribute-encoder",
                "/can-component",
                "/can-connect",
                "/can-construct",
                "/can-control",
                "/can-define",
                "/can-dom-data-state",
                "/can-event-queue",
                "/can-fixture",
                "/can-map",
                "/can-map-compat",
                "/can-map-define",
                "/can-observable-mixin",
                "/can-observation",
                "/can-query-logic",
                "/can-queues",
                "/can-reflect-promise",
                "/can-route",
                "/can-simple-map",
                "/can-simple-observable",
                "/can-stache",
                "/can-stache-bindings",
                "/can-stache-converters",
                "/can-stache-element",
                "/can-stache-key",
                "/can-types",
                "/can-util",
                "/can-validate-legacy",
                "/can-vdom",
                "/can-view-callbacks",
                "/can-view-import",
                "/can-view-parser",
                "/can-view-scope"
            ],
            _resolved: "https://registry.npmjs.org/can-log/-/can-log-1.0.2.tgz",
            _shasum: "c5bb8c4ccacfc287b267b1a685e72ea0ce4c115a",
            _spec: "can-log@1.0.2",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "https://www.bitovi.com/"
            },
            bugs: { url: "https://github.com/canjs/can-log/issues" },
            bundleDependencies: false,
            dependencies: {},
            deprecated: false,
            description: "Utilities for logging to the console.",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                "done-serve": "^3.3.1",
                "donejs-cli": "^3.1.1",
                "generator-donejs": "^3.3.0",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/",
            keywords: ["canjs", "donejs-plugin"],
            license: "MIT",
            main: "can-log",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-log.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-log"
            }
        },
        {
            name: "can-symbol",
            version: "1.6.5",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-symbol/package.json",
            origFileUrl: "./node_modules/can-symbol/package.json",
            fileUrl: "./node_modules/can-symbol/package.json",
            _from: "can-symbol@1.6.5",
            _id: "can-symbol@1.6.5",
            _inBundle: false,
            _integrity:
                "sha512-4Bis0OFUiJV2PFXmzNXZZfuG5NTiTqxxEZDRgy6Vxov55kRL/Wg3KO0GNpkrpYHBaLATlcFfNb0YiJ2bMhFxgg==",
            _location: "/can-symbol",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-symbol@1.6.5",
                name: "can-symbol",
                escapedName: "can-symbol",
                rawSpec: "1.6.5",
                saveSpec: null,
                fetchSpec: "1.6.5"
            },
            _requiredBy: [
                "/can",
                "/can-attribute-observable",
                "/can-bind",
                "/can-component",
                "/can-compute",
                "/can-connect",
                "/can-connect-tag",
                "/can-construct",
                "/can-control",
                "/can-debug",
                "/can-define",
                "/can-event-queue",
                "/can-fragment",
                "/can-globals",
                "/can-kefir",
                "/can-key",
                "/can-list",
                "/can-map",
                "/can-map-define",
                "/can-observation",
                "/can-observation-recorder",
                "/can-observe",
                "/can-query-logic",
                "/can-reflect",
                "/can-reflect-dependencies",
                "/can-reflect-promise",
                "/can-route",
                "/can-route-pushstate",
                "/can-simple-map",
                "/can-simple-observable",
                "/can-stache",
                "/can-stache-bindings",
                "/can-stache-element",
                "/can-stache-key",
                "/can-stream-kefir",
                "/can-types",
                "/can-util",
                "/can-view-callbacks",
                "/can-view-import",
                "/can-view-live",
                "/can-view-model",
                "/can-view-scope"
            ],
            _resolved:
                "https://registry.npmjs.org/can-symbol/-/can-symbol-1.6.5.tgz",
            _shasum: "37ea6428ce0124043063c3a592578813a0ba4293",
            _spec: "can-symbol@1.6.5",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-symbol/issues" },
            bundleDependencies: false,
            dependencies: { "can-namespace": "^1.0.0" },
            deprecated: false,
            description:
                "Well known symbols used to detail how to operate on different objects",
            devDependencies: {
                "bit-docs": "0.1.0",
                "detect-cyclic-packages": "^1.1.0",
                "done-serve": "^3.3.1",
                "donejs-cli": "^3.1.1",
                "generator-donejs": "^3.3.0",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["Done", "JS"],
            main: "can-symbol",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-symbol.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            system: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-symbol"
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-symbol"
            }
        },
        {
            name: "can-view-target",
            version: "4.1.6",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-view-target/package.json",
            origFileUrl: "./node_modules/can-view-target/package.json",
            fileUrl: "./node_modules/can-view-target/package.json",
            _from: "can-view-target@4.1.6",
            _id: "can-view-target@4.1.6",
            _inBundle: false,
            _integrity:
                "sha512-6PPrW3SDHeSDPgOuLFdFBbGApjtCB3iaZ4X4mKvSIQ1lg+C7J69OWPcNniQ+vPz9aWzHD4ad8nK7pZbyqBkhPg==",
            _location: "/can-view-target",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-view-target@4.1.6",
                name: "can-view-target",
                escapedName: "can-view-target",
                rawSpec: "4.1.6",
                saveSpec: null,
                fetchSpec: "4.1.6"
            },
            _requiredBy: ["/can", "/can-stache", "/can-view-live"],
            _resolved:
                "https://registry.npmjs.org/can-view-target/-/can-view-target-4.1.6.tgz",
            _shasum: "50eb219d8d8b480c42e3539d5c2c6a3f4c78776a",
            _spec: "can-view-target@4.1.6",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-view-target/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-dom-mutate": "^1.0.0",
                "can-globals": "^1.0.0",
                "can-namespace": "1.0.0"
            },
            deprecated: false,
            description: "Fast cloning micro templates",
            devDependencies: {
                "can-simple-dom": "^1.0.2",
                "detect-cyclic-packages": "^1.1.0",
                "donejs-cli": "^0.9.5",
                "generator-donejs": "^1.0.7",
                jshint: "^2.9.1",
                steal: "^1.0.1",
                "steal-qunit": "^2.0.0",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-view-target",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-view-target.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            }
        },
        {
            name: "can-view-nodelist",
            version: "4.3.4",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-view-nodelist/package.json",
            origFileUrl: "./node_modules/can-view-nodelist/package.json",
            fileUrl: "./node_modules/can-view-nodelist/package.json",
            _from: "can-view-nodelist@4.3.4",
            _id: "can-view-nodelist@4.3.4",
            _inBundle: false,
            _integrity:
                "sha512-KzmqoGwm2XZ375XT071cQS2a48KLvekQjAx0HNIilHoCMfQMU1F/Z+BVmeJpARFHhfnxfUW++3bWDnXW3Prn5g==",
            _location: "/can-view-nodelist",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-view-nodelist@4.3.4",
                name: "can-view-nodelist",
                escapedName: "can-view-nodelist",
                rawSpec: "4.3.4",
                saveSpec: null,
                fetchSpec: "4.3.4"
            },
            _requiredBy: [
                "/can",
                "/can-component",
                "/can-connect-tag",
                "/can-stache",
                "/can-stache-element",
                "/can-view-callbacks",
                "/can-view-import",
                "/can-view-live"
            ],
            _resolved:
                "https://registry.npmjs.org/can-view-nodelist/-/can-view-nodelist-4.3.4.tgz",
            _shasum: "2d0db9cfdaa1e97e4150a89ffeef54e448c31973",
            _spec: "can-view-nodelist@4.3.4",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-view-nodelist/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-dom-mutate": "<2.0.0",
                "can-namespace": "1.0.0"
            },
            deprecated: false,
            description: "Adds nesting of text nodes",
            devDependencies: {
                "can-fragment": "^1.0.0",
                "can-reflect": "^1.0.0",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.0.1",
                "steal-qunit": "^2.0.0",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/doc/can-view-nodelist.html",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-view-nodelist",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-view-nodelist.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            }
        },
        {
            name: "can-cid",
            version: "1.3.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-cid/package.json",
            origFileUrl: "./node_modules/can-cid/package.json",
            fileUrl: "./node_modules/can-cid/package.json",
            _from: "can-cid@1.3.1",
            _id: "can-cid@1.3.1",
            _inBundle: false,
            _integrity:
                "sha512-0c9Swmmz5xfLHZrsoL1gLQUolwL5h5iVJAkIJ3Gsib1ED5L/l/VBdJ0CUDVBfzxCNDRXCRCSxeDULtnxr1blJw==",
            _location: "/can-cid",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-cid@1.3.1",
                name: "can-cid",
                escapedName: "can-cid",
                rawSpec: "1.3.1",
                saveSpec: null,
                fetchSpec: "1.3.1"
            },
            _requiredBy: [
                "/can",
                "/can-dom-data-state",
                "/can-list",
                "/can-map",
                "/can-single-reference",
                "/can-util",
                "/can-util/can-dom-data-state",
                "/can-util/can-event-dom-enter",
                "/can-util/can-event-dom-radiochange"
            ],
            _resolved: "https://registry.npmjs.org/can-cid/-/can-cid-1.3.1.tgz",
            _shasum: "2e3deebe2111d285a42e94f90bce4c1bdba139c0",
            _spec: "can-cid@1.3.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-cid/issues" },
            bundleDependencies: false,
            dependencies: { "can-namespace": "1.0.0" },
            deprecated: false,
            description:
                "Utility for getting a unique identifier for an object",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                documentjs: "^0.4.2",
                "http-server": "^0.10.0",
                jshint: "^2.9.1",
                steal: "^1.2.8",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.1.2",
                "test-saucelabs": "0.0.3",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "canjs", "plugin", "donejs"],
            main: "can-cid",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-cid.git"
            },
            scripts: {
                build: "node build.js",
                ci: "npm run build && npm run test && node test-saucelabs.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                "http-server": "http-server -p 3000 --silent",
                jshint: "jshint ./*.js --config",
                postversion:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            }
        },
        {
            name: "can-construct",
            version: "3.5.6",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-construct/package.json",
            origFileUrl: "./node_modules/can-construct/package.json",
            fileUrl: "./node_modules/can-construct/package.json",
            _from: "can-construct@3.5.6",
            _id: "can-construct@3.5.6",
            _inBundle: false,
            _integrity:
                "sha512-TVQgq15RvLDCz6E/3W3nk5CY0n3mCC17E/9mirAQzHKqi9BM2b1e1xuKVsIk2wnV1nDqjq8YqE/btIN1W8ySWQ==",
            _location: "/can-construct",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-construct@3.5.6",
                name: "can-construct",
                escapedName: "can-construct",
                rawSpec: "3.5.6",
                saveSpec: null,
                fetchSpec: "3.5.6"
            },
            _requiredBy: [
                "/can",
                "/can-component",
                "/can-connect",
                "/can-construct-super",
                "/can-control",
                "/can-define",
                "/can-list",
                "/can-map",
                "/can-simple-map",
                "/can-view-scope"
            ],
            _resolved:
                "https://registry.npmjs.org/can-construct/-/can-construct-3.5.6.tgz",
            _shasum: "fc11e5134b372be2b855ee7166c5b62e9a894685",
            _spec: "can-construct@3.5.6",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-construct/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-log": "^1.0.0",
                "can-namespace": "1.0.0",
                "can-reflect": "^1.16.1",
                "can-string": "<2.0.0",
                "can-symbol": "^1.6.4"
            },
            deprecated: false,
            description: "easy constructor functions",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.2.8",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.1.2",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-construct",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-construct.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                jshint: "jshint *.js --config",
                postversion:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre": "npm version prerelease && npm publish",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            },
            steal: {}
        },
        {
            name: "can-validate-validatejs",
            version: "0.1.3",
            nestedFileUrl:
                "./node_modules/can-define-validate-validatejs/node_modules/can-validate-validatejs/package.json",
            origFileUrl: "./node_modules/can-validate-validatejs/package.json",
            __crawledNestedPosition: true,
            nextFileUrl:
                "./node_modules/can-define-validate-validatejs/node_modules/can-validate-validatejs/package.json",
            fileUrl:
                "./node_modules/can-define-validate-validatejs/node_modules/can-validate-validatejs/package.json",
            _from: "can-validate-validatejs@^0.1.0",
            _id: "can-validate-validatejs@0.1.3",
            _inBundle: false,
            _integrity:
                "sha512-01+CRMtAYpokG6YE01hh7/C+uaUnKW1QLXTyL7XUvUNIA7SvyrvPX64694YF1/X+UauYoXy9+ARQCInP3Qsmtg==",
            _location:
                "/can-define-validate-validatejs/can-validate-validatejs",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-validate-validatejs@^0.1.0",
                name: "can-validate-validatejs",
                escapedName: "can-validate-validatejs",
                rawSpec: "^0.1.0",
                saveSpec: null,
                fetchSpec: "^0.1.0"
            },
            _requiredBy: ["/can-define-validate-validatejs"],
            _resolved:
                "https://registry.npmjs.org/can-validate-validatejs/-/can-validate-validatejs-0.1.3.tgz",
            _shasum: "561f2a3f93595d0551f6f7679b5b2a8ec09059e8",
            _spec: "can-validate-validatejs@^0.1.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can-define-validate-validatejs",
            author: { name: "Bitovi" },
            bugs: {
                url: "https://github.com/canjs/can-validate-validatejs/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-reflect": "^1.11.1",
                "validate.js": "^0.11.1"
            },
            deprecated: false,
            description:
                "Create validator functions that use ValidateJS to validate values.",
            devDependencies: {
                "bit-docs": "^0.0.8",
                "detect-cyclic-packages": "^1.1.0",
                "http-server": "^0.10.0",
                jshint: "^2.9.4",
                steal: "^1.0.8",
                "steal-qunit": "^1.0.0",
                "steal-tools": "^1.0.1",
                testee: "^0.7.0"
            },
            homepage: "https://github.com/canjs/can-validate-validatejs#readme",
            keywords: [
                "Validate",
                "Validate.js",
                "can-validate",
                "plugin",
                "canjs"
            ],
            license: "MIT",
            main: "can-validate-validatejs.js",
            repository: {
                type: "git",
                url: "git+https://github.com/canjs/can-validate-validatejs.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "http-server -c-1",
                jshint: "jshint . --config",
                postversion:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major":
                    "npm version major && npm run build && npm publish",
                "release:minor":
                    "npm version minor && npm run build && npm publish",
                "release:patch":
                    "npm version patch && npm run build && npm publish",
                "release:pre":
                    "npm version prerelease && npm run build && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            },
            steal: {
                ignoreBrowser: true,
                npmIgnore: {
                    "bit-docs": true,
                    testee: true,
                    "steal-tools": true
                },
                npmDependencies: { "steal-qunit": true },
                paths: {}
            }
        },
        {
            name: "can-debug",
            version: "2.0.7",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-debug/package.json",
            origFileUrl: "./node_modules/can-debug/package.json",
            fileUrl: "./node_modules/can-debug/package.json",
            _from: "can-debug@2.0.7",
            _id: "can-debug@2.0.7",
            _inBundle: false,
            _integrity:
                "sha512-zCD0T8lrQAIvdaHT9G2VU4xefN29dCHJ4yL8nowdRdHH70D6Rb2aaIqnUXfmxW7DdN6LdUxeFY7FK0Y/kr/InA==",
            _location: "/can-debug",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-debug@2.0.7",
                name: "can-debug",
                escapedName: "can-debug",
                rawSpec: "2.0.7",
                saveSpec: null,
                fetchSpec: "2.0.7"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-debug/-/can-debug-2.0.7.tgz",
            _shasum: "c410bd596a1eb85e42bf5f22b95c6e86fd550c93",
            _spec: "can-debug@2.0.7",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "https://www.bitovi.com/"
            },
            bugs: { url: "https://github.com/canjs/can-debug/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.3.1",
                "can-diff": "^1.0.0",
                "can-globals": "^1.0.0",
                "can-namespace": "1.0.0",
                "can-observation": "^4.0.0",
                "can-queues": "^1.0.0",
                "can-reflect": "^1.10.1",
                "can-reflect-dependencies": "<2.0.0",
                "can-symbol": "^1.0.0"
            },
            deprecated: false,
            description: "CanJS Debugger",
            devDependencies: {
                "can-define": "^2.0.0",
                "can-simple-observable": "^2.0.0",
                "can-stache": "^4.0.0",
                "can-stache-bindings": "^4.0.0",
                "can-test-helpers": "^1.1.2",
                "can-view-model": "^4.0.0",
                "can-view-scope": "^4.0.0",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0",
                vis: "^4.21.0"
            },
            homepage: "https://canjs.com/doc/can-debug.html",
            keywords: ["donejs-plugin"],
            license: "MIT",
            main: "can-debug",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-debug.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js src/**/*.js",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: { testee: true, "steal-tools": true },
                main: "can-debug"
            }
        },
        {
            name: "can-define-stream",
            version: "1.1.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-define-stream/package.json",
            origFileUrl: "./node_modules/can-define-stream/package.json",
            fileUrl: "./node_modules/can-define-stream/package.json",
            _from: "can-define-stream@1.1.1",
            _id: "can-define-stream@1.1.1",
            _inBundle: false,
            _integrity:
                "sha512-IRbCJIojxQLPGN9G9v7Wl4z/SCmJWBJkTAHCA0gZQYh5zFlrjsTPKbfrq0Pr/zpwWJQnjMZbtSDaPGhKHXtjFA==",
            _location: "/can-define-stream",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-define-stream@1.1.1",
                name: "can-define-stream",
                escapedName: "can-define-stream",
                rawSpec: "1.1.1",
                saveSpec: null,
                fetchSpec: "1.1.1"
            },
            _requiredBy: ["/can", "/can-define-stream-kefir"],
            _resolved:
                "https://registry.npmjs.org/can-define-stream/-/can-define-stream-1.1.1.tgz",
            _shasum: "bc1df96462bf5ff8b5bc245af39b25d05dab6ca6",
            _spec: "can-define-stream@1.1.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-define-stream/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.1.1",
                "can-compute": "^4.0.0",
                "can-define": "^2.0.0",
                "can-observation": "^4.0.0",
                "can-reflect": "^1.11.0",
                "can-stream": "^1.0.0",
                kefir: "^3.8.0"
            },
            deprecated: false,
            description:
                "[![Join our Slack](https://img.shields.io/badge/slack-join%20chat-611f69.svg)](https://www.bitovi.com/community/slack?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![Join our Discourse](https://img.shields.io/discourse/https/forums.bitovi.com/posts.svg)](https://forums.bitovi.com/?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![License: MIT](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/canjs/can-define-stream/blob/master/LICENSE) [![npm version](https://badge.fury.io/js/can-define-stream.svg)](https://www.npmjs.com/package/can-define-stream) [![Travis build status](https://travis-ci.org/canjs/can-define-stream.svg?branch=master)](https://travis-ci.org/canjs/can-define-stream) [![Greenkeeper badge](https://badges.greenkeeper.io/canjs/can-define-stream.svg)](https://greenkeeper.io/)",
            devDependencies: {
                "can-symbol": "^1.5.0",
                "detect-cyclic-packages": "^1.1.0",
                "done-serve": "^3.0.0",
                "donejs-cli": "^1.0.1",
                "generator-donejs": "^1.0.5",
                jshint: "^2.9.1",
                steal: "^1.2.8",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.1.2",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-define-stream",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-define-stream.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint *.js --config",
                postversion: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: {}
        },
        {
            name: "can-define-backup",
            version: "2.1.2",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-define-backup/package.json",
            origFileUrl: "./node_modules/can-define-backup/package.json",
            fileUrl: "./node_modules/can-define-backup/package.json",
            _from: "can-define-backup@2.1.2",
            _id: "can-define-backup@2.1.2",
            _inBundle: false,
            _integrity:
                "sha512-e9y7XcNgYi4tcNgexqUYvitNftER5MX8Vxdtc7MoaRWQWeyP33YpQ+boNTPZ80KMAJSEEOQALGQVJoVHG/Ivmg==",
            _location: "/can-define-backup",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-define-backup@2.1.2",
                name: "can-define-backup",
                escapedName: "can-define-backup",
                rawSpec: "2.1.2",
                saveSpec: null,
                fetchSpec: "2.1.2"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-define-backup/-/can-define-backup-2.1.2.tgz",
            _shasum: "b7b89c7a013b0b83f4228af21b5d7b2a23f465b1",
            _spec: "can-define-backup@2.1.2",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.1.1",
                "can-define": "^2.0.0",
                "can-diff": "<2.0.0",
                "can-reflect": "^1.11.0",
                "can-simple-observable": "^2.0.0"
            },
            deprecated: false,
            description: "Backup and restore a DefineMap state",
            devDependencies: {
                "can-observation": "^4.0.0",
                "core-js": "^2.5.7",
                jshint: "^2.9.1",
                steal: "^1.0.0",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.0.0",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com",
            keywords: ["canjs"],
            main: "can-define-backup",
            scripts: {
                build: "node build.js",
                develop: "can-serve --static --develop --port 8080",
                document: "documentjs",
                jshint: "jshint *.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            }
        },
        {
            name: "can-observe",
            version: "2.3.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-observe/package.json",
            origFileUrl: "./node_modules/can-observe/package.json",
            fileUrl: "./node_modules/can-observe/package.json",
            _from: "can-observe@2.3.1",
            _id: "can-observe@2.3.1",
            _inBundle: false,
            _integrity:
                "sha512-+VwlL4SiCjf96UOGTen8lWbQMk5ELpe7RhginhOmh6lyn9ntmre+cr5oPhHPTKHME/6Hz9EMVEM2J7n7insKag==",
            _location: "/can-observe",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-observe@2.3.1",
                name: "can-observe",
                escapedName: "can-observe",
                rawSpec: "2.3.1",
                saveSpec: null,
                fetchSpec: "2.3.1"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-observe/-/can-observe-2.3.1.tgz",
            _shasum: "03dec273cd8a70901eaa39e80eb2cfccebcf6ad0",
            _spec: "can-observe@2.3.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: { name: "Bitovi" },
            bugs: { url: "https://github.com/canjs/can-observe/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-event-queue": "<2.0.0",
                "can-globals": "^1.2.1",
                "can-key-tree": "<2.0.0",
                "can-namespace": "^1.0.0",
                "can-observation-recorder": "<2.0.0",
                "can-queues": "<2.0.0",
                "can-reflect": "^1.4.2",
                "can-simple-observable": "^2.0.0",
                "can-symbol": "^1.2.0"
            },
            deprecated: false,
            description: "Like can.Map, but without the .attr method.",
            devDependencies: {
                "can-observation": "^4.0.0",
                "can-reflect-tests": "^0.3.0",
                "can-simple-map": "^4.0.0",
                "can-simple-observable": "^2.0.0",
                "can-util": "^3.2.2",
                "detect-cyclic-packages": "^1.1.0",
                docco: "^0.7.0",
                jshint: "^2.9.1",
                steal: "^1.0.0",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.9.1",
                testee: "^0.9.1"
            },
            homepage: "https://github.com/canjs/can-observe",
            keywords: ["CanJS"],
            license: "MIT",
            main: "can-observe.js",
            repository: {
                type: "git",
                url: "git+https://github.com/canjs/can-observe.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                docco:
                    "docco src/*.js array/array.js object/object.js can-observe.js",
                jshint:
                    "jshint *.js src/*.js object/*.js array/*.js test/*.js --exclude=decorators-test.js --config",
                postversion:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            }
        },
        {
            name: "can-kefir",
            version: "1.1.4",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-kefir/package.json",
            origFileUrl: "./node_modules/can-kefir/package.json",
            fileUrl: "./node_modules/can-kefir/package.json",
            _from: "can-kefir@1.1.4",
            _id: "can-kefir@1.1.4",
            _inBundle: false,
            _integrity:
                "sha512-6Qj2iJbo+6gN5C1PRDTOsHDBkJm5n5fNIv1oycddQ9I86eRWCyuHdVVVGFg0KfL4snP0KF3cipKYCnArYl7nLw==",
            _location: "/can-kefir",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-kefir@1.1.4",
                name: "can-kefir",
                escapedName: "can-kefir",
                rawSpec: "1.1.4",
                saveSpec: null,
                fetchSpec: "1.1.4"
            },
            _requiredBy: ["/can", "/can-stream-kefir"],
            _resolved:
                "https://registry.npmjs.org/can-kefir/-/can-kefir-1.1.4.tgz",
            _shasum: "75ac654350b14036dee2b4830530d5f529350cd8",
            _spec: "can-kefir@1.1.4",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "DoneJS",
                email: "core@donejs.com",
                url: "http://canjs.com"
            },
            browser: {},
            browserify: { transform: ["cssify"] },
            bugs: { url: "https://github.com/canjs/can-kefir/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-event-queue": "<2.0.0",
                "can-observation-recorder": "<2.0.0",
                "can-reflect": "^1.11.1",
                "can-symbol": "^1.0.0",
                kefir: "^3.5.1"
            },
            deprecated: false,
            description:
                "Reflects Kefir streams so they work with the rest of CanJS",
            devDependencies: {
                "can-queues": "<2.0.0",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.3.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.2.0",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["donejs-plugin", "Kefir", "streams"],
            license: "MIT",
            main: "can-kefir",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-kefir.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout - && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            }
        },
        {
            name: "can-map-compat",
            version: "1.1.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-map-compat/package.json",
            origFileUrl: "./node_modules/can-map-compat/package.json",
            fileUrl: "./node_modules/can-map-compat/package.json",
            _from: "can-map-compat@1.1.1",
            _id: "can-map-compat@1.1.1",
            _inBundle: false,
            _integrity:
                "sha512-fvrJgl7sJVh6d904X7iYhJxwSRrxKyWqDgwQtQkIS3fHWN/zRCZhrLqUNVxJgg1XQknBIG9PfeTFxb/S4i2acA==",
            _location: "/can-map-compat",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-map-compat@1.1.1",
                name: "can-map-compat",
                escapedName: "can-map-compat",
                rawSpec: "1.1.1",
                saveSpec: null,
                fetchSpec: "1.1.1"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-map-compat/-/can-map-compat-1.1.1.tgz",
            _shasum: "8544b002311c1d1c73564ed04742ff4c792f4f26",
            _spec: "can-map-compat@1.1.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "DoneJS Contributors",
                email: "team@donejs.com",
                url: "https://donejs.com/"
            },
            bugs: { url: "https://github.com/canjs/can-map-compat/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-key": "^1.2.0",
                "can-log": "^1.0.0",
                "can-reflect": "^1.17.4"
            },
            deprecated: false,
            description: "Makes observables compatible with can-map",
            devDependencies: {
                "can-define": "^1.5.6",
                "can-observe": "^2.2.0",
                jshint: "^2.9.1",
                steal: "^2.0.0",
                "steal-qunit": "^2.0.0",
                testee: "^0.9.1"
            },
            homepage: "https://canjs.com/",
            keywords: ["canjs", "donejs-plugin", "can-map", "can-define"],
            license: "MIT",
            main: "can-map-compat.js",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-map-compat.git"
            },
            scripts: {
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version: 'git commit -am "Update version number"'
            }
        },
        {
            name: "can-stream-kefir",
            version: "1.2.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-stream-kefir/package.json",
            origFileUrl: "./node_modules/can-stream-kefir/package.json",
            fileUrl: "./node_modules/can-stream-kefir/package.json",
            _from: "can-stream-kefir@1.2.1",
            _id: "can-stream-kefir@1.2.1",
            _inBundle: false,
            _integrity:
                "sha512-ptbC2WHoe3hq7NOa8/76n0A5qmBOzej8Huin34AaldTqUySorxCXU67O+ZV/umRVfNqyl106meIMokrnIyBV6A==",
            _location: "/can-stream-kefir",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-stream-kefir@1.2.1",
                name: "can-stream-kefir",
                escapedName: "can-stream-kefir",
                rawSpec: "1.2.1",
                saveSpec: null,
                fetchSpec: "1.2.1"
            },
            _requiredBy: ["/can", "/can-define-stream-kefir"],
            _resolved:
                "https://registry.npmjs.org/can-stream-kefir/-/can-stream-kefir-1.2.1.tgz",
            _shasum: "7de659b65e9b281859b78ce7a8a0401a6c022869",
            _spec: "can-stream-kefir@1.2.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-stream-kefir/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-compute": "^4.0.0",
                "can-kefir": "^1.0.0",
                "can-namespace": "^1.0.0",
                "can-observation": "^4.0.0",
                "can-stream": "^1.0.0",
                "can-symbol": "^1.5.0"
            },
            deprecated: false,
            description: "Stream values into and out of computes",
            devDependencies: {
                "can-define": "^2.0.0",
                "can-reflect": "^1.11.1",
                "detect-cyclic-packages": "^1.1.0",
                "done-serve": "^3.0.0",
                jshint: "^2.9.1",
                steal: "^1.5.4",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.3.6",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-stream-kefir",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-stream-kefir.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint *.js --config",
                postversion:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            },
            steal: {}
        },
        {
            name: "can-observable-object",
            version: "0.2.0",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-observable-object/package.json",
            origFileUrl: "./node_modules/can-observable-object/package.json",
            fileUrl: "./node_modules/can-observable-object/package.json",
            _from: "can-observable-object@0.2.0",
            _id: "can-observable-object@0.2.0",
            _inBundle: false,
            _integrity:
                "sha512-psQBzM4fFCSNhTGqfiamsdzldYq0MMjZgUAhM+sMLs9vQa2DrTEMgoKNpfqKOg9X0pKK9E49P8q9UGMNEuOmag==",
            _location: "/can-observable-object",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-observable-object@0.2.0",
                name: "can-observable-object",
                escapedName: "can-observable-object",
                rawSpec: "0.2.0",
                saveSpec: null,
                fetchSpec: "0.2.0"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-observable-object/-/can-observable-object-0.2.0.tgz",
            _shasum: "1fd6b11956c7f2523aaa3ba183294a083b83a927",
            _spec: "can-observable-object@0.2.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "DoneJS Core Team",
                email: "core@donejs.com",
                url: "https://github.com/canjs/can-observable-object"
            },
            browserslist: "ie 11",
            bugs: {
                url: "https://github.com/DoneJS/can-observable-object/issues"
            },
            bundleDependencies: false,
            dependencies: { "can-observable-mixin": "^0.4.0" },
            deprecated: false,
            description: "The ObservableObject",
            devDependencies: {
                "@babel/cli": "^7.4.4",
                "@babel/core": "^7.4.5",
                "@babel/preset-env": "^7.4.5",
                "can-reflect": "^1.17.10",
                jshint: "^2.9.1",
                steal: "^2.1.6",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.0.9",
                testee: "^0.9.1"
            },
            homepage: "https://github.com/canjs/can-observable-object",
            keywords: ["canjs", "donejs-plugin"],
            license: "MIT",
            main: "dist/can-observable-object.js",
            repository: {
                type: "git",
                url: "git://github.com/DoneJS/can-observable-object.git"
            },
            scripts: {
                build: "node build.js",
                "compile-to-es5": "babel src --out-dir dist",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                prepublishOnly: "npm run compile-to-es5",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: { main: "src/can-observable-object.js" }
        },
        {
            name: "can-observable-array",
            version: "0.5.0",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-observable-array/package.json",
            origFileUrl: "./node_modules/can-observable-array/package.json",
            fileUrl: "./node_modules/can-observable-array/package.json",
            _from: "can-observable-array@0.5.0",
            _id: "can-observable-array@0.5.0",
            _inBundle: false,
            _integrity:
                "sha512-Q5mU9BzxeI0rqGibjLW6FZdA/h7WyiweOkIMAPDNOsFf/gE9W92UVXNFAGGM68N/+elNTVx1dYGBcib8dhtJfw==",
            _location: "/can-observable-array",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-observable-array@0.5.0",
                name: "can-observable-array",
                escapedName: "can-observable-array",
                rawSpec: "0.5.0",
                saveSpec: null,
                fetchSpec: "0.5.0"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-observable-array/-/can-observable-array-0.5.0.tgz",
            _shasum: "661e96c2a7e333d58dff17408c1d8c7753ccd900",
            _spec: "can-observable-array@0.5.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: { name: "DoneJS Contributors" },
            browserslist: "ie 11",
            bugs: {
                url: "https://github.com/canjs/can-observable-array/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "@babel/cli": "^7.4.4",
                "@babel/core": "^7.4.5",
                "@babel/preset-env": "^7.4.5",
                "can-event-queue": "^1.1.6",
                "can-observable-mixin": "^0.4.0",
                "can-observation-recorder": "^1.3.0",
                "can-queues": "^1.2.2",
                "can-reflect": "^1.17.10"
            },
            deprecated: false,
            description: "Observable arrays",
            devDependencies: {
                "can-observable-object": "^0.2.0",
                "can-type": "^0.1.4",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                testee: "^0.9.1"
            },
            homepage: "https://github.com/canjs/can-observable-array#readme",
            keywords: ["canjs"],
            license: "MIT",
            main: "dist/can-observable-array.js",
            repository: {
                type: "git",
                url: "git+https://github.com/canjs/can-observable-array.git"
            },
            scripts: {
                "compile-to-es5": "babel src --out-dir dist",
                jshint: "jshint src/*.js test/*.js --config",
                lint: "npm run jshint",
                postversion: "git push --follow-tags",
                prepublishOnly: "npm run compile-to-es5",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run lint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: { main: "src/can-observable-array.js" }
        },
        {
            name: "can-stache-element",
            version: "0.8.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-stache-element/package.json",
            origFileUrl: "./node_modules/can-stache-element/package.json",
            fileUrl: "./node_modules/can-stache-element/package.json",
            _from: "can-stache-element@0.8.1",
            _id: "can-stache-element@0.8.1",
            _inBundle: false,
            _integrity:
                "sha512-dd9tOYT0DGTZlVmhfwsZUwMN+lfmagXzoNrRbGTNtJuGTI5+3nbj1lxTmR4jcbZN5rGEMdtlNa09CxCo6XYT9A==",
            _location: "/can-stache-element",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-stache-element@0.8.1",
                name: "can-stache-element",
                escapedName: "can-stache-element",
                rawSpec: "0.8.1",
                saveSpec: null,
                fetchSpec: "0.8.1"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-stache-element/-/can-stache-element-0.8.1.tgz",
            _shasum: "6d0256caf70dba4d7b8fd2a5ac2272e3f8a6a932",
            _spec: "can-stache-element@0.8.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            browserslist: "ie 11",
            bugs: { url: "https://github.com/canjs/can-stache-element/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-bind": "^1.4.3",
                "can-child-nodes": "^1.2.1",
                "can-define-lazy-value": "^1.1.0",
                "can-log": "^1.0.2",
                "can-observable-mixin": "<2.0.0",
                "can-simple-observable": "^2.4.2",
                "can-stache": "^4.0.0",
                "can-stache-bindings": "^4.0.0",
                "can-symbol": "^1.6.4",
                "can-view-nodelist": "^4.3.4"
            },
            deprecated: false,
            description:
                "Create custom elements with can-stache, can-observable-object, and JavaScript classes",
            devDependencies: {
                "@babel/cli": "^7.4.4",
                "@babel/core": "^7.4.5",
                "@babel/preset-env": "^7.4.5",
                "can-reflect": "^1.17.11",
                "can-test-helpers": "^1.1.4",
                "can-type": "^0.1.3",
                "can-value": "^1.1.1",
                "can-view-callbacks": "^4.4.0",
                "can-view-scope": "^4.13.1",
                "detect-cyclic-packages": "^1.1.0",
                fixpack: "^2.3.1",
                "http-server": "^0.11.1",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "test-saucelabs": "0.0.6",
                testee: "^0.9.0"
            },
            homepage: "https://github.com/canjs/can-stache-element",
            keywords: ["CanJS"],
            license: "MIT",
            main: "dist/can-stache-element.js",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-stache-element.git"
            },
            scripts: {
                ci:
                    "npm run test && node test/test-saucelabs.js && npm run compile-to-es5",
                "compile-to-es5": "babel src --out-dir dist",
                "detect-cycle": "detect-cyclic-packages",
                "http-server": "http-server -p 3000 --silent",
                jshint: "jshint src/*.js test/*.js --config",
                lint: "fixpack && npm run jshint",
                postversion: "git push --follow-tags",
                preversion: "npm test",
                test: "npm run detect-cycle && npm run lint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            },
            steal: { main: "src/can-stache-element.js" }
        },
        {
            name: "can-stache-converters",
            version: "4.2.6",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-stache-converters/package.json",
            origFileUrl: "./node_modules/can-stache-converters/package.json",
            fileUrl: "./node_modules/can-stache-converters/package.json",
            _from: "can-stache-converters@4.2.6",
            _id: "can-stache-converters@4.2.6",
            _inBundle: false,
            _integrity:
                "sha512-KFGwbWJd2pjmnU5hawg1vdaLXvbkUmnHm07oM52nX0x/bVIXha+N0LB8t9a5Dfjp5bcKanrI1srYtas1UtlPJQ==",
            _location: "/can-stache-converters",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-stache-converters@4.2.6",
                name: "can-stache-converters",
                escapedName: "can-stache-converters",
                rawSpec: "4.2.6",
                saveSpec: null,
                fetchSpec: "4.2.6"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-stache-converters/-/can-stache-converters-4.2.6.tgz",
            _shasum: "030be8d1f0ffcadc15dd7b00969bbdecd106b39c",
            _spec: "can-stache-converters@4.2.6",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "DoneJS Contributors",
                email: "contact@bitovi.com"
            },
            bugs: {
                url: "https://github.com/canjs/can-stache-converters/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-dom-events": "^1.1.1",
                "can-log": "^1.0.0",
                "can-reflect": "^1.11.1",
                "can-stache": "^4.8.0",
                "can-stache-bindings": "^4.0.2",
                "can-stache-helpers": "^1.2.0",
                "can-string-to-any": "<2.0.0"
            },
            deprecated: false,
            description: "Common converters for Stache",
            devDependencies: {
                "can-compute": "^4.0.0",
                "can-define": "^2.0.0",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.2.10",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.1.2",
                testee: "^0.9.0"
            },
            homepage: "https://github.com/canjs/can-stache-converters",
            keywords: ["Done", "JS", "Can", "JS"],
            main: "can-stache-converters",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-stache-converters.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postversion:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            },
            steal: { main: "can-stache-converters" }
        },
        {
            name: "can-super-model",
            version: "1.1.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-super-model/package.json",
            origFileUrl: "./node_modules/can-super-model/package.json",
            fileUrl: "./node_modules/can-super-model/package.json",
            _from: "can-super-model@1.1.1",
            _id: "can-super-model@1.1.1",
            _inBundle: false,
            _integrity:
                "sha512-lw6qu4HtMQiOssRIpuNJQUiOrVgsDJI2K1RKgCLVOMHCB/xRMqNax6PYLcN17ItXUhRV/JLiwLMLXtKwVUsePA==",
            _location: "/can-super-model",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-super-model@1.1.1",
                name: "can-super-model",
                escapedName: "can-super-model",
                rawSpec: "1.1.1",
                saveSpec: null,
                fetchSpec: "1.1.1"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-super-model/-/can-super-model-1.1.1.tgz",
            _shasum: "9ea35a71cad70dbc30233b2807c4f5a76452496d",
            _spec: "can-super-model@1.1.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "DoneJS Core Team",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-super-model/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-connect": "^3.0.0",
                "can-define": "^2.2.0",
                "can-globals": "^1.0.1",
                "can-namespace": "^1.0.0",
                "can-query-logic": "<2.0.0",
                "can-reflect": "^1.15.2"
            },
            deprecated: false,
            description: "A real-time, fall-through caching, data model layer",
            devDependencies: {
                "can-fixture": "^3.0.0",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "donejs", "donejs-plugin"],
            license: "MIT",
            main: "can-super-model",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-super-model.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-super-model"
            }
        },
        {
            name: "can-connect-feathers",
            version: "5.0.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-connect-feathers/package.json",
            origFileUrl: "./node_modules/can-connect-feathers/package.json",
            fileUrl: "./node_modules/can-connect-feathers/package.json",
            _from: "can-connect-feathers@5.0.1",
            _id: "can-connect-feathers@5.0.1",
            _inBundle: false,
            _integrity:
                "sha512-CPIEB5CCOcBxZZqiFTqvsAOz9MJxFFE/+/Hye+RYYu0nNB+Cp8ZQ8B4SwbrRCr4Ran7fa1l4OR8ywq743l8stw==",
            _location: "/can-connect-feathers",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-connect-feathers@5.0.1",
                name: "can-connect-feathers",
                escapedName: "can-connect-feathers",
                rawSpec: "5.0.1",
                saveSpec: null,
                fetchSpec: "5.0.1"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-connect-feathers/-/can-connect-feathers-5.0.1.tgz",
            _shasum: "c0f98386e0a10e1ff3e5ffb9cdb952edc50708cc",
            _spec: "can-connect-feathers@5.0.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Marshall Thompson",
                email: "marshall@creativeideal.net",
                url: "https://github.com/icanjs"
            },
            bugs: {
                url: "https://github.com/canjs/can-connect-feathers/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.0.0",
                "can-connect": "^3.0.0",
                "can-observation": "^4.0.0",
                "can-observation-recorder": "^1.1.2",
                "can-zone-storage": "^1.0.0",
                "feathers-authentication-popups": "^0.1.2",
                "feathers-errors": "^2.7.0",
                "jwt-decode": "^2.1.0"
            },
            deprecated: false,
            description: "Feathers client library for DoneJS and can-connect",
            devDependencies: {
                async: "^2.1.5",
                "babel-polyfill": "^6.23.0",
                "can-define": "^2.0.0",
                "can-fixture": "^3.0.0",
                "can-fixture-socket": "^1.0.0",
                "can-set-legacy": "^1.0.0",
                concurrently: "^3.1.0",
                "detect-cyclic-packages": "^1.1.0",
                feathers: "^2.0.3",
                "feathers-authentication-client": "^0.3.2",
                "feathers-hooks": "^2.0.1",
                "feathers-rest": "^1.5.0",
                "feathers-socketio": "^2.0.1",
                "http-server": "^0.11.0",
                jquery: "^3.1.0",
                jshint: "^2.9.4",
                saucelabs: "^1.4.0",
                "socket.io-client": "^2.0.4",
                steal: "^2.0.0",
                "steal-qunit": "^2.0.0",
                "steal-socket.io": "^4.0.8",
                "steal-tools": "^2.0.0",
                "test-saucelabs": "0.0.6",
                testee: "^0.9.0",
                wd: "^1.1.3"
            },
            homepage: "https://github.com/canjs/can-connect-feathers",
            keywords: [
                "canjs",
                "can",
                "plugin",
                "donejs",
                "feathersjs",
                "feathers",
                "client",
                "realtime"
            ],
            main: "can-connect-feathers.js",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-connect-feathers.git"
            },
            scripts: {
                build: "node build.js",
                ci:
                    "npm run build && npm run test && node test/test-sauce-labs.js",
                "detect-cycle": "detect-cyclic-packages",
                "http-server": "http-server -p 3000 --silent",
                "install-server-deps": ". ./build-server.sh",
                jshint:
                    "jshint --config .jshintrc --exclude node_modules/,dist/,.vscode/,_docs/,test/server/ .",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                start: "node ./test/server/src/index.js",
                "start-test": "node ./test/server/src/index.js --timeout",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                "test-integration":
                    "npm run jshint && npm run install-server-deps && concurrently 'npm run start-test' 'npm run testee-integration' ",
                testee: "testee test/test.html --browsers firefox",
                "testee-integration":
                    "testee test/test-integration.html --browsers firefox"
            },
            steal: { npmIgnore: { testee: true, "steal-tools": true } }
        },
        {
            name: "can-connect-tag",
            version: "1.0.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-connect-tag/package.json",
            origFileUrl: "./node_modules/can-connect-tag/package.json",
            fileUrl: "./node_modules/can-connect-tag/package.json",
            _from: "can-connect-tag@1.0.1",
            _id: "can-connect-tag@1.0.1",
            _inBundle: false,
            _integrity:
                "sha512-y5kdMApZ5jXlRozUlVUh7axJdBvlge+NvKSkD1ee2jDQk4GREzvIwWVztSG+jQ2oaRUxWMliwlOv0pgRDxpxnA==",
            _location: "/can-connect-tag",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-connect-tag@1.0.1",
                name: "can-connect-tag",
                escapedName: "can-connect-tag",
                rawSpec: "1.0.1",
                saveSpec: null,
                fetchSpec: "1.0.1"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-connect-tag/-/can-connect-tag-1.0.1.tgz",
            _shasum: "7217704af7b496b2a7f79943dc42b50182f3efa9",
            _spec: "can-connect-tag@1.0.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "DoneJS Core Team",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-connect-tag/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-dom-mutate": "^1.0.4",
                "can-namespace": "^1.0.0",
                "can-observation": "^4.0.1",
                "can-observation-recorder": "^1.1.1",
                "can-reflect": "^1.16.3",
                "can-stache": "^4.5.5",
                "can-stache-bindings": "^4.2.5",
                "can-symbol": "^1.6.1",
                "can-view-callbacks": "^4.1.2",
                "can-view-nodelist": "^4.1.0",
                "steal-stache": "^4.0.0"
            },
            deprecated: false,
            description: "Create custom elements for your connection models",
            devDependencies: {
                "can-connect": "^3.0.0-pre.9",
                "can-define": "^2.3.3",
                "can-dom-events": "^1.2.0",
                "can-fixture": "^2.0.3",
                "can-list": "^4.0.2",
                "can-map": "^4.0.2",
                "can-query-logic": "^0.8.10",
                "can-set-legacy": "^0.3.0",
                "can-simple-observable": "^2.0.5",
                jquery: "^3.3.1",
                jshint: "^2.9.1",
                steal: "^1.6.5",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.11.3",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com",
            keywords: ["canjs", "donejs", "donejs-plugin"],
            license: "MIT",
            main: "can-connect-tag",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-connect-tag.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                plugins: ["steal-stache", "steal-css"]
            }
        },
        {
            name: "can-fixture-socket",
            version: "2.0.2",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-fixture-socket/package.json",
            origFileUrl: "./node_modules/can-fixture-socket/package.json",
            fileUrl: "./node_modules/can-fixture-socket/package.json",
            _from: "can-fixture-socket@2.0.2",
            _id: "can-fixture-socket@2.0.2",
            _inBundle: false,
            _integrity:
                "sha512-Ww0S3NMHqzAGhA/zZ2xxo2DwFh9jdIpOEEx6heqswBK7BUL9XzTD4eAerzFunr4JT8hQFyxdngFkVqDcbzCjLQ==",
            _location: "/can-fixture-socket",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-fixture-socket@2.0.2",
                name: "can-fixture-socket",
                escapedName: "can-fixture-socket",
                rawSpec: "2.0.2",
                saveSpec: null,
                fetchSpec: "2.0.2"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-fixture-socket/-/can-fixture-socket-2.0.2.tgz",
            _shasum: "64eb4ef499af3cf4644b80fe419c7b63af73cd66",
            _spec: "can-fixture-socket@2.0.2",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "bitovi",
                email: "contact@bitovi.com",
                url: "bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-fixture-socket/issues" },
            bundleDependencies: false,
            dependencies: { "can-assign": "^1.2.0", "can-fixture": "^3.0.0" },
            deprecated: false,
            description: "Simulate socket connections",
            devDependencies: {
                "@feathersjs/feathers": "^3.3.1",
                "@feathersjs/socketio-client": "^1.2.1",
                "can-set-legacy": "<2.0.0",
                "detect-cyclic-packages": "^1.1.0",
                "done-serve": "^1.2.0",
                "donejs-cli": "^1.0.1",
                "es6-promise-polyfill": "^1.2.0",
                "generator-donejs": "^1.0.5",
                jshint: "^2.9.1",
                "object-assign": "^4.1.0",
                "socket.io-client": "^2.2.0",
                steal: "^1.5.6",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.1.2",
                testee: "^0.9.0"
            },
            homepage: "https://github.com/canjs/can-fixture-socket",
            keywords: ["Done", "JS", "Can", "JS"],
            main: "can-fixture-socket",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-fixture-socket.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-fixture-socket"
            }
        },
        {
            name: "can-ndjson-stream",
            version: "1.0.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-ndjson-stream/package.json",
            origFileUrl: "./node_modules/can-ndjson-stream/package.json",
            fileUrl: "./node_modules/can-ndjson-stream/package.json",
            _from: "can-ndjson-stream@1.0.1",
            _id: "can-ndjson-stream@1.0.1",
            _inBundle: false,
            _integrity:
                "sha512-XjJtjibLAXt87RbrRvOGB5gk8m/vFrNb38ZX8eFj9eUAQgSegbGSPEBWYoIbZZQQVV8GgWnWGM8xRH6cuNaq4g==",
            _location: "/can-ndjson-stream",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-ndjson-stream@1.0.1",
                name: "can-ndjson-stream",
                escapedName: "can-ndjson-stream",
                rawSpec: "1.0.1",
                saveSpec: null,
                fetchSpec: "1.0.1"
            },
            _requiredBy: ["/can", "/can-connect-ndjson"],
            _resolved:
                "https://registry.npmjs.org/can-ndjson-stream/-/can-ndjson-stream-1.0.1.tgz",
            _shasum: "43d64766e389ea7de4165b8be0e674c14e3e07e8",
            _spec: "can-ndjson-stream@1.0.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-ndjson-stream/issues" },
            bundleDependencies: false,
            dependencies: { "can-namespace": "^1.0.0" },
            deprecated: false,
            description:
                "[![Join our Slack](https://img.shields.io/badge/slack-join%20chat-611f69.svg)](https://www.bitovi.com/community/slack?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![Join our Discourse](https://img.shields.io/discourse/https/forums.bitovi.com/posts.svg)](https://forums.bitovi.com/?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![License: MIT](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/canjs/can-ndjson-stream/blob/master/license.md) [![npm version](https://badge.fury.io/js/can-ndjson-stream.svg)](https://www.npmjs.com/package/can-ndjson-stream) [![Travis build status](https://travis-ci.org/canjs/can-ndjson-stream.svg?branch=master)](https://travis-ci.org/canjs/can-ndjson-stream) [![Greenkeeper badge](https://badges.greenkeeper.io/canjs/can-ndjson-stream.svg)](https://greenkeeper.io/)",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                "http-server": "^0.11.0",
                jshint: "^2.9.1",
                saucelabs: "^2.1.9",
                steal: "^1.0.5",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.2",
                "test-saucelabs": "0.0.6",
                testee: "^0.9.1"
            },
            false: {},
            homepage: "https://github.com/canjs/can-ndjson-stream#readme",
            keywords: [],
            licenses: [
                { type: "MIT", url: "http://opensource.org/licenses/MIT" }
            ],
            main: "can-ndjson-stream",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-ndjson-stream.git"
            },
            scripts: {
                build: "node build.js",
                ci:
                    "npm run build && npm run test && node ./test-sauce-labs.js",
                demo: "cd demo/ && npm i && npm run start",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                "http-server": "http-server -p 3000 --silent",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run detect-cycle && npm run jshint && node test.js",
                "test-local": "npm run jshint && npm run testee-local",
                "testee-local":
                    "DEBUG=testee:* testee test.html --browsers chrome",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-ndjson-stream"
            }
        },
        {
            name: "can-connect-ndjson",
            version: "1.0.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-connect-ndjson/package.json",
            origFileUrl: "./node_modules/can-connect-ndjson/package.json",
            fileUrl: "./node_modules/can-connect-ndjson/package.json",
            _from: "can-connect-ndjson@1.0.1",
            _id: "can-connect-ndjson@1.0.1",
            _inBundle: false,
            _integrity:
                "sha512-Ex0Ot68ZdkR/mDiMPcVctWvJIKCiEhBRjoMyvcPQpDBaQDX8SsRbdnfSuQ6rWYE8L1fe0PcvV+1I5ZqOhtpuJA==",
            _location: "/can-connect-ndjson",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-connect-ndjson@1.0.1",
                name: "can-connect-ndjson",
                escapedName: "can-connect-ndjson",
                rawSpec: "1.0.1",
                saveSpec: null,
                fetchSpec: "1.0.1"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-connect-ndjson/-/can-connect-ndjson-1.0.1.tgz",
            _shasum: "4994a33699e6b4d41929910ecd51467af551c9d0",
            _spec: "can-connect-ndjson@1.0.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-connect-ndjson/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-connect": "^3.0.6",
                "can-namespace": "^1.0.0",
                "can-ndjson-stream": "^1.0.0",
                "can-reflect": "^1.17.4"
            },
            deprecated: false,
            description:
                "[![Join our Slack](https://img.shields.io/badge/slack-join%20chat-611f69.svg)](https://www.bitovi.com/community/slack?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![Join our Discourse](https://img.shields.io/discourse/https/forums.bitovi.com/posts.svg)](https://forums.bitovi.com/?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![License: MIT](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/canjs/can-connect-ndjson/blob/master/license.md) [![npm version](https://badge.fury.io/js/can-connect-ndjson.svg)](https://www.npmjs.com/package/can-connect-ndjson) [![Travis build status](https://travis-ci.org/canjs/can-connect-ndjson.svg?branch=master)](https://travis-ci.org/canjs/can-connect-ndjson) [![Greenkeeper badge](https://badges.greenkeeper.io/canjs/can-connect-ndjson.svg)](https://greenkeeper.io/)",
            devDependencies: {
                "can-define": "^2.5.7",
                "can-stache": "^4.10.5",
                "detect-cyclic-packages": "^1.1.0",
                "http-server": "^0.11.1",
                jshint: "^2.9.5",
                mocha: "^6.1.3",
                saucelabs: "^2.1.7",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                "test-saucelabs": "0.0.6",
                testee: "^0.9.0"
            },
            homepage: "https://github.com/canjs/can-connect-ndjson#readme",
            keywords: [],
            licenses: [
                {
                    type: "MIT",
                    url: "http://opensource.org/licenses/mit-license.php"
                }
            ],
            main: "can-connect-ndjson.js",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-connect-ndjson.git"
            },
            scripts: {
                build: "node build.js",
                ci: "npm run build && node ./test/test-sauce-labs.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                "http-server": "http-server -p 3000 --silent",
                jshint: "jshint ./*.js --config",
                postversion:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test:
                    "npm run detect-cycle && npm run jshint && node test/test.js",
                testee: "testee ./test/test.html --browsers chrome",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            }
        },
        {
            name: "can-connect",
            version: "3.2.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-connect/package.json",
            origFileUrl: "./node_modules/can-connect/package.json",
            fileUrl: "./node_modules/can-connect/package.json",
            _from: "can-connect@3.2.1",
            _id: "can-connect@3.2.1",
            _inBundle: false,
            _integrity:
                "sha512-xWfGu3zqZrfZZAsYU0chNuaobej8AiFc2pzJCU1PxZ1eNu58iR44VokAb0Th8PIT98/r07xyk3Q4r2UYpj6kvw==",
            _location: "/can-connect",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-connect@3.2.1",
                name: "can-connect",
                escapedName: "can-connect",
                rawSpec: "3.2.1",
                saveSpec: null,
                fetchSpec: "3.2.1"
            },
            _requiredBy: [
                "/can",
                "/can-connect-feathers",
                "/can-connect-ndjson",
                "/can-realtime-rest-model",
                "/can-rest-model",
                "/can-super-model"
            ],
            _resolved:
                "https://registry.npmjs.org/can-connect/-/can-connect-3.2.1.tgz",
            _shasum: "8ea012d23802a483128d885f58cde08fcf7e1662",
            _spec: "can-connect@3.2.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: { name: "Bitovi" },
            bugs: { url: "https://github.com/canjs/can-connect/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-ajax": "^2.0.1",
                "can-construct": "^3.5.5",
                "can-define": "^2.7.13",
                "can-define-connected-singleton": "^0.2.0",
                "can-diff": "<2.0.0",
                "can-dom-mutate": "<2.0.0",
                "can-event-queue": "<2.0.0",
                "can-globals": "^1.0.1",
                "can-key": "<2.0.0",
                "can-local-store": "<2.0.0",
                "can-log": "^1.0.0",
                "can-make-rest": "<2.0.0",
                "can-memory-store": "<2.0.0",
                "can-namespace": "1.0.0",
                "can-observation-recorder": "<2.0.0",
                "can-query-logic": "^1.0.0",
                "can-queues": "<2.0.0",
                "can-reflect": "^1.17.10",
                "can-string": "<2.0.0",
                "can-symbol": "^1.6.1",
                "can-validate-interface": "^1.0.0"
            },
            deprecated: false,
            description: "Data connection middleware and utilities",
            devDependencies: {
                "can-dom-events": "^1.1.0",
                "can-fixture": "^3.0.0-pre.9",
                "can-list": "^4.0.0",
                "can-map": "^4.0.0",
                "can-observation": "^4.0.0",
                "can-observe": "^2.1.3",
                "can-set-legacy": "<2.0.0",
                "can-simple-observable": "^2.0.0",
                "can-test-helpers": "^1.1.2",
                jquery: "2.x - 3.x",
                jshint: "^2.9.4",
                steal: "^1.0.1",
                "steal-css": "^1.0.0",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.0.0",
                testee: "^0.9.0"
            },
            engines: { npm: "^3.0.0" },
            homepage: "https://github.com/canjs/can-connect#readme",
            keywords: ["CanJS"],
            license: "MIT",
            main: "can-connect.js",
            repository: {
                type: "git",
                url: "git+https://github.com/canjs/can-connect.git"
            },
            scripts: {
                build: "node build.js",
                jshint: "jshint --config .jshintrc",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run jshint && testee --browsers firefox test/test.html"
            },
            steal: { plugins: ["steal-stache", "steal-css"] },
            warnings: [
                {
                    code: "ENOTSUP",
                    required: { npm: "^3.0.0" },
                    pkgid: "can-connect@3.2.1"
                }
            ]
        },
        {
            name: "can-construct-super",
            version: "3.2.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-construct-super/package.json",
            origFileUrl: "./node_modules/can-construct-super/package.json",
            fileUrl: "./node_modules/can-construct-super/package.json",
            _from: "can-construct-super@3.2.1",
            _id: "can-construct-super@3.2.1",
            _inBundle: false,
            _integrity:
                "sha512-YeeTSvWET3oP5muAjPH4Lf3ImEEPBDjmbAksaX/+JSlhDcAz6xZgWPHZ+6rTC6Is5jbmT2yAQURi+PgrpRzswQ==",
            _location: "/can-construct-super",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-construct-super@3.2.1",
                name: "can-construct-super",
                escapedName: "can-construct-super",
                rawSpec: "3.2.1",
                saveSpec: null,
                fetchSpec: "3.2.1"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-construct-super/-/can-construct-super-3.2.1.tgz",
            _shasum: "74a3276a07da4b46eca963b442c3bb74a16cb153",
            _spec: "can-construct-super@3.2.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: { name: "Bitovi" },
            bugs: {
                url: "https://github.com/canjs/can-construct-super/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-construct": "^3.2.0",
                "can-reflect": "^1.6.0"
            },
            deprecated: false,
            description:
                "Provides a reference to the prototypal parent using this._super in can-construct objects",
            devDependencies: {
                "bit-docs": "0.0.7",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.3",
                steal: "^1.2.8",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.1.2",
                testee: "^0.9.0"
            },
            homepage: "https://github.com/canjs/can-construct-super#readme",
            keywords: ["canjs", "donejs"],
            license: "MIT",
            main: "can-construct-super",
            repository: {
                type: "git",
                url: "git+https://github.com/canjs/can-construct-super.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postversion:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    documentjs: true,
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-construct-super"
            }
        },
        {
            name: "can-route-mock",
            version: "1.0.2",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-route-mock/package.json",
            origFileUrl: "./node_modules/can-route-mock/package.json",
            fileUrl: "./node_modules/can-route-mock/package.json",
            _from: "can-route-mock@1.0.2",
            _id: "can-route-mock@1.0.2",
            _inBundle: false,
            _integrity:
                "sha512-Ck/ovqfUH5OrxIHz1rxYauVT6mw0ioBNSO+DkN/TwiaBqu+zSCyJQ5OItPx9NDxVbgsE21C77Pi2Hc8mimipOw==",
            _location: "/can-route-mock",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-route-mock@1.0.2",
                name: "can-route-mock",
                escapedName: "can-route-mock",
                rawSpec: "1.0.2",
                saveSpec: null,
                fetchSpec: "1.0.2"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-route-mock/-/can-route-mock-1.0.2.tgz",
            _shasum: "586ad13f93a2171a044ec2a65be3fa397498c328",
            _spec: "can-route-mock@1.0.2",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "DoneJS Core Team",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-route-mock/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-reflect": "^1.16.7",
                "can-simple-observable": "^2.1.1"
            },
            deprecated: false,
            description: "a fake url for routing",
            devDependencies: {
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "donejs", "donejs-plugin"],
            license: "MIT",
            main: "can-route-mock.js",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-route-mock.git"
            },
            scripts: {
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            }
        },
        {
            name: "can-event-dom-radiochange",
            version: "2.2.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-event-dom-radiochange/package.json",
            origFileUrl:
                "./node_modules/can-event-dom-radiochange/package.json",
            fileUrl: "./node_modules/can-event-dom-radiochange/package.json",
            _from: "can-event-dom-radiochange@2.2.1",
            _id: "can-event-dom-radiochange@2.2.1",
            _inBundle: false,
            _integrity:
                "sha512-urK90wYRDFkpP6sp4eG1TPxBPouLOdpXCM2Fag9NajotsV6jHYyoMGYMYdVhSevdqSoNYo9Jeh4K93de8LhD5w==",
            _location: "/can-event-dom-radiochange",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-event-dom-radiochange@2.2.1",
                name: "can-event-dom-radiochange",
                escapedName: "can-event-dom-radiochange",
                rawSpec: "2.2.1",
                saveSpec: null,
                fetchSpec: "2.2.1"
            },
            _requiredBy: ["/can", "/can-attribute-observable"],
            _resolved:
                "https://registry.npmjs.org/can-event-dom-radiochange/-/can-event-dom-radiochange-2.2.1.tgz",
            _shasum: "aad11bb2e742f6d057c9e354f43f6eb3ff40f45a",
            _spec: "can-event-dom-radiochange@2.2.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Chris Andrejewski",
                email: "core@donejs.com",
                url: "https://bitovi.com"
            },
            bugs: {
                url: "https://github.com/canjs/can-event-dom-radiochange/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-dom-events": "<2.0.0",
                "can-globals": "<2.0.0",
                "can-namespace": "1.0.0"
            },
            deprecated: false,
            description: "Custom radiochange event",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                fixpack: "^2.3.1",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/doc/can-event-dom-radiochange.html",
            keywords: ["canjs", "change", "event", "radio"],
            license: "MIT",
            main: "can-event-dom-radiochange",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-event-dom-radiochange.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                "install-canary": "npm install --no-shrinkwrap",
                "install-locked": "npm install",
                jshint: "jshint ./*.js --config",
                lint: "fixpack && npm run jshint",
                postversion: "git push --follow-tags",
                preversion: "npm test && npm run build",
                test: "npm run detect-cycle && npm run lint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: {
                npmIgnore: { testee: true, "steal-tools": true },
                main: "can-event-dom-radiochange"
            }
        },
        {
            name: "can-type",
            version: "0.1.13",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-type/package.json",
            origFileUrl: "./node_modules/can-type/package.json",
            fileUrl: "./node_modules/can-type/package.json",
            _from: "can-type@0.1.13",
            _id: "can-type@0.1.13",
            _inBundle: false,
            _integrity:
                "sha512-XNA17yjOkHzYnsUDAR8xLc2hIpA97M3CsfBMybHdNoHW0aY7E0wOEuMGvuBGeZnw3gZPTy6GXvt7R1kcl2qlDw==",
            _location: "/can-type",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-type@0.1.13",
                name: "can-type",
                escapedName: "can-type",
                rawSpec: "0.1.13",
                saveSpec: null,
                fetchSpec: "0.1.13"
            },
            _requiredBy: ["/can", "/can-observable-mixin"],
            _resolved:
                "https://registry.npmjs.org/can-type/-/can-type-0.1.13.tgz",
            _shasum: "f305d1fe2af22813507f80ab2790df02d8af9648",
            _spec: "can-type@0.1.13",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "DoneJS Contributors",
                email: "core@donejs.com",
                url: "canjs.com"
            },
            bugs: { url: "https://github.com/canjs/can-type/issues" },
            bundleDependencies: false,
            dependencies: { "can-reflect": "^1.17.10" },
            deprecated: false,
            description: "Type definitions",
            devDependencies: {
                jshint: "^2.9.1",
                steal: "^2.1.6",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.0.9",
                testee: "^0.9.1"
            },
            homepage: "https://canjs.com/doc/can-type.html",
            keywords: ["canjs", "types"],
            license: "MIT",
            main: "can-type.js",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-type.git"
            },
            scripts: {
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            }
        },
        {
            name: "can-define-stream-kefir",
            version: "1.1.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-define-stream-kefir/package.json",
            origFileUrl: "./node_modules/can-define-stream-kefir/package.json",
            fileUrl: "./node_modules/can-define-stream-kefir/package.json",
            _from: "can-define-stream-kefir@1.1.1",
            _id: "can-define-stream-kefir@1.1.1",
            _inBundle: false,
            _integrity:
                "sha512-UXmiG6qLIYQn7mzqHzsLQEGHZsCyYasmrcIPYqv0i6N+1j9xrrXLa4yV47N6aM9cLN+MDcJKeQn1d6jRNnRUfg==",
            _location: "/can-define-stream-kefir",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-define-stream-kefir@1.1.1",
                name: "can-define-stream-kefir",
                escapedName: "can-define-stream-kefir",
                rawSpec: "1.1.1",
                saveSpec: null,
                fetchSpec: "1.1.1"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-define-stream-kefir/-/can-define-stream-kefir-1.1.1.tgz",
            _shasum: "1073c856316896c897156893dd8bc1afa644e4d2",
            _spec: "can-define-stream-kefir@1.1.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: {
                url: "https://github.com/canjs/can-define-stream-kefir/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-compute": "^4.0.0",
                "can-define": "^2.0.0",
                "can-define-stream": "^1.0.0",
                "can-namespace": "^1.0.0",
                "can-observation": "^4.0.0",
                "can-stream-kefir": "^1.0.0",
                kefir: "^3.8.0"
            },
            deprecated: false,
            description:
                "[![Join our Slack](https://img.shields.io/badge/slack-join%20chat-611f69.svg)](https://www.bitovi.com/community/slack?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![Join our Discourse](https://img.shields.io/discourse/https/forums.bitovi.com/posts.svg)](https://forums.bitovi.com/?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![License: MIT](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/canjs/can-define-stream-kefir/blob/master/LICENSE) [![npm version](https://badge.fury.io/js/can-define-stream-kefir.svg)](https://www.npmjs.com/package/can-define-stream-kefir) [![Travis build status](https://travis-ci.org/canjs/can-define-stream-kefir.svg?branch=master)](https://travis-ci.org/canjs/can-define-stream-kefir) [![Greenkeeper badge](https://badges.greenkeeper.io/canjs/can-define-stream-kefir.svg)](https://greenkeeper.io/)",
            devDependencies: {
                "can-symbol": "^1.5.0",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.0.6",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.0.1",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-define-stream-kefir",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-define-stream-kefir.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                jshint: "jshint *.js --config",
                postversion: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: {}
        },
        {
            name: "can-observable-mixin",
            version: "0.4.0",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-observable-mixin/package.json",
            origFileUrl: "./node_modules/can-observable-mixin/package.json",
            fileUrl: "./node_modules/can-observable-mixin/package.json",
            _from: "can-observable-mixin@0.4.0",
            _id: "can-observable-mixin@0.4.0",
            _inBundle: false,
            _integrity:
                "sha512-Gy1xkM1RUpZ0Tw8tOVDNyrgI5ogTz4fmOrR9CjS+YKO7t0Z3Dnz1w6R1s6cw8J0U0+TJxlcPQLQILB+vG+aJDg==",
            _location: "/can-observable-mixin",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-observable-mixin@0.4.0",
                name: "can-observable-mixin",
                escapedName: "can-observable-mixin",
                rawSpec: "0.4.0",
                saveSpec: null,
                fetchSpec: "0.4.0"
            },
            _requiredBy: [
                "/can",
                "/can-observable-array",
                "/can-observable-object",
                "/can-stache-element"
            ],
            _resolved:
                "https://registry.npmjs.org/can-observable-mixin/-/can-observable-mixin-0.4.0.tgz",
            _shasum: "09ce2beb226d44b2ac5bc1b6688b44e4b60849f6",
            _spec: "can-observable-mixin@0.4.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            browserslist: "ie 11",
            bugs: {
                url: "https://github.com/canjs/can-observable-mixin/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.3.1",
                "can-define-lazy-value": "^1.1.0",
                "can-event-queue": "^1.1.5",
                "can-log": "^1.0.0",
                "can-namespace": "^1.0.0",
                "can-observation": "^4.1.2",
                "can-observation-recorder": "^1.3.0",
                "can-queues": "^1.2.1",
                "can-reflect": "^1.17.9",
                "can-simple-observable": "^2.4.1",
                "can-string-to-any": "^1.2.0",
                "can-type": "^0.1.13"
            },
            deprecated: false,
            description: "Define properties on JavaScript classes",
            devDependencies: {
                "@babel/cli": "^7.4.4",
                "@babel/core": "^7.4.5",
                "@babel/preset-env": "^7.4.5",
                "can-reflect-tests": "^0.3.1",
                "can-test-helpers": "^1.1.4",
                "detect-cyclic-packages": "^1.1.0",
                fixpack: "^2.3.1",
                "http-server": "^0.11.1",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "test-saucelabs": "0.0.6",
                testee: "^0.9.0"
            },
            homepage: "https://github.com/canjs/can-observable-mixin",
            keywords: ["CanJS"],
            license: "MIT",
            main: "dist/mixins.js",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-observable-mixin.git"
            },
            scripts: {
                ci: "npm run test && node test/test-saucelabs.js",
                "compile-to-es5": "babel src --out-dir dist",
                "detect-cycle": "detect-cyclic-packages",
                "http-server": "http-server -p 3000 --silent",
                jshint: "jshint src/*.js test/*.js --config",
                lint: "fixpack && npm run jshint",
                postversion: "git push --follow-tags",
                prepublishOnly: "npm run compile-to-es5",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test: "npm run detect-cycle && npm run lint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            },
            steal: { main: "src/mixins.js" }
        },
        {
            name: "can-event-dom-enter",
            version: "2.2.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-event-dom-enter/package.json",
            origFileUrl: "./node_modules/can-event-dom-enter/package.json",
            fileUrl: "./node_modules/can-event-dom-enter/package.json",
            _from: "can-event-dom-enter@2.2.1",
            _id: "can-event-dom-enter@2.2.1",
            _inBundle: false,
            _integrity:
                "sha512-nXhW2urlDQ3KiecFOWG1jTJAqcWnxW59MNncqxHOF7i3GvB8NR0xKJh2nuZktChMGLZVl6CJfYzGRs0K8aqL4A==",
            _location: "/can-event-dom-enter",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-event-dom-enter@2.2.1",
                name: "can-event-dom-enter",
                escapedName: "can-event-dom-enter",
                rawSpec: "2.2.1",
                saveSpec: null,
                fetchSpec: "2.2.1"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-event-dom-enter/-/can-event-dom-enter-2.2.1.tgz",
            _shasum: "78385bb8560279d32650d74a1ea613c7c3da3039",
            _spec: "can-event-dom-enter@2.2.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Chris Andrejewski",
                email: "core@donejs.com",
                url: "https://bitovi.com"
            },
            bugs: {
                url: "https://github.com/canjs/can-event-dom-enter/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-dom-events": "^1.0.0",
                "can-namespace": "1.0.0"
            },
            deprecated: false,
            description: "Custom enter event",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                fixpack: "^2.3.1",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/doc/can-event-dom-enter.html",
            keywords: ["canjs", "change", "event", "radio"],
            license: "MIT",
            main: "can-event-dom-enter",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-event-dom-enter.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                "install-canary": "npm install --no-shrinkwrap",
                "install-locked": "npm install",
                jshint: "jshint ./*.js --config",
                lint: "fixpack && npm run jshint",
                postversion: "git push --follow-tags",
                preversion: "npm test && npm run build",
                test: "npm run detect-cycle && npm run lint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: {
                npmIgnore: { testee: true, "steal-tools": true },
                main: "can-event-dom-enter"
            }
        },
        {
            name: "can-view-autorender",
            version: "5.0.4",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-view-autorender/package.json",
            origFileUrl: "./node_modules/can-view-autorender/package.json",
            fileUrl: "./node_modules/can-view-autorender/package.json",
            _from: "can-view-autorender@5.0.4",
            _id: "can-view-autorender@5.0.4",
            _inBundle: false,
            _integrity:
                "sha512-knKU3fctr+JhMemPCoNuEYVYUbDbB29cMfRjm9mcYfUAywp8Lv5SzVx/PYHJpHrNEGwrqL/zxC6HD6JTAci0fg==",
            _location: "/can-view-autorender",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-view-autorender@5.0.4",
                name: "can-view-autorender",
                escapedName: "can-view-autorender",
                rawSpec: "5.0.4",
                saveSpec: null,
                fetchSpec: "5.0.4"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-view-autorender/-/can-view-autorender-5.0.4.tgz",
            _shasum: "ab53d1fa9a73ef96843284ef821c17447b92b6d1",
            _spec: "can-view-autorender@5.0.4",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: {
                url: "https://github.com/canjs/can-view-autorender/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-dom-events": "^1.2.0",
                "can-import-module": "^1.0.0",
                "can-namespace": "1.0.0",
                "can-reflect": "^1.15.2",
                "can-string": "<2.0.0",
                "can-view-model": "^4.0.0"
            },
            deprecated: false,
            description: "Automatically render templates found in the document",
            devDependencies: {
                "bit-docs": "0.0.8-0",
                "can-component": "^4.0.0",
                "can-define": "^2.0.0",
                "can-stache": "^4.0.0",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.2.10",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.1.2",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-view-autorender",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-view-autorender.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                jshint: "jshint ./*.js --config",
                postversion:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tags=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            }
        },
        {
            name: "can-stream",
            version: "1.1.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-stream/package.json",
            origFileUrl: "./node_modules/can-stream/package.json",
            fileUrl: "./node_modules/can-stream/package.json",
            _from: "can-stream@1.1.1",
            _id: "can-stream@1.1.1",
            _inBundle: false,
            _integrity:
                "sha512-rXhVcuuV8bW5p1c3A2p6XyCHLN/ahC3CRNY3fROyxnhg8Ng8+zjlm3LpyZcAHuAEBqaf0pJChRuZO3ebx6CjFQ==",
            _location: "/can-stream",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-stream@1.1.1",
                name: "can-stream",
                escapedName: "can-stream",
                rawSpec: "1.1.1",
                saveSpec: null,
                fetchSpec: "1.1.1"
            },
            _requiredBy: ["/can", "/can-define-stream", "/can-stream-kefir"],
            _resolved:
                "https://registry.npmjs.org/can-stream/-/can-stream-1.1.1.tgz",
            _shasum: "72a58a33547d227792428058b55745449176a327",
            _spec: "can-stream@1.1.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-stream/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.1.1",
                "can-compute": "^4.0.0",
                "can-define": "^2.0.0",
                "can-namespace": "^1.0.0",
                "can-observation": "^4.0.0",
                "can-reflect": "^1.11.0",
                "can-types": "^1.1.0",
                kefir: "^3.8.0"
            },
            deprecated: false,
            description: "Stream values into and out of computes",
            devDependencies: {
                "bit-docs": "0.0.7",
                "detect-cyclic-packages": "^1.1.0",
                "done-serve": "^1.2.4",
                "donejs-cli": "^1.0.2",
                "generator-donejs": "^0.9.0",
                jshint: "^2.9.1",
                steal: "^1.2.10",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.1.2",
                testee: "^0.9.1"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-stream",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-stream.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint *.js --config",
                postversion:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            },
            steal: {}
        },
        {
            name: "can-compute",
            version: "4.1.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-compute/package.json",
            origFileUrl: "./node_modules/can-compute/package.json",
            fileUrl: "./node_modules/can-compute/package.json",
            _from: "can-compute@4.1.1",
            _id: "can-compute@4.1.1",
            _inBundle: false,
            _integrity:
                "sha512-YgPEM4h+bVLJez7FnTlAJOPzMVO7bBskWj5rx5KELkehSpJuvbCasGlC8TTuP7vXZLuCNLmy+OShRHpOrumalQ==",
            _location: "/can-compute",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-compute@4.1.1",
                name: "can-compute",
                escapedName: "can-compute",
                rawSpec: "4.1.1",
                saveSpec: null,
                fetchSpec: "4.1.1"
            },
            _requiredBy: [
                "/can",
                "/can-define-stream",
                "/can-define-stream-kefir",
                "/can-list",
                "/can-map",
                "/can-map-define",
                "/can-stream",
                "/can-stream-kefir",
                "/can-validate-legacy"
            ],
            _resolved:
                "https://registry.npmjs.org/can-compute/-/can-compute-4.1.1.tgz",
            _shasum: "e4960b91cd3a79bd37f179969b00636c2ca90f2c",
            _spec: "can-compute@4.1.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-compute/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.1.1",
                "can-event-queue": "^1.0.0",
                "can-key": "<2.0.0",
                "can-namespace": "1.0.0",
                "can-observation": "^4.0.0",
                "can-observation-recorder": "^1.0.0",
                "can-reflect": "^1.6.1",
                "can-simple-observable": "^2.0.0",
                "can-single-reference": "^1.0.0",
                "can-stache-key": "^1.0.0",
                "can-symbol": "^1.0.0"
            },
            deprecated: false,
            description:
                "CanJS’s legacy way of composing observables. Use can-observation instead.",
            devDependencies: {
                "can-dom-events": "^1.0.0",
                "can-queues": "^1.0.0",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.2.8",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.1.2",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-compute",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-compute.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint *.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            }
        },
        {
            name: "can-list",
            version: "4.2.2",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-list/package.json",
            origFileUrl: "./node_modules/can-list/package.json",
            fileUrl: "./node_modules/can-list/package.json",
            _from: "can-list@4.2.2",
            _id: "can-list@4.2.2",
            _inBundle: false,
            _integrity:
                "sha512-v6WrkkYawwilvsM6LKHVm65RgjTqQuNeHJXlTpscgyShZLCzntWos5sDfYiCIza9NF6dIOpF8oDeSpdL7AfmxA==",
            _location: "/can-list",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-list@4.2.2",
                name: "can-list",
                escapedName: "can-list",
                rawSpec: "4.2.2",
                saveSpec: null,
                fetchSpec: "4.2.2"
            },
            _requiredBy: ["/can", "/can-map-define"],
            _resolved:
                "https://registry.npmjs.org/can-list/-/can-list-4.2.2.tgz",
            _shasum: "2e220a816880001231922742ede3e0e3ef1e7e8a",
            _spec: "can-list@4.2.2",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-list/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.1.1",
                "can-cid": "^1.1.2",
                "can-compute": "^4.0.0",
                "can-construct": "^3.2.1",
                "can-event-queue": "<2.0.0",
                "can-map": "^4.0.0",
                "can-namespace": "^1.0.0",
                "can-observation": "^4.0.0",
                "can-observation-recorder": "<2.0.0",
                "can-queues": "<2.0.0",
                "can-reflect": "^1.7.2",
                "can-simple-observable": "^2.0.0",
                "can-stache-key": "^1.0.0",
                "can-symbol": "^1.4.1",
                "can-types": "^1.1.0"
            },
            deprecated: false,
            description: "Observable lists",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.2.9",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.1.2",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-list",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-list.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            },
            system: { npmAlgorithm: "flat" },
            steal: { npmAlgorithm: "flat" }
        },
        {
            name: "can-map",
            version: "4.3.8",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-map/package.json",
            origFileUrl: "./node_modules/can-map/package.json",
            fileUrl: "./node_modules/can-map/package.json",
            _from: "can-map@4.3.8",
            _id: "can-map@4.3.8",
            _inBundle: false,
            _integrity:
                "sha512-al2JyDczCo7UyVn7Ea1W5cg5lOw4XlchjoHaUMauzCmBXQHupB9rX45A3OAPv4Zai/cezkJ38ZQXdWlllSQYXg==",
            _location: "/can-map",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-map@4.3.8",
                name: "can-map",
                escapedName: "can-map",
                rawSpec: "4.3.8",
                saveSpec: null,
                fetchSpec: "4.3.8"
            },
            _requiredBy: [
                "/can",
                "/can-list",
                "/can-map-define",
                "/can-validate-legacy"
            ],
            _resolved: "https://registry.npmjs.org/can-map/-/can-map-4.3.8.tgz",
            _shasum: "9d1542470266ae2706e2320e9b8a7723c1e33a65",
            _spec: "can-map@4.3.8",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-map/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.0.0",
                "can-cid": "^1.1.2",
                "can-compute": "^4.0.0",
                "can-construct": "^3.5.4",
                "can-event-queue": "^1.0.0",
                "can-log": "^1.0.0",
                "can-namespace": "^1.0.0",
                "can-observation-recorder": "^1.0.2",
                "can-queues": "^1.0.0",
                "can-reflect": "^1.7.2",
                "can-simple-observable": "^2.0.0",
                "can-single-reference": "^1.0.0",
                "can-stache-key": "^1.0.0",
                "can-symbol": "^1.4.1",
                "can-types": "^1.1.0"
            },
            deprecated: false,
            description: "Observable Objects",
            devDependencies: {
                "can-observation": "^4.0.0",
                "can-reflect-tests": "^0.3.1",
                "can-simple-observable": "^2.0.0",
                "can-test-helpers": "^1.1.4",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^2.1.3",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.0.4",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-map",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-map.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            },
            steal: {}
        },
        {
            name: "can-set-legacy",
            version: "1.0.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-set-legacy/package.json",
            origFileUrl: "./node_modules/can-set-legacy/package.json",
            fileUrl: "./node_modules/can-set-legacy/package.json",
            _from: "can-set-legacy@1.0.1",
            _id: "can-set-legacy@1.0.1",
            _inBundle: false,
            _integrity:
                "sha512-V+L+Xfoi7hYbvKX8x2GyxIw6OkIi5dEXAc2gd3/Pi3YuOrkRzBuC1rsw1/YhIC4xvVe11XU/k/tGS16PFOhFug==",
            _location: "/can-set-legacy",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-set-legacy@1.0.1",
                name: "can-set-legacy",
                escapedName: "can-set-legacy",
                rawSpec: "1.0.1",
                saveSpec: null,
                fetchSpec: "1.0.1"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-set-legacy/-/can-set-legacy-1.0.1.tgz",
            _shasum: "13a36da1a2edae5c01d5d14a41dc1ca9754f9fc7",
            _spec: "can-set-legacy@1.0.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "DoneJS",
                email: "core@donejs.com",
                url: "donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-set-legacy/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-key": "<2.0.0",
                "can-query-logic": "<2.0.0",
                "can-reflect": "^1.15.0"
            },
            deprecated: false,
            description: "support the old can-set",
            devDependencies: {
                "can-log": "^1.0.0",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "donejs", "donejs-plugin"],
            license: "MIT",
            main: "can-set-legacy",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-set-legacy.git"
            },
            scripts: {
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            }
        },
        {
            name: "can-map-define",
            version: "4.3.8",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-map-define/package.json",
            origFileUrl: "./node_modules/can-map-define/package.json",
            fileUrl: "./node_modules/can-map-define/package.json",
            _from: "can-map-define@4.3.8",
            _id: "can-map-define@4.3.8",
            _inBundle: false,
            _integrity:
                "sha512-QdRCJKSo9Da7isZlVtn29DsAm6Qvbqpotny6fhHH4YuD1lcIVwecskZ84JdwmRpIu4avoko2TyThpMK/Jrc4kA==",
            _location: "/can-map-define",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-map-define@4.3.8",
                name: "can-map-define",
                escapedName: "can-map-define",
                rawSpec: "4.3.8",
                saveSpec: null,
                fetchSpec: "4.3.8"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-map-define/-/can-map-define-4.3.8.tgz",
            _shasum: "99f3e3f2f3607da55e30aa9282fe6a04bbb0c3fe",
            _spec: "can-map-define@4.3.8",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-map-define/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.1.1",
                "can-compute": "^4.0.3",
                "can-event-queue": "^1.0.1",
                "can-list": "^4.0.0",
                "can-log": "^1.0.0",
                "can-map": "^4.3.5",
                "can-observation-recorder": "^1.2.0",
                "can-queues": "^1.0.1",
                "can-reflect": "^1.15.2",
                "can-symbol": "^1.6.4"
            },
            deprecated: false,
            description: "Define rich attribute behavior",
            devDependencies: {
                "bit-docs": "0.0.7",
                "can-component": "^4.0.4",
                "can-key": "<2.0.0",
                "can-reflect-tests": "^0.3.1",
                "can-route": "^4.1.1",
                "can-stache": "^4.1.3",
                "detect-cyclic-packages": "^1.1.0",
                "done-serve": "^3.0.0",
                jshint: "^2.9.4",
                steal: "^1.2.9",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.1.2",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com",
            keywords: ["canjs"],
            main: "can-map-define",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-map-define.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint . --config",
                postversion:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            },
            steal: { main: "can-map-define" }
        },
        {
            name: "can-view-live",
            version: "4.2.8",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-view-live/package.json",
            origFileUrl: "./node_modules/can-view-live/package.json",
            fileUrl: "./node_modules/can-view-live/package.json",
            _from: "can-view-live@4.2.8",
            _id: "can-view-live@4.2.8",
            _inBundle: false,
            _integrity:
                "sha512-s4vo3ZuB4r7uPPj7IkzDSBz/Zh72D44h2fSwJP0k4gyySMWap4nCX3Ah7qBGd/AYy4jLKzgo//SklMFh6DXlXA==",
            _location: "/can-view-live",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-view-live@4.2.8",
                name: "can-view-live",
                escapedName: "can-view-live",
                rawSpec: "4.2.8",
                saveSpec: null,
                fetchSpec: "4.2.8"
            },
            _requiredBy: ["/can", "/can-stache", "/can-stache-bindings"],
            _resolved:
                "https://registry.npmjs.org/can-view-live/-/can-view-live-4.2.8.tgz",
            _shasum: "e9fee98092c8a8a7d07c6bac5d9a06b7f73aa7a6",
            _spec: "can-view-live@4.2.8",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-view-live/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-attribute-observable": "<2.0.0",
                "can-child-nodes": "^1.0.0",
                "can-diff": "^1.0.1",
                "can-dom-mutate": "^1.2.2",
                "can-fragment": "^1.0.0",
                "can-observation": "^4.0.0",
                "can-queues": "^1.0.0",
                "can-reflect": "^1.10.2",
                "can-reflect-dependencies": "^1.0.1",
                "can-simple-observable": "^2.0.0",
                "can-symbol": "^1.4.1",
                "can-view-callbacks": "^4.0.0",
                "can-view-nodelist": "^4.2.0",
                "can-view-parser": "^4.0.0",
                "can-view-target": "^4.0.0"
            },
            deprecated: false,
            description:
                "[![Join our Slack](https://img.shields.io/badge/slack-join%20chat-611f69.svg)](https://www.bitovi.com/community/slack?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![Join our Discourse](https://img.shields.io/discourse/https/forums.bitovi.com/posts.svg)](https://forums.bitovi.com/?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![License: MIT](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/canjs/can-view-live/blob/master/LICENSE.md) [![npm version](https://badge.fury.io/js/can-view-live.svg)](https://www.npmjs.com/package/can-view-live) [![Travis build status](https://travis-ci.org/canjs/can-view-live.svg?branch=master)](https://travis-ci.org/canjs/can-view-live) [![Greenkeeper badge](https://badges.greenkeeper.io/canjs/can-view-live.svg)](https://greenkeeper.io/)",
            devDependencies: {
                "can-define": "^2.0.0",
                "can-globals": "^1.2.0",
                "can-simple-map": "^4.0.0",
                "can-test-helpers": "^1.1.0",
                "detect-cyclic-packages": "^1.1.0",
                "http-server": "^0.10.0",
                jshint: "^2.9.1",
                steal: "^1.2.10",
                "steal-qunit": "^2.0.0",
                "test-saucelabs": "0.0.6",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/doc/can-view-live.html",
            keywords: ["CanJS", "DoneJS"],
            main: "can-view-live",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-view-live.git"
            },
            scripts: {
                build: "node build.js",
                ci: "npm test && node test/sauce-labs.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                "http-server": "http-server -p 3000 --silent",
                jshint: "jshint test/*.js lib/*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            },
            steal: {
                npmIgnore: {
                    documentjs: true,
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-view-live"
            }
        },
        {
            name: "can-dom-mutate",
            version: "1.3.9",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-dom-mutate/package.json",
            origFileUrl: "./node_modules/can-dom-mutate/package.json",
            fileUrl: "./node_modules/can-dom-mutate/package.json",
            _from: "can-dom-mutate@1.3.9",
            _id: "can-dom-mutate@1.3.9",
            _inBundle: false,
            _integrity:
                "sha512-MMqcL04QhaidZGeEWzzLgVjJQJIORVSsyUKbu7xTIiKCIny2Lp47QToxg1XKhDfWESaJZNC4rgGvLzqdVTvuRw==",
            _location: "/can-dom-mutate",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-dom-mutate@1.3.9",
                name: "can-dom-mutate",
                escapedName: "can-dom-mutate",
                rawSpec: "1.3.9",
                saveSpec: null,
                fetchSpec: "1.3.9"
            },
            _requiredBy: [
                "/can",
                "/can-attribute-observable",
                "/can-component",
                "/can-connect",
                "/can-connect-tag",
                "/can-control",
                "/can-stache",
                "/can-stache-bindings",
                "/can-view-callbacks",
                "/can-view-import",
                "/can-view-live",
                "/can-view-nodelist",
                "/can-view-target"
            ],
            _resolved:
                "https://registry.npmjs.org/can-dom-mutate/-/can-dom-mutate-1.3.9.tgz",
            _shasum: "84d52450d38161de30eae4e4bba5f9cfb8a99cdd",
            _spec: "can-dom-mutate@1.3.9",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "DoneJS Team",
                email: "core@donejs.com",
                url: "https://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-dom-mutate/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-globals": "^1.0.0",
                "can-namespace": "1.0.0",
                "can-reflect": "^1.17.6"
            },
            deprecated: false,
            description: "Dispatch and listen for DOM mutations",
            devDependencies: {
                "can-dom-events": "^1.3.0",
                fixpack: "^2.3.1",
                jshint: "^2.9.1",
                steal: "^1.3.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.2.0",
                testee: "^0.9.0"
            },
            homepage: "https://github.com/canjs/can-dom-mutate",
            keywords: ["canjs", "mutation", "mutationobserver", "observer"],
            license: "MIT",
            main: "can-dom-mutate",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-dom-mutate.git"
            },
            scripts: {
                jshint: "jshint ./*.js ./test/*.js --config",
                lint: "fixpack && npm run jshint",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major":
                    "echo 'Cannot publish a major release from a legacy branch' && exit 1",
                "release:minor":
                    "npm version minor && npm publish --tag 1.x-legacy",
                "release:patch":
                    "npm version patch && npm publish --tag 1.x-legacy",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test: "npm run lint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: { main: "can-dom-mutate" }
        },
        {
            name: "can-observation",
            version: "4.1.3",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-observation/package.json",
            origFileUrl: "./node_modules/can-observation/package.json",
            fileUrl: "./node_modules/can-observation/package.json",
            _from: "can-observation@4.1.3",
            _id: "can-observation@4.1.3",
            _inBundle: false,
            _integrity:
                "sha512-5vKIxzgixvIGiUhOdk5hjPRgHseBrBnB3wWOxLrgbpz7SwzNUpk2tt5QIwY+I0CDw5jwZ9UWz66wWt/MiOUe0g==",
            _location: "/can-observation",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-observation@4.1.3",
                name: "can-observation",
                escapedName: "can-observation",
                rawSpec: "4.1.3",
                saveSpec: null,
                fetchSpec: "4.1.3"
            },
            _requiredBy: [
                "/can",
                "/can-attribute-observable",
                "/can-component",
                "/can-compute",
                "/can-connect-feathers",
                "/can-connect-tag",
                "/can-control",
                "/can-debug",
                "/can-define",
                "/can-define-stream",
                "/can-define-stream-kefir",
                "/can-list",
                "/can-observable-mixin",
                "/can-reflect-promise",
                "/can-route",
                "/can-simple-map",
                "/can-simple-observable",
                "/can-stache",
                "/can-stream",
                "/can-stream-kefir",
                "/can-value",
                "/can-view-live",
                "/can-view-scope"
            ],
            _resolved:
                "https://registry.npmjs.org/can-observation/-/can-observation-4.1.3.tgz",
            _shasum: "3bf86582dd8bc055868852c05c1d4fe2e9344247",
            _spec: "can-observation@4.1.3",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-observation/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-event-queue": "^1.0.0",
                "can-key-tree": "^1.0.0",
                "can-log": "^1.0.0",
                "can-namespace": "1.0.0",
                "can-observation-recorder": "^1.0.0",
                "can-queues": "^1.0.0",
                "can-reflect": "^1.7.0",
                "can-symbol": "^1.4.2"
            },
            deprecated: false,
            description: "Core observable indicators",
            devDependencies: {
                "bit-docs": "^0.0.7",
                "can-cid": "^1.0.0",
                "detect-cyclic-packages": "^1.1.0",
                docco: "^0.7.0",
                "done-serve": "^3.0.0",
                jshint: "^2.9.1",
                steal: "^1.2.3",
                "steal-benchmark": "0.0.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.1.2",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-observation",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-observation.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                docco:
                    "docco can-observation.js recorder-dependency-helpers.js temporarily-bind.js",
                jshint: "jshint *.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            system: { npmAlgorithm: "flat" },
            steal: { npmAlgorithm: "flat" }
        },
        {
            name: "can-stache-key",
            version: "1.4.3",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-stache-key/package.json",
            origFileUrl: "./node_modules/can-stache-key/package.json",
            fileUrl: "./node_modules/can-stache-key/package.json",
            _from: "can-stache-key@1.4.3",
            _id: "can-stache-key@1.4.3",
            _inBundle: false,
            _integrity:
                "sha512-wilhbYx3D030BAnKiYzrUADrDj9+spm1pN1NwAdTshm5LhvoXmkYWvqsBMfCG3aOIwpyHi2pjcgcBtC0+n5X0A==",
            _location: "/can-stache-key",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-stache-key@1.4.3",
                name: "can-stache-key",
                escapedName: "can-stache-key",
                rawSpec: "1.4.3",
                saveSpec: null,
                fetchSpec: "1.4.3"
            },
            _requiredBy: [
                "/can",
                "/can-component",
                "/can-compute",
                "/can-control",
                "/can-list",
                "/can-map",
                "/can-stache",
                "/can-stache-bindings",
                "/can-view-scope"
            ],
            _resolved:
                "https://registry.npmjs.org/can-stache-key/-/can-stache-key-1.4.3.tgz",
            _shasum: "21413ab8860608d2837af8a862778f043e1fae8a",
            _spec: "can-stache-key@1.4.3",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "DoneJS Team",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-stache-key/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-log": "^1.0.0",
                "can-namespace": "1.0.0",
                "can-observation-recorder": "^1.0.0",
                "can-reflect": "^1.16.4",
                "can-reflect-promise": "^2.0.0",
                "can-symbol": "^1.0.0"
            },
            deprecated: false,
            description: "Read and write keys on a value",
            devDependencies: {
                "can-event-queue": "<2.0.0",
                "can-observation": "^4.0.0-pre.2",
                "can-simple-map": "^4.0.0",
                "can-simple-observable": "^2.0.0-pre.11",
                "can-test-helpers": "^1.1.1",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.3.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.2.0",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com",
            keywords: ["DoneJS", "CanJS"],
            license: "MIT",
            main: "can-stache-key",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-stache-key.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-stache-key"
            }
        },
        {
            name: "can-simple-map",
            version: "4.3.2",
            nestedFileUrl:
                "./node_modules/can-view-scope/node_modules/can-simple-map/package.json",
            origFileUrl: "./node_modules/can-simple-map/package.json",
            fileUrl: "./node_modules/can-simple-map/package.json",
            _from: "can-simple-map@4.3.2",
            _id: "can-simple-map@4.3.2",
            _inBundle: false,
            _integrity:
                "sha512-0QfbYD/NLUOMCoYKqeqUrmJVzlsKNOy3CcbBxlhiuv+EbbZpnCL8bedp8YNn0vf+vHczVJP64rkOeE2GxNtmbw==",
            _location: "/can-simple-map",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-simple-map@4.3.2",
                name: "can-simple-map",
                escapedName: "can-simple-map",
                rawSpec: "4.3.2",
                saveSpec: null,
                fetchSpec: "4.3.2"
            },
            _requiredBy: [
                "/can",
                "/can-component",
                "/can-stache-bindings",
                "/can-view-model",
                "/can-view-scope"
            ],
            _resolved:
                "https://registry.npmjs.org/can-simple-map/-/can-simple-map-4.3.2.tgz",
            _shasum: "1237a01e8c635f9166ad567cc402f2894a79232d",
            _spec: "can-simple-map@4.3.2",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-simple-map/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-construct": "^3.5.4",
                "can-event-queue": "^1.0.0",
                "can-key-tree": "^1.0.0",
                "can-log": "^1.0.0",
                "can-observation": "^4.0.0",
                "can-observation-recorder": "^1.0.0",
                "can-queues": "^1.0.0",
                "can-reflect": "^1.2.1",
                "can-symbol": "^1.0.0"
            },
            deprecated: false,
            description: "A performant live-bound map",
            devDependencies: {
                "can-reflect-tests": "<2.0.0",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.2.9",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.1.2",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/doc/can-simple-map.html",
            keywords: [],
            main: "can-simple-map",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-simple-map.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            },
            steal: {
                npmIgnore: {
                    documentjs: true,
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-simple-map"
            }
        },
        {
            name: "can-join-uris",
            version: "1.2.0",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-join-uris/package.json",
            origFileUrl: "./node_modules/can-join-uris/package.json",
            fileUrl: "./node_modules/can-join-uris/package.json",
            _from: "can-join-uris@^1.0.0",
            _id: "can-join-uris@1.2.0",
            _inBundle: false,
            _integrity:
                "sha512-zW1U5yL3lQ3VzQtIPx5ZMb4P3mU7jAzWTn1slN2gGiR50KvWV16KZELTy88m3vFn9y1pj1PaQjOKioU5SV+log==",
            _location: "/can-join-uris",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-join-uris@^1.0.0",
                name: "can-join-uris",
                escapedName: "can-join-uris",
                rawSpec: "^1.0.0",
                saveSpec: null,
                fetchSpec: "^1.0.0"
            },
            _requiredBy: ["/can-stache"],
            _resolved:
                "https://registry.npmjs.org/can-join-uris/-/can-join-uris-1.2.0.tgz",
            _shasum: "a858262996fd13c744ec806a5a456225f357f052",
            _spec: "can-join-uris@^1.0.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can-stache",
            author: {
                name: "DoneJS Core Team",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-join-uris/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-namespace": "^1.0.0",
                "can-parse-uri": "^1.1.0"
            },
            deprecated: false,
            description: "Join uris together",
            devDependencies: {
                jshint: "^2.9.1",
                steal: "^1.6.5",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.11.3",
                testee: "^0.7.0"
            },
            homepage: "https://canjs.com",
            keywords: ["canjs", "donejs", "donejs-plugin"],
            license: "MIT",
            main: "can-join-uris",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-join-uris.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {}
        },
        {
            name: "can-stache-helpers",
            version: "1.2.0",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-stache-helpers/package.json",
            origFileUrl: "./node_modules/can-stache-helpers/package.json",
            fileUrl: "./node_modules/can-stache-helpers/package.json",
            _from: "can-stache-helpers@^1.0.0",
            _id: "can-stache-helpers@1.2.0",
            _inBundle: false,
            _integrity:
                "sha512-pQwmrei25IXih92JOVGXH0uMsP75/77I0+Mnc44n0lOQSow2GW8ySUH2ov27YovWemEww2hPf/LRQHmchchk5w==",
            _location: "/can-stache-helpers",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-stache-helpers@^1.0.0",
                name: "can-stache-helpers",
                escapedName: "can-stache-helpers",
                rawSpec: "^1.0.0",
                saveSpec: null,
                fetchSpec: "^1.0.0"
            },
            _requiredBy: [
                "/can-stache",
                "/can-stache-converters",
                "/can-view-scope"
            ],
            _resolved:
                "https://registry.npmjs.org/can-stache-helpers/-/can-stache-helpers-1.2.0.tgz",
            _shasum: "936e293fbac17f87b8b4e98d9aa2feca0b47c553",
            _spec: "can-stache-helpers@^1.0.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can-stache",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-stache-helpers/issues" },
            bundleDependencies: false,
            dependencies: { "can-namespace": "1.0.0" },
            deprecated: false,
            description: "Helper functions for can-stache",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.3.1",
                "steal-qunit": "^1.0.1",
                testee: "^0.3.0"
            },
            homepage: "https://canjs.com/doc/can-stache-helpers.html",
            keywords: ["canjs", "canjs-plugin", "donejs", "donejs-plugin"],
            license: "MIT",
            main: "can-stache-helpers",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-stache-helpers.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js ./src/ --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                }
            }
        },
        {
            name: "can-dom-data",
            version: "1.0.3",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-dom-data/package.json",
            origFileUrl: "./node_modules/can-dom-data/package.json",
            fileUrl: "./node_modules/can-dom-data/package.json",
            _from: "can-dom-data@1.0.3",
            _id: "can-dom-data@1.0.3",
            _inBundle: false,
            _integrity:
                "sha512-9rbmuDqWGtM8nDTVDuAhfQFy5Gmp94cjjiMITY1b8INH+W2mq5TDj/fdrmxesAajhn1PvSwmSLHdvanXMSh8Ug==",
            _location: "/can-dom-data",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-dom-data@1.0.3",
                name: "can-dom-data",
                escapedName: "can-dom-data",
                rawSpec: "1.0.3",
                saveSpec: null,
                fetchSpec: "1.0.3"
            },
            _requiredBy: [
                "/can",
                "/can-attribute-observable",
                "/can-component",
                "/can-dom-data-state",
                "/can-stache",
                "/can-stache-bindings",
                "/can-view-import"
            ],
            _resolved:
                "https://registry.npmjs.org/can-dom-data/-/can-dom-data-1.0.3.tgz",
            _shasum: "78a7bed51c354be8ee5e5d6189a522e73b318fc1",
            _spec: "can-dom-data@1.0.3",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "https://www.bitovi.com/"
            },
            bugs: { url: "https://github.com/canjs/can-dom-data/issues" },
            bundleDependencies: false,
            dependencies: { "can-namespace": "1.0.0" },
            deprecated: false,
            description:
                "A key/value store (based on WeakMap) for associating data with DOM nodes.",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.5.13",
                "steal-qunit": "^2.0.0",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/doc/can-dom-data.html",
            keywords: ["canjs", "data", "dom"],
            license: "MIT",
            main: "can-dom-data.js",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-dom-data.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre": "npm version prerelease && npm publish",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            },
            steal: {
                npmIgnore: { "steal-tools": true, testee: true },
                main: "can-dom-data"
            }
        },
        {
            name: "can-fragment",
            version: "1.3.1",
            nestedFileUrl:
                "./node_modules/can-view-callbacks/node_modules/can-fragment/package.json",
            origFileUrl: "./node_modules/can-fragment/package.json",
            fileUrl: "./node_modules/can-fragment/package.json",
            _from: "can-fragment@1.3.1",
            _id: "can-fragment@1.3.1",
            _inBundle: false,
            _integrity:
                "sha512-wu8xuXh6pBZkxWZYwEb+QTwH8aQq/jgpdqegWGmBUr278z3RetbI6QtkpgF7KbD75/yHmtw/6WvhGj6CgA/doQ==",
            _location: "/can-fragment",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-fragment@1.3.1",
                name: "can-fragment",
                escapedName: "can-fragment",
                rawSpec: "1.3.1",
                saveSpec: null,
                fetchSpec: "1.3.1"
            },
            _requiredBy: [
                "/can",
                "/can-component",
                "/can-stache",
                "/can-view-callbacks",
                "/can-view-live"
            ],
            _resolved:
                "https://registry.npmjs.org/can-fragment/-/can-fragment-1.3.1.tgz",
            _shasum: "33c3d9f332b9654c26a3a6909954f239dc30fb50",
            _spec: "can-fragment@1.3.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "donejs core team",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-fragment/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-child-nodes": "^1.0.0",
                "can-globals": "^1.0.1",
                "can-namespace": "^1.0.0",
                "can-reflect": "^1.16.1",
                "can-symbol": "^1.6.1"
            },
            deprecated: false,
            description: "Create a fragment from lots of stuff",
            devDependencies: {
                "can-vdom": "^4.0.1",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "http://canjs",
            keywords: ["canjs", "donejs", "donejs-plugin"],
            license: "MIT",
            main: "can-fragment",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-fragment.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                }
            }
        },
        {
            name: "validate.js",
            version: "0.11.1",
            nestedFileUrl:
                "./node_modules/can-validate-validatejs/node_modules/validate.js/package.json",
            origFileUrl: "./node_modules/validate.js/package.json",
            fileUrl: "./node_modules/validate.js/package.json",
            _from: "validate.js@^0.11.1",
            _id: "validate.js@0.11.1",
            _inBundle: false,
            _integrity: "sha1-9Rw8bEpW5jgKIKfrEEJFA38qVA0=",
            _location: "/validate.js",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "validate.js@^0.11.1",
                name: "validate.js",
                escapedName: "validate.js",
                rawSpec: "^0.11.1",
                saveSpec: null,
                fetchSpec: "^0.11.1"
            },
            _requiredBy: [
                "/can-define-validate-validatejs/can-validate-validatejs",
                "/can-validate-legacy",
                "/can-validate-validatejs"
            ],
            _resolved:
                "https://registry.npmjs.org/validate.js/-/validate.js-0.11.1.tgz",
            _shasum: "f51c3c6c4a56e6380a20a7eb104245037f2a540d",
            _spec: "validate.js@^0.11.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can-define-validate-validatejs\\node_modules\\can-validate-validatejs",
            author: { name: "Nicklas Ansman", email: "nicklas@ansman.se" },
            bugs: { url: "https://github.com/ansman/validate.js/issues" },
            bundleDependencies: false,
            deprecated: false,
            description: "Declarative validations for JavaScript",
            devDependencies: {
                coveralls: "2.11.9",
                grunt: "1.0.1",
                "grunt-contrib-jasmine": "1.0.3",
                "grunt-contrib-jshint": "1.0.0",
                "grunt-contrib-uglify": "1.0.1",
                "grunt-contrib-watch": "1.0.0",
                "grunt-docco": "0.4.0",
                "grunt-notify": "0.4.5",
                "grunt-template-jasmine-istanbul": "0.4.0"
            },
            homepage: "http://validatejs.org",
            keywords: ["validation", "validate", "server", "client"],
            license: "MIT",
            main: "validate.js",
            repository: {
                type: "git",
                url: "git+https://github.com/ansman/validate.js.git"
            },
            scripts: {
                build: "grunt build",
                docs: "grunt docco",
                test: "grunt test",
                watch: "grunt watch"
            },
            typings: "validate.d.ts"
        },
        {
            name: "can-value",
            version: "1.1.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-value/package.json",
            origFileUrl: "./node_modules/can-value/package.json",
            fileUrl: "./node_modules/can-value/package.json",
            _from: "can-value@1.1.1",
            _id: "can-value@1.1.1",
            _inBundle: false,
            _integrity:
                "sha512-aJBMYeu2L1THuc5sH8A7HrpYCbpemeksp7EE7RhfaczXrDFlnk7drJ4B9ekP0wjPGE3X2gs4aLU8Th3BL1DE/w==",
            _location: "/can-value",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-value@1.1.1",
                name: "can-value",
                escapedName: "can-value",
                rawSpec: "1.1.1",
                saveSpec: null,
                fetchSpec: "1.1.1"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-value/-/can-value-1.1.1.tgz",
            _shasum: "2f9e2b72e0a9faca3bf926e59fb7d19de7b95119",
            _spec: "can-value@1.1.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "core@donejs.com",
                url: "https://canjs.com/"
            },
            bugs: { url: "https://github.com/canjs/can-value/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-key": "<2.0.0",
                "can-namespace": "1.0.0",
                "can-observation": "^4.0.0",
                "can-reflect": "^1.4.0",
                "can-simple-observable": "^2.1.0"
            },
            deprecated: false,
            description: "Observable values from other CanJS observables.",
            devDependencies: {
                "can-reflect-dependencies": "^1.0.0",
                "can-simple-map": "^4.0.1",
                jshint: "^2.9.1",
                steal: "^1.6.5",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.11.3",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/doc/can-value.html",
            license: "MIT",
            main: "can-value",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-value.git"
            },
            scripts: {
                build: "node build.js",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: { "steal-tools": true, testee: true },
                main: "can-value"
            }
        },
        {
            name: "can-bind",
            version: "1.4.3",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-bind/package.json",
            origFileUrl: "./node_modules/can-bind/package.json",
            fileUrl: "./node_modules/can-bind/package.json",
            _from: "can-bind@1.4.3",
            _id: "can-bind@1.4.3",
            _inBundle: false,
            _integrity:
                "sha512-m1+grLA+2Ea/+2LQ4rovkUIAEU7OHo3Nlwtj6deSBzRwHfYlO4La6H0l99NczfnbMiIvkes1KjmYuk7jByBbww==",
            _location: "/can-bind",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-bind@1.4.3",
                name: "can-bind",
                escapedName: "can-bind",
                rawSpec: "1.4.3",
                saveSpec: null,
                fetchSpec: "1.4.3"
            },
            _requiredBy: [
                "/can",
                "/can-component",
                "/can-route",
                "/can-stache-bindings",
                "/can-stache-element"
            ],
            _resolved:
                "https://registry.npmjs.org/can-bind/-/can-bind-1.4.3.tgz",
            _shasum: "50e5b78fbc6c058a9be365b59b974f75b7b5128b",
            _spec: "can-bind@1.4.3",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "core@donejs.com",
                url: "https://canjs.com/"
            },
            bugs: { url: "https://github.com/canjs/can-bind/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.3.1",
                "can-namespace": "1.0.0",
                "can-queues": "^1.2.0",
                "can-reflect": "^1.15.0",
                "can-reflect-dependencies": "^1.1.1",
                "can-symbol": "^1.6.0"
            },
            deprecated: false,
            description:
                "Updates one observable value with the value of another observable.",
            devDependencies: {
                "can-observation": "^4.0.1",
                "can-simple-map": "^4.0.1",
                "can-simple-observable": "^2.0.4",
                "can-test-helpers": "^1.1.2",
                "can-value": "<2.0.0",
                jshint: "^2.9.1",
                steal: "^2.0.0",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.0.0",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/doc/can-bind.html",
            license: "MIT",
            main: "can-bind",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-bind.git"
            },
            scripts: {
                build: "node build.js",
                jshint: "jshint ./*.js ./test/*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            },
            steal: {
                npmIgnore: { "steal-tools": true, testee: true },
                main: "can-bind"
            }
        },
        {
            name: "can-event-queue",
            version: "1.1.6",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-event-queue/package.json",
            origFileUrl: "./node_modules/can-event-queue/package.json",
            fileUrl: "./node_modules/can-event-queue/package.json",
            _from: "can-event-queue@1.1.6",
            _id: "can-event-queue@1.1.6",
            _inBundle: false,
            _integrity:
                "sha512-dJWCCP6gnyLj0c/kBOpyo2UitVwRGmzHbwlNGBh561n0cbQF/Z9+dI7A/Vyrh25IEDy3qyHAGw6rAQ7fLVOt3Q==",
            _location: "/can-event-queue",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-event-queue@1.1.6",
                name: "can-event-queue",
                escapedName: "can-event-queue",
                rawSpec: "1.1.6",
                saveSpec: null,
                fetchSpec: "1.1.6"
            },
            _requiredBy: [
                "/can",
                "/can-compute",
                "/can-connect",
                "/can-control",
                "/can-define",
                "/can-kefir",
                "/can-list",
                "/can-map",
                "/can-map-define",
                "/can-observable-array",
                "/can-observable-mixin",
                "/can-observation",
                "/can-observe",
                "/can-route",
                "/can-simple-map",
                "/can-simple-observable",
                "/can-stache-bindings",
                "/can-view-scope"
            ],
            _resolved:
                "https://registry.npmjs.org/can-event-queue/-/can-event-queue-1.1.6.tgz",
            _shasum: "20a10569b8ab8e072fa2e9e2025f81092848cd24",
            _spec: "can-event-queue@1.1.6",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "DoneJS",
                email: "core@donejs.com",
                url: "http://canjs.com"
            },
            bugs: { url: "https://github.com/canjs/can-event-queue/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-define-lazy-value": "^1.0.1",
                "can-dom-events": "^1.0.0",
                "can-key-tree": "^1.1.0",
                "can-log": "^1.0.0",
                "can-queues": "^1.0.0",
                "can-reflect": "^1.10.2",
                "can-symbol": "^1.2.0"
            },
            deprecated: false,
            description: "A event mixin that uses queues to dispatch handlers",
            devDependencies: {
                "done-serve": "^3.3.1",
                "donejs-cli": "^3.1.1",
                "generator-donejs": "^3.3.0",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "https://github.com/canjs/can-event-queue#readme",
            keywords: ["canjs"],
            license: "MIT",
            main: "./can-event-queue.js",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-event-queue.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint:
                    "jshint ./*.js map/**/*.js type/*.js value/*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                plugins: ["steal-less", "steal-stache"]
            }
        },
        {
            name: "can-component",
            version: "4.6.2",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-component/package.json",
            origFileUrl: "./node_modules/can-component/package.json",
            fileUrl: "./node_modules/can-component/package.json",
            _from: "can-component@4.6.2",
            _id: "can-component@4.6.2",
            _inBundle: false,
            _integrity:
                "sha512-bVCFSqbXnHXqTvoLTdu7HSvShvf3HilZK2DI/LDdOCJn0vhr3W3M7d8KA9o45fditH199EebY5eFPCx+8yfBeg==",
            _location: "/can-component",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-component@4.6.2",
                name: "can-component",
                escapedName: "can-component",
                rawSpec: "4.6.2",
                saveSpec: null,
                fetchSpec: "4.6.2"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-component/-/can-component-4.6.2.tgz",
            _shasum: "e7afb795cef9a3b977549ef698ee4a215779d883",
            _spec: "can-component@4.6.2",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-component/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.1.1",
                "can-bind": "^1.4.0",
                "can-child-nodes": "^1.0.0",
                "can-construct": "^3.2.0",
                "can-control": "^4.0.0",
                "can-define": "^2.0.0",
                "can-dom-data": "^1.0.1",
                "can-dom-events": "^1.1.0",
                "can-dom-mutate": "^1.0.0",
                "can-fragment": "^1.0.0",
                "can-globals": "^1.0.0",
                "can-log": "^1.0.0",
                "can-namespace": "1.0.0",
                "can-observation": "^4.0.0",
                "can-observation-recorder": "^1.2.0",
                "can-queues": "^1.0.0",
                "can-reflect": "^1.6.0",
                "can-simple-map": "^4.1.0",
                "can-simple-observable": "^2.0.0",
                "can-stache": "^4.10.0",
                "can-stache-bindings": "^4.9.0",
                "can-stache-key": "^1.0.0",
                "can-string": "<2.0.0",
                "can-symbol": "^1.4.1",
                "can-view-callbacks": "^4.2.0",
                "can-view-model": "^4.0.0",
                "can-view-nodelist": "^4.1.0",
                "can-view-scope": "^4.7.0"
            },
            deprecated: false,
            description: "Custom elements for CanJS",
            devDependencies: {
                "can-observe": "^2.0.0",
                "can-test-helpers": "^1.1.2",
                "can-value": "<2.0.0",
                "can-vdom": "^4.0.0",
                "detect-cyclic-packages": "^1.1.0",
                docco: "^0.8.0",
                "done-serve": "^2.0.0",
                "gh-pages": "^2.0.1",
                "highlight.js": "9.12.0",
                jshint: "^2.9.1",
                steal: "^1.0.0",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.0.1",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/doc/can-component.html",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-component",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-component.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                docco: "docco -o docco can-component.js",
                "docco:publish": "npm run docco && gh-pages -d docco",
                jshint: "jshint ./*.js test/*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            },
            system: {},
            steal: {}
        },
        {
            name: "can-simple-observable",
            version: "2.4.2",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-simple-observable/package.json",
            origFileUrl: "./node_modules/can-simple-observable/package.json",
            fileUrl: "./node_modules/can-simple-observable/package.json",
            _from: "can-simple-observable@2.4.2",
            _id: "can-simple-observable@2.4.2",
            _inBundle: false,
            _integrity:
                "sha512-g7cXZ11PjkmmLDZPAAU1SB3eluGqbP7MHjLzfdGJHF4cJhBa+Sn0nXpwKflkuMs/n1tD2VBcXqHUD6iD23JxJg==",
            _location: "/can-simple-observable",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-simple-observable@2.4.2",
                name: "can-simple-observable",
                escapedName: "can-simple-observable",
                rawSpec: "2.4.2",
                saveSpec: null,
                fetchSpec: "2.4.2"
            },
            _requiredBy: [
                "/can",
                "/can-attribute-observable",
                "/can-component",
                "/can-compute",
                "/can-define",
                "/can-define-backup",
                "/can-list",
                "/can-map",
                "/can-observable-mixin",
                "/can-observe",
                "/can-route",
                "/can-route-hash",
                "/can-route-mock",
                "/can-route-pushstate",
                "/can-stache",
                "/can-stache-bindings",
                "/can-stache-element",
                "/can-value",
                "/can-view-live",
                "/can-view-scope"
            ],
            _resolved:
                "https://registry.npmjs.org/can-simple-observable/-/can-simple-observable-2.4.2.tgz",
            _shasum: "d0e171daa5e9f8ea8384daf0ac132902ba86d545",
            _spec: "can-simple-observable@2.4.2",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "https://www.bitovi.com/"
            },
            bugs: {
                url: "https://github.com/canjs/can-simple-observable/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-event-queue": "^1.0.0",
                "can-key": "<2.0.0",
                "can-key-tree": "^1.0.0",
                "can-log": "^1.0.0",
                "can-namespace": "1.0.0",
                "can-observation": "^4.1.0",
                "can-observation-recorder": "^1.0.0",
                "can-queues": "^1.0.0",
                "can-reflect": "^1.10.1",
                "can-reflect-dependencies": "^1.0.0",
                "can-symbol": "^1.4.2"
            },
            deprecated: false,
            description: "Create an observable value.",
            devDependencies: {
                "can-simple-map": "^4.0.1",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/doc/can-simple-observable.html",
            keywords: ["canjs", "donejs-plugin"],
            license: "MIT",
            main: "can-simple-observable",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-simple-observable.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: { npmIgnore: { testee: true, "steal-tools": true } }
        },
        {
            name: "can-stache-bindings",
            version: "4.10.9",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-stache-bindings/package.json",
            origFileUrl: "./node_modules/can-stache-bindings/package.json",
            fileUrl: "./node_modules/can-stache-bindings/package.json",
            _from: "can-stache-bindings@4.10.9",
            _id: "can-stache-bindings@4.10.9",
            _inBundle: false,
            _integrity:
                "sha512-y0qdKXgaZwQS7DAtgtE4CLBx5ArXuF8brSwSAkptzOxVAA8/Ii6uoW/ng/Lb4RRdiHFqzvZJZ6ALx922Li2plw==",
            _location: "/can-stache-bindings",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-stache-bindings@4.10.9",
                name: "can-stache-bindings",
                escapedName: "can-stache-bindings",
                rawSpec: "4.10.9",
                saveSpec: null,
                fetchSpec: "4.10.9"
            },
            _requiredBy: [
                "/can",
                "/can-component",
                "/can-connect-tag",
                "/can-stache-converters",
                "/can-stache-element",
                "/steal-stache"
            ],
            _resolved:
                "https://registry.npmjs.org/can-stache-bindings/-/can-stache-bindings-4.10.9.tgz",
            _shasum: "f782dc5eb1614b5060edc177a295207c7712debd",
            _spec: "can-stache-bindings@4.10.9",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.0.0",
                "can-attribute-encoder": "^1.1.1",
                "can-attribute-observable": "^1.2.5",
                "can-bind": "^1.4.2",
                "can-dom-data": "^1.0.1",
                "can-dom-events": "^1.3.3",
                "can-dom-mutate": "^1.3.0",
                "can-event-queue": "^1.1.4",
                "can-log": "^1.0.0",
                "can-observation-recorder": "^1.0.0",
                "can-queues": "^1.0.0",
                "can-reflect": "^1.6.0",
                "can-reflect-dependencies": "^1.0.0",
                "can-simple-map": "^4.0.0",
                "can-simple-observable": "^2.0.0",
                "can-stache": "^4.17.15",
                "can-stache-key": "^1.0.0",
                "can-symbol": "^1.0.0",
                "can-view-callbacks": "^4.2.0",
                "can-view-live": "^4.0.5",
                "can-view-model": "^4.0.0",
                "can-view-scope": "^4.13.0"
            },
            deprecated: false,
            description: "Default binding syntaxes for can-stache",
            devDependencies: {
                "can-define": "^2.0.0",
                "can-event-dom-enter": "^2.0.0",
                "can-globals": "^1.0.0",
                "can-test-helpers": "^1.1.4",
                "can-vdom": "^4.0.0",
                "can-view-nodelist": "^4.0.0",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/doc/can-stache-bindings.html",
            keywords: ["canjs", "donejs"],
            main: "can-stache-bindings",
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                jshint: "jshint test/ ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            },
            steal: { main: "can-stache-bindings" }
        },
        {
            name: "can-stache-route-helpers",
            version: "1.2.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-stache-route-helpers/package.json",
            origFileUrl: "./node_modules/can-stache-route-helpers/package.json",
            fileUrl: "./node_modules/can-stache-route-helpers/package.json",
            _from: "can-stache-route-helpers@1.2.1",
            _id: "can-stache-route-helpers@1.2.1",
            _inBundle: false,
            _integrity:
                "sha512-m8SmoPgpw+Rt3AFgk+EWRtEd63FU61/NpeQoyiNsgisKn9lV3NAND7PUl0eSJsDa+TOS5HZfHc6fSf5D/mpk3A==",
            _location: "/can-stache-route-helpers",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-stache-route-helpers@1.2.1",
                name: "can-stache-route-helpers",
                escapedName: "can-stache-route-helpers",
                rawSpec: "1.2.1",
                saveSpec: null,
                fetchSpec: "1.2.1"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-stache-route-helpers/-/can-stache-route-helpers-1.2.1.tgz",
            _shasum: "3873304730fc6e257069f56b169c44aa5f280a1a",
            _spec: "can-stache-route-helpers@1.2.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "DoneJS Core",
                email: "core@donejs.com",
                url: "donejs.com"
            },
            bugs: {
                url: "https://github.com/canjs/can-stache-route-helpers/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-reflect": "^1.16.3",
                "can-route": "^4.0.0",
                "can-stache": "^4.0.0"
            },
            deprecated: false,
            description: "stache helpers for can-route",
            devDependencies: {
                "can-map": "^4.1.1",
                "can-route-mock": "^1.0.0",
                jshint: "^2.9.1",
                steal: "^2.0.0",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.0.2",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/doc/can-stache-route-helpers.html",
            keywords: ["canjs", "donejs", "donejs-plugin"],
            license: "MIT",
            main: "can-stache-route-helpers",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-stache-route-helpers.git"
            },
            scripts: {
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                }
            }
        },
        {
            name: "can-fixture",
            version: "3.1.7",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-fixture/package.json",
            origFileUrl: "./node_modules/can-fixture/package.json",
            fileUrl: "./node_modules/can-fixture/package.json",
            _from: "can-fixture@^3.1.6",
            _id: "can-fixture@3.1.7",
            _inBundle: false,
            _integrity:
                "sha512-n6XJPETT+51mF7WHxXX8nB6D2dGBJ/HpoYBCWuIhUiDRgjLfDYwaQ16+5LGIQ99AG4/if7PQyQCXxAlq7RF5Qw==",
            _location: "/can-fixture",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-fixture@^3.1.6",
                name: "can-fixture",
                escapedName: "can-fixture",
                rawSpec: "^3.1.6",
                saveSpec: null,
                fetchSpec: "^3.1.6"
            },
            _requiredBy: ["/", "/can", "/can-fixture-socket"],
            _resolved:
                "https://registry.npmjs.org/can-fixture/-/can-fixture-3.1.7.tgz",
            _shasum: "17d85cff537571f82a18c44561b54549f8ec16c4",
            _spec: "can-fixture@^3.1.6",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs",
            author: { name: "Bitovi" },
            bugs: { url: "https://github.com/canjs/can-fixture/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-deparam": "^1.0.1",
                "can-key": "<2.0.0",
                "can-log": "^1.0.0",
                "can-memory-store": "<2.0.0",
                "can-namespace": "1.0.0",
                "can-query-logic": "<2.0.0",
                "can-reflect": "^1.15.1"
            },
            deprecated: false,
            description: "Intercept AJAX requests and simulate responses.",
            devDependencies: {
                "can-define": "^2.7.18",
                "can-set-legacy": "<2.0.0",
                "can-test-helpers": "^1.1.2",
                "detect-cyclic-packages": "^1.1.0",
                jquery: "^3.1.1",
                jshint: "^2.7.0",
                steal: "^1.0.0",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.0.0",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/doc/can-fixture.html",
            keywords: ["CanJS"],
            license: "MIT",
            main: "fixture.js",
            repository: {
                type: "git",
                url: "git+https://github.com/canjs/can-fixture.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                jshint: "jshint fixture.js core.js store.js xhr.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee --browsers firefox test/test.html"
            }
        },
        {
            name: "can-view-model",
            version: "4.0.3",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-view-model/package.json",
            origFileUrl: "./node_modules/can-view-model/package.json",
            fileUrl: "./node_modules/can-view-model/package.json",
            _from: "can-view-model@4.0.3",
            _id: "can-view-model@4.0.3",
            _inBundle: false,
            _integrity:
                "sha512-g34cRFf3vu7tV27NKquLzPNwfqI7YUWED4OSPlYGhRchh0H8RjFkHvbjnfF+SlmkoENfZxcszwkXIQ+Q68vTWg==",
            _location: "/can-view-model",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-view-model@4.0.3",
                name: "can-view-model",
                escapedName: "can-view-model",
                rawSpec: "4.0.3",
                saveSpec: null,
                fetchSpec: "4.0.3"
            },
            _requiredBy: [
                "/can",
                "/can-component",
                "/can-stache-bindings",
                "/can-view-autorender"
            ],
            _resolved:
                "https://registry.npmjs.org/can-view-model/-/can-view-model-4.0.3.tgz",
            _shasum: "dc8330154a88b2a957bbdb7a9404b61c701b6a6d",
            _spec: "can-view-model@4.0.3",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bundleDependencies: false,
            dependencies: {
                "can-globals": "^1.0.0",
                "can-namespace": "1.0.0",
                "can-reflect": "^1.2.1",
                "can-simple-map": "^4.0.0",
                "can-symbol": "^1.5.0"
            },
            deprecated: false,
            description: "Gets or sets the view model of an element.",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.0.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.0.0",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/doc/can-view-model.html",
            keywords: ["canjs", "donejs"],
            main: "can-view-model",
            scripts: {
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            }
        },
        {
            name: "can-realtime-rest-model",
            version: "1.1.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-realtime-rest-model/package.json",
            origFileUrl: "./node_modules/can-realtime-rest-model/package.json",
            fileUrl: "./node_modules/can-realtime-rest-model/package.json",
            _from: "can-realtime-rest-model@1.1.1",
            _id: "can-realtime-rest-model@1.1.1",
            _inBundle: false,
            _integrity:
                "sha512-+7NTfSt0W9FUFSCIhyetBXOchwhE/ktioIpByo8O8GIL1+RiqC8RPP6SdSwPK4Ex0sijJ4TZeR1v6cfdoRGkVg==",
            _location: "/can-realtime-rest-model",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-realtime-rest-model@1.1.1",
                name: "can-realtime-rest-model",
                escapedName: "can-realtime-rest-model",
                rawSpec: "1.1.1",
                saveSpec: null,
                fetchSpec: "1.1.1"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-realtime-rest-model/-/can-realtime-rest-model-1.1.1.tgz",
            _shasum: "805f437db170cafa1750056040a586697b8976ca",
            _spec: "can-realtime-rest-model@1.1.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "DoneJS Core team",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: {
                url: "https://github.com/canjs/can-realtime-rest-model/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-connect": "^3.0.0",
                "can-define": "^2.2.0",
                "can-globals": "^1.0.1",
                "can-namespace": "^1.0.0",
                "can-query-logic": "<2.0.0",
                "can-reflect": "^1.15.2"
            },
            deprecated: false,
            description: "Turn a map into a realtime rest model",
            devDependencies: {
                "can-fixture": "^3.0.0",
                jshint: "^2.9.1",
                steal: "^2.1.14",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.0.11",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "donejs", "donejs-plugin", "model"],
            license: "MIT",
            main: "can-realtime-rest-model",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-realtime-rest-model.git"
            },
            scripts: {
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                }
            }
        },
        {
            name: "can-query-logic",
            version: "1.2.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-query-logic/package.json",
            origFileUrl: "./node_modules/can-query-logic/package.json",
            fileUrl: "./node_modules/can-query-logic/package.json",
            _from: "can-query-logic@1.2.1",
            _id: "can-query-logic@1.2.1",
            _inBundle: false,
            _integrity:
                "sha512-Fx5x07Z4DqVHlKYvlnzhsMXlcrO0Brvt3/ikap9pWGn1SNN6S9plgYgo7qt+2aCuo5rbzSWSuJkUam/+OgcFvw==",
            _location: "/can-query-logic",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-query-logic@1.2.1",
                name: "can-query-logic",
                escapedName: "can-query-logic",
                rawSpec: "1.2.1",
                saveSpec: null,
                fetchSpec: "1.2.1"
            },
            _requiredBy: [
                "/can",
                "/can-connect",
                "/can-fixture",
                "/can-local-store",
                "/can-memory-store",
                "/can-realtime-rest-model",
                "/can-rest-model",
                "/can-set-legacy",
                "/can-super-model"
            ],
            _resolved:
                "https://registry.npmjs.org/can-query-logic/-/can-query-logic-1.2.1.tgz",
            _shasum: "2cf6add5acafef1841ab72b3db0300662e859570",
            _spec: "can-query-logic@1.2.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "core@donejs.com",
                url: "donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-query-logic/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.1.1",
                "can-define-lazy-value": "^1.0.2",
                "can-key": "<2.0.0",
                "can-log": "^1.0.0",
                "can-reflect": "^1.14.1",
                "can-symbol": "^1.6.1"
            },
            deprecated: false,
            description: "query data",
            devDependencies: {
                "can-define": "^2.0.3",
                "can-test-helpers": "^1.1.2",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "https://github.com/canjs/can-query-logic#readme",
            keywords: ["donejs-plugin"],
            license: "MIT",
            main: "can-query-logic",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-query-logic.git"
            },
            scripts: {
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js src/**.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                plugins: ["steal-less", "steal-stache"]
            }
        },
        {
            name: "can-rest-model",
            version: "1.1.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-rest-model/package.json",
            origFileUrl: "./node_modules/can-rest-model/package.json",
            fileUrl: "./node_modules/can-rest-model/package.json",
            _from: "can-rest-model@1.1.1",
            _id: "can-rest-model@1.1.1",
            _inBundle: false,
            _integrity:
                "sha512-c8Q3Tq4yIOcDQYyQ4xMwEQtXEaD9+o4uJKff7iqFPUrZY6g17u+8oYwUg6aybkUzc0UV8CcZYDAvmaZVZ9jzTQ==",
            _location: "/can-rest-model",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-rest-model@1.1.1",
                name: "can-rest-model",
                escapedName: "can-rest-model",
                rawSpec: "1.1.1",
                saveSpec: null,
                fetchSpec: "1.1.1"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-rest-model/-/can-rest-model-1.1.1.tgz",
            _shasum: "a1ceb926b2ddefb67f8beca98ffaa8abbf134414",
            _spec: "can-rest-model@1.1.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "DoneJS Core Team",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-rest-model/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-connect": "^3.0.0",
                "can-define": "^2.2.0",
                "can-globals": "^1.0.1",
                "can-namespace": "^1.0.0",
                "can-query-logic": "<2.0.0",
                "can-reflect": "^1.15.2"
            },
            deprecated: false,
            description: "Connect a map to a rest connection",
            devDependencies: {
                "can-fixture": "^3.0.0",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "donejs", "donejs-plugin"],
            license: "MIT",
            main: "can-rest-model",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-rest-model.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                }
            }
        },
        {
            name: "can-local-store",
            version: "1.0.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-local-store/package.json",
            origFileUrl: "./node_modules/can-local-store/package.json",
            fileUrl: "./node_modules/can-local-store/package.json",
            _from: "can-local-store@1.0.1",
            _id: "can-local-store@1.0.1",
            _inBundle: false,
            _integrity:
                "sha512-hU51zQnLvoG2gETfrup0ea8eLLMV9gf7niBn/keumIC/nd+GFWlFQ02j4wryjNWGRWB+IzcH4zvzXcGsFBJ+xg==",
            _location: "/can-local-store",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-local-store@1.0.1",
                name: "can-local-store",
                escapedName: "can-local-store",
                rawSpec: "1.0.1",
                saveSpec: null,
                fetchSpec: "1.0.1"
            },
            _requiredBy: ["/can", "/can-connect"],
            _resolved:
                "https://registry.npmjs.org/can-local-store/-/can-local-store-1.0.1.tgz",
            _shasum: "ea9c9a1fdf601286baf926d92b46b9781418b499",
            _spec: "can-local-store@1.0.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Core DoneJS Team",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-local-store/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-diff": "<2.0.0",
                "can-memory-store": "<2.0.0",
                "can-namespace": "^1.0.0",
                "can-query-logic": "<2.0.0",
                "can-reflect": "^1.13.4",
                "can-sort-object": "^1.0.1"
            },
            deprecated: false,
            description: "A localStorage database for the client",
            devDependencies: {
                "can-set-legacy": "<2.0.0",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "donejs", "donejs-plugin"],
            license: "MIT",
            main: "can-local-store",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-local-store.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-local-store"
            }
        },
        {
            name: "can-memory-store",
            version: "1.0.2",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-memory-store/package.json",
            origFileUrl: "./node_modules/can-memory-store/package.json",
            fileUrl: "./node_modules/can-memory-store/package.json",
            _from: "can-memory-store@1.0.2",
            _id: "can-memory-store@1.0.2",
            _inBundle: false,
            _integrity:
                "sha512-ZeTeR7vjFOwrqwrvvl6u7BkbNL4k51l9WpWdtjJ+ODgDD3L+96lP69xuY98vzJffxXLonppGktADgW7vF3ApZg==",
            _location: "/can-memory-store",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-memory-store@1.0.2",
                name: "can-memory-store",
                escapedName: "can-memory-store",
                rawSpec: "1.0.2",
                saveSpec: null,
                fetchSpec: "1.0.2"
            },
            _requiredBy: [
                "/can",
                "/can-connect",
                "/can-fixture",
                "/can-local-store"
            ],
            _resolved:
                "https://registry.npmjs.org/can-memory-store/-/can-memory-store-1.0.2.tgz",
            _shasum: "5326c0dc6ab74778a139bd52c09010d45488bc75",
            _spec: "can-memory-store@1.0.2",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "DoneJS Core Team",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-memory-store/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-diff": "<2.0.0",
                "can-namespace": "^1.0.0",
                "can-query-logic": "<2.0.0",
                "can-reflect": "^1.13.4",
                "can-sort-object": "^1.0.1"
            },
            deprecated: false,
            description: "A memory store with mongo-db like queries",
            devDependencies: {
                "can-set-legacy": "<2.0.0",
                "detect-cyclic-packages": "^1.1.1",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["DoneJS", "donejs-plugin"],
            license: "MIT",
            main: "can-memory-store",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-memory-store.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "DEBUG=testee:* testee test.html --browsers firefox"
            }
        },
        {
            name: "can-route",
            version: "4.4.9",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-route/package.json",
            origFileUrl: "./node_modules/can-route/package.json",
            fileUrl: "./node_modules/can-route/package.json",
            _from: "can-route@4.4.9",
            _id: "can-route@4.4.9",
            _inBundle: false,
            _integrity:
                "sha512-t8efks1QNM5zkht720A/4BstlHgltqECIJ78rbbSy97W1mzNFMMZiIvrs+YdJJUmCsSawUw25St3A2h2E0rwXA==",
            _location: "/can-route",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-route@4.4.9",
                name: "can-route",
                escapedName: "can-route",
                rawSpec: "4.4.9",
                saveSpec: null,
                fetchSpec: "4.4.9"
            },
            _requiredBy: [
                "/can",
                "/can-route-pushstate",
                "/can-stache-route-helpers"
            ],
            _resolved:
                "https://registry.npmjs.org/can-route/-/can-route-4.4.9.tgz",
            _shasum: "7cccbe063638971c1b5f2404df0dba5d6fbb758b",
            _spec: "can-route@4.4.9",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-route/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-bind": "<2.0.0",
                "can-define": "^2.6.0",
                "can-deparam": "^1.0.1",
                "can-diff": "^1.0.4",
                "can-dom-events": "^1.1.0",
                "can-event-queue": "<2.0.0",
                "can-globals": "<2.0.0",
                "can-key-tree": "<2.0.0",
                "can-log": "<2.0.0",
                "can-namespace": "1.0.0",
                "can-observation": "^4.0.0",
                "can-observation-recorder": "<2.0.0",
                "can-param": "^1.0.1",
                "can-queues": "<2.0.0",
                "can-reflect": "^1.16.7",
                "can-route-hash": "<2.0.0",
                "can-simple-observable": "^2.0.0",
                "can-string": "<2.0.0",
                "can-symbol": "^1.0.0"
            },
            deprecated: false,
            description: "Observable front-end application routing for CanJS.",
            devDependencies: {
                "can-map": "^4.0.0",
                "can-observe": "^2.0.0",
                "can-route-mock": "<2.0.0",
                "can-simple-map": "^4.0.0",
                "can-stache-key": "^1.0.0",
                "can-test-helpers": "^1.1.2",
                "detect-cyclic-packages": "^1.1.0",
                "done-serve": "^3.0.0",
                "http-server": "^0.11.1",
                jshint: "^2.9.1",
                steal: "^2.0.0",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.1.2",
                "test-saucelabs": "0.0.6",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/doc/can-route.html",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            license: "MIT",
            main: "can-route",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-route.git"
            },
            scripts: {
                ci: "npm run test && node test/test-saucelabs.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                "http-server": "http-server -p 3000 --silent",
                jshint: "jshint ./*.js src/*.js test/*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            }
        },
        {
            name: "can-route-pushstate",
            version: "5.0.13",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-route-pushstate/package.json",
            origFileUrl: "./node_modules/can-route-pushstate/package.json",
            fileUrl: "./node_modules/can-route-pushstate/package.json",
            _from: "can-route-pushstate@5.0.13",
            _id: "can-route-pushstate@5.0.13",
            _inBundle: false,
            _integrity:
                "sha512-huY7sc9RBIPhyhLdmSocs31qRCNcv2baDmWpljT54QQ+aHht3cZjEz6toJK+LRX1kKQdo71gXRmGhwzp7F3BuA==",
            _location: "/can-route-pushstate",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-route-pushstate@5.0.13",
                name: "can-route-pushstate",
                escapedName: "can-route-pushstate",
                rawSpec: "5.0.13",
                saveSpec: null,
                fetchSpec: "5.0.13"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-route-pushstate/-/can-route-pushstate-5.0.13.tgz",
            _shasum: "3b82acf1d182a8483f481bdfe27ec3c3acf12f9c",
            _spec: "can-route-pushstate@5.0.13",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: {
                url: "https://github.com/canjs/can-route-pushstate/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-diff": "<2.0.0",
                "can-dom-events": "^1.1.0",
                "can-globals": "<2.0.0",
                "can-observation-recorder": "^1.0.2",
                "can-reflect": "^1.8.0",
                "can-route": "^4.3.12",
                "can-simple-observable": "^2.0.0",
                "can-symbol": "^1.6.3"
            },
            deprecated: false,
            description: "Pushstate for can-route",
            devDependencies: {
                "can-assign": "<2.0.0",
                "can-define": "^2.6.0",
                "can-map": "^4.0.0",
                "can-queues": "^1.2.1",
                "detect-cyclic-packages": "^1.1.0",
                docco: "^0.8.0",
                jshint: "^2.9.1",
                steal: "^2.1.4",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.0.6",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/doc/can-route-pushstate.html",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-route-pushstate",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-route-pushstate.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            }
        },
        {
            name: "can-route-hash",
            version: "1.0.2",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-route-hash/package.json",
            origFileUrl: "./node_modules/can-route-hash/package.json",
            fileUrl: "./node_modules/can-route-hash/package.json",
            _from: "can-route-hash@1.0.2",
            _id: "can-route-hash@1.0.2",
            _inBundle: false,
            _integrity:
                "sha512-iA+3t4HqoWAnwZhPv6D2sINHCpClzWdgV9Hip/SpqG60Mn48bedj8cbX/HLsarXIh0OyvAEljW4UeZqNY1A7CA==",
            _location: "/can-route-hash",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-route-hash@1.0.2",
                name: "can-route-hash",
                escapedName: "can-route-hash",
                rawSpec: "1.0.2",
                saveSpec: null,
                fetchSpec: "1.0.2"
            },
            _requiredBy: ["/can", "/can-route"],
            _resolved:
                "https://registry.npmjs.org/can-route-hash/-/can-route-hash-1.0.2.tgz",
            _shasum: "03818e66536e63f1a8c5bc5fafc9976a888cb636",
            _spec: "can-route-hash@1.0.2",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: "",
            bundleDependencies: false,
            dependencies: {
                "can-dom-events": "^1.2.0",
                "can-globals": "^1.1.1",
                "can-key-tree": "^1.1.0",
                "can-observation-recorder": "^1.1.2",
                "can-queues": "^1.1.2",
                "can-reflect": "^1.16.7",
                "can-simple-observable": "^2.1.1"
            },
            deprecated: false,
            description:
                "[![Join our Slack](https://img.shields.io/badge/slack-join%20chat-611f69.svg)](https://www.bitovi.com/community/slack?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![Join our Discourse](https://img.shields.io/discourse/https/forums.bitovi.com/posts.svg)](https://forums.bitovi.com/?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![License: MIT](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/canjs/can-route-hash/blob/master/LICENSE) [![npm version](https://badge.fury.io/js/can-route-hash.svg)](https://www.npmjs.com/package/can-route-hash) [![Travis build status](https://travis-ci.org/canjs/can-route-hash.svg?branch=master)](https://travis-ci.org/canjs/can-route-hash) [![Greenkeeper badge](https://badges.greenkeeper.io/canjs/can-route-hash.svg)](https://greenkeeper.io/)",
            devDependencies: {
                "can-observation": "^4.0.1",
                jshint: "^2.9.5",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "",
            keywords: ["donejs-plugin"],
            license: "MIT",
            main: "./can-route-hash.js",
            repository: {
                type: "git",
                url: "git://github.com//can-route-hash.git"
            },
            scripts: {
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            }
        },
        {
            name: "can-param",
            version: "1.1.2",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-param/package.json",
            origFileUrl: "./node_modules/can-param/package.json",
            fileUrl: "./node_modules/can-param/package.json",
            _from: "can-param@1.1.2",
            _id: "can-param@1.1.2",
            _inBundle: false,
            _integrity:
                "sha512-pdum4KpGvqpIVtYR5RcuGbxnZwX32ioXkU5+xF6TJXk9xdWiOf84UqlpPT+sicSGRVJkNWfC5vz0lxTHeIhHsA==",
            _location: "/can-param",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-param@1.1.2",
                name: "can-param",
                escapedName: "can-param",
                rawSpec: "1.1.2",
                saveSpec: null,
                fetchSpec: "1.1.2"
            },
            _requiredBy: [
                "/can",
                "/can-ajax",
                "/can-route",
                "/can-util",
                "/can-util/can-ajax"
            ],
            _resolved:
                "https://registry.npmjs.org/can-param/-/can-param-1.1.2.tgz",
            _shasum: "c021f0c755268aaa64214c7f7df97e8e9960dd18",
            _spec: "can-param@1.1.2",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "https://www.bitovi.com/"
            },
            bugs: { url: "https://github.com/canjs/can-param/issues" },
            bundleDependencies: false,
            dependencies: { "can-namespace": "1.0.0" },
            deprecated: false,
            description: "Serialize an array or object into a query string.",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/doc/can-param.html",
            keywords: ["canjs", "parameter", "query string"],
            main: "can-param",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-param.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                }
            }
        },
        {
            name: "can-deparam",
            version: "1.2.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-deparam/package.json",
            origFileUrl: "./node_modules/can-deparam/package.json",
            fileUrl: "./node_modules/can-deparam/package.json",
            _from: "can-deparam@1.2.1",
            _id: "can-deparam@1.2.1",
            _inBundle: false,
            _integrity:
                "sha512-dU8I5FakEhvPHwi4TMQFGa8xheWCPi7HitkYPgs1Xn1m4tGQFGr17KlxKSjGsHCLV/sz1sn4Cpu6Abn9Bf5EGg==",
            _location: "/can-deparam",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-deparam@1.2.1",
                name: "can-deparam",
                escapedName: "can-deparam",
                rawSpec: "1.2.1",
                saveSpec: null,
                fetchSpec: "1.2.1"
            },
            _requiredBy: ["/can", "/can-fixture", "/can-route", "/can-util"],
            _resolved:
                "https://registry.npmjs.org/can-deparam/-/can-deparam-1.2.1.tgz",
            _shasum: "b247c8fa115508b7699dace913be3e9850413904",
            _spec: "can-deparam@1.2.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "https://www.bitovi.com/"
            },
            bugs: { url: "https://github.com/canjs/can-deparam/issues" },
            bundleDependencies: false,
            dependencies: { "can-namespace": "1.0.0" },
            deprecated: false,
            description: "Deserialize a query string into an array or object.",
            devDependencies: {
                "can-string-to-any": "^1.0.1",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/doc/can-deparam.html",
            keywords: ["canjs", "query string"],
            main: "can-deparam",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-deparam.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                }
            }
        },
        {
            name: "can-define-lazy-value",
            version: "1.1.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-define-lazy-value/package.json",
            origFileUrl: "./node_modules/can-define-lazy-value/package.json",
            fileUrl: "./node_modules/can-define-lazy-value/package.json",
            _from: "can-define-lazy-value@1.1.1",
            _id: "can-define-lazy-value@1.1.1",
            _inBundle: false,
            _integrity:
                "sha512-EihU7EEZT6MfmLZOhPENWxNrwEnVXNXjcLQUnKY4VwXabmBkxtVfwcUDB6RxfnNKbC9lBRi7/iXctxmTJQWVlg==",
            _location: "/can-define-lazy-value",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-define-lazy-value@1.1.1",
                name: "can-define-lazy-value",
                escapedName: "can-define-lazy-value",
                rawSpec: "1.1.1",
                saveSpec: null,
                fetchSpec: "1.1.1"
            },
            _requiredBy: [
                "/can",
                "/can-define",
                "/can-event-queue",
                "/can-observable-mixin",
                "/can-query-logic",
                "/can-stache",
                "/can-stache-element",
                "/can-view-scope"
            ],
            _resolved:
                "https://registry.npmjs.org/can-define-lazy-value/-/can-define-lazy-value-1.1.1.tgz",
            _shasum: "71068b70bbb1610fa552fb5fc37de5f8a46243c3",
            _spec: "can-define-lazy-value@1.1.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "https://bitovi.com"
            },
            bugs: {
                url: "https://github.com/canjs/can-define-lazy-value/issues"
            },
            bundleDependencies: false,
            dependencies: {},
            deprecated: false,
            description:
                "Define properties with lazy values using Object.defineProperty",
            devDependencies: {
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com",
            keywords: ["canjs", "donejs-plugin"],
            license: "MIT",
            main: "define-lazy-value",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-define-lazy-value.git"
            },
            scripts: {
                build: "node build.js",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: { npmIgnore: { testee: true, "steal-tools": true } }
        },
        {
            name: "can-key-tree",
            version: "1.2.2",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-key-tree/package.json",
            origFileUrl: "./node_modules/can-key-tree/package.json",
            fileUrl: "./node_modules/can-key-tree/package.json",
            _from: "can-key-tree@1.2.2",
            _id: "can-key-tree@1.2.2",
            _inBundle: false,
            _integrity:
                "sha512-56J5on+18RisUXvTm+S5rl4TX9+UkBiDJXtwweZfVMCoNkH3mcKUYD/drX6ZId4O1OqoCuifQFhxYqzVmQTFLg==",
            _location: "/can-key-tree",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-key-tree@1.2.2",
                name: "can-key-tree",
                escapedName: "can-key-tree",
                rawSpec: "1.2.2",
                saveSpec: null,
                fetchSpec: "1.2.2"
            },
            _requiredBy: [
                "/can",
                "/can-diff",
                "/can-dom-events",
                "/can-event-queue",
                "/can-observation",
                "/can-observe",
                "/can-reflect-promise",
                "/can-route",
                "/can-route-hash",
                "/can-simple-map",
                "/can-simple-observable",
                "/can-view-scope"
            ],
            _resolved:
                "https://registry.npmjs.org/can-key-tree/-/can-key-tree-1.2.2.tgz",
            _shasum: "5c5bd080b0d7577fe31ff36de6e52e13a095581b",
            _spec: "can-key-tree@1.2.2",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "DoneJS Core Team",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-key-tree/issues" },
            bundleDependencies: false,
            dependencies: { "can-reflect": "^1.4.0" },
            deprecated: false,
            description: "Add and remove items to a tree",
            devDependencies: {
                docco: "^0.8.0",
                "done-serve": "^3.3.1",
                "donejs-cli": "^3.1.1",
                "generator-donejs": "^3.3.0",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "https://github.com/canjs/can-key-tree#readme",
            keywords: ["CanJS", "DoneJS", "donejs-plugin"],
            license: "MIT",
            main: "can-key-tree",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-key-tree.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                plugins: ["steal-less", "steal-stache"],
                main: "can-key-tree"
            }
        },
        {
            name: "can-make-map",
            version: "1.2.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-make-map/package.json",
            origFileUrl: "./node_modules/can-make-map/package.json",
            fileUrl: "./node_modules/can-make-map/package.json",
            _from: "can-make-map@1.2.1",
            _id: "can-make-map@1.2.1",
            _inBundle: false,
            _integrity:
                "sha512-fkQOYqeIBB7kQ4v5NdvnQ1+6yoaRbSkMSYfT6aSaEKVexxwSJjT/88T1yHsElhQ3kXSgdG4HUZ9WAHkZFja9yQ==",
            _location: "/can-make-map",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-make-map@1.2.1",
                name: "can-make-map",
                escapedName: "can-make-map",
                rawSpec: "1.2.1",
                saveSpec: null,
                fetchSpec: "1.2.1"
            },
            _requiredBy: ["/can"],
            _resolved:
                "https://registry.npmjs.org/can-make-map/-/can-make-map-1.2.1.tgz",
            _shasum: "87b39a2d31e4a920a5bc0b4a16e6acf7c0db8bd6",
            _spec: "can-make-map@1.2.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "https://www.bitovi.com/"
            },
            bugs: { url: "https://github.com/canjs/can-make-map/issues" },
            bundleDependencies: false,
            dependencies: {},
            deprecated: false,
            description:
                "Convert a comma-separated string into a plain JavaScript object.",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                "done-serve": "^3.3.1",
                "donejs-cli": "^3.1.1",
                "generator-donejs": "^3.3.0",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/",
            keywords: ["canjs", "make", "map", "convert", "string"],
            main: "dist/cjs/can-make-map",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-make-map.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-make-map"
            }
        },
        {
            name: "can-queues",
            version: "1.2.2",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-queues/package.json",
            origFileUrl: "./node_modules/can-queues/package.json",
            fileUrl: "./node_modules/can-queues/package.json",
            _from: "can-queues@1.2.2",
            _id: "can-queues@1.2.2",
            _inBundle: false,
            _integrity:
                "sha512-ljGe13HYK7qS96nQdB9jvlt+TBAfx4VGjUjcUOObgnppgjyE8Q89OzinC3zkIPYEjutDtAZ4iFUtQkS/Aik+kw==",
            _location: "/can-queues",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-queues@1.2.2",
                name: "can-queues",
                escapedName: "can-queues",
                rawSpec: "1.2.2",
                saveSpec: null,
                fetchSpec: "1.2.2"
            },
            _requiredBy: [
                "/can",
                "/can-attribute-observable",
                "/can-bind",
                "/can-component",
                "/can-connect",
                "/can-debug",
                "/can-define",
                "/can-diff",
                "/can-event-queue",
                "/can-list",
                "/can-map",
                "/can-map-define",
                "/can-observable-array",
                "/can-observable-mixin",
                "/can-observation",
                "/can-observe",
                "/can-reflect-promise",
                "/can-route",
                "/can-route-hash",
                "/can-simple-map",
                "/can-simple-observable",
                "/can-stache-bindings",
                "/can-view-live",
                "/can-view-scope"
            ],
            _resolved:
                "https://registry.npmjs.org/can-queues/-/can-queues-1.2.2.tgz",
            _shasum: "1e814e215afbb0c28b9a44b3124b56f44f2bf97a",
            _spec: "can-queues@1.2.2",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "DoneJS Core Team",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-queues/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.0.1",
                "can-log": "^1.0.0",
                "can-namespace": "^1.0.0"
            },
            deprecated: false,
            description: "A light weight JavaScript task queue",
            devDependencies: {
                "can-test-helpers": "^1.1.2",
                docco: "^0.7.0",
                "done-serve": "^1.0.0",
                "donejs-cli": "^1.0.0",
                "generator-donejs": "^1.0.0",
                jshint: "^2.9.1",
                steal: "^1.3.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.2.0",
                testee: "^0.9.0"
            },
            homepage: "https://github.com/canjs/can-queues#readme",
            keywords: ["canjs"],
            license: "MIT",
            main: "./can-queues.js",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-queues.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                docco:
                    "docco can-queues.js queue.js queue-state.js completion-queue.js priority-queue.js",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push && make",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-queues"
            }
        },
        {
            name: "can-string",
            version: "1.1.0",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-string/package.json",
            origFileUrl: "./node_modules/can-string/package.json",
            fileUrl: "./node_modules/can-string/package.json",
            _from: "can-string@1.1.0",
            _id: "can-string@1.1.0",
            _inBundle: false,
            _integrity:
                "sha512-h1XxcgUD23vkir89pGDg4uq+V2y0BgPZuf2nAjWDylRTABWKYGJVLsXD6uyl1eBD1ljLkOvrSSJbF3b2oGc0nw==",
            _location: "/can-string",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-string@1.1.0",
                name: "can-string",
                escapedName: "can-string",
                rawSpec: "1.1.0",
                saveSpec: null,
                fetchSpec: "1.1.0"
            },
            _requiredBy: [
                "/can",
                "/can-component",
                "/can-connect",
                "/can-construct",
                "/can-control",
                "/can-route",
                "/can-stache",
                "/can-view-autorender"
            ],
            _resolved:
                "https://registry.npmjs.org/can-string/-/can-string-1.1.0.tgz",
            _shasum: "37022b615c3c62c2024aad85690ee5b37fc54deb",
            _spec: "can-string@1.1.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "DoneJS",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-string/issues" },
            bundleDependencies: false,
            dependencies: {},
            deprecated: false,
            description: "String helpers",
            devDependencies: {
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "donejs-plugin"],
            license: "MIT",
            main: "can-string",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-string.git"
            },
            scripts: {
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                plugins: ["steal-less", "steal-stache"]
            }
        },
        {
            name: "can-string-to-any",
            version: "1.2.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-string-to-any/package.json",
            origFileUrl: "./node_modules/can-string-to-any/package.json",
            fileUrl: "./node_modules/can-string-to-any/package.json",
            _from: "can-string-to-any@1.2.1",
            _id: "can-string-to-any@1.2.1",
            _inBundle: false,
            _integrity:
                "sha512-vZY891gfNRvwgyjLgzwIpWs4xmkjm17YuU9bmUTXxx55qq+oY3QGcpyKdDlM6XwM9RWB6DgKnJI5u7QfFQb0dw==",
            _location: "/can-string-to-any",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-string-to-any@1.2.1",
                name: "can-string-to-any",
                escapedName: "can-string-to-any",
                rawSpec: "1.2.1",
                saveSpec: null,
                fetchSpec: "1.2.1"
            },
            _requiredBy: [
                "/can",
                "/can-define",
                "/can-observable-mixin",
                "/can-stache-converters"
            ],
            _resolved:
                "https://registry.npmjs.org/can-string-to-any/-/can-string-to-any-1.2.1.tgz",
            _shasum: "62939694fde6c957c8fc56bbf8b95d4836cdc646",
            _spec: "can-string-to-any@1.2.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "DoneJS Core Team",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-string-to-any/issues" },
            bundleDependencies: false,
            dependencies: {},
            deprecated: false,
            description: "Convert strings to equivalent JavaScript values",
            devDependencies: {
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "donejs-plugin"],
            license: "MIT",
            main: "can-string-to-any",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-string-to-any.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-string-to-any"
            }
        },
        {
            name: "can-diff",
            version: "1.4.5",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-diff/package.json",
            origFileUrl: "./node_modules/can-diff/package.json",
            fileUrl: "./node_modules/can-diff/package.json",
            _from: "can-diff@1.4.5",
            _id: "can-diff@1.4.5",
            _inBundle: false,
            _integrity:
                "sha512-f0loCmXN9v3m+zqANBa/IfcmOFndSnujF0hW/sFs1E28NzWL4RTzYz7akVE6iJxvLsvOAcP3LHP4nazMCxqFhA==",
            _location: "/can-diff",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-diff@1.4.5",
                name: "can-diff",
                escapedName: "can-diff",
                rawSpec: "1.4.5",
                saveSpec: null,
                fetchSpec: "1.4.5"
            },
            _requiredBy: [
                "/can",
                "/can-attribute-observable",
                "/can-connect",
                "/can-debug",
                "/can-define",
                "/can-define-backup",
                "/can-local-store",
                "/can-memory-store",
                "/can-route",
                "/can-route-pushstate",
                "/can-view-live"
            ],
            _resolved:
                "https://registry.npmjs.org/can-diff/-/can-diff-1.4.5.tgz",
            _shasum: "f598a9311843edbd80e78348f92041a118cec043",
            _spec: "can-diff@1.4.5",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "DoneJS Core Team",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-diff/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-key-tree": "^1.0.2",
                "can-queues": "^1.0.1",
                "can-reflect": "^1.14.1"
            },
            deprecated: false,
            description: "Diffing helpers for can-reflect",
            devDependencies: {
                "can-define": "^2.1.0",
                "can-key": "<2.0.0",
                "can-simple-observable": "^2.0.4",
                "can-symbol": "^1.6.1",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "donejs", "donejs-plugin"],
            license: "MIT",
            main: "can-diff",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-diff.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: { main: "can-diff" }
        },
        {
            name: "can-key",
            version: "1.2.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-key/package.json",
            origFileUrl: "./node_modules/can-key/package.json",
            fileUrl: "./node_modules/can-key/package.json",
            _from: "can-key@1.2.1",
            _id: "can-key@1.2.1",
            _inBundle: false,
            _integrity:
                "sha512-OSlx1CUaGcuyKNXJSKYPm8Dp6td2vyOmQSn7SBK2AcDRE/QilfedHS1pMGfkAdshShK//NcvmFTlRS9DkODXtQ==",
            _location: "/can-key",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-key@1.2.1",
                name: "can-key",
                escapedName: "can-key",
                rawSpec: "1.2.1",
                saveSpec: null,
                fetchSpec: "1.2.1"
            },
            _requiredBy: [
                "/can",
                "/can-compute",
                "/can-connect",
                "/can-control",
                "/can-fixture",
                "/can-map-compat",
                "/can-query-logic",
                "/can-set-legacy",
                "/can-simple-observable",
                "/can-value"
            ],
            _resolved: "https://registry.npmjs.org/can-key/-/can-key-1.2.1.tgz",
            _shasum: "97c72ee9ae09a0fb155df6d1e60dc2164c0ed40f",
            _spec: "can-key@1.2.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "DoneJS",
                email: "core@donejs.com",
                url: "donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-key/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-namespace": "^1.0.0",
                "can-reflect": "^1.13.3",
                "can-symbol": "^1.0.0"
            },
            deprecated: false,
            description: "Read nested key values",
            devDependencies: {
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "donejs-plugin"],
            license: "MIT",
            main: "can-key",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-key.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                plugins: ["steal-less", "steal-stache"],
                main: "can-key"
            }
        },
        {
            name: "can-ajax",
            version: "2.4.4",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-ajax/package.json",
            origFileUrl: "./node_modules/can-ajax/package.json",
            fileUrl: "./node_modules/can-ajax/package.json",
            _from: "can-ajax@2.4.4",
            _id: "can-ajax@2.4.4",
            _inBundle: false,
            _integrity:
                "sha512-wcy/HN+C82UZBEYTRtxO+HhlraVNesbtVo7AzBllraPNQcjTqtzYPEZQhvtCLs6Rz/Kynxxr9kFcu7vZ0an3Mw==",
            _location: "/can-ajax",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-ajax@2.4.4",
                name: "can-ajax",
                escapedName: "can-ajax",
                rawSpec: "2.4.4",
                saveSpec: null,
                fetchSpec: "2.4.4"
            },
            _requiredBy: ["/can", "/can-connect"],
            _resolved:
                "https://registry.npmjs.org/can-ajax/-/can-ajax-2.4.4.tgz",
            _shasum: "1c9972f62b05ec083b79ef7f3a47621fb01606e4",
            _spec: "can-ajax@2.4.4",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "https://www.bitovi.com/"
            },
            bugs: { url: "https://github.com/canjs/can-ajax/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-globals": "<2.0.0",
                "can-namespace": "^1.0.0",
                "can-param": "^1.0.1",
                "can-parse-uri": "^1.0.0",
                "can-reflect": "^1.16.3"
            },
            deprecated: false,
            description: "jQuery-inspired AJAX request library.",
            devDependencies: {
                "can-make-map": "^1.0.0",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.11.8",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.11.9",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/doc/can-ajax.html",
            keywords: ["canjs", "ajax", "jquery", "http", "request"],
            license: "MIT",
            main: "dist/cjs/can-ajax",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-ajax.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout - && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: { testee: true, "steal-tools": true },
                main: "can-ajax"
            }
        },
        {
            name: "can-parse-uri",
            version: "1.2.2",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-parse-uri/package.json",
            origFileUrl: "./node_modules/can-parse-uri/package.json",
            fileUrl: "./node_modules/can-parse-uri/package.json",
            _from: "can-parse-uri@1.2.2",
            _id: "can-parse-uri@1.2.2",
            _inBundle: false,
            _integrity:
                "sha512-mN0KQPyBLUKvJgntSwjL2N6cOtSgu/VPue/fygo9zAsBcRDTT1AtBAtkMKEyTBI3KUWALUuHQv2oyNhAOuCIxA==",
            _location: "/can-parse-uri",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-parse-uri@1.2.2",
                name: "can-parse-uri",
                escapedName: "can-parse-uri",
                rawSpec: "1.2.2",
                saveSpec: null,
                fetchSpec: "1.2.2"
            },
            _requiredBy: [
                "/can",
                "/can-ajax",
                "/can-join-uris",
                "/can-util",
                "/can-util/can-ajax"
            ],
            _resolved:
                "https://registry.npmjs.org/can-parse-uri/-/can-parse-uri-1.2.2.tgz",
            _shasum: "07168bee47b882683113be97176fcd475a354ef7",
            _spec: "can-parse-uri@1.2.2",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "https://www.bitovi.com/"
            },
            bugs: { url: "https://github.com/canjs/can-parse-uri/issues" },
            bundleDependencies: false,
            dependencies: { "can-namespace": "^1.0.0" },
            deprecated: false,
            description: "Parse a URI into its components.",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/",
            keywords: ["canjs", "parse", "uri"],
            main: "can-parse-uri",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-parse-uri.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-parse-uri"
            }
        },
        {
            name: "can-control",
            version: "4.4.2",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-control/package.json",
            origFileUrl: "./node_modules/can-control/package.json",
            fileUrl: "./node_modules/can-control/package.json",
            _from: "can-control@4.4.2",
            _id: "can-control@4.4.2",
            _inBundle: false,
            _integrity:
                "sha512-eD/94AuRAVTvCYPz/x6y2gW60b3l8i7ibj+dIqb/8Dmrjv3T0WbzWzWE8fzIKxwjoY/u0qF5AXTsRF08TCZh9g==",
            _location: "/can-control",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-control@4.4.2",
                name: "can-control",
                escapedName: "can-control",
                rawSpec: "4.4.2",
                saveSpec: null,
                fetchSpec: "4.4.2"
            },
            _requiredBy: ["/can", "/can-component"],
            _resolved:
                "https://registry.npmjs.org/can-control/-/can-control-4.4.2.tgz",
            _shasum: "d226370f9b6bc90cd7622402c5adf74b866e5005",
            _spec: "can-control@4.4.2",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-control/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.1.1",
                "can-construct": "^3.2.0",
                "can-dom-events": "^1.1.0",
                "can-dom-mutate": "<2.0.0",
                "can-event-queue": "<2.0.0",
                "can-key": "<2.0.0",
                "can-log": "^1.0.0",
                "can-namespace": "1.0.0",
                "can-observation": "^4.0.0",
                "can-reflect": "^1.6.0",
                "can-stache-key": "^1.0.0",
                "can-string": "<2.0.0",
                "can-symbol": "^1.6.1"
            },
            deprecated: false,
            description: "Declarative event bindings",
            devDependencies: {
                "can-define": "^2.0.0",
                "can-globals": "^1.2.0",
                "can-queues": "<2.0.0",
                "can-simple-map": "^4.0.0",
                "can-simple-observable": "^2.0.0",
                "can-util": "^3.9.0",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.2.8",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.1.2",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/doc/can-control.html",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            license: "MIT",
            main: "can-control",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-control.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages",
                jshint: "jshint can-control.js can-control_test.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            }
        },
        {
            name: "can-child-nodes",
            version: "1.2.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-child-nodes/package.json",
            origFileUrl: "./node_modules/can-child-nodes/package.json",
            fileUrl: "./node_modules/can-child-nodes/package.json",
            _from: "can-child-nodes@1.2.1",
            _id: "can-child-nodes@1.2.1",
            _inBundle: false,
            _integrity:
                "sha512-DsZ0l4yO8fzqed9GOKHqjHpk8xVIoRPmirf9eTi86HJCYg0souUyt+UTR6qmaxc2nVOoPGc2Ke0a55oa8+GLOw==",
            _location: "/can-child-nodes",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-child-nodes@1.2.1",
                name: "can-child-nodes",
                escapedName: "can-child-nodes",
                rawSpec: "1.2.1",
                saveSpec: null,
                fetchSpec: "1.2.1"
            },
            _requiredBy: [
                "/can",
                "/can-component",
                "/can-fragment",
                "/can-stache",
                "/can-stache-element",
                "/can-view-import",
                "/can-view-live"
            ],
            _resolved:
                "https://registry.npmjs.org/can-child-nodes/-/can-child-nodes-1.2.1.tgz",
            _shasum: "199a3e2a64f22c187c623cb12651c56a7531cc51",
            _spec: "can-child-nodes@1.2.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "donejs core team",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-child-nodes/issues" },
            bundleDependencies: false,
            dependencies: { "can-namespace": "^1.0.0" },
            deprecated: false,
            description: "Read child nodes from elements",
            devDependencies: {
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "http://canjs",
            keywords: ["canjs", "donejs", "donejs-plugin"],
            license: "MIT",
            main: "can-child-nodes",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-child-nodes.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                }
            }
        },
        {
            name: "can-dom-events",
            version: "1.3.11",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-dom-events/package.json",
            origFileUrl: "./node_modules/can-dom-events/package.json",
            fileUrl: "./node_modules/can-dom-events/package.json",
            _from: "can-dom-events@1.3.11",
            _id: "can-dom-events@1.3.11",
            _inBundle: false,
            _integrity:
                "sha512-6iMXy2yh/qKO7/kVCL67xYplAHCRrHtg+garWvUD4MjEcu7xYVCdg9ycwXCdkMM1JD8TsWyeE3nss4eXDBq2zQ==",
            _location: "/can-dom-events",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-dom-events@1.3.11",
                name: "can-dom-events",
                escapedName: "can-dom-events",
                rawSpec: "1.3.11",
                saveSpec: null,
                fetchSpec: "1.3.11"
            },
            _requiredBy: [
                "/can",
                "/can-attribute-observable",
                "/can-component",
                "/can-control",
                "/can-event-dom-enter",
                "/can-event-dom-radiochange",
                "/can-event-queue",
                "/can-route",
                "/can-route-hash",
                "/can-route-pushstate",
                "/can-stache-bindings",
                "/can-stache-converters",
                "/can-util/can-event-dom-enter",
                "/can-util/can-event-dom-radiochange",
                "/can-view-autorender"
            ],
            _resolved:
                "https://registry.npmjs.org/can-dom-events/-/can-dom-events-1.3.11.tgz",
            _shasum: "02121e0aa2b21dfe67ce008bb2a63b6bddd57602",
            _spec: "can-dom-events@1.3.11",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Chris Andrejewski",
                email: "core@donejs.com",
                url: "https://www.bitovi.com/"
            },
            bugs: { url: "https://github.com/canjs/can-dom-events/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-globals": "<2.0.0",
                "can-key-tree": "^1.0.0",
                "can-namespace": "^1.0.0",
                "can-reflect": "^1.11.1"
            },
            deprecated: false,
            description: "Listen for native and custom DOM events",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                fixpack: "^2.3.1",
                jquery: "^3.2.1",
                jshint: "^2.9.1",
                steal: "^1.3.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.2.0",
                testee: "^0.9.0"
            },
            homepage: "https://github.com/canjs/can-dom-events",
            keywords: ["canjs", "custom", "dom", "events", "listener"],
            license: "MIT",
            main: "can-dom-events",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-dom-events.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                jshint: "jshint ./*.js ./helpers/*.js --config",
                lint: "fixpack && npm run jshint",
                postversion: "git push --follow-tags",
                preversion: "npm test && npm run build",
                test: "npm run detect-cycle && npm run lint && npm run testee",
                testee: "testee test.html --browsers firefox"
            }
        },
        {
            name: "can-validate-interface",
            version: "1.0.3",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-validate-interface/package.json",
            origFileUrl: "./node_modules/can-validate-interface/package.json",
            fileUrl: "./node_modules/can-validate-interface/package.json",
            _from: "can-validate-interface@1.0.3",
            _id: "can-validate-interface@1.0.3",
            _inBundle: false,
            _integrity:
                "sha512-N4kb7NKW3kq8PvavP6dhvw6MlaWuUqFwtyUg+sf9ywtRXtaLqpk3nN/Hvj5gpQSbO0dNX8n7Cvgw+LYuV4LBag==",
            _location: "/can-validate-interface",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-validate-interface@1.0.3",
                name: "can-validate-interface",
                escapedName: "can-validate-interface",
                rawSpec: "1.0.3",
                saveSpec: null,
                fetchSpec: "1.0.3"
            },
            _requiredBy: ["/can", "/can-connect"],
            _resolved:
                "https://registry.npmjs.org/can-validate-interface/-/can-validate-interface-1.0.3.tgz",
            _shasum: "719c1b0003f527d0a4ac3a0a61f9171c59ada0d2",
            _spec: "can-validate-interface@1.0.3",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: {
                url: "https://github.com/canjs/can-validate-interface/issues"
            },
            bundleDependencies: false,
            dependencies: {},
            deprecated: false,
            description:
                "Utility to validate property existence. Test for missing properties before they cause errors later.",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.5",
                steal: "^1.5.15",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.3.5",
                testee: "^0.9.0"
            },
            homepage: "https://github.com/canjs/can-validate-interface#readme",
            keywords: ["interface", "canjs", "can", "can-validate"],
            license: "MIT",
            main: "index.js",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-validate-interface.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore can-connect",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout - && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            }
        },
        {
            name: "can-data-types",
            version: "1.2.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-data-types/package.json",
            origFileUrl: "./node_modules/can-data-types/package.json",
            fileUrl: "./node_modules/can-data-types/package.json",
            _from: "can-data-types@1.2.1",
            _id: "can-data-types@1.2.1",
            _inBundle: false,
            _integrity:
                "sha512-UPsmXF/v/h2THop4su5m0TCFzZmzfaeB/ZTDUn6fm1QQTGUDYbPxtR9JWMMUTxpMo6Ul/+2XpOk24sZ8wfLp3Q==",
            _location: "/can-data-types",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-data-types@1.2.1",
                name: "can-data-types",
                escapedName: "can-data-types",
                rawSpec: "1.2.1",
                saveSpec: null,
                fetchSpec: "1.2.1"
            },
            _requiredBy: ["/can", "/can-define"],
            _resolved:
                "https://registry.npmjs.org/can-data-types/-/can-data-types-1.2.1.tgz",
            _shasum: "a8c6c34141e74d703d157e04959fe73c11e4fc93",
            _spec: "can-data-types@1.2.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "DoneJS Contributors",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-data-types/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-namespace": "^1.0.0",
                "can-reflect": "^1.16.1"
            },
            deprecated: false,
            description: "Reusable special data types",
            devDependencies: {
                "can-symbol": "^1.6.1",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            homepage: "https://github.com/canjs/can-data-types#readme",
            keywords: ["canjs", "donejs", "donejs-plugin"],
            license: "MIT",
            main: "can-data-types",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-data-types.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-data-types"
            }
        },
        {
            name: "can-reflect-dependencies",
            version: "1.1.2",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-reflect-dependencies/package.json",
            origFileUrl: "./node_modules/can-reflect-dependencies/package.json",
            fileUrl: "./node_modules/can-reflect-dependencies/package.json",
            _from: "can-reflect-dependencies@1.1.2",
            _id: "can-reflect-dependencies@1.1.2",
            _inBundle: false,
            _integrity:
                "sha512-NI+6PPYCJB3SDS7jxnoVKIucTc4ycVAPoto0BIN1a4deYWs+d667ok0qdhPiPaQypPqx5IcrrZSelbZYbnd+tw==",
            _location: "/can-reflect-dependencies",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-reflect-dependencies@1.1.2",
                name: "can-reflect-dependencies",
                escapedName: "can-reflect-dependencies",
                rawSpec: "1.1.2",
                saveSpec: null,
                fetchSpec: "1.1.2"
            },
            _requiredBy: [
                "/can",
                "/can-attribute-observable",
                "/can-bind",
                "/can-debug",
                "/can-simple-observable",
                "/can-stache-bindings",
                "/can-view-live",
                "/can-view-scope"
            ],
            _resolved:
                "https://registry.npmjs.org/can-reflect-dependencies/-/can-reflect-dependencies-1.1.2.tgz",
            _shasum: "32dc13f71774346c8f1aac9c721c9f76f2364f74",
            _spec: "can-reflect-dependencies@1.1.2",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: { name: "Bitovi" },
            bugs: {
                url: "https://github.com/canjs/can-reflect-dependencies/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.3.1",
                "can-reflect": "^1.10.0",
                "can-symbol": "^1.4.1"
            },
            deprecated: false,
            description: "Keep track of external observable dependendecies",
            devDependencies: {
                "can-simple-map": "^4.0.0",
                "can-simple-observable": "^2.0.0",
                jshint: "^2.9.5",
                steal: "^1.5.15",
                "steal-qunit": "^2.0.0",
                testee: "^0.9.0"
            },
            homepage:
                "https://github.com/canjs/can-reflect-dependencies#readme",
            keywords: ["canjs", "can-reflect"],
            license: "MIT",
            main: "can-reflect-dependencies.js",
            repository: {
                type: "git",
                url: "git+https://github.com/canjs/can-reflect-dependencies.git"
            },
            scripts: {
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            }
        },
        {
            name: "can-reflect-promise",
            version: "2.2.1",
            nestedFileUrl:
                "./node_modules/can/node_modules/can-reflect-promise/package.json",
            origFileUrl: "./node_modules/can-reflect-promise/package.json",
            fileUrl: "./node_modules/can-reflect-promise/package.json",
            _from: "can-reflect-promise@2.2.1",
            _id: "can-reflect-promise@2.2.1",
            _inBundle: false,
            _integrity:
                "sha512-i610G2EgX2vZyBT3nhXWGOiiUl8K4hMgnc3q9coMmKcCNlt/7YJaZ0J5NBE49ka7BUZG35FKDHQlKLYC0+6s2Q==",
            _location: "/can-reflect-promise",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-reflect-promise@2.2.1",
                name: "can-reflect-promise",
                escapedName: "can-reflect-promise",
                rawSpec: "2.2.1",
                saveSpec: null,
                fetchSpec: "2.2.1"
            },
            _requiredBy: ["/can", "/can-stache-key"],
            _resolved:
                "https://registry.npmjs.org/can-reflect-promise/-/can-reflect-promise-2.2.1.tgz",
            _shasum: "21e29e88c4b5e72700ed2de90f3b68ffaec448c9",
            _spec: "can-reflect-promise@2.2.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "https://www.bitovi.com"
            },
            bugs: {
                url: "https://github.com/canjs/can-reflect-promise/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-key-tree": "^1.0.0",
                "can-log": "^1.0.0",
                "can-observation": "^4.0.0",
                "can-observation-recorder": "^1.0.0",
                "can-queues": "^1.0.0",
                "can-reflect": "^1.1.0",
                "can-symbol": "^1.0.0"
            },
            deprecated: false,
            description: "Reflection support for Promise types",
            devDependencies: {
                "can-globals": "^1.0.0",
                "can-jquery": "^3.2.0",
                "can-test-helpers": "^1.1.0",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^2.2.1",
                "steal-benchmark": "0.0.1",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.2.1",
                testee: "^0.9.0"
            },
            directories: { test: "test" },
            homepage: "https://canjs.com/doc/can-reflect-promise.html",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            license: "MIT",
            main: "can-reflect-promise",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-reflect-promise.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint *.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            },
            system: { npmAlgorithm: "flat" },
            steal: { npmAlgorithm: "flat" }
        },
        {
            name: "kefir",
            version: "3.8.6",
            nestedFileUrl:
                "./node_modules/can-kefir/node_modules/kefir/package.json",
            origFileUrl: "./node_modules/kefir/package.json",
            fileUrl: "./node_modules/kefir/package.json",
            _from: "kefir@^3.8.0",
            _id: "kefir@3.8.6",
            _inBundle: false,
            _integrity:
                "sha512-H/8ZTjmEEme2YL388rgy5fFlz2NM4ZImNI2rJrTsR8og454kpY3lPVv53W9lfevNELfNeYD33gMdIKHL25z7WA==",
            _location: "/kefir",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "kefir@^3.8.0",
                name: "kefir",
                escapedName: "kefir",
                rawSpec: "^3.8.0",
                saveSpec: null,
                fetchSpec: "^3.8.0"
            },
            _requiredBy: [
                "/can-define-stream",
                "/can-define-stream-kefir",
                "/can-kefir",
                "/can-stream"
            ],
            _resolved: "https://registry.npmjs.org/kefir/-/kefir-3.8.6.tgz",
            _shasum: "046f0dabd870ff7cbfe039995c9bca2c1e68ac36",
            _spec: "kefir@^3.8.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can-define-stream",
            author: { name: "Roman Pominov", email: "rpominov@gmail.com" },
            bugs: { url: "https://github.com/kefirjs/kefir/issues" },
            bundleDependencies: false,
            dependencies: { "symbol-observable": "1.0.4" },
            deprecated: false,
            description:
                "Reactive Programming library for JavaScript inspired by Bacon.js and RxJS with focus on high performance and low memory usage",
            devDependencies: {
                "@reactivex/rxjs": "5.3.0",
                "babel-preset-es2015-loose-rollup": "7.0.0",
                chai: "^4.1.2",
                "chai-kefir": "^2.0.1",
                "flow-bin": "^0.80.0",
                inquirer: "0.10.1",
                mocha: "^4.0.1",
                prettier: "1.0.2",
                pug: "2.0.0-beta11",
                rollup: "0.41.6",
                "rollup-plugin-babel": "2.7.1",
                "rollup-plugin-commonjs": "8.0.2",
                "rollup-plugin-node-resolve": "3.0.0",
                "rollup-plugin-uglify": "1.0.1",
                semver: "5.3.0",
                sinon: "1.17.1",
                "sinon-chai": "^2.14.0",
                "transducers-js": "0.4.174",
                "transducers.js": "0.3.2",
                "zen-observable": "0.5.1"
            },
            homepage: "https://github.com/kefirjs/kefir",
            keywords: [
                "frp",
                "bacon",
                "bacon.js",
                "kefir",
                "kefir.js",
                "functional",
                "reactive",
                "stream",
                "streams",
                "EventStream",
                "Rx",
                "RxJs",
                "Observable"
            ],
            license: "MIT",
            main: "dist/kefir.js",
            module: "dist/kefir.esm.js",
            repository: {
                type: "git",
                url: "git+ssh://git@github.com/kefirjs/kefir.git"
            },
            scripts: {
                build:
                    "npm run clean && npm run build-js && npm run build-docs",
                "build-docs": "node configs/docs.js",
                "build-js":
                    "rollup -c ./configs/rollup.dev.js && rollup -c ./configs/rollup.esm.js && rollup -c ./configs/rollup.prod.js && cp kefir.js.flow dist/",
                clean: "rm -r dist index.html || true",
                "deploy-docs":
                    "git checkout gh-pages && git merge master && npm run build && git add . && git commit -m 'build all' && git push && git checkout master",
                prettify: "./configs/prettier.sh",
                test:
                    "./configs/prettier.sh check && rollup -c ./configs/rollup.dev.js && mocha && flow check",
                "test-debug":
                    "rollup -c ./configs/rollup.dev.js && mocha --inspect-brk",
                "test-only": "rollup -c ./configs/rollup.dev.js && mocha"
            }
        },
        {
            name: "can-define-connected-singleton",
            version: "0.2.2",
            nestedFileUrl:
                "./node_modules/can-connect/node_modules/can-define-connected-singleton/package.json",
            origFileUrl:
                "./node_modules/can-define-connected-singleton/package.json",
            fileUrl:
                "./node_modules/can-define-connected-singleton/package.json",
            _from: "can-define-connected-singleton@^0.2.0",
            _id: "can-define-connected-singleton@0.2.2",
            _inBundle: false,
            _integrity:
                "sha512-lXx3VDcdGtv3rbRqL/yikGWIvmswa6uBuy6G6ZosA3OdfDljg9RV6LxtDd2s7IPE4ARrOhFHWbus34sIg8L4Qw==",
            _location: "/can-define-connected-singleton",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-define-connected-singleton@^0.2.0",
                name: "can-define-connected-singleton",
                escapedName: "can-define-connected-singleton",
                rawSpec: "^0.2.0",
                saveSpec: null,
                fetchSpec: "^0.2.0"
            },
            _requiredBy: ["/can-connect"],
            _resolved:
                "https://registry.npmjs.org/can-define-connected-singleton/-/can-define-connected-singleton-0.2.2.tgz",
            _shasum: "030774beb182a6668b8ff4aab431fe174cfa0091",
            _spec: "can-define-connected-singleton@^0.2.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can-connect",
            author: {
                name: "Bitovi",
                email: "core@donejs.com",
                url: "https://bitovi.com"
            },
            bugs: {
                url:
                    "https://github.com/canjs/can-define-connected-singleton/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-define": "^2.7.5",
                "can-observation-recorder": "^1.3.0"
            },
            deprecated: false,
            description: "Server persisted singleton plugin for can-define",
            devDependencies: {
                jshint: "^2.9.1",
                steal: "^2.1.6",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^2.0.9",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com",
            keywords: ["donejs-plugin"],
            license: "MIT",
            main: "can-define-connected-singleton",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-define-connected-singleton.git"
            },
            scripts: {
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                }
            }
        },
        {
            name: "can-single-reference",
            version: "1.2.2",
            nestedFileUrl:
                "./node_modules/can-compute/node_modules/can-single-reference/package.json",
            origFileUrl: "./node_modules/can-single-reference/package.json",
            fileUrl: "./node_modules/can-single-reference/package.json",
            _from: "can-single-reference@^1.0.0",
            _id: "can-single-reference@1.2.2",
            _inBundle: false,
            _integrity:
                "sha512-/IY/v1eA92MF655ygF8kgijQ+CaLS2TYYepR2ovdnOBuZAWvTAJmiuEWUAzDcn3Z8AaxxqCF83ouNSgBLVtRfw==",
            _location: "/can-single-reference",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-single-reference@^1.0.0",
                name: "can-single-reference",
                escapedName: "can-single-reference",
                rawSpec: "^1.0.0",
                saveSpec: null,
                fetchSpec: "^1.0.0"
            },
            _requiredBy: [
                "/can-compute",
                "/can-define",
                "/can-map",
                "/can-view-scope"
            ],
            _resolved:
                "https://registry.npmjs.org/can-single-reference/-/can-single-reference-1.2.2.tgz",
            _shasum: "2bf81af154f631d2fb1c4925d3a783eea5488d63",
            _spec: "can-single-reference@^1.0.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can-define",
            author: {
                name: "DoneJS Contributors",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: {
                url: "https://github.com/canjs/can-single-reference/issues"
            },
            bundleDependencies: false,
            dependencies: { "can-cid": "^1.1.2" },
            deprecated: false,
            description:
                "Assign a value to a function that can be collected later",
            devDependencies: {
                jshint: "^2.9.1",
                steal: "^1.6.5",
                "steal-qunit": "^2.0.0",
                "steal-tools": "^1.11.3",
                testee: "^0.9.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "donejs", "donejs-plugin"],
            license: "MIT",
            main: "can-single-reference",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-single-reference.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                }
            }
        },
        {
            name: "can-types",
            version: "1.4.0",
            nestedFileUrl:
                "./node_modules/can-map/node_modules/can-types/package.json",
            origFileUrl: "./node_modules/can-types/package.json",
            fileUrl: "./node_modules/can-types/package.json",
            _from: "can-types@^1.1.0",
            _id: "can-types@1.4.0",
            _inBundle: false,
            _integrity:
                "sha512-xmZHMMCppgElz0UldNLMjtI+XD8lOWuyr33mxIdVe8hzn/i74ndPAa/f/tlZunPaVKsr2wkaC8BEa8e1dGuyQQ==",
            _location: "/can-types",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-types@^1.1.0",
                name: "can-types",
                escapedName: "can-types",
                rawSpec: "^1.1.0",
                saveSpec: null,
                fetchSpec: "^1.1.0"
            },
            _requiredBy: ["/can-list", "/can-map", "/can-stream", "/can-util"],
            _resolved:
                "https://registry.npmjs.org/can-types/-/can-types-1.4.0.tgz",
            _shasum: "a7f0d87fc70f9f541ae493eeb6cda9c2d5ca3ff4",
            _spec: "can-types@^1.1.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can-util",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-types/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-globals": "<2.0.0",
                "can-log": "^1.0.0",
                "can-namespace": "1.0.0",
                "can-reflect": "^1.0.0",
                "can-symbol": "^1.0.0"
            },
            deprecated: false,
            description: "A stateful container for CanJS type information",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.2.10",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.1.2",
                testee: "^0.8.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-types",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-types.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                jshint: "jshint ./*.js --config",
                postversion:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            }
        },
        {
            name: "feathers-errors",
            version: "2.9.2",
            nestedFileUrl:
                "./node_modules/can-connect-feathers/node_modules/feathers-errors/package.json",
            origFileUrl: "./node_modules/feathers-errors/package.json",
            fileUrl: "./node_modules/feathers-errors/package.json",
            _from: "feathers-errors@^2.7.0",
            _id: "feathers-errors@2.9.2",
            _inBundle: false,
            _integrity:
                "sha512-qwIX97bNW7+1tWVG073+omUA0rCYKJtTtwuzTrrvfrtdr8J8Dk1Fy4iaV9Fa6/YBD5AZu0lsplPE0iu4u/d4GQ==",
            _location: "/feathers-errors",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "feathers-errors@^2.7.0",
                name: "feathers-errors",
                escapedName: "feathers-errors",
                rawSpec: "^2.7.0",
                saveSpec: null,
                fetchSpec: "^2.7.0"
            },
            _requiredBy: [
                "/can-connect-feathers",
                "/feathers-authentication-popups"
            ],
            _resolved:
                "https://registry.npmjs.org/feathers-errors/-/feathers-errors-2.9.2.tgz",
            _shasum: "96ca0e5fe50cc56f0eccc90ce3fa5e1f8840828d",
            _spec: "feathers-errors@^2.7.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can-connect-feathers",
            author: {
                name: "Feathers contributors",
                email: "hello@feathersjs.com",
                url: "https://feathersjs.com"
            },
            bugs: {
                url: "https://github.com/feathersjs/feathers-errors/issues"
            },
            bundleDependencies: false,
            contributors: [],
            dependencies: { debug: "^3.0.0" },
            deprecated:
                "Feathers v3 is out and has moved to @feathersjs/errors. See https://docs.feathersjs.com/migrating.html for more information.",
            description: "Common error types for feathers apps",
            devDependencies: {
                "babel-cli": "^6.3.17",
                "babel-core": "^6.3.17",
                "babel-plugin-add-module-exports": "^0.2.1",
                "babel-plugin-transform-object-assign": "^6.22.0",
                "babel-polyfill": "^6.5.0",
                "babel-preset-es2015": "^6.3.13",
                chai: "^4.1.0",
                "eslint-if-supported": "^1.0.1",
                feathers: "^2.0.0",
                istanbul: "^1.1.0-alpha.1",
                mocha: "^3.0.0",
                request: "^2.69.0",
                semistandard: "^11.0.0",
                shx: "^0.2.1",
                sinon: "^3.0.0",
                "sinon-chai": "^2.8.0"
            },
            directories: { lib: "lib" },
            engines: { node: ">= 4" },
            homepage: "https://github.com/feathersjs/feathers-errors",
            keywords: ["feathers", "feathers-plugin", "feathers-errors"],
            license: "MIT",
            main: "lib/index",
            repository: {
                type: "git",
                url: "git://github.com/feathersjs/feathers-errors.git"
            },
            scripts: {
                changelog:
                    'github_changelog_generator && git add CHANGELOG.md && git commit -am "Updating changelog"',
                compile:
                    "shx rm -rf lib/ && babel -d lib/ src/ && shx mkdir lib/public/ && shx cp src/public/* lib/public/",
                coverage:
                    "istanbul cover node_modules/mocha/bin/_mocha -- --opts mocha.opts",
                lint: "eslint-if-supported semistandard --fix",
                mocha: "mocha --opts mocha.opts",
                prepublish: "npm run compile",
                publish:
                    "git push origin --tags && npm run changelog && git push origin",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run compile && npm run lint && npm run coverage",
                watch: "babel --watch -d lib/ src/"
            },
            semistandard: { env: ["mocha"], ignore: ["/lib"] },
            types: ["./index.d.ts", "./handler.d.ts", "./not-found.d.ts"]
        },
        {
            name: "feathers-authentication-popups",
            version: "0.1.2",
            nestedFileUrl:
                "./node_modules/can-connect-feathers/node_modules/feathers-authentication-popups/package.json",
            origFileUrl:
                "./node_modules/feathers-authentication-popups/package.json",
            fileUrl:
                "./node_modules/feathers-authentication-popups/package.json",
            _from: "feathers-authentication-popups@^0.1.2",
            _id: "feathers-authentication-popups@0.1.2",
            _inBundle: false,
            _integrity: "sha1-PfN1V1DwkiZrHs2+yQKZ4b3nSUg=",
            _location: "/feathers-authentication-popups",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "feathers-authentication-popups@^0.1.2",
                name: "feathers-authentication-popups",
                escapedName: "feathers-authentication-popups",
                rawSpec: "^0.1.2",
                saveSpec: null,
                fetchSpec: "^0.1.2"
            },
            _requiredBy: ["/can-connect-feathers"],
            _resolved:
                "https://registry.npmjs.org/feathers-authentication-popups/-/feathers-authentication-popups-0.1.2.tgz",
            _shasum: "3df3755750f092266b1ecdbec90299e1bde74948",
            _spec: "feathers-authentication-popups@^0.1.2",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can-connect-feathers",
            author: {
                name: "Marshall Thompson",
                email: "marshall@creativeideall.net",
                url: "https://feathersjs.com"
            },
            bugs: {
                url:
                    "https://github.com/feathersjs/feathers-authentication-popups/issues"
            },
            bundleDependencies: false,
            contributors: [],
            dependencies: {
                debug: "^2.2.0",
                events: "^1.1.1",
                "feathers-errors": "^2.4.0"
            },
            deprecated: "This module is no longer maintained",
            description:
                "Server and client utils for implementing popup-based authentication flows",
            devDependencies: {
                "babel-cli": "^6.18.0",
                "babel-core": "^6.18.0",
                "babel-plugin-add-module-exports": "^0.2.1",
                "babel-preset-es2015": "^6.18.0",
                chai: "^3.5.0",
                istanbul: "^1.1.0-alpha.1",
                jsdom: "9.8.3",
                "jsdom-global": "2.1.0",
                mocha: "^3.1.2",
                rimraf: "^2.5.4",
                semistandard: "^9.1.0"
            },
            directories: { lib: "lib" },
            engines: { node: ">= 4.6.0" },
            homepage:
                "https://github.com/feathersjs/feathers-authentication-popups",
            keywords: ["feathers", "feathers-plugin"],
            license: "MIT",
            main: "lib/feathers-authentication-popups",
            repository: {
                type: "git",
                url:
                    "git://github.com/feathersjs/feathers-authentication-popups.git"
            },
            scripts: {
                changelog:
                    'github_changelog_generator && git add CHANGELOG.md && git commit -am "Updating changelog"',
                compile: "rimraf lib/ && babel -d lib/ src/",
                coverage: "istanbul cover _mocha -- --opts mocha.opts",
                lint: "semistandard src/**/*.js test/**/*.js --fix",
                mocha: "mocha --opts mocha.opts",
                prepublish: "npm run compile",
                publish:
                    "git push origin --tags && npm run changelog && git push origin",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                start: "npm run compile && node example/app",
                test: "npm run compile && npm run lint && npm run coverage",
                watch: "babel --watch -d lib/ src/"
            },
            semistandard: { sourceType: "module", env: ["mocha"] }
        },
        {
            name: "jwt-decode",
            version: "2.2.0",
            nestedFileUrl:
                "./node_modules/can-connect-feathers/node_modules/jwt-decode/package.json",
            origFileUrl: "./node_modules/jwt-decode/package.json",
            fileUrl: "./node_modules/jwt-decode/package.json",
            _from: "jwt-decode@^2.1.0",
            _id: "jwt-decode@2.2.0",
            _inBundle: false,
            _integrity: "sha1-fYa9VmefWM5qhHBKZX3TkruoGnk=",
            _location: "/jwt-decode",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "jwt-decode@^2.1.0",
                name: "jwt-decode",
                escapedName: "jwt-decode",
                rawSpec: "^2.1.0",
                saveSpec: null,
                fetchSpec: "^2.1.0"
            },
            _requiredBy: ["/can-connect-feathers"],
            _resolved:
                "https://registry.npmjs.org/jwt-decode/-/jwt-decode-2.2.0.tgz",
            _shasum: "7d86bd56679f58ce6a84704a657dd392bba81a79",
            _spec: "jwt-decode@^2.1.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can-connect-feathers",
            author: {
                name: "Jose F. Romaniello",
                email: "jfromaniello@gmail.com",
                url: "http://joseoncode.com"
            },
            bugs: { url: "https://github.com/auth0/jwt-decode/issues" },
            bundleDependencies: false,
            dependencies: {},
            deprecated: false,
            description:
                "Decode JWT tokens, mostly useful for browser applications.",
            devDependencies: {
                "expect.js": "~0.2.0",
                grunt: "~0.4.0",
                "grunt-browserify": "~5.0.0",
                "grunt-cli": "~0.1.9",
                "grunt-contrib-clean": "~0.5.0",
                "grunt-contrib-connect": "~0.5.0",
                "grunt-contrib-copy": "~0.4.1",
                "grunt-contrib-uglify": "~0.2.4",
                "grunt-contrib-watch": "~0.2.0",
                "grunt-exec": "~0.4.2",
                "grunt-s3": "~0.2.0-alpha.3",
                mocha: "~1.13.0",
                rimraf: "~2.2.2",
                testem: "~0.5.8",
                "uglify-js": "~2.4.0"
            },
            homepage: "https://github.com/auth0/jwt-decode#readme",
            keywords: ["jwt", "browser"],
            license: "MIT",
            main: "lib/index.js",
            repository: {
                type: "git",
                url: "git://github.com/auth0/jwt-decode.git"
            },
            scripts: { test: "grunt test" }
        },
        {
            name: "can-make-rest",
            version: "0.1.3",
            nestedFileUrl:
                "./node_modules/can-connect/node_modules/can-make-rest/package.json",
            origFileUrl: "./node_modules/can-make-rest/package.json",
            fileUrl: "./node_modules/can-make-rest/package.json",
            _from: "can-make-rest@<2.0.0",
            _id: "can-make-rest@0.1.3",
            _inBundle: false,
            _integrity:
                "sha512-7RLi2tEbTIA3duUE9RdT85iUwbH4bd2qNqLIfG6OF0gunlKG3ipEXcrCdTaeak4mnmrW111WWNq4KR8K+tiUmw==",
            _location: "/can-make-rest",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-make-rest@<2.0.0",
                name: "can-make-rest",
                escapedName: "can-make-rest",
                rawSpec: "<2.0.0",
                saveSpec: null,
                fetchSpec: "<2.0.0"
            },
            _requiredBy: ["/can-connect"],
            _resolved:
                "https://registry.npmjs.org/can-make-rest/-/can-make-rest-0.1.3.tgz",
            _shasum: "c79e4246874c0d720b0435f30f08d181ee65dad7",
            _spec: "can-make-rest@<2.0.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can-connect",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://donejs.com"
            },
            browser: {},
            browserify: { transform: ["cssify"] },
            bugs: { url: "https://github.com/canjs/can-make-rest/issues" },
            bundleDependencies: false,
            dependencies: { "can-util": "^3.9.0-pre.4" },
            deprecated: false,
            description: "Make restful urls and methods from a resource",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                "done-serve": "^1.0.0",
                "donejs-cli": "^1.0.0",
                "generator-donejs": "^1.0.0",
                jshint: "^2.9.1",
                steal: "^1.3.1",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.2.0",
                testee: "^0.3.0"
            },
            homepage: "http://canjs.com",
            keywords: ["donejs", "donejs-plugin"],
            license: "MIT",
            main: "./can-make-rest.js",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-make-rest.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postversion:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            system: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                plugins: ["steal-less", "steal-stache"],
                main: "can-make-rest"
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                plugins: ["steal-less", "steal-stache"],
                main: "can-make-rest"
            }
        },
        {
            name: "can-attribute-observable",
            version: "1.2.6",
            nestedFileUrl:
                "./node_modules/can-view-live/node_modules/can-attribute-observable/package.json",
            origFileUrl: "./node_modules/can-attribute-observable/package.json",
            fileUrl: "./node_modules/can-attribute-observable/package.json",
            _from: "can-attribute-observable@1.2.6",
            _id: "can-attribute-observable@1.2.6",
            _inBundle: false,
            _integrity:
                "sha512-9D9FrA7hs0jXfQd1Oohy0gtrMYHcezz0W6we3ewkXGR3i3P3v4hK1qzzUiFOactb46ACh2ITy5YANDMdnD4bdg==",
            _location: "/can-attribute-observable",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-attribute-observable@1.2.6",
                name: "can-attribute-observable",
                escapedName: "can-attribute-observable",
                rawSpec: "1.2.6",
                saveSpec: null,
                fetchSpec: "1.2.6"
            },
            _requiredBy: ["/can", "/can-stache-bindings", "/can-view-live"],
            _resolved:
                "https://registry.npmjs.org/can-attribute-observable/-/can-attribute-observable-1.2.6.tgz",
            _shasum: "e940f4f58200d6bc685e1cc8bcc775612422c0e7",
            _spec: "can-attribute-observable@1.2.6",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.3.1",
                "can-diff": "^1.0.1",
                "can-dom-data": "^1.0.1",
                "can-dom-events": "^1.1.2",
                "can-dom-mutate": "^1.0.3",
                "can-event-dom-radiochange": "^2.1.0",
                "can-globals": "^1.0.1",
                "can-observation": "^4.0.1",
                "can-observation-recorder": "^1.0.2",
                "can-queues": "^1.0.1",
                "can-reflect": "^1.13.3",
                "can-reflect-dependencies": "^1.0.1",
                "can-simple-observable": "^2.0.2",
                "can-symbol": "^1.6.1"
            },
            deprecated: false,
            description: "Create observables from HTML attributes.",
            devDependencies: {
                "can-vdom": "^4.0.1",
                "detect-cyclic-packages": "^1.1.1",
                jshint: "^2.9.5",
                steal: "^1.6.5",
                "steal-qunit": "^2.0.0",
                testee: "^0.9.1"
            },
            keywords: [],
            main: "can-attribute-observable",
            scripts: {
                "detect-cycle": "detect-cyclic-packages",
                jshint: "jshint ./*.js test/*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            }
        },
        {
            name: "can-view-import",
            version: "4.2.2",
            nestedFileUrl:
                "./node_modules/steal-stache/node_modules/can-view-import/package.json",
            origFileUrl: "./node_modules/can-view-import/package.json",
            fileUrl: "./node_modules/can-view-import/package.json",
            _from: "can-view-import@^4.2.2",
            _id: "can-view-import@4.2.2",
            _inBundle: false,
            _integrity:
                "sha512-07psEhX9awICV+s4TbKFGqjrthyvhI+XeXyp65ILcolCHhzDxdpwbnCsWznOVNpfFyxVxko/b9XfoOMZRfyoJA==",
            _location: "/can-view-import",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-view-import@^4.2.2",
                name: "can-view-import",
                escapedName: "can-view-import",
                rawSpec: "^4.2.2",
                saveSpec: null,
                fetchSpec: "^4.2.2"
            },
            _requiredBy: ["/steal-stache"],
            _resolved:
                "https://registry.npmjs.org/can-view-import/-/can-view-import-4.2.2.tgz",
            _shasum: "9dbbe792ecf372d79344a5d8d9c208cfe3c4ba7b",
            _spec: "can-view-import@^4.2.2",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\steal-stache",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-view-import/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.0.0",
                "can-child-nodes": "^1.0.0",
                "can-dom-data": "^1.0.1",
                "can-dom-mutate": "<2.0.0",
                "can-globals": "<2.0.0",
                "can-import-module": "^1.0.0",
                "can-log": "^1.0.0",
                "can-symbol": "^1.5.0",
                "can-view-callbacks": "^4.0.0",
                "can-view-nodelist": "^4.0.0"
            },
            deprecated: false,
            description: "Import dependencies in CanJS views",
            devDependencies: {
                "bit-docs": "0.0.7",
                "can-component": "^4.0.0",
                "can-observation": "^4.0.0",
                "can-queues": "<2.0.0",
                "can-simple-map": "^4.0.0",
                "can-simple-observable": "^2.0.0",
                "can-stache": "^4.0.0",
                "can-test-helpers": "^1.0.1",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.2.0",
                "steal-qunit": "^1.0.0",
                "steal-stache": "^4.0.0",
                "steal-tools": "^1.0.0",
                testee: "^0.9.0"
            },
            homepage: "https://canjs.com/doc/can-view-import.html",
            keywords: [],
            main: "can-view-import",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-view-import.git"
            },
            scripts: {
                "detect-cycle":
                    "detect-cyclic-packages --ignore done-serve,steal-stache",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            }
        },
        {
            name: "debug",
            version: "2.6.9",
            nestedFileUrl:
                "./node_modules/feathers-errors/node_modules/debug/package.json",
            origFileUrl: "./node_modules/debug/package.json",
            fileUrl: "./node_modules/debug/package.json",
            _from: "debug@^2.2.0",
            _id: "debug@2.6.9",
            _inBundle: false,
            _integrity:
                "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
            _location: "/debug",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "debug@^2.2.0",
                name: "debug",
                escapedName: "debug",
                rawSpec: "^2.2.0",
                saveSpec: null,
                fetchSpec: "^2.2.0"
            },
            _requiredBy: [
                "/expand-brackets",
                "/feathers-authentication-popups",
                "/snapdragon"
            ],
            _resolved: "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
            _shasum: "5d128515df134ff327e90a4c93f4e077a536341f",
            _spec: "debug@^2.2.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\feathers-authentication-popups",
            author: { name: "TJ Holowaychuk", email: "tj@vision-media.ca" },
            browser: "./src/browser.js",
            bugs: { url: "https://github.com/visionmedia/debug/issues" },
            bundleDependencies: false,
            component: {
                scripts: {
                    "debug/index.js": "browser.js",
                    "debug/debug.js": "debug.js"
                }
            },
            contributors: [
                {
                    name: "Nathan Rajlich",
                    email: "nathan@tootallnate.net",
                    url: "http://n8.io"
                },
                { name: "Andrew Rhyne", email: "rhyneandrew@gmail.com" }
            ],
            dependencies: { ms: "2.0.0" },
            deprecated: false,
            description: "small debugging utility",
            devDependencies: {
                browserify: "9.0.3",
                chai: "^3.5.0",
                concurrently: "^3.1.0",
                coveralls: "^2.11.15",
                eslint: "^3.12.1",
                istanbul: "^0.4.5",
                karma: "^1.3.0",
                "karma-chai": "^0.1.0",
                "karma-mocha": "^1.3.0",
                "karma-phantomjs-launcher": "^1.0.2",
                "karma-sinon": "^1.0.5",
                mocha: "^3.2.0",
                "mocha-lcov-reporter": "^1.2.0",
                rimraf: "^2.5.4",
                sinon: "^1.17.6",
                "sinon-chai": "^2.8.0"
            },
            homepage: "https://github.com/visionmedia/debug#readme",
            keywords: ["debug", "log", "debugger"],
            license: "MIT",
            main: "./src/index.js",
            repository: {
                type: "git",
                url: "git://github.com/visionmedia/debug.git"
            }
        },
        {
            name: "can-util",
            version: "3.14.0",
            nestedFileUrl:
                "./node_modules/can-make-rest/node_modules/can-util/package.json",
            origFileUrl: "./node_modules/can-util/package.json",
            fileUrl: "./node_modules/can-util/package.json",
            _from: "can-util@^3.9.0-pre.4",
            _id: "can-util@3.14.0",
            _inBundle: false,
            _integrity:
                "sha512-3DMeUPuAMAfJ2CfCpd0OpRzR+tC4dVSyBzhO5ykttQjwz18ImK/FqRx9NSkhTGHaeN/t9sxhMofRie8RifaasA==",
            _location: "/can-util",
            _phantomChildren: {
                "can-cid": "1.3.1",
                "can-dom-events": "1.3.11",
                "can-globals": "1.2.2",
                "can-namespace": "1.0.0",
                "can-param": "1.1.2",
                "can-parse-uri": "1.2.2",
                "can-reflect": "1.17.11"
            },
            _requested: {
                type: "range",
                registry: true,
                raw: "can-util@^3.9.0-pre.4",
                name: "can-util",
                escapedName: "can-util",
                rawSpec: "^3.9.0-pre.4",
                saveSpec: null,
                fetchSpec: "^3.9.0-pre.4"
            },
            _requiredBy: ["/can-make-rest"],
            _resolved:
                "https://registry.npmjs.org/can-util/-/can-util-3.14.0.tgz",
            _shasum: "25b78bdfaf58aedeb75b198509aeb2a1b53edd33",
            _spec: "can-util@^3.9.0-pre.4",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\can-make-rest",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-util/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-ajax": "^1.0.0",
                "can-assign": "^1.0.0",
                "can-cid": "^1.1.0",
                "can-deparam": "^1.0.0",
                "can-dom-data-state": "^0.2.0",
                "can-event-dom-enter": "^1.0.4",
                "can-event-dom-radiochange": "^1.0.4",
                "can-globals": "^1.1.1",
                "can-log": "^1.0.0",
                "can-namespace": "1.0.0",
                "can-param": "^1.0.0",
                "can-parse-uri": "^1.0.0",
                "can-reflect": "^1.2.0",
                "can-symbol": "^1.0.0",
                "can-types": "^1.1.0"
            },
            deprecated: false,
            description: "Common utilities for CanJS projects",
            devDependencies: {
                async: "^2.2.0",
                "can-vdom": "^3.2.3",
                "detect-cyclic-packages": "^1.1.0",
                "http-server": "^0.10.0",
                jshint: "^2.9.1",
                qunitjs: "^2.4.0",
                saucelabs: "^1.4.0",
                steal: "^1.11.4",
                "steal-css": "^1.2.5",
                "steal-qunit": "^1.0.0",
                "steal-tools": "^1.4.1",
                "test-saucelabs": "0.0.3",
                testee: "^0.8.0",
                wd: "^1.1.3",
                xmlhttprequest2: "^1.0.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            license: "MIT",
            main: "can-util",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-util.git"
            },
            scripts: {
                build: "node build.js",
                ci:
                    "npm run build && npm run test && node test/test-sauce-labs.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                "http-server": "http-server -p 3000 --silent",
                jshint: "jshint dom/. js/. *.js --config",
                postversion:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run test:server && npm run testee",
                "test:server": "TEST=qunit qunit test/node.js",
                testee: "testee test/test.html --browsers firefox",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            }
        },
        {
            name: "debug",
            version: "3.2.6",
            nestedFileUrl:
                "./node_modules/feathers-errors/node_modules/debug/package.json",
            origFileUrl: "./node_modules/debug/package.json",
            __crawledNestedPosition: true,
            nextFileUrl:
                "./node_modules/feathers-errors/node_modules/debug/package.json",
            fileUrl:
                "./node_modules/feathers-errors/node_modules/debug/package.json",
            _from: "debug@^3.0.0",
            _id: "debug@3.2.6",
            _inBundle: false,
            _integrity:
                "sha512-mel+jf7nrtEl5Pn1Qx46zARXKDpBbvzezse7p7LqINmdoIk8PYP5SySaxEmYv6TZ0JyEKA1hsCId6DIhgITtWQ==",
            _location: "/feathers-errors/debug",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "debug@^3.0.0",
                name: "debug",
                escapedName: "debug",
                rawSpec: "^3.0.0",
                saveSpec: null,
                fetchSpec: "^3.0.0"
            },
            _requiredBy: ["/feathers-errors"],
            _resolved: "https://registry.npmjs.org/debug/-/debug-3.2.6.tgz",
            _shasum: "e83d17de16d8a7efb7717edbe5fb10135eee629b",
            _spec: "debug@^3.0.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\feathers-errors",
            author: { name: "TJ Holowaychuk", email: "tj@vision-media.ca" },
            browser: "./src/browser.js",
            bugs: { url: "https://github.com/visionmedia/debug/issues" },
            bundleDependencies: false,
            contributors: [
                {
                    name: "Nathan Rajlich",
                    email: "nathan@tootallnate.net",
                    url: "http://n8.io"
                },
                { name: "Andrew Rhyne", email: "rhyneandrew@gmail.com" }
            ],
            dependencies: { ms: "^2.1.1" },
            deprecated: false,
            description: "small debugging utility",
            devDependencies: {
                "@babel/cli": "^7.0.0",
                "@babel/core": "^7.0.0",
                "@babel/preset-env": "^7.0.0",
                browserify: "14.4.0",
                chai: "^3.5.0",
                concurrently: "^3.1.0",
                coveralls: "^3.0.2",
                istanbul: "^0.4.5",
                karma: "^3.0.0",
                "karma-chai": "^0.1.0",
                "karma-mocha": "^1.3.0",
                "karma-phantomjs-launcher": "^1.0.2",
                mocha: "^5.2.0",
                "mocha-lcov-reporter": "^1.2.0",
                rimraf: "^2.5.4",
                xo: "^0.23.0"
            },
            files: ["src", "node.js", "dist/debug.js", "LICENSE", "README.md"],
            homepage: "https://github.com/visionmedia/debug#readme",
            keywords: ["debug", "log", "debugger"],
            license: "MIT",
            main: "./src/index.js",
            repository: {
                type: "git",
                url: "git://github.com/visionmedia/debug.git"
            },
            unpkg: "./dist/debug.js"
        },
        {
            name: "ms",
            version: "2.0.0",
            nestedFileUrl:
                "./node_modules/feathers-errors/node_modules/debug/node_modules/ms/package.json",
            origFileUrl: "./node_modules/ms/package.json",
            fileUrl: "./node_modules/ms/package.json",
            _from: "ms@2.0.0",
            _id: "ms@2.0.0",
            _inBundle: false,
            _integrity: "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=",
            _location: "/ms",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "ms@2.0.0",
                name: "ms",
                escapedName: "ms",
                rawSpec: "2.0.0",
                saveSpec: null,
                fetchSpec: "2.0.0"
            },
            _requiredBy: ["/debug"],
            _resolved: "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
            _shasum: "5608aeadfc00be6c2901df5f9861788de0d597c8",
            _spec: "ms@2.0.0",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\debug",
            bugs: { url: "https://github.com/zeit/ms/issues" },
            bundleDependencies: false,
            deprecated: false,
            description: "Tiny milisecond conversion utility",
            devDependencies: {
                eslint: "3.19.0",
                "expect.js": "0.3.1",
                husky: "0.13.3",
                "lint-staged": "3.4.1",
                mocha: "3.4.1"
            },
            eslintConfig: {
                extends: "eslint:recommended",
                env: { node: true, es6: true }
            },
            files: ["index.js"],
            homepage: "https://github.com/zeit/ms#readme",
            license: "MIT",
            "lint-staged": {
                "*.js": [
                    "npm run lint",
                    "prettier --single-quote --write",
                    "git add"
                ]
            },
            main: "./index",
            repository: {
                type: "git",
                url: "git+https://github.com/zeit/ms.git"
            },
            scripts: {
                lint: "eslint lib/* bin/*",
                precommit: "lint-staged",
                test: "mocha tests.js"
            }
        },
        {
            name: "ms",
            version: "2.1.2",
            nestedFileUrl:
                "./node_modules/feathers-errors/node_modules/debug/node_modules/ms/package.json",
            origFileUrl: "./node_modules/ms/package.json",
            __crawledNestedPosition: true,
            nextFileUrl:
                "./node_modules/feathers-errors/node_modules/ms/package.json",
            fileUrl:
                "./node_modules/feathers-errors/node_modules/ms/package.json",
            _from: "ms@^2.1.1",
            _id: "ms@2.1.2",
            _inBundle: false,
            _integrity:
                "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
            _location: "/feathers-errors/ms",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "ms@^2.1.1",
                name: "ms",
                escapedName: "ms",
                rawSpec: "^2.1.1",
                saveSpec: null,
                fetchSpec: "^2.1.1"
            },
            _requiredBy: ["/feathers-errors/debug"],
            _resolved: "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
            _shasum: "d09d1f357b443f493382a8eb3ccd183872ae6009",
            _spec: "ms@^2.1.1",
            _where:
                "C:\\source\\development.github\\shuttle\\Shuttle.Esb.Samples\\Shuttle.ProcessManagement\\site.canjs\\node_modules\\feathers-errors\\node_modules\\debug",
            bugs: { url: "https://github.com/zeit/ms/issues" },
            bundleDependencies: false,
            deprecated: false,
            description: "Tiny millisecond conversion utility",
            devDependencies: {
                eslint: "4.12.1",
                "expect.js": "0.3.1",
                husky: "0.14.3",
                "lint-staged": "5.0.0",
                mocha: "4.0.1"
            },
            eslintConfig: {
                extends: "eslint:recommended",
                env: { node: true, es6: true }
            },
            files: ["index.js"],
            homepage: "https://github.com/zeit/ms#readme",
            license: "MIT",
            "lint-staged": {
                "*.js": [
                    "npm run lint",
                    "prettier --single-quote --write",
                    "git add"
                ]
            },
            main: "./index",
            repository: {
                type: "git",
                url: "git+https://github.com/zeit/ms.git"
            },
            scripts: {
                lint: "eslint lib/* bin/*",
                precommit: "lint-staged",
                test: "mocha tests.js"
            }
        }
    ]);
}
